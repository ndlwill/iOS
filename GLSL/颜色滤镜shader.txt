亮度:
每个颜色分量的取值范围通常是 [0, 1]，表示从完全没有颜色到完全饱和的颜色。
亮度（Brightness）是指颜色的明亮程度。
在所有颜色通道上增加一个相同的亮度偏移量。通过将 brightness 添加到每个颜色分量的 RGB 值，实际上是改变了图像的色彩亮度。

varying highp vec2 textureCoordinate;

uniform sampler2D inputImageTexture;
uniform lowp float brightness;

void main() {
lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
gl_FragColor = vec4((textureColor.rgb + vec3(brightness)), textureColor.a);
}

通过调整brightness来调节亮度，brightness调节范围是：-1.0f ~ 1.0f，其中0.0f表示原图。


对比度:
调整对比度的方式是基于颜色值与某个中间值（如 0.5）之间的差异，来加大或缩小差距
new_color=midpoint+(color−midpoint)×contrast
color 是原始颜色（通常是 RGB 分量）。
midpoint 通常是 0.5（表示灰色或中间亮度）。
contrast 是对比度因子。如果大于 1，图像对比度增强；如果小于 1，图像对比度降低。

varying highp vec2 textureCoordinate;

uniform sampler2D inputImageTexture;
uniform lowp float contrast;

void main() {
lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
gl_FragColor = vec4(((textureColor.rgb - vec3(0.5)) * contrast + vec3(0.5)), textureColor.a);
}

通过调整contrast来调节亮度，contrast调节范围是：0.0f ~ 2.0f，其中1.0f表示原图


色温:
uniform sampler2D inputImageTexture;
varying highp vec2 textureCoordinate;

uniform lowp float temperature;
uniform lowp float tint;

const lowp vec3 warmFilter = vec3(0.93, 0.54, 0.0);

const mediump mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.596, -0.274, -0.322, 0.212, -0.523, 0.311);
const mediump mat3 YIQtoRGB = mat3(1.0, 0.956, 0.621, 1.0, -0.272, -0.647, 1.0, -1.105, 1.702);

void main() {
lowp vec4 source = texture2D(inputImageTexture, textureCoordinate);
mediump vec3 yiq = RGBtoYIQ * source.rgb;
yiq.b = clamp(yiq.b + tint*0.5226*0.1, -0.5226, 0.5226);
lowp vec3 rgb = YIQtoRGB * yiq;

lowp vec3 processed = vec3(
        (rgb.r < 0.5 ? (2.0 * rgb.r * warmFilter.r) : (1.0 - 2.0 * (1.0 - rgb.r) * (1.0 - warmFilter.r))),
        (rgb.g < 0.5 ? (2.0 * rgb.g * warmFilter.g) : (1.0 - 2.0 * (1.0 - rgb.g) * (1.0 - warmFilter.g))),
        (rgb.b < 0.5 ? (2.0 * rgb.b * warmFilter.b) : (1.0 - 2.0 * (1.0 - rgb.b) * (1.0 - warmFilter.b)))
);

gl_FragColor = vec4(mix(rgb, processed, temperature), source.a);
}
色温涉及到RGB和YIQ的转换，就是两种色彩系统的转换，调整色温的temperature范围是2000.0f ~ 8000.0f，5000.0f表示原图，另一个参数hint默认是0.0f。


饱和度:
0.2125, 0.7154, 和 0.0721 是针对 RGB 颜色空间 和人眼的视觉特性得出的加权因子，用于计算图像的亮度（luminance）。
这些值表示 红色、绿色和蓝色 对总亮度的贡献大小，绿色对亮度的贡献最大，红色次之，蓝色贡献最小。
luminance=R×0.2125+G×0.7154+B×0.0721
vec3(0.2125, 0.7154, 0.0721) 是用于计算亮度的 加权因子，通常用于将 RGB 颜色转换为灰度
饱和度：saturation 控制混合比例，saturation = 0 变为灰度，saturation = 1 保持原始颜色。

varying highp vec2 textureCoordinate;

uniform sampler2D inputImageTexture;
uniform lowp float saturation;

const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);

void main() {
lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
lowp float luminance = dot(textureColor.rgb, luminanceWeighting);
lowp vec3 greyScaleColor = vec3(luminance);
gl_FragColor = vec4(mix(greyScaleColor, textureColor.rgb, saturation), textureColor.a);
}

饱和度是指图像色彩的鲜艳程度，通过调节saturation来实现调节饱和度。saturation范围是0.0f ~ 2.0f，其中1.0f表示原图。saturation越大，表示色彩越鲜艳，反之，色彩则越单调。


颗粒度：
varying highp vec2 textureCoordinate;
uniform sampler2D inputImageTexture;

/// 调节胶片颗粒感
uniform lowp float grain;

void main() {
lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
float noise = (fract(sin(dot(textureCoordinate, vec2(12.9898, 78.233) * 2.0)) * 43758.5453));
gl_FragColor = textureColor - noise * grain
}

颗粒度实际上是图像本身的噪点变多了，颗粒度越大，说明图像的噪点越多，通过调节grain参数实现调节颗粒度，grain范围是0.0f ~ 0.5f，其中0.0f表示原图。


锐度：
attribute vec4 position;
attribute vec4 inputTextureCoordinate;

uniform float imageWidthFactor;
uniform float imageHeightFactor;
uniform float sharpness;

varying vec2 textureCoordinate;
varying vec2 leftTextureCoordinate;
varying vec2 rightTextureCoordinate;
varying vec2 topTextureCoordinate;
varying vec2 bottomTextureCoordinate;

varying float centerMultiplier;
varying float edgeMultiplier;

void main() {
gl_Position = position;

mediump vec2 widthStep = vec2(imageWidthFactor, 0.0);
mediump vec2 heightStep = vec2(0.0, imageHeightFactor);

textureCoordinate = inputTextureCoordinate.xy;
leftTextureCoordinate = inputTextureCoordinate.xy - widthStep;
rightTextureCoordinate = inputTextureCoordinate.xy + widthStep;
topTextureCoordinate = inputTextureCoordinate.xy + heightStep;
bottomTextureCoordinate = inputTextureCoordinate.xy - heightStep;

centerMultiplier = 1.0 + 4.0 * sharpness;
edgeMultiplier = sharpness;
}

precision highp float;

varying highp vec2 textureCoordinate;
varying highp vec2 leftTextureCoordinate;
varying highp vec2 rightTextureCoordinate;
varying highp vec2 topTextureCoordinate;
varying highp vec2 bottomTextureCoordinate;

varying highp float centerMultiplier;
varying highp float edgeMultiplier;

uniform sampler2D inputImageTexture;

void main() {
mediump vec3 textureColor = texture2D(inputImageTexture, textureCoordinate).rgb;
mediump vec3 leftTextureColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;
mediump vec3 rightTextureColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;
mediump vec3 topTextureColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;
mediump vec3 bottomTextureColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;

gl_FragColor = vec4((textureColor * centerMultiplier - (leftTextureColor * edgeMultiplier +
        rightTextureColor * edgeMultiplier + topTextureColor * edgeMultiplier +
        bottomTextureColor * edgeMultiplier)), texture2D(inputImageTexture, bottomTextureCoordinate).a);
}

锐度实际上是检测图片像素边缘的像素点，让整张图片像素点突出，对比非常强烈。锐度调节通过sharpness来实现，调整的范围是-4.0f ~ 4.0f， 0.0f表示原图。


==================================================线性插值的概念：
假设有两个值 
A 和 B，你可以根据一个插值因子 t（通常在 0 到 1 之间）来计算这两个值之间的一个“过渡值”。插值公式为

Lerp(A,B,t)=A+(B−A)×t

当 t=0 时，插值结果为 A
当 t=1 时，插值结果为 B
当 t 在 0 和 1 之间时，插值结果是 A 和 B 之间的一个权重平均。