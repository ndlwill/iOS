https://github.com/mdn/learning-area

用户体验（UX）

web 表单是与用户交互的强大工具，它们经常用于收集用户的数据，或允许他们控制用户界面
web 表单是用户和 web 站点或应用程序之间交互的主要内容之一
它们允许用户输入数据，大多数情况下会将数据发送到 web 服务器进行处理和存储

web 表单是由一个或多个表单控件（有时称为小部件），以及一些有助于构建整个表单的附加元素组成——通常被称为 HTML 表单。
这些控件可以是文本字段（单行或多行）、选择框、按钮、复选框或单选按钮，大部分是使用 <input> 元素创建的


所有表单都以一个 <form> 元素开始
它的所有属性都是可选的，但实践中最好至少要设置 action 属性和 method 属性。
action 属性定义了在提交表单时，应该把所收集的数据送给谁（URL）去处理。
method 属性定义了发送数据的 HTTP 方法（通常是 get 或 post）。

<form action="/my-handling-form-page" method="post">
 <ul>
  <li>
    <label for="name">Name:</label>
    <input type="text" id="name" name="user_name">
  </li>
  <li>
    <label for="mail">E-mail:</label>
    <input type="email" id="mail" name="user_email">
  </li>
  <li>
    <label for="msg">Message:</label>
    <textarea id="msg" name="user_message"></textarea>
  </li>
 </ul>
</form>

注意在所有 <label> 元素上使用 for (en-US) 属性；它是将标签链接到表单控件的一种正规方式。这个属性引用对应的表单控件的 id。
这样做有一些好处。最明显的一个好处是允许用户单击标签以激活相应的表单控件，它还有助于使用屏幕阅读器的用户读取名称。

在 <input> 元素中，最重要的属性是 type 属性
email，它定义了一个只接受格式正确的电子邮件地址的单行文本字段。
<input> 标签是一个空元素，这意味着它不需要关闭标签。
定义默认值的方式。要定义 <input> 的默认值，你必须使用 value 属性

看到 <button> 元素也接受一个 type属性，它接受 submit、reset 或者 button 三个值中的任一个。
单击 type 属性定义为 submit 值（也是默认值）的按钮会发送表单的数据到 <form> 元素的 action 属性所定义的网页。
单击 type 属性定义为 reset 值的按钮 将所有表单小部件重新设置为它们的默认值。从用户体验的角度来看，这被认为是一种糟糕的做法。
单击 type 属性定义为 button 值的按钮，不会发生任何事！但是用 JavaScript 构建定制按钮非常有用。
你还可以使用相应类型的 <input> 元素来生成一个按钮，如 <input type="submit">。<button> 元素的主要优点是，<input> 元素只允许纯文本作为其标签，而 <button> 元素允许完整的 HTML 内容，允许更复杂、更有创意的按钮内容。

==================================================
<fieldset>元素是一种方便的用于创建具有相同目的的小部件组的方式，出于样式和语义目的。
你可以在<fieldset>开口标签后加上一个 <legend>元素来给<fieldset> 标上标签。
<legend>的文本内容正式地描述了<fieldset>里所含有部件的用途。

<form>
  <fieldset>
    <legend>Fruit juice size</legend>
    <p>
      <input type="radio" name="size" id="size_1" value="small">
      <label for="size_1">Small</label>
    </p>
    <p>
      <input type="radio" name="size" id="size_2" value="medium">
      <label for="size_2">Medium</label>
    </p>
    <p>
      <input type="radio" name="size" id="size_3" value="large">
      <label for="size_3">Large</label>
    </p>
  </fieldset>
</form>

正确设置标签（label）的另一个好处是可以在所有浏览器中单击标签来激活相应的小部件。
这对于像文本输入这样的例子很有用，这样你可以通过点击标签，和点击输入区效果一样，来聚焦于它


在多个标签的情况下，您应该将一个小部件和它的标签嵌套在一个<label>元素中。
<!--这样写：-->
<div>
  <label for="username">Name:</label>
  <input type="text" name="username">
  <label for="username"><abbr title="required">*</abbr></label>
</div>

<!--但是这样写会更好：-->
<div>
  <label for="username">
    <span>Name:</span>
    <input id="username" type="text" name="username">
    <abbr title="required">*</abbr>
  </label>
</div>

<!--但最好的可能是这样：-->
<div>
  <label for="username">Name: <abbr title="required">*</abbr></label>
  <input id="username" type="text" name="username">
</div>


<section>
    <h2>Contact information</h2>
    <fieldset>
      <legend>Title</legend>
      <ul>
          <li>
            <label for="title_1">
              <input type="radio" id="title_1" name="title" value="K" >
              King
            </label>
          </li>
          <li>
            <label for="title_2">
              <input type="radio" id="title_2" name="title" value="Q">
              Queen
            </label>
          </li>
          <li>
            <label for="title_3">
              <input type="radio" id="title_3" name="title" value="J">
              Joker
            </label>
          </li>
      </ul>
    </fieldset>
    <p>
      <label for="name">
        <span>Name: </span>
        <strong><abbr title="required">*</abbr></strong>
      </label>
      <input type="text" id="name" name="username">
    </p>
    <p>
      <label for="mail">
        <span>E-mail: </span>
        <strong><abbr title="required">*</abbr></strong>
      </label>
      <input type="email" id="mail" name="usermail">
    </p>
    <p>
      <label for="pwd">
        <span>Password: </span>
        <strong><abbr title="required">*</abbr></strong>
      </label>
      <input type="password" id="pwd" name="password">
    </p>
</section>


<section>
    <h2>Payment information</h2>
    <p>
      <label for="card">
        <span>Card type:</span>
      </label>
      <select id="card" name="usercard">
        <option value="visa">Visa</option>
        <option value="mc">Mastercard</option>
        <option value="amex">American Express</option>
      </select>
    </p>
    <p>
      <label for="number">
        <span>Card number:</span>
        <strong><abbr title="required">*</abbr></strong>
      </label>
        <input type="number" id="number" name="cardnumber">
    </p>
    <p>
      <label for="date">
        <span>Expiration date:</span>
        <strong><abbr title="required">*</abbr></strong>
        <em>formatted as mm/yy</em>
      </label>
      <input type="date" id="date" name="expiration">
    </p>
</section>

==================================================
一些表单元素，包括：<form>、<fieldset>、<legend>、<textarea>、<label>、<button> 和 <input>

常见的输入（input）类型元素：button、checkbox、file、hidden、image、password、radio、reset、submit 和 text。

文本输入框:
一些通用规范：
它们可以被标记为 readonly（用户不能修改输入值）甚至是 disabled（输入值永远不会与表单数据的其余部分一起发送）。
它们可以有一个 placeholder；这是文本输入框中出现的文本，用来简略描述输入框的目的。
它们可以使用 size (en-US)（框的物理尺寸）和 maxlength (en-US)（可以输入的最大字符数）进行限制。
如果浏览器支持的话，它们可以从拼写检查（使用 spellcheck 属性）中获益。

使用 type 属性值被设置为 text 的 <input> 元素创建一个单行文本框（同样的，如果你不提供 type 属性，该属性将被默认设置为 text）。
在你指定的 type 属性的值在浏览器中是未知的情况下（比如你指定 type="date"，但是浏览器不支持原生日期选择器），属性值也将会回落到 text。

单行文本框只有一个真正的约束：如果您输入带有换行符的文本，浏览器会在发送数据之前删除这些换行符。

复选框:
相关的复选框元素应该使用具有相同值的 name 属性。包含 checked 属性使复选框在页面加载时自动被选中。点击复选框或其相关联的标签也将自动翻转复选框的状态（选中、取消选中）
<fieldset>
  <legend>Choose all the vegetables you like to eat</legend>
  <ul>
    <li>
      <label for="carrots">Carrots</label>
      <input type="checkbox" id="carrots" name="vegetable" value="carrots" checked>
    </li>
    <li>
      <label for="peas">Peas</label>
      <input type="checkbox" id="peas" name="vegetable" value="peas">
    </li>
    <li>
      <label for="cabbage">Cabbage</label>
      <input type="checkbox" id="cabbage" name="vegetable" value="cabbage">
    </li>
  </ul>
</fieldset>

单选按钮:
使用 type 属性值为 radio 的 <input> 元素来创建一个单选按钮
几个单选按钮可以连接在一起。如果它们的 name 属性共享相同的值，那么它们将被认为属于同一组的按钮。
同一组中只有一个按钮可以同时被选；这意味着当其中一个被选中时，所有其他的都将自动未选中。
<fieldset>
  <legend>What is your favorite meal?</legend>
  <ul>
    <li>
      <label for="soup">Soup</label>
      <input type="radio" id="soup" name="meal" value="soup" checked>
    </li>
    <li>
      <label for="curry">Curry</label>
      <input type="radio" id="curry" name="meal" value="curry">
    </li>
    <li>
      <label for="pizza">Pizza</label>
      <input type="radio" id="pizza" name="meal" value="pizza">
    </li>
  </ul>
</fieldset>

按钮:
在 HTML 表单中，有三种按钮
Submit
将表单数据发送到服务器。对于 <button> 元素，省略 type 属性（或是一个无效的 type 值）的结果就是一个提交按钮。
Reset
将所有表单小部件重新设置为它们的默认值。
Anonymous
没有自动生效的按钮，但是可以使用 JavaScript 代码进行定制。
我们也可以使用 <button> 元素。它也带有 submit、reset 和 button 这几个 type 属性，与 <input> 的三种按钮行为一致。它们之间的主要区别在于 <button> 元素更易于设置样式。

<button type="submit">
    This is a <strong>submit button</strong>
</button>

<input type="submit" value="This is a submit button">

不管您使用的是 <button> 元素还是 <input> 元素，按钮的行为都是一样的。然而，有一些显著的不同之处：从示例中可以看到，<button> 元素允许您在它们的标签中使用 HTML 内容，这些内容被插入到 <button> 开始和结束的标签之间。
<input> 元素是空元素；它显示的内容需要插入到 value 属性中，因此只接受纯文本内容。

图像按钮:
图像按钮（image button）控件渲染的方式与 <img> 几乎完全相同。只是在用户点击它时，图像按钮的行为与提交（submit）按钮相同。
<input type="image" alt="Click me!" src="my-img.png" width="80" height="30">
如果使用图像按钮来提交表单，这个小部件不会提交它的值；而是提交在图像上单击处的 X 和 Y 坐标（坐标是相对于图像的，这意味着图像的左上角表示坐标 (0, 0)），坐标被发送为两个键/值对：
X 值键是 name 属性的值，后面是字符串“.x”。
Y 值键是 name 属性的值，后面是字符串“.y”。
例如，当您点击这个小部件图像坐标为 (123,456) 的位置时，它将会通过 get 方法提交。你可以看到类似的 URL：
http://foo.com?pos.x=123&pos.y=456

文件选择器:
被接受的文件类型可以使用 accept 属性来约束。此外，如果您想让用户选择多个文件，那么可以通过添加 multiple 属性来实现。
<input type="file" name="file" id="file" accept="image/*" multiple>
选择器可以访问由设备相机和麦克风直接获取的图片、视频、音频。我们只需要这样设置 accept 属性即可（分别对应相机捕获的图片、视频和麦克风获取的音频）
<input type="file" accept="image/*;capture=camera">
<input type="file" accept="video/*;capture=camcorder">
<input type="file" accept="audio/*;capture=microphone">

通用属性:
大部分用来定义表单小部件的元素都有一些他们自己的属性。然而，在所有表单元素中都有一组通用属性，它们可以对这些小部件进行控制。
属性名称	默认值	描述
autofocus (en-US)	false	这个布尔属性允许您指定当页面加载时元素应该自动具有输入焦点，除非用户覆盖它，例如通过键入不同的控件。文档中只有一个与表单相关的元素可以指定这个属性。
disabled	false	这个布尔属性表示用户不能与元素交互。如果没有指定这个属性，元素将从包含它的元素继承设置，例如 <fieldset>；如果没有包含在设定了 disabled 属性的元素里，那么这个元素就是可用的。
form		小部件与之相关联的表单元素。属性值必需是同个文档中的 <form> 元素的 id 属性。理论上，它允许您在 <form> 元素之外设置一个表单小部件。
name		元素的名称；这是跟表单数据一起提交的。
value		元素的初始值。

==================================================HTML5 的输入（input）类型
E-mail 地址字段:
<input type="email" id="email" name="email">

查询字段（Search fields）旨在用于在页面和应用程序上创建搜索框:
<input type="search" id="search" name="search">

电话号码字段:
<input type="tel" id="tel" name="tel">

URL :
<input type="url" id="url" name="url">

数字字段:
<input type="number" name="age" id="age" min="1" max="10" step="2">

滑块控件:
<label for="price">Choose a maximum house price: </label>
<input type="range" name="price" id="price" min="50000" max="500000" step="100" value="250000">
<output class="price-output" for="price"></output>

const price = document.querySelector('#price');
const output = document.querySelector('.price-output');

output.textContent = price.value;

price.addEventListener('input', () => {
  output.textContent = price.value;
});

日期和时间选择器:
没有特定时区信息的日期和时间的控件
<input type="datetime-local" name="datetime" id="datetime">
带有年份信息的某个月的控件
<input type="month" name="month" id="month">
时间的控件
<input type="time" name="time" id="time">
一年中特定编号周的控件
<input type="week" name="week" id="week">

<label for="myDate">When are you available this summer?</label>
<input type="date" name="myDate" min="2013-06-01" max="2013-08-31" step="7" id="myDate">

颜色选择器控件:
<input type="color" name="color" id="color">

==================================================
多行文本域:
<textarea cols="30" rows="8"></textarea>
控制多行渲染
cols
指定文本控件的可见宽度（列），单位为字符的宽度。这实际上是起始宽度，因为它可以通过调整 <textarea> 的大小来改变，也可以用 CSS 重写。如果没有指定，默认值是 20。
rows
指定文本控件的可见行数。这实际上是起始高度，因为它可以通过调整 <textarea> 的大小来改变，也可以用 CSS 重写。如果没有指定，默认值是 2。
wrap
指定如何控制文本换行。取值可能为 soft（默认值），意味着提交的文字没有换行，而浏览器中渲染的文字有换行；hard（使用此属性必须指定 cols 的值），意味着提交的文字和浏览器中渲染的文字都有换行；和 off，停止任何换行行为。

控制文本域可缩放性
<textarea> 的缩放能力由 CSS resize 属性控制，其可能的值如下
both：默认值——允许横向和纵向缩放行为。
horizontal：只允许横向水平缩放行为。
vertical：只允许纵向竖直缩放行为。
none：不允许缩放行为。
block 和 inline：实验性的值，仅允许以 block 或 inline 方向缩放，如何变化取决于文字的方向

下拉控件:
HTML 有两种下拉内容：一种是选择框、另外一种是自动补全框。
1.选择框
一个简单的选择框是由 <select> 元素及一个或多个 <option> 子元素构成的，每个子元素指定了选择框的可能取值。
<select id="simple" name="simple">
  <option>Banana</option>
  <option selected>Cherry</option>
  <option>Lemon</option>
</select>

<option> 元素可以嵌套在 <optgroup> 元素中，以在视觉上关联一组取值
<select id="groups" name="groups">
  <optgroup label="fruits">
    <option>Banana</option>
    <option selected>Cherry</option>
    <option>Lemon</option>
  </optgroup>
  <optgroup label="vegetables">
    <option>Carrot</option>
    <option>Eggplant</option>
    <option>Potato</option>
  </optgroup>
</select>
在 <optgroup> 元素中，label 属性的值在嵌套选项之前显示。

如果一个 <option> 元素明确设置了 value 属性，当表单提交时也会提交那个选项对应的值。
如果像上面的例子那样省略了 value 属性，<option> 元素的内容会作为提交的值。
<select id="simple" name="simple">
  <option value="banana">Big, beautiful yellow banana</option>
  <option value="cherry">Succulent, juicy cherry</option>
  <option value="lemon">Sharp, powerful lemon</option>
</select>

2.多选选择框
默认情况下，选择框只允许用户选择单个值。通过向 <select> 元素添加 multiple 属性，你可以允许用户使用操作系统提供的机制选择多个值（如按下 Cmd/Ctrl 并先后单击多个值）
<select id="multi" name="multi" multiple size="2">
  <optgroup label="fruits">
     <option>Banana</option>
     <option selected>Cherry</option>
     <option>Lemon</option>
   </optgroup>
   <optgroup label="vegetables">
     <option>Carrot</option>
     <option>Eggplant</option>
     <option>Potato</option>
   </optgroup>
</select>
在多选选择框的情况下，你会注意到选择框不再以下拉内容的形式显示数值——相反，所有的值都会一次性显示在一个列表中，可选的 size (en-US) 属性决定了控件的高度。

3.自动补全框
你可以通过 <datalist> 元素中的一些显示的 <option> 子元素为表单项提供推荐的自动补全值。<datalist> 元素需要指定一个 id。
<label for="myFruit">What's your favorite fruit?</label>
<input type="text" name="myFruit" id="myFruit" list="mySuggestion">
<datalist id="mySuggestion">
  <option>Apple</option>
  <option>Banana</option>
  <option>Blackberry</option>
  <option>Blueberry</option>
  <option>Lemon</option>
  <option>Lychee</option>
  <option>Peach</option>
  <option>Pear</option>
</datalist>
数据列表会使用 list 属性绑定至一个 <input> 元素，该属性的取值就是要绑定的数据列表的 id 值。
一旦数据列表与表单控件相关联，它的选项就会被用来自动补全用户输入的文本

进度条
<progress max="100" value="75">75/100</progress>

计量器
<meter min="0" max="100" value="75" low="33" high="66" optimum="50">75</meter>
low 和 high 将范围分为了三个部分：
下半部分范围在 min 和 low 值之间，包含端点值。
中间部分范围在 low 和 high 值之间，不包含端点值。
上半部分范围在 high 和 max 值之间，包含端点值。
optimum 值定义了 <meter> 元素的最佳值，它与 low 和 high 值一同定义了首选的范围部分：
如果 optimum 在下半部分范围内，下半部分范围被认为是首选部分，中间部分范围被认为是平均部分，而上半部分范围被认为是最差的部分。
如果 optimum 在中间部分范围内，下半部分范围被认为是平均部分，中间部分范围被认为是首选部分，而上半部分范围也被认为是平均部分。
如果 optimum 在上半部分范围内，下半部分范围被认为是最差的部分，中间部分范围被认为是平均部分，而上半部分范围被认为是首选部分。
所有实现了 <meter> 元素的浏览器使用这些值来改变计量器的颜色：

如果当前值位于首选范围，则计量器显示为绿色。
如果当前值位于平均范围，则计量器显示为黄色。
如果当前值位于最差范围，则计量器显示为红色。

==================================================UI 伪类
与 HTML 表单有关的伪类
:required 和 :optional：针对必需的或可选的表单控件。
:valid 和 :invalid、:in-range 和 :out-of-range：针对表单控件，根据对其设置的表单验证约束，或范围内/范围外，是有效/无效的。
:enabled 和 :disabled、:read-only 和 :read-write：针对启用或禁用的表单控件（例如，设置了 disabled HTML 属性），以及读写或只读的表单控件（例如，设置了 readonly HTML 属性）。
:checked、:indeterminate 和 :default：分别针对被选中的复选框和单选按钮，处于不确定的状态（既不被选中也不被选中），以及页面加载时默认选择的选项（例如，一个设置了 checked 属性的 <input type="checkbox">，或者一个设置了 selected 属性的 <option> 元素）。

根据必需与否为输入控件添加样式:
<form>
  <fieldset>
    <legend>Feedback form</legend>
    <div>
      <label for="fname">First name: </label>
      <input id="fname" name="fname" type="text" required />
    </div>
    <div>
      <label for="lname">Last name: </label>
      <input id="lname" name="lname" type="text" required />
    </div>
    <div>
      <label for="email">
        Email address (include if you want a response):
      </label>
      <input id="email" name="email" type="email" />
    </div>
    <div><button>Submit</button></div>
  </fieldset>
</form>

input:required {
  border: 1px solid black;
}

input:optional {
  border: 1px solid silver;
}

使用伪类生成内容:
input[type="radio"]::before {
  display: block;
  content: " ";
  width: 10px;
  height: 10px;
  border-radius: 6px;
  background-color: red;
  font-size: 1.2em;
  transform: translate(3px, 3px) scale(0);
  transform-origin: center;
  transition: all 0.3s ease-in;
}

input[type="radio"]:checked::before {
  transform: translate(3px, 3px) scale(1);
  transition: all 0.3s cubic-bezier(0.25, 0.25, 0.56, 2);
}


==================================================表单数据校验,使用内置表单数据校验
required 属性: 使输入成为必需的
<form>
  <label for="choose">Would you prefer a banana or cherry?</label>
  <input id="choose" name="i_like" required />
  <button>Submit</button>
</form>

input:invalid {
  border: 2px dashed red;
}

input:valid {
  border: 2px solid black;
}

使用正则表达式校验:
<form>
  <label for="choose">Would you prefer a banana or a cherry?</label>
  <input id="choose" name="i_like" required pattern="banana|cherry" />
  <button>Submit</button>
</form>

限制输入的长度:
<form>
  <div>
    <label for="choose">Would you prefer a banana or a cherry?</label>
    <input id="choose" name="i_like" required minlength="6" maxlength="6" />
  </div>
  <div>
    <label for="number">How many would you like?</label>
    <input type="number" id="number" name="amount" value="1" min="1" max="10" />
  </div>
  <div>
    <button>Submit</button>
  </div>
</form>


完整的例子:
<form>
  <p>
    <fieldset>
      <legend>Title<abbr title="This field is mandatory">*</abbr></legend>
      <input type="radio" required name="title" id="r1" value="Mr"><label for="r1">Mr.</label>
      <input type="radio" required name="title" id="r2" value="Ms"><label for="r2">Ms.</label>
    </fieldset>
  </p>
  <p>
    <label for="n1">How old are you?</label>
    <!-- 这里的 pattern 属性可以用作不支持 number 类 input 浏览器的备用方法
         请注意当与数字输入框一起使用时，支持 pattern 属性的浏览器会使它沉默失效。
         它仅仅是在这里用作备用 -->
    <input type="number" min="12" max="120" step="1" id="n1" name="age"
           pattern="\d+">
  </p>
  <p>
    <label for="t1">What's your favorite fruit?<abbr title="This field is mandatory">*</abbr></label>
    <input type="text" id="t1" name="fruit" list="l1" required
           pattern="[Bb]anana|[Cc]herry|[Aa]pple|[Ss]trawberry|[Ll]emon|[Oo]range">
    <datalist id="l1">
      <option>Banana</option>
      <option>Cherry</option>
      <option>Apple</option>
      <option>Strawberry</option>
      <option>Lemon</option>
      <option>Orange</option>
    </datalist>
  </p>
  <p>
    <label for="t2">What's your e-mail?</label>
    <input type="email" id="t2" name="email">
  </p>
  <p>
    <label for="t3">Leave a short message</label>
    <textarea id="t3" name="msg" maxlength="140" rows="5"></textarea>
  </p>
  <p>
    <button>Submit</button>
  </p>
</form>

body {
  font: 1em sans-serif;
  padding: 0;
  margin: 0;
}

form {
  max-width: 200px;
  margin: 0;
  padding: 0 5px;
}

p > label {
  display: block;
}

input[type="text"],
input[type="email"],
input[type="number"],
textarea,
fieldset {
  /* 需要在基于 WebKit 的浏览器上对表单元素进行恰当的样式设置 */
  -webkit-appearance: none;

  width: 100%;
  border: 1px solid #333;
  margin: 0;

  font-family: inherit;
  font-size: 90%;

  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

input:invalid {
  box-shadow: 0 0 5px 1px red;
}

input:focus:invalid {
  outline: none;
}

自定义错误信息:
HTML5 提供 constraint validation API 来检测和自定义表单元素的状态.除此之外，他可以改变错误信息的文本
https://html.spec.whatwg.org/multipage/forms.html#the-constraint-validation-api

<form>
  <label for="mail">I would like you to provide me an e-mail</label>
  <input type="email" id="mail" name="mail" />
  <button>Submit</button>
</form>

var email = document.getElementById("mail");

email.addEventListener("input", function (event) {
  if (email.validity.typeMismatch) {
    email.setCustomValidity("I expect an e-mail, darling!");
  } else {
    email.setCustomValidity("");
  }
});

使用 JavaScript 校验表单:
HTMLInputElement:
https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement
<form novalidate>
  <p>
    <label for="mail">
      <span>Please enter an email address:</span>
      <input type="email" id="mail" name="mail" />
      <span class="error" aria-live="polite"></span>
    </label>
  </p>
  <button>Submit</button>
</form>

body {
  font: 1em sans-serif;
  padding: 0;
  margin: 0;
}

form {
  max-width: 200px;
}

p * {
  display: block;
}

input[type="email"] {
  -webkit-appearance: none;

  width: 100%;
  border: 1px solid #333;
  margin: 0;

  font-family: inherit;
  font-size: 90%;

  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/* 校验失败的元素样式 */
input:invalid {
  border-color: #900;
  background-color: #fdd;
}

input:focus:invalid {
  outline: none;
}

/* 错误消息的样式 */
.error {
  width: 100%;
  padding: 0;

  font-size: 80%;
  color: white;
  background-color: #900;
  border-radius: 0 0 5px 5px;

  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.error.active {
  padding: 0.3em;
}

var form = document.getElementsByTagName("form")[0];
var email = document.getElementById("mail");
var error = document.querySelector(".error");

email.addEventListener(
  "input",
  function (event) {
    // 当用户输入信息时，校验 email 字段
    if (email.validity.valid) {
      // 如果校验通过，清除已显示的错误消息
      error.innerHTML = ""; // 重置消息的内容
      error.className = "error"; // 重置消息的显示状态
    }
  },
  false,
);
form.addEventListener(
  "submit",
  function (event) {
    // 当用户提交表单时，校验 email 字段
    if (!email.validity.valid) {
      // 如果校验失败，显示一个自定义错误
      error.innerHTML = "I expect an e-mail, darling!";
      error.className = "error active";
      // 还需要阻止表单提交事件，以取消数据传送
      event.preventDefault();
    }
  },
  false,
);

不使用内建 API 时的表单校验:
<form>
  <p>
    <label for="mail">
      <span>Please enter an email address:</span>
      <input type="text" class="mail" id="mail" name="mail" />
      <span class="error" aria-live="polite"></span>
    </label>
  </p>

  <p>
    <!-- Some legacy browsers need to have the `type` attribute
       explicitly set to `submit` on the `button`element -->
    <button type="submit">Submit</button>
  </p>
</form>

body {
  font: 1em sans-serif;
  padding: 0;
  margin: 0;
}

form {
  max-width: 200px;
}

p * {
  display: block;
}

input.mail {
  -webkit-appearance: none;

  width: 100%;
  border: 1px solid #333;
  margin: 0;

  font-family: inherit;
  font-size: 90%;

  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/* 校验失败的元素样式 */
input.invalid {
  border-color: #900;
  background-color: #fdd;
}

input:focus.invalid {
  outline: none;
}

/* 错误消息的样式 */
.error {
  width: 100%;
  padding: 0;

  font-size: 80%;
  color: white;
  background-color: #900;
  border-radius: 0 0 5px 5px;

  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.error.active {
  padding: 0.3em;
}

var form = document.getElementsByTagName("form")[0];
var email = document.getElementById("mail");

// 以下是在 DOM 中访问下一个兄弟元素的技巧
// 这比较危险，很容易引起无限循环
// 在现代浏览器中，应该使用 element.nextElementSibling
var error = email;
while ((error = error.nextSibling).nodeType != 1);

// 按照 HTML5 规范
var emailRegExp =
  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

// 许多旧版浏览器不支持 addEventListener 方法
// 这只是其中一种简单的处理方法
function addEvent(element, event, callback) {
  var previousEventCallBack = element["on" + event];
  element["on" + event] = function (e) {
    var output = callback(e);

    // 返回 `false` 来停止回调链，并中断事件的执行
    if (output === false) return false;

    if (typeof previousEventCallBack === "function") {
      output = previousEventCallBack(e);
      if (output === false) return false;
    }
  };
}

// 现在我们可以重构字段的约束校验了
// 由于不使用 CSS 伪类，我们必须明确地设置 valid 或 invalid 类到 email 字段上
addEvent(window, "load", function () {
  // 在这里验证字段是否为空（请记住，该字段不是必需的）
  // 如果非空，检查它的内容格式是不是合格的 e-mail 地址
  var test = email.value.length === 0 || emailRegExp.test(email.value);

  email.className = test ? "valid" : "invalid";
});

// 处理用户输入事件
addEvent(email, "input", function () {
  var test = email.value.length === 0 || emailRegExp.test(email.value);
  if (test) {
    email.className = "valid";
    error.innerHTML = "";
    error.className = "error";
  } else {
    email.className = "invalid";
  }
});

// 处理表单提交事件
addEvent(form, "submit", function () {
  var test = email.value.length === 0 || emailRegExp.test(email.value);

  if (!test) {
    email.className = "invalid";
    error.innerHTML = "I expect an e-mail, darling!";
    error.className = "error active";

    // 某些旧版浏览器不支持 event.preventDefault() 方法
    return false;
  } else {
    email.className = "valid";
    error.innerHTML = "";
    error.className = "error";
  }
});

==================================================发送表单数据
在客户端：定义如何发送数据
<form>元素定义了如何发送数据。它的所有属性都是为了让您配置当用户点击提交按钮时发送的请求。两个最重要的属性是action和method。

action 属性:
这个属性定义了发送数据要去的位置。它的值必须是一个有效的 URL。如果没有提供此属性，则数据将被发送到包含这个表单的页面的 URL。
<form action="http://foo.com">…</form>
<form action="/somewhere_else">…</form>

method 属性:
该属性定义了如何发送数据。HTTP 协议提供了几种执行请求的方法；HTML 表单数据可以通过许多不同的方法进行数据传输，其中最常见的是GET方法和POST方法。

GET 方法: www.foo.com/?say=Hi&to=Mom
<form action="http://foo.com" method="get">
  <div>
    <label for="say">What greeting do you want to say?</label>
    <input name="say" id="say" value="Hi" />
  </div>
  <div>
    <label for="to">Who do you want to say it to?</label>
    <input name="to" id="to" value="Mom" />
  </div>
  <div>
    <button>Send my greetings</button>
  </div>
</form>

GET /?say=Hi&to=Mom HTTP/2.0
Host: foo.com

POST 方法:
如果使用该方法发送表单，则将数据追加到 HTTP 请求的主体中。
<form action="http://foo.com" method="post">
  <div>
    <label for="say">What greeting do you want to say?</label>
    <input name="say" id="say" value="Hi" />
  </div>
  <div>
    <label for="to">Who do you want to say it to?</label>
    <input name="to" id="to" value="Mom" />
  </div>
  <div>
    <button>Send my greetings</button>
  </div>
</form>
当使用POST方法提交表单时，没有数据会附加到 URL，HTTP 请求看起来是这样的，而请求主体中包含的数据是这样的

POST / HTTP/2.0
Host: foo.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 13

say=Hi&to=Mom
Content-Length数据头表示主体的大小
Content-Type数据头表示发送到服务器的资源类型

使用GET请求用户将在他们的 URL 栏中看到数据，但是使用POST请求用户将不会看到
如果您需要发送一个密码 (或其他敏感数据)，永远不要使用GET方法否则数据会在 URL 栏中显示，这将非常不安全。
如果您需要发送大量的数据，那么POST方法是首选的，因为一些浏览器限制了 URL 的大小。此外，许多服务器限制它们接受的 URL 的长度。

发送文件:
文件是二进制数据
enctype 属性
该属性允许您指定在提交表单时所生成的请求中的Content-Type的 HTTP 数据头的值。
这个数据头非常重要，因为它告诉服务器正在发送什么样的数据。默认情况下，它的值是application/x-www-form-urlencoded。它的意思是：“这是已编码为 URL 参数的表单数据。”
你需要额外的三个步骤:
将method属性设置为POST，因为文件内容不能放入 URL 参数中。
将enctype的值设置为multipart/form-data，因为数据将被分成多个部分，每个文件单独占用一个部分，表单正文中包含的文本数据（如果文本也输入到表单中）占用一个部分。
包含一个或多个File picker小部件，允许用户选择将要上传的文件。
<form method="post" enctype="multipart/form-data">
  <div>
    <label for="file">Choose a file</label>
    <input type="file" id="file" name="myFile" />
  </div>
  <div>
    <button>Send the file</button>
  </div>
</form>

常见的安全问题:
XSS 和 CSRF
跨站脚本 (XSS) 和跨站点请求伪造 (CSRF) 是常见的攻击类型，它们发生在当您将用户发送的数据显示给这个用户或另一个用户时。
SQL 注入
HTTP 数据头注入和电子邮件注入

==================================================表单提交和 AJAX 请求之间的区别？
XMLHttpRequest（XHR）DOM 对象可以构造 HTTP 请求、发送它们，并获取请求结果。
但是 XML 和 JSON 都不适合对表单数据请求编码。表单数据（application/x-www-form-urlencoded）由 URL 编码的键/值对列表组成。为了传输二进制数据，HTTP 请求被重新整合成 multipart/form-data 形式。

发送表单数据:
一共有三种方式来发送表单数据：包括两种传统的方法和一种利用 formData 对象的新方法

构建 XMLHttpRequest
XMLHttpRequest 是进行 HTTP 请求的最安全和最可靠的方式。要使用 XMLHttpRequest 发送表单数据，请通过对其进行 URL 编码来准备数据
<button type="button" onclick="sendData({test:'ok'})">点击我！</button>

function sendData(data) {
  var XHR = new XMLHttpRequest();
  var urlEncodedData = "";
  var urlEncodedDataPairs = [];
  var name;

  // 将数据对象转换为URL编码的键/值对数组。
  for (name in data) {
    urlEncodedDataPairs.push(
      encodeURIComponent(name) + "=" + encodeURIComponent(data[name]),
    );
  }

  // 将配对合并为单个字符串，并将所有%编码的空格替换为
  // “+”字符；匹配浏览器表单提交的行为。
  urlEncodedData = urlEncodedDataPairs.join("&").replace(/%20/g, "+");

  // 定义成功数据提交时发生的情况
  XHR.addEventListener("load", function (event) {
    alert("耶！已发送数据并加载响应。");
  });

  // 定义错误提示
  XHR.addEventListener("error", function (event) {
    alert("哎呀！出问题了。");
  });

  // 建立我们的请求
  XHR.open("POST", "https://example.com/cors.php");

  // 为表单数据 POST 请求添加所需的 HTTP 头
  XHR.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

  // 最后，发送我们的数据。
  XHR.send(urlEncodedData);
}

当你想要往第三方网站传输数据时，使用XMLHttpRequest会受到同源策略的影响。如果你需要执行跨域请求，你需要熟悉一下CORS 和 HTTP 访问控制 (en-US).
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS


使用 XMLHttpRequest 和 the FormData object（表单数据对象）
手动建立一个 HTTP 请求非常困难。幸运的是，最近的 XMLHttpRequest 规范提供了一种方便简单的方法 — 利用FormData对象来处理表单数据请求。
<button type="button" onclick="sendData({test:'ok'})">点我！</button>

function sendData(data) {
  var XHR = new XMLHttpRequest();
  var FD = new FormData();

  // 把我们的数据添加到这个 FormData 对象中
  for (name in data) {
    FD.append(name, data[name]);
  }

  // 定义数据成功发送并返回后执行的操作
  XHR.addEventListener("load", function (event) {
    alert("Yeah! 已发送数据并加载响应。");
  });

  // 定义发生错误时执行的操作
  XHR.addEventListener("error", function (event) {
    alert("Oops! 出错了。");
  });

  // 设置请求地址和方法
  XHR.open("POST", "https://example.com/cors.php");

  // 发送这个 formData 对象，HTTP 请求头会自动设置
  XHR.send(FD);
}


使用绑定到表单元素上的 FormData
你也可以把一个 FormData 对象绑定到一个 <form> 元素上。这会创建一个代表表单中包含元素的 FormData 。
<form id="myForm">
  <label for="myName">告诉我你的名字：</label>
  <input id="myName" name="name" value="John" />
  <input type="submit" value="提交" />
</form>

window.addEventListener("load", function () {
  function sendData() {
    var XHR = new XMLHttpRequest();

    // 我们把这个 FormData 和表单元素绑定在一起。
    var FD = new FormData(form);

    // 我们定义了数据成功发送时会发生的事。
    XHR.addEventListener("load", function (event) {
      alert(event.target.responseText);
    });

    // 我们定义了失败的情形下会发生的事
    XHR.addEventListener("error", function (event) {
      alert("哎呀！出了一些问题。");
    });

    // 我们设置了我们的请求
    XHR.open("POST", "https://example.com/cors.php");

    // 发送的数据是由用户在表单中提供的
    XHR.send(FD);
  }

  // 我们需要获取表单元素
  var form = document.getElementById("myForm");

  // ...然后接管表单的提交事件
  form.addEventListener("submit", function (event) {
    event.preventDefault();

    sendData();
  });
});


在隐藏的 iframe 中构建 DOM:
最古老的异步发送表单数据方法是用 DOM API 构建表单，然后将其数据发送到隐藏的 <iframe>。要获得提交的结果，请获取<iframe>的内容。
<button onclick="sendData({test:'ok'})">点击我！</button>

// 首先创建一个用来发送数据的 iframe.
var iframe = document.createElement("iframe");
iframe.name = "myTarget";

// 然后，将 iframe 附加到主文档
window.addEventListener("load", function () {
  iframe.style.display = "none";
  document.body.appendChild(iframe);
});

// 下面这个函数是真正用来发送数据的。
// 它只有一个参数，一个由键值对填充的对象。
function sendData(data) {
  var name,
    form = document.createElement("form"),
    node = document.createElement("input");

  // 定义响应时发生的事件
  iframe.addEventListener("load", function () {
    alert("Yeah! Data sent.");
  });

  form.action = "http://www.cs.tut.fi/cgi-bin/run/~jkorpela/echo.cgi";
  form.target = iframe.name;

  for (name in data) {
    node.name = name;
    node.value = data[name].toString();
    form.appendChild(node.cloneNode());
  }

  // 表单元素需要附加到主文档中，才可以被发送。
  form.style.display = "none";
  document.body.appendChild(form);

  form.submit();

  // 表单提交后，就可以删除这个表单，不影响下次的数据发送。
  document.body.removeChild(form);
}


处理二进制数据:
<form id="myForm">
  <p>
    <label for="i1">文本数据：</label>
    <input id="i1" name="myText" value="一些文本数据" />
  </p>
  <p>
    <label for="i2">文件数据：</label>
    <input id="i2" name="myFile" type="file" />
  </p>
  <button>提交！</button>
</form>

// 因为我们想获取 DOM 节点，
// 我们在页面加载时初始化我们的脚本。
window.addEventListener("load", function () {
  // 这些变量用于存储表单数据
  var text = document.getElementById("i1");
  var file = {
    dom: document.getElementById("i2"),
    binary: null,
  };

  // 使用 FileReader API 获取文件内容
  var reader = new FileReader();

  // 因为 FileReader 是异步的，会在完成读取文件时存储结果
  reader.addEventListener("load", function () {
    file.binary = reader.result;
  });

  // 页面加载时，如果一个文件已经被选择，那么读取该文件。
  if (file.dom.files[0]) {
    reader.readAsBinaryString(file.dom.files[0]);
  }

  // 如果没有被选择，一旦用户选择了它，就读取文件。
  file.dom.addEventListener("change", function () {
    if (reader.readyState === FileReader.LOADING) {
      reader.abort();
    }

    reader.readAsBinaryString(file.dom.files[0]);
  });

  // 发送数据是我们需要的主要功能
  function sendData() {
    // 如果存在被选择的文件，等待它读取完成
    // 如果没有，延迟函数的执行
    if (!file.binary && file.dom.files.length > 0) {
      setTimeout(sendData, 10);
      return;
    }

    // 要构建我们的多重表单数据请求，
    // 我们需要一个 XMLHttpRequest 实例
    var XHR = new XMLHttpRequest();

    // 我们需要一个分隔符来定义请求的每一部分。
    var boundary = "blob";

    // 将我们的主体请求存储于一个字符串中
    var data = "";

    // 所以，如果用户已经选择了一个文件
    if (file.dom.files[0]) {
      // 在请求体中开始新的一部分
      data += "--" + boundary + "\r\n";

      // 把它描述成表单数据
      data +=
        "content-disposition: form-data; " +
        // 定义表单数据的名称
        'name="' +
        file.dom.name +
        '"; ' +
        // 提供文件的真实名字
        'filename="' +
        file.dom.files[0].name +
        '"\r\n';
      // 和文件的 MIME 类型
      data += "Content-Type: " + file.dom.files[0].type + "\r\n";

      // 元数据和数据之间有一条空行。
      data += "\r\n";

      // 将二进制数据添加到主体请求中
      data += file.binary + "\r\n";
    }

    // 文本数据更简单一些
    // 在主体请求中开始一个新的部分
    data += "--" + boundary + "\r\n";

    // 声明它是表单数据，并命名它
    data += 'content-disposition: form-data; name="' + text.name + '"\r\n';
    // 元数据和数据之间有一条空行。
    data += "\r\n";

    // 添加文本数据到主体请求中
    data += text.value + "\r\n";

    // 一旦完成，“关闭”主体请求
    data += "--" + boundary + "--";

    // 定义成功提交数据执行的语句
    XHR.addEventListener("load", function (event) {
      alert("✌！数据已发送且响应已加载。");
    });

    // 定义发生错误时做的事
    XHR.addEventListener("error", function (event) {
      alert("哎呀！出现了一些问题。");
    });

    // 建立请求
    XHR.open("POST", "https://example.com/cors.php");

    // 添加需要的 HTTP 头部来处理多重表单数据 POST 请求
    XHR.setRequestHeader(
      "Content-Type",
      "multipart/form-data; boundary=" + boundary,
    );

    // 最后，发送数据。
    XHR.send(data);
  }

  // 访问表单…
  var form = document.getElementById("myForm");

  // …接管提交事件
  form.addEventListener("submit", function (event) {
    event.preventDefault();
    sendData();
  });
});