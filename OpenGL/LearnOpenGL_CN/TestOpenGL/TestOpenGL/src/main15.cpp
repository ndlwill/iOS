//
//  main15.cpp
//  TestOpenGL
//
//  Created by youdun on 2022/11/15.
//

// MARK: - 变换
/**
 我们可以尝试着在每一帧改变物体的顶点并且重配置缓冲区从而使它们移动，但这太繁琐了，而且会消耗很多的处理时间。
 我们现在有一个更好的解决方案，使用（多个）矩阵(Matrix)对象可以更好的变换(Transform)一个物体。
 */

// MARK: - 向量
/**
 向量最基本的定义就是一个方向。
 或者更正式的说，向量有一个方向(Direction)和大小(Magnitude，也叫做强度或长度)。
 你可以把向量想像成一个藏宝图上的指示：“向左走10步，向北走3步，然后向右走5步”；“左”就是方向，“10步”就是向量的长度。
 向量可以在任意维度(Dimension)上，但是我们通常只使用2至4维。如果一个向量有2个维度，它表示一个平面的方向(想象一下2D的图像)，当它有3个维度的时候它可以表达一个3D世界的方向。
 
 每个向量在2D图像中都用一个箭头(x, y)表示。
 你可以把这些2D向量当做z坐标为0的3D向量。由于向量表示的是方向，起始于何处并不会改变它的值。
 
 向量(3, 2)v¯和w¯是相等的，尽管他们的起始点不同
 
 数学家喜欢在字母上面加一横表示向量，比如说v¯
 当用在公式中时它们通常是这样的：
 v¯=(xyz)
 
 由于向量是一个方向，所以有些时候会很难形象地将它们用位置(Position)表示出来。为了让其更为直观，我们通常设定这个方向的原点为(0, 0, 0)，然后指向一个方向，对应一个点，使其变为位置向量(Position Vector)（你也可以把起点设置为其他的点，然后说：这个向量从这个点起始指向另一个点）。
 比如说位置向量(3, 5)在图像中的起点会是(0, 0)，并会指向(3, 5)。我们可以使用向量在2D或3D空间中表示方向与位置.
 */

// MARK: - 向量与标量运算
/**
 标量(Scalar)只是一个数字（或者说是仅有一个分量的向量）。当把一个向量加/减/乘/除一个标量，我们可以简单的把向量的每个分量分别进行该运算。对于加法来说会像这样:
 (123)+x=(1+x,2+x,3+x)
 */
