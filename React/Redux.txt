Redux 的三大原则（思想核心）
单一数据源（Single Source of Truth）
所有应用的状态都存储在一个唯一的“全局对象”中，称为 store，就像一个“数据库”。

状态是只读的（State is Read-Only）
不能直接修改状态，只能通过“描述一次变化”的 action 来改变状态。

使用纯函数来执行修改（Changes are Made with Pure Functions）
状态的改变是通过一个纯函数 —— reducer 完成的，它根据旧状态和 action，返回新状态。


Redux 状态管理流程图：
UI 触发事件
   ↓
dispatch(action)                 // 描述“要干嘛”
   ↓
reducer(oldState, action)       // 计算“要怎么变”
   ↓
新的 state
   ↓
UI 自动更新

概念	说明
store	全局状态树，保存所有数据
action	一个描述“发生了什么”的普通对象（必须有 type 字段）
dispatch	发出一个 action 的方法，通知 reducer 处理
reducer	一个纯函数，接收当前状态和 action，返回新状态
subscribe	注册监听器，当状态变化时触发 UI 更新（React 中由 Redux 和 React-Redux 自动完成）


Redux 更准确来说是一种 状态管理库，但它的设计理念和使用方式让它也常被视作一种 架构模式 或 状态管理架构。
具体来说：
库（Library）：Redux 是一个开源的 JavaScript 库，专门用来管理应用中的状态。
架构（Architecture）：它倡导“单一数据源”、“状态不可变”、“纯函数处理状态”等理念，给应用的状态管理提供了一套明确的架构规范和流程。
所以，Redux 既是你可以直接用的工具（库），也是一套应用程序设计状态的思想体系（架构模式）。


Redux 可以看作是一种架构模式，类似于 MVC、MVVM 那样，但它专注于 状态管理和数据流。

MVC（Model-View-Controller）：将应用分成模型（数据）、视图（UI）、控制器（逻辑）三部分。控制器更新模型，模型通知视图刷新。
MVVM（Model-View-ViewModel）：模型和视图之间有一个 ViewModel，负责将数据转换成视图可以绑定的格式，常用于数据绑定框架。
Redux：把应用状态放到一个“单一的状态树”（store）中，所有状态变更都必须通过发送（dispatch）“动作（action）”，然后由纯函数（reducer）产生新的状态。强调“单向数据流”和“状态不可变”。

不同点：
Redux 更强调全局单一状态和不可变状态更新，数据流是单向的（Dispatch -> Reducer -> Store -> UI）。
MVC/MVVM 更注重视图和数据之间的双向绑定或控制层的职责划分。


import React from 'react';
import { Provider, useSelector, useDispatch } from 'react-redux';
import { createStore } from 'redux';
import { Button, Text, View } from 'react-native';

const initialState = { count: 0 };

function counterReducer(state = initialState, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

const store = createStore(counterReducer);

const Counter = () => {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();

  return (
    <View>
      <Text>计数器：{count}</Text>
      <Button title="加一" onPress={() => dispatch({ type: 'INCREMENT' })} />
      <Button title="减一" onPress={() => dispatch({ type: 'DECREMENT' })} />
    </View>
  );
};

export default function App() {
  return (
    <Provider store={store}>
      <Counter />
    </Provider>
  );
}



useReducer 是 React 内置的 Hook
适用于组件内部或局部状态管理
无法跨组件共享状态


Redux 是一个全局状态管理库
适用于跨组件、全局状态共享的情况，比如：
多个页面需要访问用户登录信息
多个模块共享一个数据源（购物车、语言设置、主题）
需要状态持久化或 DevTools 调试