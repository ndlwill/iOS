https://reactnative.dev/docs/javascript-environment


==================================================JavaScript Environment
(1)JavaScript Runtime:
When using React Native, you're going to be running your JavaScript code in up to three environments:
1. In most cases, React Native will use Hermes, an open-source JavaScript engine optimized for React Native.
https://reactnative.dev/docs/hermes

2. If Hermes is disabled, React Native will use JavaScriptCore, the JavaScript engine that powers Safari. 
Note that on iOS, JavaScriptCore does not use JIT due to the absence of writable executable memory in iOS apps.
https://trac.webkit.org/wiki/JavaScriptCore
JavaScriptCore is the built-in JavaScript engine for WebKit.

3. When using Chrome debugging, all JavaScript code runs within Chrome itself, communicating with native code via WebSockets. 
Chrome uses V8 as its JavaScript engine.
https://v8.dev/



(2)JavaScript Syntax Transformers:
Syntax transformers make writing code more enjoyable by allowing you to use new JavaScript syntax without having to wait for support on all interpreters.

React Native ships with the Babel JavaScript compiler. Check Babel documentation on its supported transformations for more details.
https://babeljs.io/
https://babeljs.io/docs/plugins/#transform-plugins


JavaScript 的“编译器”多数是即时（JIT）编译器或转译器（transpiler），和 Clang 这类“Ahead-of-Time（AOT）编译器”最大区别是：是否在运行前就完全生成机器码。
特性	JavaScript 编译器（如 V8/Babel）	Clang 编译器（C/C++）
编译时机	多为运行时即时编译（JIT）或开发时转译（transpile）	运行前完整编译（AOT）
输出	字节码 / 中间码 / 原始 JS / 机器码（按需）	机器码（二进制、可执行文件）
性能优化	运行时动态分析 + 热路径优化	静态分析，全局优化
静态类型支持	弱 / 无类型，靠类型注解（如 TypeScript）	静态强类型
开发体验	改代码即见效，无需手动编译	需编译生成再运行
编译器示例	Babel（转译器）、V8（JIT）	Clang、GCC

JIT 是 Just-In-Time Compilation 的缩写，中文叫即时编译。
JIT 编译器是在程序运行时，把代码“边解释边编译成机器码”并执行，从而提高性能。

A full list of React Native's enabled transformations can be found in @react-native/babel-preset.
https://github.com/facebook/react-native/tree/main/packages/react-native-babel-preset
它是一套配置好的 Babel 插件集合，专门用来把 React Native 代码（包括 JSX、ES6+ 语法）转换成兼容目标环境的 JavaScript。


(3)Polyfills // Polyfill（填充）
Polyfill 是一种用旧环境能理解的方式，实现新 JavaScript 功能的代码，通常用于兼容老浏览器或老 JS 引擎。


实际开发中怎么用 Polyfill？
通常我们不会手写，而是通过这些方式自动处理：
1. 使用 core-js + @babel/preset-env
2. 使用 polyfill.io（CDN 动态注入支持）


名称	意义	说明
Polyfill	用 JS 实现新 API	比如自己实现 Promise 或 includes
Shim	类似 Polyfill，但更偏底层兼容	比如用于提供类库之间的接口一致性
Babel	编译器，把新语法编译成旧语法	比如把 async/await 编译成 Promise，但不包括原生 Promise 的实现，需要配合 polyfill 使用
