https://www.react-native.cn/docs/getting-started

https://github.com/jondot/awesome-react-native

https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867
https://github.com/reduxjs
https://www.redux.org.cn/

https://reactnative.dev/docs/

Babel是一款流行的JavaScript编译器，它能将ES6+的语法转换为ES5语法，从而使得代码能够兼容更多的浏览器和设备。
同时也提供了CLI、Webpack Loader和Gulp插件等多种使用方式，非常适合用于大型项目的开发。

TypeScript是一种由微软开发的开源编程语言，它是JavaScript的一个超集，其编译器可以将TypeScript代码转换为JavaScript代码。
TypeScript通过类型检查可以提高代码健壮性和可读性，由于支持ES6语法，因此可以方便地与其他JavaScript工具和框架进行集成，例如Webpack、Angular和React等框架。

// 深拷贝
const obj3 = { a: 0, b: { c: 0 } };
const obj4 = JSON.parse(JSON.stringify(obj3));
obj3.a = 4;
obj3.b.c = 4;
console.log(obj4); // { a: 0, b: { c: 0 } }


# 使用nrm工具切换淘宝源
npx nrm use taobao

# 如果之后需要切换回官方源可使用
npx nrm use npm

Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。
npm install -g 
安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用yarn代替npm install命令，用yarn add 某第三方库名代替npm install 某第三方库名。

创建新项目:
npx react-native@latest init AwesomeProject

你可以使用--version参数（注意是两个杠）创建指定版本的项目。注意版本号必须精确到两个小数点。
npx react-native@X.XX.X init AwesomeProject --version X.XX.X
还可以使用--template来使用一些社区提供的模板。

编译并运行 React Native 应用
cd AwesomeProject
yarn ios
或者
yarn react-native run-ios
注意 0.60 版本之后的主项目文件是`.xcworkspace`，不是`.xcodeproj`



集成到现有原生应用:
Podfile 示范模板
https://github.com/facebook/react-native/blob/main/packages/react-native/template/ios/Podfile
index.js是 React Native 应用在 iOS 上的入口文件。而且它是不可或缺的！
将应用程序移至生产环境时，NSURL 可以通过类似于 let mainBundle = NSBundle(URLForResource: "main" withExtension:"jsbundle") 的方式指向磁盘上预打包文件。
您可以在 node_modules/react-native/scripts/ 中使用 react-native-xcode.sh 脚本生成该预打包文件。

==================================================
the different ways of exporting and the corresponding way to import it
It really distills to 3 types: name, default, and list.

// Name Export | Name Import
export const name = 'value'
import { name } from '...'

// Default Export | Default Import
export default 'value'
import anyName from '...'

// Rename Export | NameImport
export { name as newName }
import { newName } from '...'

// Name + Default | Import All
export const name = 'value'
export default 'value'
import * as anyName from '...'

// Export List + Rename | Import List + Rename
export {
  name1,
  name2 as newName2
}
import {
  name1 as newName1,
  newName2
} from '...'

1.Name
export const name = 'value';
import { name } from 'some-path/file';

2.Default
export default 'value'
import anyName from 'some-path/file';

❌ No Variable Declaration with Default
export default const name = 'value'; // don't try to give me a name!

Mixing Default + Name
export const name = 'value';
export default 'value'
import anyName, { name } from 'some-path/file';

3.Export List
const name1 = 'value1';
const name2 = 'value2';

export {
  name1,
  name2
}

import {
  name1,
  name2
} from 'some-path/file'

4.Renaming Export
const name = 'value'

export {
  name as newName
}
import { newName } from 'some-path/file'

5.Renaming Import
const name1 = 'value1';
const name2 = 'value2';

export {
  name1,
  name2 as newName2
}

import {
  name1 as newName1,
  newName2
} from '...'

console.log(newName1); // 'value1'
console.log(newName2); // 'value2'

❌
name1; // undefined
name2; // undefined

6.Import All
export const name = 'value';
export default 'defaultValue';

import * as anyName from 'some-path/file';
console.log(anyName.name); // 'value'
console.log(anyName.default); // 'defaultValue'

==================================================
在 React Native 中，则使用 React 组件通过 JavaScript 来调用这些视图。在运行时，React Native 为这些组件创建相应的 Android 和 iOS 视图。
由于 React Native 组件就是对原生视图的封装，因此使用 React Native 编写的应用外观、感觉和性能与其他任何原生应用一样。我们将这些平台支持的组件称为原生组件。

React Native 还包括一组基本的，随时可用的原生组件，您可以使用它们来构建您的应用程序。这些是 React Native 的核心组件。
https://reactnative.cn/docs/components-and-apis

React Native 的基础是React， 是在 web 端非常流行的开源 UI 框架。


==================================================state
函数式组件:
import React, { useState } from "react";
import { Button, Text, View } from "react-native";

const Cat = (props) => {
  const [isHungry, setIsHungry] = useState(true);

  return (
    <View>
      <Text>
        I am {props.name}, and I am {isHungry ? "hungry" : "full"}!
      </Text>
      <Button
        onPress={() => {
          setIsHungry(false);
        }}
        disabled={!isHungry}
        title={isHungry ? "Pour me some milk, please!" : "Thank you!"}
      />
    </View>
  );
}

const Cafe = () => {
  return (
    <>
      <Cat name="Munkustrap" />
      <Cat name="Spot" />
    </>
  );
}

export default Cafe;

class组件:
import React, { Component } from "react";
import { Button, Text, View } from "react-native";

class Cat extends Component {
  state = { isHungry: true };

  render() {
    return (
      <View>
        <Text>
          I am {this.props.name}, and I am
          {this.state.isHungry ? " hungry" : " full"}!
        </Text>
        <Button
          onPress={() => {
            this.setState({ isHungry: false });
          }}
          disabled={!this.state.isHungry}
          title={
            this.state.isHungry ? "Pour me some milk, please!" : "Thank you!"
          }
        />
      </View>
    );
  }
}

class Cafe extends Component {
  render() {
    return (
      <>
        <Cat name="Munkustrap" />
        <Cat name="Spot" />
      </>
    );
  }
}

export default  Cafe;