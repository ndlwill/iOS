
MDN’s JavaScript tutorials, reference, and guides
https://developer.mozilla.org/en-US/docs/Web/JavaScript
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Language_overview


==================================================React

React Native uses the same API structure as React components

JSX 中，大括号 {} 里的内容会被当作 JavaScript 表达式执行。

React’s official documentation.
https://react.dev/learn


IDEs:
VS Code
React Native Tools:
https://marketplace.visualstudio.com/items?itemName=msjsdiag.vscode-react-native


core concepts behind React:
components
JSX
props
state


As a general rule, use props to configure a component when it renders. 
Use state to keep track of any component data that you expect to change over time.


react-dom/components
https://react.dev/reference/react-dom/components
https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable


React Native community:
https://reactnative.dev/community/overview


React-Native-Apps:
https://github.com/ReactNativeNews/React-Native-Apps


==================================================new project


// 1
https://reactnative.dev/docs/set-up-your-environment

brew install node
brew install watchman
Xcode
CocoaPods

CocoaPods is a Ruby gem
https://guides.cocoapods.org/using/getting-started.html

[Optional]
.xcode.env
https://nvm.sh/
https://ohmyz.sh/


// 2: Get Started Without a Framework
https://reactnative.dev/docs/getting-started-without-a-framework?package-manager=npm
[
或者 Start a new React Native project with Expo
https://reactnative.dev/docs/environment-setup
]

Step 1: Creating a new application

React Native CLI 被发布在 NPM 上，包名叫：
@react-native-community/cli
这是官方维护的命令行工具，用来创建、构建、运行 React Native 项目。
因为 react-native 这个 NPM 包（本身就是项目模板），它在 bin 中注册了 CLI 入口，内部会调用 @react-native-community/cli。
换句话说：
react-native 这个包是对 @react-native-community/cli 的一层包装
所以你只要执行 npx react-native，它就能自动拉取 CLI 执行

npx @react-native-community/cli@X.XX.X init 
和
npx react-native init
本质上是等价的
只是前者更显式（适合想使用特定版本或调试的场景），后者更简洁，背后调用的是同一个 React Native CLI 工具。


npm uninstall -g react-native-cli @react-native-community/cli
https://github.com/react-native-community/cli
npx @react-native-community/cli@latest init AwesomeProject

[Optional] Using a specific version or template
npx @react-native-community/cli@X.XX.X init AwesomeProject --version X.XX.X
You can also start a project with a custom React Native template with the --template argument
https://github.com/react-native-community/cli/blob/main/docs/init.md#initializing-project-with-custom-template


Run instructions for iOS:
    • cd "/Users/youdun-ndl/Desktop/RN/AwesomeProject/ios"
    
    • Install Cocoapods
      • bundle install # you need to run this only once in your project.
      • bundle exec pod install
==================== DEPRECATION NOTICE =====================
Calling `pod install` directly is deprecated in React Native
because we are moving away from Cocoapods toward alternative
solutions to build the project.
* If you are using Expo, please run:
`npx expo run:ios`
* If you are using the Community CLI, please run:
`yarn ios`
=============================================================
      • cd ..
    
    • npx react-native run-ios
    - or -
    • Open AwesomeProject/ios/AwesomeProject.xcodeproj in Xcode or run "xed -b ios"
    • Hit the Run button
    
  Run instructions for macOS:
    • See https://aka.ms/ReactNativeGuideMacOS for the latest up-to-date instructions.


bundle exec pod repo update


npm（Node Package Manager）// npm 是官方的
管理 Node.js 包（modules）的安装、更新、卸载。
npx（npm package runner）
执行 Node.js 包中的可执行命令，无需全局安装即可运行包。
Yarn
Facebook 和其他公司联合开发的替代 npm 的包管理器


You can also use a third-party CLI to set up your React Native app, such as Ignite CLI.
https://github.com/infinitered/ignite


Step 2: Start Metro
Metro 核心职责是打包、转译
React Native uses Metro to build your JavaScript code and assets. // build ≈ 打包 + 转换 + 处理资源
Metro 是 React Native 默认使用的 JavaScript 打包器（bundler）
Metro is similar to bundlers such as Vite and webpack
Metro uses Babel to transform syntax such as JSX into executable JavaScript.

npm start // yarn start

Step 3: Start your application
Let Metro Bundler run in its own terminal. 
Open a new terminal inside your React Native project folder. Run the following:

npm run ios // yarn ios // --verbose: use the verbose option to output more logs and information to nail down your issue.
自动调用 React Native CLI 内部的 react-native run-ios
默认在 iOS 模拟器 中启动你的 App

Build app for release:
You can now build your app for release by tapping Cmd ⌘ + B or selecting Product → Build from the menu bar. 
You can also use the React Native CLI to perform this operation using the option --mode with the value Release (e.g. from the root of your project: npm run ios -- --mode="Release" or yarn ios --mode Release).


This is one way to run your app - you can also run it directly from within Xcode
If you can't get this to work, see the Troubleshooting page.
https://reactnative.dev/docs/troubleshooting


Step 4: Modifying your app
Open App.tsx in your text editor of choice and edit some lines.
Press the R key twice or select Reload from the Dev Menu (Ctrl + M) to see your changes!


==================================================Integration with Existing Apps
https://reactnative.dev/docs/integration-with-existing-apps?language=apple


==================================================iOS Native UI Components
React Native also lets you build your own Native Components for Android and iOS to suit your app’s unique needs.
https://reactnative.dev/docs/legacy/native-components-ios


==================================================Core Components and APIs
https://reactnative.dev/docs/components-and-apis


==================================================Native Directory
https://reactnative.directory/


==================================================JSX
https://react.dev/learn/writing-markup-with-jsx


JSX is JavaScript, you can use variables inside it
const Cat = () => {
  const name = 'Maru';
  return <Text>Hello, I am {name}!</Text>;
};


Any JavaScript expression will work between curly braces, 
including function calls like {getFullName("Rum", "Tum", "Tugger")}:


==================================================package.json
package.json 是 JavaScript 和前端生态中一个非常核心的文件，不论是 React Native、Vue、React 还是 Node.js 后端项目，几乎都会用到它。

它是项目的元数据文件，用来描述项目的基本信息和配置。

也是管理依赖包的配置文件，记录项目所需要的第三方库（dependencies）和开发工具（devDependencies）版本。

它告诉 npm 或 yarn 该安装哪些包，哪些脚本可以运行，项目的入口是什么等。


==================================================Using Libraries
React Native provides a set of built-in Core Components and APIs ready to use in your app. 
You're not limited to the components and APIs bundled with React Native. 
React Native has a community of thousands of developers. 
If the Core Components and APIs don't have what you are looking for, 
you may be able to find and install a library from the community to add the functionality to your app.


Selecting a Package Manager:
https://www.npmjs.com/
React Native libraries are typically installed from the npm registry using a Node.js package manager such as npm CLI or Yarn Classic.
npm CLI:
https://docs.npmjs.com/cli/v11/commands/npm/
Yarn Classic
https://classic.yarnpkg.com/en/

###
The terms "library" and "package" are used interchangeably in the JavaScript community.
###


Installing a Library:
To install a library in your project, navigate to your project directory in your terminal and run the installation command
npm install react-native-webview
或者
yarn add react-native-webview
The library that we installed includes native code, and we need to link to our app before we use it.
Native code（原生代码） 指的是用平台原生语言编写的代码
这个库不仅包含 JavaScript 代码，还包含：iOS 平台的 RNWebViewManager.m/.swift 等 Objective-C/Swift 文件

为什么需要 Link？
React Native 的 JavaScript 层是跑在一个 JS 引擎（如 Hermes 或 JSC）里，是和原生系统 分开的。
要让 JS 能调用原生功能，比如打开一个 WebView，就必须将原生代码 “链接” 到项目中，这一步就叫 linking。


Linking Native Code on iOS:
React Native uses CocoaPods to manage iOS project dependencies and most React Native libraries follow this same convention. 
If a library you are using does not, then please refer to their README for additional instruction. 
In most cases, the following instructions will apply.

Run pod install in our ios directory in order to link it to our native iOS project. 
A shortcut for doing this without switching to the ios directory is to run npx pod-install.
npx pod-install

Once this is complete, re-build the app binary to start using your new library:
yarn ios


Finding Libraries:
https://reactnative.directory/
React Native Directory is a searchable database of libraries built specifically for React Native. 
This is the first place to look for a library for your React Native app.

Many of the libraries you will find on the directory are from React Native Community or Expo.
https://github.com/react-native-community/
https://docs.expo.dev/versions/latest/

Libraries built by the React Native Community are driven by volunteers and individuals at companies that depend on React Native. 
They often support iOS, tvOS, Android, Windows, but this varies across projects. 
Many of the libraries in this organization were once React Native Core Components and APIs.

Libraries built by Expo are all written in TypeScript and support iOS, Android, and react-native-web wherever possible.

https://www.npmjs.com/
After React Native Directory, the npm registry is the next best place if you can't find a library specifically for React Native on the directory.
The npm registry is the definitive source for JavaScript libraries, 
but the libraries that it lists may not all be compatible with React Native. 
React Native is one of many JavaScript programming environments, including Node.js, web browsers, Electron, and more, and npm includes libraries that work for all of these environments.



Determining Library Compatibility:
Does it work with React Native?
Usually libraries built specifically for other platforms will not work with React Native. 
Examples include react-select which is built for the web and specifically targets react-dom,
and rimraf which is built for Node.js and interacts with your computer file system.
Other libraries like lodash use only JavaScript language features and work in any environment. 
You will gain a sense for this over time, but until then the easiest way to find out is to try it yourself. 
You can remove packages using npm uninstall if it turns out that it does not work in React Native.


Does it work for the platforms that my app supports?
React Native Directory allows you to filter by platform compatibility, such as iOS, Android, Web, and Windows. 
If the library you would like to use is not currently listed there, refer to the README for the library to learn more.


Does it work with my app version of React Native?
The latest version of a library is typically compatible with the latest version of React Native.
If you are using an older version, you should refer to the README to know which version of the library you should install. 
You can install a particular version of the library by running npm install <library-name>@<version-number>, 
for example: npm install @react-native-community/netinfo@^2.0.0.

https://docs.npmjs.com/cli/v10/using-npm/scope/
@react-native-community：这是包的“作用域（scope）”，类似一个组织名
netinfo：是这个组织下的一个具体包，表示网络信息检测库

@^2.0.0
这是你安装的 版本要求：
^2.0.0：代表安装 2.x.x 版本中 最新的稳定版，但不会升级到 3.0.0 及以上的版本（即不会破坏兼容性）

写法	匹配范围	举例
"^1.2.3"	>=1.2.3 且 <2.0.0	允许升级次版本和补丁版本
"~1.2.3"	>=1.2.3 且 <1.3.0	只允许升级补丁版本
"^0.2.3"	>=0.2.3 且 <0.3.0	主版本是 0 时更严格
"~0.2.3"	>=0.2.3 且 <0.3.0	同上


==================================================TypeScript
https://www.typescriptlang.org/

TypeScript is a language which extends JavaScript by adding type definitions.

New projects created by the React Native CLI will use TypeScript by default.


Adding TypeScript to an Existing Project:
1. Add TypeScript, types, and ESLint plugins to your project.
npm install -D typescript @react-native/typescript-config @types/jest @types/react @types/react-test-renderer
或者
yarn add --dev typescript @react-native/typescript-config @types/jest @types/react @types/react-test-renderer

This command adds the latest version of every dependency.
The versions may need to be changed to match the existing packages used by your project.
You can use a tool like React Native Upgrade Helper to see the versions shipped by React Native.
https://react-native-community.github.io/upgrade-helper/

2. Add a TypeScript config file. Create a tsconfig.json in the root of your project:

tsconfig.json
{
  "extends": "@react-native/typescript-config"
}

3. Rename a JavaScript file to be *.tsx
You should leave the ./index.js entrypoint file as it is otherwise you may run into an issue when it comes to bundling a production build.


4. Run tsc to type-check your new TypeScript files.
npx tsc
或者
yarn tsc



TypeScript sources are transformed by Babel during bundling.
We recommend that you use the TypeScript compiler only for type checking.
This is the default behavior of tsc for newly created applications.



What does React Native + TypeScript look like:
You can provide an interface for a React Component's Props and State via React.Component<Props, State> which will provide type-checking and editor auto-completing when working with that component in JSX.

import {useState} from 'react';
import {Button, StyleSheet, Text, View} from 'react-native';

export type Props = {
  name: string;
  baseEnthusiasmLevel?: number;
};

function Hello({name, baseEnthusiasmLevel = 0}: Props) {
  const [enthusiasmLevel, setEnthusiasmLevel] = useState(
    baseEnthusiasmLevel,
  );

  const onIncrement = () =>
    setEnthusiasmLevel(enthusiasmLevel + 1);
  const onDecrement = () =>
    setEnthusiasmLevel(
      enthusiasmLevel > 0 ? enthusiasmLevel - 1 : 0,
    );

  const getExclamationMarks = (numChars: number) =>
    numChars > 0 ? Array(numChars + 1).join('!') : '';

  return (
    <View style={styles.container}>
      <Text style={styles.greeting}>
        Hello {name}
        {getExclamationMarks(enthusiasmLevel)}
      </Text>
      <View>
        <Button
          title="Increase enthusiasm"
          accessibilityLabel="increment"
          onPress={onIncrement}
          color="blue"
        />
        <Button
          title="Decrease enthusiasm"
          accessibilityLabel="decrement"
          onPress={onDecrement}
          color="red"
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  greeting: {
    fontSize: 20,
    fontWeight: 'bold',
    margin: 16,
  },
});

export default Hello;




TypeScript playground:
https://www.typescriptlang.org/play/?strictNullChecks=false&jsx=3#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4BYAKFEljgG8AhAVxhggDsAaOAZRgCeAGyS8AFkiQweAFSQAPaXABqwJAHcAvnGy4CRdDAC0HFDGAA3JGSpUFteILBI4ABRxgAznAC8DKnBwpiBIAFxwnjBQwBwA5hSUgQBGKJ5IAKIcMGLMnsCpIAAySFZCAPzhHMwgSUhQCZq2lGickXAAEkhCQhDhyIYAdABiAMIAPO4QXgB8vnAAFPRBKCE8KWmZ2bn5nkUlXXMADHCaAJS+s-QBcC0cbQDaSFk5eQXFpTxpMJsvO3ulAF05v0MANcqIYGYkPN1hlnts3vshKcEtdbm1OABJDhoIghLJzebnHyzL4-BG7d5deZPLavSlIuAAajgAEYUWjWvBOAARJC4pD4+B+IkXCJScn0-7U2m-RGlOCzY5lOCyinSoRwIxsuDhQ4cyicu7wWIS+RoIQrMzATgAWRQUAA1t4RVUQCMxA7PJVqrUoMTZm6PV7FXBlXAAIJQKAoATzIOeqDeFnsgYAKwgMXm+AAhPhzuF8DZDYk4EQYMwoBwFtdAmNVBoIoIRD56JFhEhPANbpCYnVNNNa4E4GM5Iomx3W+2RF3YkQpDFYgOh8OOl0evR8ARGqXV4F6MEkDu98P6KbvubLSBrXaHc6afCpVTkce92MAPRjmCD3fD+tqdQfxPOsWDYTgVz3cwYBbAAibEBVSFw1SlGCINXdA0E7PIkmAIRgEEQoUFqIQfBgmIBSFVDfxPTh3Cw1ssRxPFaVfYCbggHooFIpIhGYJAqLY98gOAsZQPYDg0OHKDYL5BC0lVR8-gEti4AwrDgBwvCCKIrpSIAE35ZismUtjaKITxPAYjhZKMmBWOAlpONIog9JMvchIgj8G0AocvIA4SDU0VFmi5CcZzmfgO3ESQYG7AwYGhK5Sx7FA+ygcIktXTARHkcJWS4IcUDw2IOExBKQG9OAYMwrI6hggrfzTXJzEwAQRk4BKsnCaraTq65NAawI5xixcMqHTAOt4YAAC8wjgAAmQ5BuHCasgAdSQYBYjEGBCySDi9PwZbAmvKBYhiPKADZloGqgzmC+xoHgAzMBQZghHgTpuggBIgA


TypeScript Handbook
https://www.typescriptlang.org/docs/handbook/intro.html


React's documentation on TypeScript
https://react.dev/learn/typescript


React + TypeScript Cheatsheets
https://github.com/typescript-cheatsheets/react#reacttypescript-cheatsheets


#####
Using Custom Path Aliases with TypeScript:
#####
To use custom path aliases with TypeScript, you need to set the path aliases to work from both Babel and TypeScript. Here's how:

Edit your tsconfig.json to have your custom path mappings.
https://www.typescriptlang.org/docs/handbook/modules/theory.html#module-resolution // custom path mappings



2. Add babel-plugin-module-resolver as a development package to your project:
https://github.com/tleunen/babel-plugin-module-resolver
npm install --save-dev babel-plugin-module-resolver
或者
yarn add --dev babel-plugin-module-resolver


3. Finally, configure your babel.config.js (note that the syntax for your babel.config.js is different from your tsconfig.json):
{
   presets: ['module:metro-react-native-babel-preset'],
+  plugins: [
+    [
+       'module-resolver',
+       {
+         root: ['./src'],
+         extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],
+         alias: {
+           tests: ['./tests/'],
+           "@components": "./src/components",
+         }
+       }
+    ]
+  ]
}


tsconfig.json 中的 "extends" 字段允许你继承另一个配置文件里的设置。
@react-native/typescript-config 是 React Native 官方提供的一个 共享配置包，里面定义了适用于 React Native 项目的 TypeScript 编译选项。
你不用重复写如下配置：
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "strict": true,
    "jsx": "react-native",
    ...
  }
}

可以添加自己的配置吗？
可以，继承之后你依然可以在当前项目中覆盖或添加自己的配置：
{
  "extends": "@react-native/typescript-config",
  "compilerOptions": {
    "strictNullChecks": false, // 覆盖默认配置
    "baseUrl": "./src"
  }
}



devDependencies（开发依赖）就是你说的 “development package”，它们是在开发过程中用到的工具或库，但不会被打包进最终的生产环境代码中。
类别	说明	例子
dependencies	运行时需要的库（打包会带上）	react, react-native, axios
devDependencies	开发时用的工具（不会打包）	eslint, babel, jest, typescript



