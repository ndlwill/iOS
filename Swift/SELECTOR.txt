func callMe() {
    //...
}

func callMeWithParam(obj: AnyObject!) {
    //...
}

let someMethod = #selector(callMe)
let anotherMethod = #selector(callMeWithParam(_:))

func turnByAngle(theAngle: Int, speed: Float) {
    //...
}
let method = #selector(turnByAngle(_:speed:))

selector 其实是 Objective-C runtime 的概念，
如果你的 selector 对应的方法只在 Swift 中可见的话 (也就是说它是一个 Swift 中的 private 方法)，
在调用这个 selector 时你会遇到一个 unrecognized selector 错误：

private func callMe() {
     //...
}
NSTimer.scheduledTimerWithTimeInterval(1, target: self,
            selector:#selector(callMe), userInfo: nil, repeats: true)

正确的做法是在 private 前面加上 @objc 关键字，这样运行时就能找到对应的方法了。
@objc private func callMe() {
    //...
}

如果方法名字在方法所在域内是唯一的话，我们可以简单地只是用方法的名字来作为 #selector 的内容。
相比于前面带有冒号的完整的形式来说，这么写起来会方便一些

如果在同一个作用域中存在同样名字的两个方法，即使它们的函数签名不相同，Swift 编译器也不允许编译通过：
func commonFunc() {

}

func commonFunc(input: Int) -> Int {
    return input
}
我们可以通过将方法进行强制转换来使用：
let method1 = #selector(commonFunc as ()->())
let method2 = #selector(commonFunc as Int->Int)