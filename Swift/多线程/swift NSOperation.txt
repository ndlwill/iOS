NSOperation的特点:
基于GCD封装的抽象类
如果不使用NSOperationQueue单独使用为同步操作，不会开启线程。异步执行需要配合NSOperationQueue使用。
有两个子类NSInvocationOperation和NSBlockOperation
可以添加依赖控制所需要执行的任务
可以通过maxConcurrentOperationCount控制并发数量
NSOperation支持KVO(Key-Value Observing)，可以方便的监听任务的状态（完成、执行中、取消等等状态）
swfit 中 NSOperation和 NSOperationQueue 都去掉了前缀NS，直接叫 Operation 和OperationQueue。
苹果认为 NSInvocationOperation 不是类型安全或者不是 ARC 安全的，在 Swift中 取消了与之相关的 API。

NSOperation的使用步骤:
创建任务：先将需要执行的任务封装到一个 NSOperation 对象中。
创建队列：创建一个 NSOperationQueue 对象。
任务加入队列：然后将 NSOperation 对象添加到 NSOperationQueue 对象中。

https://developer.apple.com/documentation/foundation/operation?changes=latest_minor
没有使用NSOperationQueue的前提下，默认是同步，并且不会开启新的线程。
let operation = BlockOperation {     
    print("任务---\(Thread.current)")
}
operation.start()


通过addExecutionBlock添加的任务会在其他线程中并发执行
let operation = BlockOperation {   
    print("任务---\(Thread.current)")
}

operation.addExecutionBlock {
    print("任务2---\(Thread.current)")
}
    
operation.addExecutionBlock {
    print("任务3---\(Thread.current)")
}
operation.start()

NSOperationQueue:
只有两种队列：主队列和其他队列。其他队列可以用来实现串行和并发。

//创建主队列
let mainQueue = OperationQueue.main
//创建其他队列
let otherQueue = OperationQueue()

任务添加的方式有两种方法
1.把操作对象添加到队列
let queue = OperationQueue()
let operation1 = BlockOperation {
    
    print("任务1---\(Thread.current)")
}
   
let operation2 = BlockOperation {
    
    print("任务2---\(Thread.current)")
}
    
//把操作对象添加到队列
queue.addOperation(operation1)
queue.addOperation(operation2)

2.直接在队列中添加操作任务
let queue = OperationQueue()
queue.addOperation {
    print("任务---\(Thread.current)")
}


maxConcurrentOperationCount
控制最大并发数，默认为并发执行，若设置为1的时候为串行执行。大于1时，进行并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整


NSOperation 操作依赖
通过addDependency方法添加依赖，当然对应的也有移除依赖的方法removeDependency。
let queue = OperationQueue()
        
let op1 = BlockOperation {
    
    print("任务1---\(Thread.current)")
}
   
let op2 = BlockOperation {
    
    print("任务2---\(Thread.current)")
}
    
let op3 = BlockOperation {
    
    print("任务3---\(Thread.current)")
}
//op3依赖于op1，则先完成op1，再完成op3
op3.addDependency(op1)
//op1依赖于op2，则先完成op2，再完成op1
op1.addDependency(op2)
//最终的依赖关系就是，op2->op1->op3
   
queue.addOperation(op1)
queue.addOperation(op2)
queue.addOperation(op3)


其他方法
isReady
isExecuting
isCancelled
isConcurrent
isAsynchronous
isConcurrent