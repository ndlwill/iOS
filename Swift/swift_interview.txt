###
static 关键字和 class 关键字 修饰的类⽅法有什么区别？ static 修饰的不能被继承，class 修饰可以被继承重写
###
class 只能在类⾥⽤，不能在结构体、枚举中⽤
class 只能修饰计算属性(相当于方法)，不能修饰值属性

==================================================

weak 同 OC ，在没有引⽤计数的时候⾃动置空，必须被声明为 var； 
unowned 不会为空，可以使⽤ let 声明，性能损耗⽐ weak ⼩⼀点， 要保证 unowned 的⽣命周期要和强引⽤对象同样或者更⻓，不然就会导致崩溃

==================================================

值类型捕获
var x = 10
let captureValue = { [x] in
    print("captured value: \(x)")  // 输出：captured value: 10
}
x = 20
captureValue()  // 还是输出：captured value: 10

引用类型捕获
class MyClass {
    var value = 0
}

let obj = MyClass()
obj.value = 10

let captureReference = { [obj] in
    print("captured value: \(obj.value)")
}

obj.value = 20
captureReference()  // 输出：captured value: 20

相似之处:
Swift 的 Capture List 和 Objective-C 的 __block 和 __weak 都是用来更改闭包或 block 对其外部变量的捕获方式，以便更好地管理内存和控制引用。
它们都可以防止循环引用的问题，从而避免内存泄漏。


var capturedValue: Int = 0

let valueCaptureListClosure = { [capturedValue] in
    print(capturedValue)
}

capturedValue = 1

valueCaptureListClosure()
和下面的写法是等价的:
var capturedValue: Int = 0
let capturedValueForClosure = capturedValue  // 这里相当于 Capture List 中的 [capturedValue]

let valueCaptureListClosure = {
    print(capturedValueForClosure) 
}

capturedValue = 1

valueCaptureListClosure()

使用 Capture List 可以控制闭包捕获变量的行为，使其在需要的时候独立于外部变量。

==================================================Swift 的安全性:
1）
代码安全 let 属性 - 使⽤ let 申明常量避免被修改。 
值类型 - 值类型可以避免在⽅法调⽤等参数传递过程中状态被修改。 
访问控制 - 通过 public 和 final 限制模块外使⽤ class 不能被继承和重写。 
强制异常处理 - ⽅法需要抛出异常时，需要申明为 throw ⽅法。当调⽤可能会 throw 异常的⽅法，需要强制捕获异 常避免将异常暴露到上层。 
模式匹配 - 通过模式匹配检测 switch 中未处理的 case。 
2）
类型安全 强制类型转换 - 禁⽌隐式类型转换避免转换中带来的异常问题。
同时类型转换不会带来额外的运⾏时消耗。 提示：编写ObjC代码时，我们通常会在编码时添加类型检查避免运⾏时崩溃导致Crash。 
KeyPath - KeyPath 相⽐使⽤字符串可以提供属性名和类型信息，可以利⽤编译器检查。 
泛型 - 提供泛型和协议关联类型，可以编写出类型安全的代码。相⽐ Any 可以更多利⽤编译时检查发现类型问题。 
Enum 关联类型 - 通过给特定枚举指定类型避免使⽤ Any。 
3）
内存安全 空安全 - 通过标识可选值避免空指针带来的异常问题 
ARC - 使⽤⾃动内存管理避免⼿动管理内存带来的各种内存问题 
强制初始化 - 变量使⽤前必须初始化 内存独占访问 - 通过编译器检查发现潜在的内存冲突问题 
4）线程安全 
值类型 - 更多使⽤值类型减少在多线程中遇到的数据竞争问题 async/await - 提供 async 函数使我们可以⽤结构化的⽅式编写并发操作。
避免基于闭包的异步⽅式带来的内存循环 引⽤和⽆法抛出异常的问题 Actor - 提供 Actor 模型避免多线程开发中进⾏数据共享时发⽣的数据竞争问题，同时避免在使⽤锁时带来的死锁等 问题 
5）
快速 值类型 - 相⽐ class 不需要额外的堆内存分配 / 释放和更少的内存消耗 
⽅法静态派发 - ⽅法调⽤⽀持静态调⽤相⽐原有 ObjC 消息转发调⽤性能更好 
编译器优化 - Swift 的静态性可以使编译器做更多优化。例如 Tree Shaking 相关优化移除未使⽤的类型 / ⽅法等减少 ⼆进制⽂件⼤⼩。
使⽤静态派发 / ⽅法内联优化 / 泛型特化 / 写时复制等优化提⾼运⾏时性能 
提示：ObjC消息派发会导致编译器⽆法进⾏移除⽆⽤⽅法/类的优化，编译器并不知道是否可能被⽤到。 
ARC 优化 - 虽然和 ObjC ⼀样都是使⽤ ARC，Swift 通过编译器优化，可以进⾏更快的内存回收和更少的内存引⽤计 数管理 
提示： 相⽐ObjC，Swift内部不需要使⽤autorelease进⾏管理。

==================================================
flatMap and compactMap:


flatMap:
It can be used with collections. flatMap operates on a collection (for example, an array of arrays), and "flattens" the result into a single array after applying a transformation. 
For example, given an array of arrays, it will apply the transformation to all elements and flatten the result into a single array.

let nestedArray = [[1, 2, 3], [4, 5, 6]]
let flattenedArray = nestedArray.flatMap { $0 }
print(flattenedArray) // Output: [1, 2, 3, 4, 5, 6]


compactMap:
compactMap is used to transform the elements of a sequence while simultaneously unwrapping optionals and removing nil results.

let numbers = ["1", "2", "three", "4"]
let mappedNumbers = numbers.compactMap { Int($0) }
print(mappedNumbers) // Output: [1, 2, 4]


Remember, both flatMap and compactMap do not mutate the original array. 
They return new arrays, which is a characteristic of functional programming.
返回新数组的目的
1. Immutability:
Safety: By not altering the original array, you avoid unintended side effects. This makes your code more predictable and easier to debug.
Concurrency: Immutable data structures are naturally thread-safe, as multiple threads can read the same data without causing race conditions.
2. Pure Functions:
Consistency: Pure functions always produce the same output for the same input, without modifying any external state. Returning a new array instead of modifying the original helps maintain this consistency.
Testability: Functions that return new values instead of changing existing ones are easier to test because they don’t depend on or affect the external state.
3. Chainability:
Function Composition: By returning new arrays, you can chain multiple transformations together. For example, you can map, filter, and reduce an array in a single, seamless chain of operations.
4. Non-Destructive Operations:
Reversibility: Since the original array remains unchanged, you can always revert back to it if needed. This can be particularly useful in scenarios where you might want to apply multiple different transformations and compare results.


==================================================Combine框架中也存在map，flatMap和compactMap的使用

Swift Combine框架是一个响应式编程框架，它可以处理异步事件，例如用户交互，网络响应等。
Combine使用了发布者和订阅者模型，发布者发布事件，订阅者接收并处理这些事件。

map：接收一个转换闭包，将接收到的每个输入事件转换为新的值或事件。
flatMap：接收一个返回Publisher的转换闭包，将接收到的每个输入事件转换为一个新的Publisher。
然后，这些新的Publisher的事件被合并到一个共享的事件流中。
compactMap：与map操作类似，但会忽略转换闭包返回的nil值。

import Combine

// Create a publisher
let numbersPublisher = [1, 2, 3, 4, 5].publisher

// map
numbersPublisher
    .map { $0 * 10 }
    .sink { print($0) }  // Output: 10, 20, 30, 40, 50

// flatMap
let nestedPublisher = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].publisher
nestedPublisher
    .flatMap { $0.publisher }
    .sink { print($0) }  // Output: 1, 2, 3, 4, 5, 6, 7, 8, 9

// compactMap
let publisherWithNil = [1, nil, 3, nil, 5].publisher
publisherWithNil
    .compactMap { $0 }
    .sink { print($0) }  // Output: 1, 3, 5

以上 Combine 示例是简化的，并且不包含取消订阅的逻辑，实际开发中需要正确地处理和取消订阅。


The time complexity of the map, filter, and reduce:
O(n)


==================================================
懒加载（Lazy Load） 和计算属性的区别

计算属性:
每次都会计算
不分配独⽴空间

懒加载:
本质是个闭包，分配内存空间
在⾸次执⾏时，返回闭包的值
和 OC 不同的是， Swift 的懒加载，置空后不会重新调⽤。


==================================================
Swift 对象和 OC 对象的区别:

初始化
OC 可以⽗类 -> ⼦类 （通过 super.init） 
Swift 必须赋值，⼦类 -> ⽗类（必须给⼦类所有属性赋值，才能调⽤ super.init）

Swift 对象包括 class、enum、struct 
enum 和 struct 都是值引⽤

⽅法派发 Swift 直接派发，没有 isa 那⼀段，OC 要通过 isa 查找
https://www.jianshu.com/p/91bfe3f11eec


runtime 之消息转发:
消息发送（缓存+函数表查找，往⽗类查找）
动态⽅法解析（动态缓存，class_addMethod 添加）
消息转发 （forwardingTargetForSelector / methodSignatureForSelector / doesNotRecognizeSelector）


==================================================
写时复制 / struct ⽐ class 有什么优势:

写时复制（Copy-On-Write, COW）
COW 是一种优化策略，用于减少不必要的复制开销。
当多个对象共享同一份数据时，只有在某个对象尝试修改数据时，才会真正进行数据的复制。
这样可以提高性能，特别是在处理大型数据结构时。

优势：
性能优化： 对于大的值类型（如数组、字典等），COW 允许多个实例共享同一份内存，直到需要修改为止。这避免了不必要的内存分配和数据复制，提高了性能。
内存效率： 在不修改数据的情况下，多个实例共享同一份数据，节省了内存。

应用场景：
COW 常用于 Swift 中的标准库类型（如 Array、Dictionary、Set 等），确保它们在被拷贝时不会立即复制数据，而是等到实际写入操作时才复制。



struct 比 class 的优势:
struct 的特点：
值类型： struct 是值类型，当你将一个 struct 赋值给另一个变量或常量时，它会创建一个新的副本。这意味着修改一个 struct 实例不会影响其他实例。
自动生成的成员初始化器： Swift 为 struct 自动生成一个成员初始化器，使得创建实例时更加简便。
内存布局紧凑： struct 的内存布局通常比 class 更紧凑，因为它不需要额外的引用计数或指针。

struct 的优势：
线程安全： 由于 struct 是值类型，每个线程都拥有自己的副本，因此在多线程环境下使用时不会产生数据竞争。相比之下，class 是引用类型，多线程共享同一个实例时可能会导致数据竞争。
不可变性支持： struct 支持不可变性，可以通过声明 let 来创建不可变实例。这种不可变性使得代码更容易理解和维护。
更好的性能： 由于 struct 是值类型，在不涉及 COW 的情况下，它们的复制通常比 class 的引用计数管理更高效。

应用场景：
当你需要不可变性、数据封装以及轻量级的数据结构时，struct 是更好的选择。它通常用于表示数据模型、几何形状、坐标点等。


class 的特点：
引用类型： class 是引用类型，多个变量或常量可以引用同一个实例，修改一个引用会影响其他所有引用。
继承： class 支持继承，可以通过继承创建子类，扩展或重写父类的功能。
多态性： 通过继承和协议，class 可以实现多态性，允许不同类型的对象通过相同的接口进行操作。

应用场景：
当你需要对象共享状态、需要继承或多态性时，class 是更好的选择。它通常用于表示控制器、视图、网络请求管理器等。


==================================================
https://gist.github.com/KingOfBrian/778dc93bffddf25b2c414360727c273b#file-message-swift
Swift 派发机制:

派发方式 (Types of Dispatch )
程序派发的目的是为了告诉 CPU 需要被调用的函数在哪里
编译型语言有三种基础的函数派发方式: 直接派发(Direct Dispatch), 函数表派发(Table Dispatch) 和 消息机制派发(Message Dispatch)

Java 默认使用函数表派发, 但你可以通过 final 修饰符修改成直接派发
C++ 默认使用直接派发, 但可以通过加上 virtual 修饰符来改成函数表派发
而 Objective-C 则总是使用消息机制派发, 但允许开发者使用 C 直接派发来获取性能的提高


直接派发 (Direct Dispatch):
直接派发是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等
直接派发也有人称为静态调用.
对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承.


函数表派发 (Table Dispatch ):
函数表派发是编译型语言实现动态行为最常见的实现方式. 
函数表使用了一个数组来存储类声明的每一个函数的指针.
大部分语言把这个称为 "virtual table"(虚函数表), Swift 里称为 "witness table". 
每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 override 的话, 表里面只会保存被 override 之后的函数.
一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.
class ParentClass {
    func method1() {}
    func method2() {}
}
class ChildClass: ParentClass {
    override func method2() {}
    func method3() {}
}
在这个情况下, 编译器会创建两个函数表, 一个是 ParentClass 的, 另一个是 ChildClass的:
let obj = ChildClass()
obj.method2()
当一个函数被调用时, 会经历下面的几个过程:
读取对象 0xB00 的函数表.
读取函数指针的索引. 在这里, method2 的索引是1(偏移量), 也就是 0xB00 + 1.
跳到 0x222 (函数指针指向 0x222)

查表是一种简单, 易实现, 而且性能可预知的方式.
然而, 这种派发方式比起直接派发还是慢一点.
从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗. 
另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化. (如果函数带有副作用的话)

这种基于数组的实现, 缺陷在于函数表无法拓展. 子类会在虚数函数表的最后插入新的函数, 没有位置可以让 extension 安全地插入函数.
https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001922.html



消息机制派发 (Message Dispatch ):
消息机制是调用函数最动态的方式. 也是 Cocoa 的基石
这种运作方式的关键在于开发者可以在运行时改变函数的行为.
不止可以通过 swizzling 来改变, 甚至可以用 isa-swizzling 修改对象的继承关系, 可以在面向对象的基础上实现自定义派发.
class ParentClass {
    dynamic func method1() {}
    dynamic func method2() {}
}
class ChildClass: ParentClass {
    override func method2() {}
    dynamic func method3() {}
}
当一个消息被派发, 运行时会顺着类的继承关系向上查找应该被调用的函数.
如果你觉得这样做效率很低, 它确实很低! 
然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表派发一样快
但这只是消息机制的原理



Swift 的派发机制:
到底 Swift 是怎么派发的呢?
这里有四个选择具体派发方式的因素存在:
声明的位置
引用类型
特定的行为
显式地优化(Visibility Optimizations)

Swift 没有在文档里具体写明什么时候会使用函数表什么时候使用消息机制. 唯一的承诺是使用 dynamic 修饰的时候会通过 Objective-C 的运行时进行消息机制派发
###
下面的所有东西, 都只是我在 Swift 3.0 里测试出来的结果, 并且很可能在之后的版本更新里进行修改.
###


声明的位置 (Location Matters):
在 Swift 里, 一个函数有两个可以声明的位置: 类型声明的作用域 和 extension. 根据声明类型的不同, 也会有不同的派发方式.
class MyClass {
    func mainMethod() {}
}
extension MyClass {
    func extensionMethod() {}
}
mainMethod 会使用函数表派发, 而 extensionMethod 则会使用直接派发.

总结起来有这么几点:
值类型总是会使用直接派发, 简单易懂
而协议和类的 extension 都会使用直接派发
NSObject 的 extension 会使用消息机制进行派发
NSObject 声明作用域里的函数都会使用函数表进行派发.
协议里声明的, 并且带有默认实现的函数会使用函数表进行派发


引用类型 (Reference Type Matters):
引用的类型决定了派发的方式. 这很显而易见
一个比较常见的疑惑, 发生在一个协议拓展和类型拓展同时实现了同一个函数的时候
protocol MyProtocol {
}
struct MyStruct: MyProtocol {
}
extension MyStruct {
    func extensionMethod() {
        print("结构体")
    }
}
extension MyProtocol {
    func extensionMethod() {
        print("协议")
    }
}
 
let myStruct = MyStruct()
let proto: MyProtocol = myStruct
 
myStruct.extensionMethod() // -> “结构体”
proto.extensionMethod() // -> “协议”
协议拓展里的函数会使用直接调用.
如果把 extensionMethod 的声明移动到协议的声明位置的话, 则会使用函数表派发, 最终就会调用结构体里的实现.
将
protocol MyProtocol {
    func extensionMethod()
}
两个打印都是“结构体”
并且要记得, 如果两种声明方式都使用了直接派发的话, 基于直接派发的运作方式, 我们不可能实现预想的 override 行为


指定派发方式 (Specifying Dispatch Behavior):
Swift 有一些修饰符可以指定派发方式.

final
final 允许类里面的函数使用直接派发. 这个修饰符会让函数失去动态性.
任何函数都可以使用这个修饰符, 就算是 extension 里本来就是直接派发的函数. 
这也会让 Objective-C 的运行时获取不到这个函数, 不会生成相应的 selector.

dynamic
dynamic 可以让类里面的函数使用消息机制派发. 
dynamic 可以用在所有 NSObject 的子类和 Swift 的原声类.

@objc & @nonobjc
@objc 和 @nonobjc 显式地声明了一个函数是否能被 Objective-C 的运行时捕获到.
使用 @objc 的典型例子就是给 selector 一个命名空间 @objc(abc_methodName), 让这个函数可以被 Objective-C 的运行时调用.
@nonobjc 会改变派发的方式, 可以用来禁止消息机制派发这个函数, 不让这个函数注册到 Objective-C 的运行时里. 
我不确定这跟 final 有什么区别, 因为从使用场景来说也几乎一样
可能这主要是为了跟 Objective-C 兼容用的, final 等原生关键词, 是让 Swift 写服务端之类的代码的时候可以有原生的关键词可以使用.

final @objc
可以在标记为 final 的同时, 也使用 @objc 来让函数可以使用消息机制派发.
调用函数的时候会使用直接派发, 但也会在 Objective-C 的运行时里注册响应的 selector. 
函数可以响应 perform(selector:) 以及别的 Objective-C 特性, 但在直接调用时又可以有直接派发的性能.

@inline
Swift 也支持 @inline, 告诉编译器可以使用直接派发
dynamic @inline(__always) func dynamicOrDirect() {} 也可以通过编译! 但这也只是告诉了编译器而已, 实际上这个函数还是会使用消息机制派发


可见的都会被优化 (Visibility Will Optimize):
Swift 会尽最大能力去优化函数派发的方式.
例如, 如果你有一个函数从来没有 override, Swift 就会检车并且在可能的情况下使用直接派发. 
这个优化大多数情况下都表现得很好, 但对于使用了 target / action 模式的 Cocoa 开发者就不那么友好了
override func viewDidLoad() {
    super.viewDidLoad()
    navigationItem.rightBarButtonItem = UIBarButtonItem(
        title: "登录", style: .plain, target: nil,
        action: #selector(ViewController.signInAction)
    )
}
private func signInAction() {}
这里编译器会抛出一个错误: 
Argument of '#selector' refers to instance method 'signInAction()' that is not exposed to Objective-C
Add '@objc' to expose this instance method to Objective-C
这里修复的方式很简单: 加上 @objc,就可以保证 Objective-C 的运行时可以获取到函数了

另一个需要注意的是, 如果你没有使用 dynamic 修饰的话, 这个优化会默认让 KVO 失效. 
如果一个属性绑定了 KVO 的话, 而这个属性的 getter 和 setter 会被优化为直接派发, 代码依旧可以通过编译, 不过动态生成的 KVO 函数就不会被触发.


https://developer.apple.com/swift/blog/?id=27
Swift allows a class to override methods and properties declared in its superclasses. 
This means that the program has to determine at runtime which method or property is being referred to and then perform an indirect call or indirect access.
This technique, called dynamic dispatch, increases language expressivity at the cost of a constant amount of runtime overhead for each indirect usage.
three ways to improve performance by eliminating such dynamism: final, private, and Whole Module Optimization.

The dynamic calls are necessary because a subclass of ParticleModel might override point or velocity with a computed property or override updatePoint() or update() with new implementations.

函数表派发是dynamic dispatch
In Swift, dynamic dispatch calls are implemented by looking up a function from a method table and then performing an indirect call.
This is slower than performing a direct call.

（1）Use final when you know that a declaration does not need to be overridden.
The final keyword is a restriction on a class, method, or property that indicates that the declaration cannot be overridden.
This allows the compiler to safely elide dynamic dispatch indirection.
On the other hand, update() will still be called via dynamic dispatch, allowing for subclasses to override update() with customized functionality.

It is possible to mark an entire class as final by attaching the attribute to the class itself. 
This forbids subclassing the class, implying that all functions and properties of the class are final as well.

（2）Infer final on declarations referenced in one file by applying the private keyword.
Applying the private keyword to a declaration restricts the visibility of the declaration to the current file.
This allows the compiler to find all potentially overriding declarations.
The absence of any such overriding declarations enables the compiler to infer the final keyword automatically and remove indirect calls for methods and property accesses.

###
Assuming there is no class overriding ParticleModel in the current file, 
the compiler can replace all dynamically dispatched calls to private declarations with direct calls.
###

Just like with final, it is possible to apply the private attribute to the class declaration itself causing the class to be private and thus all of the properties and methods of the class as well.

（3）Use Whole Module Optimization to infer final on internal declarations.
Declarations with internal access (the default if nothing is declared) are only visible within the module where they are declared. 
Because Swift normally compiles the files that make up a module separately, 
the compiler cannot ascertain whether or not an internal declaration is overridden in a different file. 
However, if Whole Module Optimization is enabled, all of the module is compiled together at the same time. 
This allows the compiler to make inferences about the entire module together and infer final on declarations with internal if there are no visible overrides.
public class ParticleModel {
	var point = ( x: 0.0, y: 0.0 )
	var velocity = 100.0

	func updatePoint(newPoint: (Double, Double), newVelocity: Double) {
		point = newPoint
		velocity = newVelocity
	}

	public func update(newP: (Double, Double), newV: Double) {
		updatePoint(newP, newVelocity: newV)
	}
}

var p = ParticleModel()
for i in stride(from: 0.0, through: times, by: 1.0) {
	p.update((i * sin(i), i), newV:i*1000)
}
When compiling this snippet with Whole Module Optimization the compiler can infer final on the properties point, velocity, and the method call updatePoint(). 
In contrast, it can not be inferred that update() is final since update() has public access.


NSObject 的函数表派发 (Table Dispatch in NSObject):
NSObject 子类定义里的函数会使用函数表派发

使用静态派发的话结构体是个不错的选择, 而使用消息机制派发的话则可以考虑 NSObject
现在没有任何理由去继承 NSObject 构建类, 除非你需要使用 Objective-C 构建的框架.

NSObject 子类声明的函数(函数表派发), 以及声明在 extension 的函数(消息机制派发)

###
Only classes that inherit from NSObject can be declared @objc
###


Xcode 15.1:
class Person: NSObject {
    func sayHi() {
        print("Hello")
    }
}
class MisunderstoodPerson: Person {
}
extension MisunderstoodPerson {
    ###
    // error: 无法在extension中重写 override。因为类拓展使用直接派发
    ###
    override func sayHi() {
        
    }
}



protocol Greetable {
    func sayHi()
}
extension Greetable {
    func sayHi() {
        print("Hello")
    }
}
func greetings(greeter: Greetable) {
    greeter.sayHi()
}
class Person: Greetable {
}
class LoudPerson: Person {
    func sayHi() {
        print("HELLO")
    }
}



import Foundation
class ClassA {
}
extension ClassA {
    func message() {}
}
class ClassB: ClassA {
    // error: Non-@objc instance method 'message()' is declared in extension of 'ClassA' and cannot be overridden
    // @objc func message() {} 可以解决此问题，使用@objc，需要import Foundation
    override func message() {
        
    }
}




Protocol:
protocol TestProtocol {
    func testPro()
}
class Pro1 {
    
}
extension Pro1: TestProtocol {
    func testPro() {
        print("=====111")
    }
}
class Pro2: Pro1 {
    // error: Non-@objc instance method 'testPro()' is declared in extension of 'Pro1' and cannot be overridden （因为extension Pro1: TestProtocol这么写了）
    // 解决这个报错，可以 @objc protocol TestProtocol 
    override func testPro() {
        print("=====222")
    }
}

如果
class Pro1: TestProtocol {
    func testPro() {
        print("=====111")
    }
}
也就不会报error，也就不需要加 @objc protocol TestProtocol




class BaseCell: UITableViewCell {
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

extension BaseCell: ClassIdenfifiable {
    static var reuseIdentifier: String {
        return "default"
    }
    
    // 普通 Extension
    static var reuseIdentifier2: String {
        return "B"
    }
}
protocol ClassIdenfifiable {
    static var reuseIdentifier: String { get }
}

extension ClassIdenfifiable {
    // Protocol Default Implementation
    static var reuseIdentifier: String {
        return String(describing: self)
    }
    //不在 Protocol requirements 中声明 // 普通 Extension
    static var reuseIdentifier2: String {
        return "A"
    }
}

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        let aType: ClassIdenfifiable.Type = BaseCell.self
        print("aType.reuseIdentifier is ", aType.reuseIdentifier)// default
        print("aType.reuseIdentifier2 is ", aType.reuseIdentifier2)// A
        
        print("BaseCell.reuseIdentifier is ", BaseCell.reuseIdentifier)// default
        print("BaseCell.reuseIdentifier2 is ", BaseCell.reuseIdentifier2)// B
    }
    
}
Swift 协议 (Protocol) 以及扩展 (Extension) 的使用，而且主要围绕着 "默认实现" 和 "协议扩展"中的 "静态分发" 进行的

当协议扩展和具体的实现类都提供了某个属性或者方法的实现时，运行时会选择哪个实现？
特别的，当我们通过一个遵守某个协议的类型变量去访问该属性或方法时，会选择哪个实现？
reuseIdentifier2 在 ClassIdenfifiable 协议的扩展中有默认实现，而 BaseCell 类也提供了自己的实现。那么究竟会输出什么，取决于你是通过协议类型访问还是通过具体类型访问。
最主要的还是:
reuseIdentifier在 ClassIdenfifiable 协议中定义了 reuseIdentifier 作为一个协议要求，并在扩展中提供了一个默认实现。
reuseIdentifier2这个属性并没有在 ClassIdenfifiable 协议的要求中定义，而是直接在协议扩展中实现的。
所以:
区别	派发行为	别称
Protocol Default Implementation	        Dynamic Dispatch	            Table Dispatch
普通 Extension	                           Static Dispatch	             Direct Dispatch


###
Swift  协议和类的 extension ⾥的⽅法使⽤直接派发，所以不能被重写
NSObject 的 extension 会使⽤消息机制进⾏派发，NSObject 作⽤域内的的是函数表派发
协议⾥声明的, 并且带有默认实现的函数会使⽤函数表进⾏派发
消息派发通过缓存来达到跟函数表派发⼀样的效率
函数表派发的 Vtable 存在 metaData 中

Swift 的派发在 SIL（Swift Intermediate Language）中的表现： 
直接派发（Direct）：在 SIL ⽂件中，以 function_ref 的⽅式获取函数； 
函数表派发（Table）：在 SIL ⽂件中，以 class_method 的⽅式，通过 Vtable 获取函数； 
消息转发（Message）：在 SIL ⽂件中，以  objc_method 的⽅式获取函数； 
协议表调度（witness_method）：实现了协议的 Swift 类，通过 PWT 找到 Vtable 进⾏调度
###

要将 .swift 文件转换成 SIL（Swift Intermediate Language），可以使用 swiftc 命令行工具。具体的命令如下：
swiftc -emit-sil <filename>.swift


// ClassIdenfifiable is Existential type
let cell: ClassIdenfifiable = BaseCell()


==================================================
Polymorphism: 多态性
Polymorphism is an essential building block of any object-oriented programming language.
It uses a single symbol to represent many different kinds of entities or the availability of a single interface to entities of diverse types.
With polymorphism, your code can operate on either the parent class or one of its offspring, depending on the supported hierarchy (family of objects).

#####
它允许一个接口或方法根据不同的对象实例来表现不同的行为
#####

Swift 支持多态性主要通过以下几种机制:
1. 子类化与方法重写
通过继承，子类可以重写父类的方法，从而提供不同的行为表现。这是最常见的多态性形式
class Animal {
    func sound() {
        print("Some generic animal sound")
    }
}

class Dog: Animal {
    override func sound() {
        print("Woof!")
    }
}

class Cat: Animal {
    override func sound() {
        print("Meow!")
    }
}

let animals: [Animal] = [Dog(), Cat(), Animal()]
for animal in animals {
    animal.sound()
}


2. 协议与协议扩展
Swift 中的协议（Protocols）允许定义统一的接口，不同的类型可以通过实现该协议来表现出不同的行为。协议的这种能力也可以实现多态性。
protocol Vehicle {
    func startEngine()
}

class Car: Vehicle {
    func startEngine() {
        print("Car engine started")
    }
}

class Bike: Vehicle {
    func startEngine() {
        print("Bike engine started")
    }
}

let vehicles: [Vehicle] = [Car(), Bike()]
for vehicle in vehicles {
    vehicle.startEngine()
}
不同类型的对象（Car 和 Bike）实现了相同的协议 Vehicle，并通过相同的接口 startEngine() 表现出不同的行为。


3. 泛型
Swift 的泛型（Generics）允许定义灵活和可重用的函数或类型，可以接受不同类型的参数。在使用泛型时，类型的多态性使得同一个泛型函数可以处理不同的类型。
func printElement<T>(element: T) {
    print(element)
}

printElement(element: 5)
printElement(element: "Hello")
printElement(element: 3.14)
不同的类型通过这个泛型函数展示了多态性。


4. 枚举的关联值
枚举中的关联值可以带来类似多态性的效果，因为同一个枚举类型的不同实例可以持有不同类型的数据。
enum Shape {
    case circle(radius: Double)
    case rectangle(width: Double, height: Double)
}

func describeShape(shape: Shape) {
    switch shape {
    case .circle(let radius):
        print("Circle with radius \(radius)")
    case .rectangle(let width, let height):
        print("Rectangle with width \(width) and height \(height)")
    }
}

let shapes: [Shape] = [.circle(radius: 5), .rectangle(width: 10, height: 20)]
for shape in shapes {
    describeShape(shape: shape)
}
这里的 Shape 枚举在不同的情况下持有不同类型的数据，并且通过 describeShape 函数展示了多态性。


==================================================
不通过继承，代码复⽤ / 共享的⽅式有哪些？
swift ⽂件⾥的⽅法 public / open 相当于全局函数
通过 protocol + protocol 的拓展默认实现，实现这个 protocol 就可以拥有这些代码的能⼒


Why Swift called as Protocol Oriented Language?
We can also add default body to protocol extension function.
We can confirm multiple protocol and we can say that is multiple inheritance.

We can make protocol comparable due to protocol extension.
protocol Score: Comparable {
  var value: Int { get }
}
struct RacingScore: Score {
  let value: Int
  
  static func <(lhs: RacingScore, rhs: RacingScore) -> Bool {
    lhs.value < rhs.value
  }
}

Mutating function in protocol to change value of protocol.

There's also obviously anything that you can do with generics in Swift that couldn't be done in Objective C. 
So for instance the Indexable protocol could be extended to have a function that returned the index range length which might only apply if the index is an Int like this:
extension Collection where Self.Index == Int
{
  func length () -> Int
  {
     return endIndex - startIndex
  }
}

Due to this very powerful features of protocol in Swift, Swift is called Protocol Oriented  Programming Language.

==================================================
import Foundation

protocol Request {
    associatedtype RequestResponse: Response
    // Property in protocol must have explicit { get } or { get set } specifier
    var url: URL { get }
    var method: String { get }
}

extension Request {
    var method: String {
        return "GET"
    }
}

protocol Response {
    var statusCode: Int { get }
    var data: Data { get }
}

class ContentRequest: Request {
    typealias RequestResponse = ContentResponse
    var url: URL

    init(url: URL) {
        self.url = url
    }
}

class ContentResponse: Response {
    var statusCode: Int
    var data: Data

    init(statusCode: Int, data: Data) {
        self.statusCode = statusCode
        self.data = data
    }
}

class PostRequest: ContentRequest {
    // error: Cannot override with a stored property 'url'
    var url: URL = URL(string: "https://jsonplaceholder.typicode.com/posts")!

    // error: Cannot override mutable property with read-only property 'url'
    override var url: URL {
        get {
            return URL(string: "https://jsonplaceholder.typicode.com/posts")!
        }
    }

    // 解决
    override var url: URL {
        get {
            return URL(string: "https://jsonplaceholder.typicode.com/posts")!
        }
        
        set {
            // Intentionally do nothing or handle new value here if needed
        }
    }
    
}

或者
class PostRequest: ContentRequest {
typealias RequestResponse = PostResponse
init() {
    super.init(url: URL(string: "https://jsonplaceholder.typicode.com/posts")!)
}
}

如果你确实想让 url 是只读的，那么可以考虑在 ContentRequest 类中将 url 属性声明为 let 而不是 var。


==================================================Swift 的协议和 OC 的协议有什么区别

OC 的协议⽤来实现代理

Swift 协议定义了适合特定任务或功能的⽅法，属性。
协议可以由类，结构或枚举实现，任何类型实现协议的要求 ⽅法称为遵守协议（⾯向协议、接⼝编程）
协议后加 : AnyObject 可以让协议只能被 Class 实现
使⽤类的拓展可以让现有的类实现协议
### 使⽤协议的拓展，可以让协议有默认实现
类似 OC 的 @optional 实现 （对于上面的 ### 这项），推荐在 protocol 的 extension ⾥实现默认⽅法，这样就不必写这个⽅法的实现了。 混编的可以 @objc


将协议类型声明为 @objc:
如果你需要与 Objective-C 兼容，可以使用 @objc 和 @objc optional 关键字来声明可选方法，
但这种方式要求协议和方法必须兼容 Objective-C（例如，协议中的方法不能使用 Swift 特有的类型）。
@objc protocol MyProtocol {
    func requiredMethod()
    @objc optional func optionalMethod()
}

class MyClass: MyProtocol {
    func requiredMethod() {
        print("Required method")
    }
}

let myObject = MyClass()
myObject.requiredMethod() // Outputs: Required method
myObject.optionalMethod() // error


⾯向协议编程与⾯向对象编程相⽐有什么优缺点？ 
⾯向协议：可以实现多继承、代码量少，不会污染，代码耦合性低 ；缺点：可读性低


常⽤协议:
OptionSet
Equatable
Comparable
Codable
Sequence
IteratorProtocol
Collection: 在 Sequence 的基础上，实现了下标⽅法 Index


==================================================Swift 的闭包（Closure） 和 OC 的 Block

results = OKRs.filter({ (s1: Int) -> Bool in
      return s1 > 90
}) //正常闭包

results = OKRs.filter({ s1 in return s1 > 90 }) //类型推断
results = OKRs.filter({ s1 in s1 > 90 }) //默认返回值
results = OKRs.filter({ $0 > 90 }) //参数替换
results = OKRs.filter{ $0 > 90 } //尾随闭包
results = OKRs.filter( $0 > 90 ) //⾃动闭包 @autoclosure // @autoclosure 会把 $0 > 90 的表达式⾃动转换成 () -> T


全局函数是一种特殊的闭包:
func test(){
    print("test")
}

函数闭包:
func makeIncrementer() -> () -> Int{
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int{
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}

闭包表达式 / 匿名函数:
//闭包表达式
{ (param) -> ReturnType in
    //方法体
}

func makeIncrementer() -> () -> Int{
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int{
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}
let makeInc = makeIncrementer()
print(makeInc())
print(makeInc())
print(makeInc())

<!--打印结果-->
11
12
13
主要原因：内嵌函数捕获了runningTotal，不再是单纯的一个变量了

print(makeIncrementer()())
print(makeIncrementer()())
print(makeIncrementer()())
<!--打印结果-->
11
11
11


捕获一个变量:
#####SIL分析:#####
将上述代码通过SIL分析
通过alloc_box申请了一个堆上的引用计数，并将引用计数地址给了RunningTotal，将变量存储到堆上
通过project_box从堆上取出变量
将取出的变量交给闭包进行调用
结论: 所以，捕获值的本质是 将变量存储到堆上

alloc_box官方文档说明：在堆上分配一块内存空间，存储了metadata、refCount、当前的value
###
捕获变量的本质：就是在堆上开辟内存空间，将当前的变量存储到里面
闭包的本质：就是当前的内嵌函数，加上捕获的变量或者常量
###

总结:
一个闭包能够从上下文捕获已经定义的常量和变量，即使这些定义的常量和变量的原作用域不存在，闭包仍然能够在其函数体内引用和修改这些值
当每次修改捕获值时，修改的是堆区中的value值
当每次重新执行当前函数时，都会重新创建内存空间

makeInc是用于存储makeIncrementer函数调用的全局变量，所以每次都需要依赖上一次的结果
而直接调用函数时，相当于每次都新建一个堆内存，所以每次的结果都是不关联的，即每次结果都是一致的



makeInc存储的到底是什么？
可以将SIL降一级，通过IR代码来观察数据的构成
将代码转换为IR文件:
swiftc -emit-ir main.swift > ./main.ll && open main.ll

数组:
/*
- elementnumber 数组中存放数据的数量
- elementtype 数组中存放数据的类型
*/
[<elementnumber> x <elementtype>]

<!--举例-->
/*
24个i8都是0
- iN：表示多少位的整型，即8位的整型 - 1字节
*/
alloca [24 x i8], align 8


结构体:
/*
- T：结构体名称
- <type list> ：列表，即结构体的成员列表
*/
//和C语言的结构体类似
%T = type {<type list>}

<!--举例-->
/*
- swift.refcounted：结构体名称
- %swift.type*：swift.type指针类型
- i64：64位整型 - 8字节
*/
%swift.refcounted = type { %swift.type*, i64}


指针类型:
<type> *

<!--举例-->
//64位的整型 - 8字节
i64*


将c/c++编译成IR:
clang -S -emit-llvm ${SRCROOT}/06-EnumTestC/main.c > ./main.ll && code main.ll

getelementptr指令
在LLVM中获取数组和结构体的成员时通过getelementptr
语法规则如下：
<result> = getelementptr <ty>, <ty>* <ptrval>{, [inrange] <ty> <id x>}*
<result> = getelementptr inbounds <ty>, <ty>* <ptrval>{, [inrange] <ty> <idx>}*


int main(int argc, const char * argv[]) { 
    int array[4] = {1, 2, 3, 4}; 
    int a = array[0];
    return 0;
}
其中int a = array[0];这句对应的LLVM代码应该是这样的：
/*
- [4 x i32]* array：数组首地址
- 第一个0：相对于数组自身的偏移，即偏移0字节 0 * 4字节
- 第二个0：相对于数组元素的偏移，即结构体第一个成员变量 0 * 4字节
*/
a = getelementptr inbounds [4 x i32], [4 x i32]* array, i64 0, i64 0


查看makeIncrementer方法:
首先通过swift_allocObject创建swift.refcounted结构体
然后将swift.refcounted转换为<{ %swift.refcounted, [8 x i8] }>*结构体（即Box）
取出结构体中index等于1的成员变量，存储到[8 x i8]*连续的内存空间中
将内嵌函数的地址存储到i8即void地址中
最后返回一个结构体

仿写其内部的结构体，然后构造一个函数的结构体，将makeInc的地址绑定到结构体中
struct HeapObject {
    var type: UnsafeRawPointer
    var refCount1: UInt32
    var refCount2: UInt32
}

//函数返回值结构体
//BoxType 是一个泛型，最终是由传入的Box决定的
struct FunctionData<BoxType>{
    //内嵌函数地址
    var ptr: UnsafeRawPointer
    var captureValue: UnsafePointer<BoxType>
}

//捕获值的结构体
struct Box<T> {
    var refCounted: HeapObject
    var value: T
}

//封装闭包的结构体，目的是为了使返回值不受影响
struct VoidIntFun {
    var f: () ->Int
}

//下面代码的打印结果是什么？
func makeIncrementer() -> () -> Int{
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int{
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}
let makeInc = VoidIntFun(f: makeIncrementer())

let ptr = UnsafeMutablePointer<VoidIntFun>.allocate(capacity: 1)
//初始化的内存空间
ptr.initialize(to: makeInc)
//将ptr重新绑定内存
let ctx = ptr.withMemoryRebound(to: FunctionData<Box<Int>>.self, capacity: 1) {
     $0.pointee
}
print(ctx.ptr)
print(ctx.captureValue.pointee)

<!--打印结果-->
0x0000000100002bc0// 内嵌函数的地址
Box<Int>(refCounted: _7_Clourse.HeapObject(type: 0x0000000100004038, refCount1: 3, refCount2: 2), value: 10)

结论:
当我们var makeInc2 = makeIncrementer()使用时，相当于给makeInc2就是FunctionData结构体，其中关联了内嵌函数地址，以及捕获变量的地址


#####
总结
1、捕获值原理：在堆上开辟内存空间，并将捕获的值放到这个内存空间里
2、修改捕获值时：实质是修改堆空间的值
3、闭包是一个引用类型（引用类型是地址传递），闭包的底层结构（是结构体：函数地址 + 捕获变量的地址 == 闭包）
4、函数也是一个引用类型（本质是一个结构体，其中只保存了函数的地址）
#####

func makeIncrementer(inc: Int) -> Int{
    var runningTotal = 1
    return runningTotal + inc
}
var makeInc = makeIncrementer
函数在传递过程中，传递的就是函数的地址

https://www.jianshu.com/u/b8cea7e56f9a
https://www.jianshu.com/u/f4cc4a629941
https://zhuanlan.zhihu.com/p/475959729



//函数也是引用类型
struct FunctionData{
    //函数地址
    var ptr: UnsafeRawPointer
    var captureValue: UnsafeRawPointer?
}

//封装闭包的结构体，目的是为了使返回值不受影响
struct VoidIntFun {
    var f: (Int) ->Int
}

func makeIncrementer(inc: Int) -> Int{
    var runningTotal = 1
    return runningTotal + inc
}

var makeInc = makeIncrementer
var f = VoidIntFun(f: makeInc)

let ptr = UnsafeMutablePointer<VoidIntFun>.allocate(capacity: 1)
//初始化的内存空间
ptr.initialize(to: f)
//将ptr重新绑定内存
let ctx = ptr.withMemoryRebound(to: FunctionData.self, capacity: 1) {
     $0.pointee
}

print(ctx.ptr)
print(ctx.captureValue)

<!--打印结果-->
0x0000000100003370
nil



本质上 OC 的 block 就是⼀个结构体，然后这个结构体⾥⾯有⼀个结构体成员专⻔⽤来保存捕捉对象，因此才会导致 被 block 捕捉引⽤ +1  ，或者说 block 是⼀个带有⾃动变量（局部变量）的匿名函数。

Swift 的闭包:
闭包是⼀个捕获了全局上下⽂的常量或者变量的函数
捕获值原理：在堆上开辟内存空间，并将捕获的值放到这个内存空间⾥
修改捕获值时：实质是修改堆空间的值
闭包是⼀个引⽤类型（引⽤类型是地址传递），闭包的底层结构（是结构体：函数地址 + 捕获变量的地址 == 闭包）
函数也是⼀个引⽤类型（本质是⼀个结构体，其中只保存了函数的地址）


var capturedValue: Int = 0

func captureAndChange(_ closure: @escaping () -> ()) {
    closure()
}

print(capturedValue)// 0
        
captureAndChange {
    self.capturedValue = 1
}

print(capturedValue)// 1



var capturedValue: Int = 0
let valueCaptureListClosure = { [capturedValue] in
    print(capturedValue)// 0
}
capturedValue = 1
valueCaptureListClosure()


==================================================optionals
https://www.lithium3141.com/blog/2014/06/19/learning-swift-optional-types/

Optional box that might have value or might not, and that optional box is not unwrapped.
Optional means that there is a value or there is no value (nil)


Optional（可选型） 是⽤什么实现的:
使⽤枚举（enum）的关联值 特性实现的。 
1）枚举的关联值和原始值： 原始值： 就是 rawValue 关联值：类似与下⽂ Optional some 的⽤法，可以根据不同枚举类型创建不同的枚举。
enum Optional<Wrapped> {
  case none
  case some(Wrapped)
}

下⾯两种形式等价：
var name: Optional<String>
var name: String?

所谓的 nil 就是 Optional.None 

unwrapped: 展开，解包

==================================================lazy
lazy 修饰属性

collection 中的 lazy:
let lazyArr: LazySequence<[String]> = arr.lazy
public struct LazySequence<Base> where Base : Sequence

extension LazySequence : LazySequenceProtocol