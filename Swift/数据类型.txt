整型
有符号
Int8 : 有符号8位整型
Int16 : 有符号16位整型
Int32 : 有符号32位整型
Int64 : 有符号64位整型
Int : 和平台相关(默认,相当于OC的NSInteger)
无符号
UInt8 : 无符号8位整型
UInt16 : 无符号16位整型
UInt32 : 无符号32位整型
UInt64 : 无符号64位整型
UInt : 和平台相关(常用,相当于OC的NSUInteger)(默认)

尽量不要使用UInt，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用Int，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断


浮点型
Float : 32位浮点型
Double : 64浮点型(默认)
Double精确度很高，至少有15位数字，而 Float 最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围

Swift 有一个基本的布尔（Boolean）类型，叫做 Bool。布尔值指逻辑上的值，因为它们只能是真或者假。Swift 有两个布尔常量，true 和 false

字符串：String
字符串是字符的序列集合，例如：
"Hello, World!"

字符：Character
字符指的是单个字母，例如：
"C"


类型	大小（字节）	区间值
Int8	1 字节	-128 到 127
UInt8	1 字节	0 到 255
Int32	4 字节	-2147483648 到 2147483647
UInt32	4 字节	0 到 4294967295
Int64	8 字节	-9223372036854775808 到 9223372036854775807
UInt64	8 字节	0 到 18446744073709551615
Float	4 字节	1.2E-38 到 3.4E+38 (~6 digits)
Double	8 字节	2.3E-308 到 1.7E+308 (~15 digits)

类型别名:
定义了 Int 的类型别名为 Feet：
typealias Feet = Int

Swift 会使用类型推断（type inference）来选择合适的类型
类型推导:
如果定义一个标识符时有直接进行赋值,那么标识符后面的类型可以省略
var i = 20

相同类型之间才可以进行运算
因为Swift中没有隐式转换
let a = 10
let b = 3.14
// 正确写法
let c = Double(a) + b
let d = a + Int(b)

可以用 [] 和 [:] 来创建空数组和空字典