https://docs.swift.org/swift-book/documentation/the-swift-programming-language


==================================================Xcode15.1 Swift5.9.2

Writing <T: Equatable> is the same as writing <T> ... where T: Equatable.

--------------------------------------------------The Basics:

Swift provides an additional integer type, Int, which has the same size as the current platform’s native word size:
On a 32-bit platform, Int is the same size as Int32.
On a 64-bit platform, Int is the same size as Int64.


Swift provides two signed floating-point number types:
Double represents a 64-bit floating-point number.
Float represents a 32-bit floating-point number.
Double has a precision of at least 15 decimal digits, whereas the precision of Float can be as little as 6 decimal digits.


Numeric Literals:
A decimal number, with no prefix
A binary number, with a 0b prefix
An octal number, with a 0o prefix
A hexadecimal number, with a 0x prefix
let decimalInteger = 17
let binaryInteger = 0b10001       // 17 in binary notation
let octalInteger = 0o21           // 17 in octal notation
let hexadecimalInteger = 0x11     // 17 in hexadecimal notation


Floating-point literals can be decimal (with no prefix), or hexadecimal (with a 0x prefix).
They must always have a number (or hexadecimal number) on both sides of the decimal point.
Decimal floats can also have an optional exponent, indicated by an uppercase or lowercase e; 
hexadecimal floats must have an exponent, indicated by an uppercase or lowercase p.
For decimal numbers with an exponent of x, the base number is multiplied by 10ˣ:
1.25e2 means 1.25 x 10², or 125.0.
1.25e-2 means 1.25 x 10⁻², or 0.0125.
For hexadecimal numbers with an exponent of x, the base number is multiplied by 2ˣ:
0xFp2 means 15 x 2², or 60.0.
0xFp-2 means 15 x 2⁻², or 3.75.
All of these floating-point literals have a decimal value of 12.1875:
let decimalDouble = 12.1875
let exponentDouble = 1.21875e1
let hexadecimalDouble = 0xC.3p0
Both integers and floats can be padded with extra zeros and can contain underscores to help with readability.
let paddedDouble = 000123.456
let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1


An Int8 constant or variable can store numbers between -128 and 127, whereas a UInt8 constant or variable can store numbers between 0 and 255.
SomeType(ofInitialValue) is the default way to call the initializer of a Swift type and pass in an initial value.
Floating-point values are always truncated when used to initialize a new integer value in this way. This means that 4.75 becomes 4, and -3.9 becomes -3.


typealias AudioSample = UInt16


let (statusCode, statusMessage) = http404Error
access the individual element values in a tuple using index numbers starting at zero:
You can name the individual elements in a tuple when the tuple is defined:
let http200Status = (statusCode: 200, description: "OK")


In Objective-C, nil is a pointer to a nonexistent object. 
In Swift, nil isn’t a pointer — it’s the absence of a value of a certain type. 
Optionals of any type can be set to nil, not just object types.


Optional Binding:
if let <#constantName#> = <#someOptional#> {
   <#statements#>
}
If you don’t need to refer to the original, optional constant or variable after accessing the value it contains, you can use the same name for the new constant or variable:
let myNumber = Int(possibleNumber)
// Here, myNumber is an optional integer
if let myNumber = myNumber {
    // Here, myNumber is a non-optional integer
    print("My number is \(myNumber)")
}
you can use a shorter spelling to unwrap an optional value
if let myNumber {
    print("My number is \(myNumber)")
}
Constants and variables created with optional binding in an if statement are available only within the body of the if statement.


Providing a Fallback Value:
using the nil-coalescing operator (??)


Force Unwrapping:


implicitly or explicitly: 隐式或显式
Implicitly Unwrapped Optionals:
The primary use of implicitly unwrapped optionals in Swift is during class initialization
Don’t use an implicitly unwrapped optional when there’s a possibility of a variable becoming nil at a later point. 
Always use a normal optional type if you need to check for a nil value during the lifetime of a variable.
let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString // Unwrapped automatically
optionalString doesn’t have an explicit type so it’s an ordinary optional.
let optionalString = assumedString
// The type of optionalString is "String?" and assumedString isn't force-unwrapped.


Error Handling:
func canThrowAnError() throws {
    // this function may or may not throw an error
}
do {
    try canThrowAnError()
    // no error was thrown
} catch {
    // an error was thrown
}

func makeASandwich() throws {
    // ...
}
do {
    try makeASandwich()
    eatASandwich()
} catch SandwichError.outOfCleanDishes {
    washDishes()
} catch SandwichError.missingIngredients(let ingredients) {
    buyGroceries(ingredients)
}


Debugging with Assertions:
let age = -3
assert(age >= 0, "A person's age can't be less than zero.")
The difference between assertions and preconditions is in when they’re checked: Assertions are checked only in debug builds, but preconditions are checked in both debug and production builds. 
In production builds, the condition inside an assertion isn’t evaluated. 
This means you can use as many assertions as you want during your development process, without impacting performance in production.
If the code already checks the condition, you use the assertionFailure(_:file:line:) function to indicate that an assertion has failed.
if age > 10 {
    print("You can ride the roller-coaster or the ferris wheel.")
} else if age >= 0 {
    print("You can ride the ferris wheel.")
} else {
    assertionFailure("A person's age can't be less than zero.")
}


Enforcing Preconditions:
// In the implementation of a subscript...
precondition(index > 0, "Index must be greater than zero.")
If you compile in unchecked mode (-Ounchecked), preconditions aren’t checked. 
The compiler assumes that preconditions are always true, and it optimizes your code accordingly.
However, the fatalError(_:file:line:) function always halts execution, regardless of optimization settings.
Because fatal errors are never optimized out, unlike assertions or preconditions, you can be sure that execution always halts if it encounters a stub implementation.


--------------------------------------------------Basic Operators
let (x, y) = (1, 2)
Unlike the assignment operator in C and Objective-C, the assignment operator in Swift doesn’t itself return a value. 
The following statement isn’t valid:
if x = y {
    // This isn't valid, because x = y doesn't return a value.
}


The remainder operator (%) is also known as a modulo operator in other languages. 
However, its behavior in Swift for negative numbers means that, strictly speaking, it’s a remainder rather than a modulo operation.
a % b
a = (b x some multiplier) + remainder
The sign of b is ignored for negative values of b. This means that a % b and a % -b always give the same answer.


Compound Assignment Operators:
var a = 1
a += 2
// a is now equal to 3
The expression a += 2 is shorthand for a = a + 2.
he compound assignment operators don’t return a value. For example, you can’t write let b = a += 2.


Comparison Operators:
Equal to (a == b)
Not equal to (a != b)
Greater than (a > b)
Less than (a < b)
Greater than or equal to (a >= b)
Less than or equal to (a <= b)

Swift also provides two identity operators (=== and !==), which you use to test whether two object references both refer to the same object instance.

You can compare two tuples if they have the same type and the same number of values.
Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal.
Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison.
If all the elements are equal, then the tuples themselves are equal.
(1, "zebra") < (2, "apple")   // true because 1 is less than 2; "zebra" and "apple" aren't compared
(3, "apple") < (3, "bird")    // true because 3 is equal to 3, and "apple" is less than "bird"
(4, "dog") == (4, "dog")      // true because 4 is equal to 4, and "dog" is equal to "dog"
you can compare two tuples of type (String, Int) because both String and Int values can be compared using the < operator.
In contrast, two tuples of type (String, Bool) can’t be compared with the < operator because the < operator can’t be applied to Bool values.
("blue", -1) < ("purple", 1)        // OK, evaluates to true
("blue", false) < ("purple", true)  // Error because < can't compare Boolean values
The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. 
To compare tuples with seven or more elements, you must implement the comparison operators yourself.


Nil-Coalescing Operator:
(a ?? b) 
If the value of a is non-nil, the value of b isn’t evaluated. This is known as short-circuit evaluation.


Closed Range Operator:
The closed range operator (a...b) defines a range that runs from a to b, and includes the values a and b. The value of a must not be greater than b.


Half-Open Range Operator:
The half-open range operator (a..<b) defines a range that runs from a to b, but doesn’t include b.
If the value of a is equal to b, then the resulting range will be empty.
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..<count {
    print("Person \(i + 1) is called \(names[i])")
}


One-Sided Ranges:
a range that includes all the elements of an array from index 2 to the end of the array.
for name in names[2...] {
    print(name)
}

for name in names[...2] {
    print(name)
}
for name in names[..<2] {
    print(name)
}

let range = ...5
range.contains(7)   // false
range.contains(4)   // true
range.contains(-1)  // true


The Swift logical operators && and || are left-associative, meaning that compound expressions with multiple logical operators evaluate the leftmost subexpression first.


Explicit Parentheses:
if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {
    print("Welcome!")
} else {
    print("ACCESS DENIED")
}


--------------------------------------------------Strings and Characters
Swift’s String type is bridged with Foundation’s NSString class.
Foundation also extends String to expose methods defined by NSString. 
This means, if you import Foundation, you can access those NSString methods on String without casting.


let quotation = """

The White Rabbit put on his spectacles.  "Where shall I begin,

please your Majesty?" he asked.

"""


If you want to use line breaks to make your source code easier to read, but you don’t want the line breaks to be part of the string’s value, write a backslash (\) at the end of those lines:
let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""


An arbitrary Unicode scalar value, written as \u{n}, where n is a 1–8 digit hexadecimal number 


To include the text """ in a multiline string, escape at least one of the quotation marks.
let threeDoubleQuotationMarks = """
Escaping the first quotation mark \"""
Escaping all three quotation marks \"\"\"
"""


Unicode Scalar Values:
Behind the scenes, Swift’s native String type is built from Unicode scalar values.
A Unicode scalar value is a unique 21-bit number for a character or modifier, such as U+0061 for LATIN SMALL LETTER A ("a"), or U+1F425 for FRONT-FACING BABY CHICK ("🐥").
Note that not all 21-bit Unicode scalar values are assigned to a character — some scalars are reserved for future assignment or for use in UTF-16 encoding.
Scalar values that have been assigned to a character typically also have a name, such as LATIN SMALL LETTER A and FRONT-FACING BABY CHICK in the examples above.


Extended String Delimiters:
printing the string literal #"Line 1\nLine 2"# prints the line feed escape sequence (\n) rather than printing the string across two lines.
If you need the special effects of a character in a string literal, match the number of number signs within the string following the escape character (\).
if your string is #"Line 1\nLine 2"# and you want to break the line, you can use #"Line 1\#nLine 2"# instead.
let threeMoreDoubleQuotationMarks = #"""
Here are three more double quotes: """
"""#


let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
let catString = String(catCharacters)


let exclamationMark: Character = "!"
welcome.append(exclamationMark)


let badStart = """
    one
    two
    """
let end = """
    three
    """
print(badStart + end)
// Prints two lines:
// one
// twothree
let goodStart = """
    one
    two

    """
print(goodStart + end)
// Prints three lines:
// one
// two
// three


print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier)."
print(#"6 times 7 is \#(6 * 7)."#)
// Prints "6 times 7 is 42."


Extended Grapheme Clusters:
In both cases, the letter é is represented as a single Swift Character value that represents an extended grapheme cluster. 
In the first case, the cluster contains a single scalar; in the second case, it’s a cluster of two scalars:
let eAcute: Character = "\u{E9}"                         // é
let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by ́
// eAcute is é, combinedEAcute is é
let precomposed: Character = "\u{D55C}"                  // 한
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ᄒ, ᅡ, ᆫ
// precomposed is 한, decomposed is 한
let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"
// regionalIndicatorForUS is 🇺🇸


Note that Swift’s use of extended grapheme clusters for Character values means that string concatenation and modification may not always affect a string’s character count.
For example, if you initialize a new string with the four-character word cafe, 
and then append a COMBINING ACUTE ACCENT (U+0301) to the end of the string, 
the resulting string will still have a character count of 4, with a fourth character of é, not e:
var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"
word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in café is 4"


Note
Extended grapheme clusters can be composed of multiple Unicode scalars.
This means that different characters — and different representations of the same character — can require different amounts of memory to store.
Because of this, characters in Swift don’t each take up the same amount of memory within a string’s representation.
###
If you are working with particularly long string values, 
be aware that the count property must iterate over the Unicode scalars in the entire string in order to determine the characters for that string.
###
The count of the characters returned by the count property isn’t always the same as the length property of an NSString that contains the same characters. 
The length of an NSString is based on the number of 16-bit code units within the string’s UTF-16 representation and not the number of Unicode extended grapheme clusters within the string.


String Indices:
Each String value has an associated index type, String.Index, which corresponds to the position of each Character in the string.
so in order to determine which Character is at a particular position, you must iterate over each Unicode scalar from the start or end of that String. 
For this reason, Swift strings can’t be indexed by integer values.
Use the startIndex property to access the position of the first Character of a String. 
The endIndex property is the position after the last character in a String. 
As a result, the endIndex property isn’t a valid argument to a string’s subscript. If a String is empty, startIndex and endIndex are equal.
let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a
greeting[greeting.endIndex] // Error
greeting.index(after: greeting.endIndex) // Error
Note:
You can use the startIndex and endIndex properties and the index(before:), index(after:), and index(_:offsetBy:) methods on any type that conforms to the Collection protocol.
This includes String, as shown here, as well as collection types such as Array, Dictionary, and Set.


Inserting and Removing:
Note:
You can use the insert(_:at:), insert(contentsOf:at:), remove(at:), and removeSubrange(_:) methods on any type that conforms to the RangeReplaceableCollection protocol. 
This includes String, as shown here, as well as collection types such as Array, Dictionary, and Set.


Substrings:
When you get a substring from a string — for example, using a subscript or a method like prefix(_:) — the result is an instance of Substring, not another string.
However, unlike strings, you use substrings for only a short amount of time while performing actions on a string. 
When you’re ready to store the result for a longer time, you convert the substring to an instance of String.
let greeting = "Hello, world!"
let index = greeting.firstIndex(of: ",") ?? greeting.endIndex
let beginning = greeting[..<index]
// beginning is "Hello"
// Convert the result to a String for long-term storage.
let newString = String(beginning)
The difference between strings and substrings is that, as a performance optimization, 
a substring can reuse part of the memory that’s used to store the original string, 
or part of the memory that’s used to store another substring. (Strings have a similar optimization, but if two strings share memory, they’re equal.) 
This performance optimization means you don’t have to pay the performance cost of copying memory until you modify either the string or substring.
Note:
Both String and Substring conform to the StringProtocol protocol, 
which means it’s often convenient for string-manipulation functions to accept a StringProtocol value. You can call such functions with either a String or Substring value.


Comparing Strings:
Two String values (or two Character values) are considered equal if their extended grapheme clusters are canonically equivalent.
Extended grapheme clusters are canonically equivalent if they have the same linguistic meaning and appearance, even if they’re composed from different Unicode scalars behind the scenes.

For example, LATIN SMALL LETTER E WITH ACUTE (U+00E9) is canonically equivalent to LATIN SMALL LETTER E (U+0065) followed by COMBINING ACUTE ACCENT (U+0301). 
Both of these extended grapheme clusters are valid ways to represent the character é, and so they’re considered to be canonically equivalent
// "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"
// "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"
if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"

Conversely, LATIN CAPITAL LETTER A (U+0041, or "A"), as used in English, is not equivalent to CYRILLIC CAPITAL LETTER A (U+0410, or "А"), as used in Russian. 
The characters are visually similar, but don’t have the same linguistic meaning
let latinCapitalLetterA: Character = "\u{41}"
let cyrillicCapitalLetterA: Character = "\u{0410}"
if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters aren't equivalent.")
}
// Prints "These two characters aren't equivalent."


Unicode Representations of Strings:
When a Unicode string is written to a text file or some other storage, the Unicode scalars in that string are encoded in one of several Unicode-defined encoding forms.
Each form encodes the string in small chunks known as code units.
These include the UTF-8 encoding form (which encodes a string as 8-bit code units), the UTF-16 encoding form (which encodes a string as 16-bit code units), and the UTF-32 encoding form (which encodes a string as 32-bit code units).

Swift provides several different ways to access Unicode representations of strings. 
You can iterate over the string with a for-in statement, to access its individual Character values as Unicode extended grapheme clusters. 
Alternatively, access a String value in one of three other Unicode-compliant representations:
A collection of UTF-8 code units (accessed with the string’s utf8 property)
A collection of UTF-16 code units (accessed with the string’s utf16 property)
A collection of 21-bit Unicode scalar values, equivalent to the string’s UTF-32 encoding form (accessed with the string’s unicodeScalars property)
let dogString = "Dog‼🐶"

UTF-8 Representation:
You can access a UTF-8 representation of a String by iterating over its utf8 property. 
This property is of type String.UTF8View, which is a collection of unsigned 8-bit (UInt8) values, 
one for each byte in the string’s UTF-8 representation:
for codeUnit in dogString.utf8 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 226 128 188 240 159 144 182 "

UTF-16 Representation:
You can access a UTF-16 representation of a String by iterating over its utf16 property. 
This property is of type String.UTF16View, which is a collection of unsigned 16-bit (UInt16) values, 
one for each 16-bit code unit in the string’s UTF-16 representation:
for codeUnit in dogString.utf16 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 55357 56374 "
The fifth and sixth codeUnit values (55357 and 56374) are a UTF-16 surrogate pair representation of the DOG FACE character. 
These values are a high-surrogate value of U+D83D (decimal value 55357) and a low-surrogate value of U+DC36 (decimal value 56374).

Unicode Scalar Representation:
You can access a Unicode scalar representation of a String value by iterating over its unicodeScalars property. 
This property is of type UnicodeScalarView, which is a collection of values of type UnicodeScalar.
Each UnicodeScalar has a value property that returns the scalar’s 21-bit value, represented within a UInt32 value:
for scalar in dogString.unicodeScalars {
    print("\(scalar.value) ", terminator: "")
}
print("")
// Prints "68 111 103 8252 128054 "
As an alternative to querying their value properties, each UnicodeScalar value can also be used to construct a new String value, such as with string interpolation:
for scalar in dogString.unicodeScalars {
    print("\(scalar) ")
}
// D
// o
// g
// ‼
// 🐶


"code unit"（代码单元）和 "code point"（码点）
Code Point（码点）： 码点是 Unicode 中的一个术语，表示为一个唯一的整数值，用来标识字符在 Unicode 中的位置。
每个字符都有一个对应的码点，例如 U+0041 表示大写字母 "A" 的码点。码点是字符的抽象标识。
Code Unit（代码单元）： 代码单元是在字符编码中的最小存储单元。
在 Unicode 中，常见的代码单元大小有 8 位（即字节）、16 位和 32 位。
不同的字符编码方案使用不同大小的代码单元来表示字符。
例如，在 UTF-8 编码中，一个代码单元是 8 位（一个字节），而在 UTF-16 编码中，一个代码单元是 16 位。

https://symbl.cc/cn/search/?q=%E5%8F%8C%E5%8F%B9%E5%8F%B7
双叹号
U+203C
&#8252;
&#8252; 表示的是一个 Unicode 字符，其十进制编码为 8252。这种表示方式使用了数字实体引用。&# 后面的数字表示 Unicode 码点的十进制值
U+203C; "U+" 表示 Unicode 码点（Unicode Code Point）的前缀。Unicode 码点是 Unicode 字符集中的唯一标识符。每个字符都有一个唯一的码点，它是一个十六进制数字。
对于 "U+203C"，其中 "U+" 表示这是一个 Unicode 码点，而 "203C" 是该字符的十六进制码点值。换句话说，"U+203C" 表示 Unicode 字符集中的一个特定字符，其码点为 0x203C。

UTF-8 是一种可变长度的字符编码方式，用于表示 Unicode 字符。在 UTF-8 中，每个字符可能由一个到四个字节组成。
让我们来看看字符串 "Dog‼🐶" 在 UTF-8 编码中的表示:
字符 "D" 对应的 UTF-8 编码是 0x44。
字符 "o" 对应的 UTF-8 编码是 0x6F。
字符 "g" 对应的 UTF-8 编码是 0x67。
字符 "‼"（双感叹号）对应的 UTF-8 编码是 0xE280BC。
字符 "🐶"（狗的 Emoji）对应的 UTF-8 编码是 0xF09F90B6。

Dog‼🐶使用utf8表示的转换原理:
UTF-8 编码的转换原理涉及到 Unicode 字符到字节序列的映射
1.Unicode 字符到码点的映射： (即 D->U+0044)
首先，将字符串中的每个 Unicode 字符映射到其对应的 Unicode 码点。
每个 Unicode 码点是一个唯一的整数值，标识了字符在 Unicode 中的位置。
2.码点到 UTF-8 字节序列的映射： 
将每个 Unicode 码点映射到其在 UTF-8 编码中的表示形式。这个映射规则如下：
如果码点在 U+0000 到 U+007F 范围内，它用一个字节表示，形式为 0xxxxxxx。
如果码点在 U+0080 到 U+07FF 范围内，它用两个字节表示，形式为 110xxxxx 10xxxxxx。
如果码点在 U+0800 到 U+FFFF 范围内，它用三个字节表示，形式为 1110xxxx 10xxxxxx 10xxxxxx。
如果码点在 U+10000 到 U+10FFFF 范围内，它用四个字节表示，形式为 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。

U+203C转成utf-8为什么是226，128，188，怎么计算的:
(1)确定编码范围： 查看 Unicode 码点范围，U+203C 在 U+0800 到 U+FFFF 范围内，因此它用三个字节表示。
(2)将 Unicode 码点转换为二进制： 将 U+203C 转换为二进制表示。U+203C 的二进制表示是 0010 0000 0011 1100
将每个十六进制数转换为 4 个二进制数字
0x203C->0010 0000 0011 1100
(3)填充比特并转换为字节：
第一个字节：1110xxxx，填充 x 为 U+203C 二进制表示的前四位，得到 11100010。
第二个字节：10xxxxxx，填充 x 为 U+203C 二进制表示的中间六位，得到 10000000。
第三个字节：10xxxxxx，填充 x 为 U+203C 二进制表示的最后六位，得到 10111100。

3.拼接字节序列： 将每个字符的 UTF-8 编码字节序列按顺序拼接起来，得到最终的 UTF-8 字节序列。


--------------------------------------------------Collection Types
Organize data using arrays, sets, and dictionaries.
Arrays are ordered collections of values. 
Sets are unordered collections of unique values. 
Dictionaries are unordered collections of key-value associations.

Arrays:
When you use subscript syntax, the index you specify needs to be valid. 
For example, writing shoppingList[shoppingList.count] = "Salt" to try to append an item to the end of the array results in a runtime error.

You can also use subscript syntax to change a range of values at once, even if the replacement set of values has a different length than the range you are replacing.
shoppingList[4...6] = ["Bananas", "Apples"]
// shoppingList now contains 6 items

This method removes the item at the specified index and returns the removed item
let mapleSyrup = shoppingList.remove(at: 0)


Sets:
Hash Values for Set Types
A type must be hashable in order to be stored in a set — that is, the type must provide a way to compute a hash value for itself. 
A hash value is an Int value that’s the same for all objects that compare equally, such that if a == b, the hash value of a is equal to the hash value of b.
All of Swift’s basic types (such as String, Int, Double, and Bool) are hashable by default, and can be used as set value types or dictionary key types.
Enumeration case values without associated values are also hashable by default.

Note
You can use your own custom types as set value types or dictionary key types by making them conform to the Hashable protocol from the Swift standard library. 
For information about implementing the required hash(into:) method, see Hashable.

Unlike arrays, sets don’t have an equivalent shorthand form.
var letters = Set<Character>()
letters = []

Swift’s Set type doesn’t have a defined ordering. 
To iterate over the values of a set in a specific order, use the sorted() method, which returns the set’s elements as an array sorted using the < operator.
for genre in favoriteGenres.sorted() {
    print("\(genre)")
}
// Classical
// Hip hop
// Jazz


Dictionaries:
Note
A dictionary Key type must conform to the Hashable protocol, like a set’s value type.
You can also write the type of a dictionary in shorthand form as [Key: Value].

You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for that key:
airports["APL"] = nil

You can also retrieve an iterable collection of a dictionary’s keys or values by accessing its keys and values properties
for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}
If you need to use a dictionary’s keys or values with an API that takes an Array instance, initialize a new array with the keys or values property:
let airportCodes = [String](airports.keys)
// airportCodes is ["LHR", "YYZ"]


--------------------------------------------------Control Flow
for-in loops with numeric ranges:
for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}

let minutes = 60
let minuteInterval = 5
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
    // render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)
}

Closed ranges are also available, by using stride(from:through:by:) instead:
let hours = 12
let hourInterval = 3
for tickMark in stride(from: 3, through: hours, by: hourInterval) {
    // render the tick mark every 3 hours (3, 6, 9, 12)
}

The examples above use a for-in loop to iterate ranges, arrays, dictionaries, and strings. 
However, you can use this syntax to iterate any collection, including your own classes and collection types, as long as those types conform to the Sequence protocol.


Using the alternate syntax, known as an if expression:
let weatherAdvice = if temperatureInCelsius <= 0 {
    "It's very cold. Consider wearing a scarf."
} else if temperatureInCelsius >= 30 {
    "It's really warm. Don't forget to wear sunscreen."
} else {
    "It's not that cold. Wear a T-shirt."
}
let freezeWarning: String? = if temperatureInCelsius <= 0 {
    "It's below freezing. Watch for ice!"
} else {
    nil
}
let freezeWarning = if temperatureInCelsius <= 0 {
    "It's below freezing. Watch for ice!"
} else {
    nil as String?
}
let weatherAdvice = if temperatureInCelsius > 100 {
    throw TemperatureError.boiling
} else {
    "It's a reasonable temperature."
}


Switch:
switch <#some value to consider#> {
case <#value 1#>:
    <#respond to value 1#>
case <#value 2#>,
    <#value 3#>:
    <#respond to value 2 or 3#>
default:
    <#otherwise, do something else#>
}

let anotherCharacter: Character = "a"
let message = switch anotherCharacter {
case "a":
    "The first letter of the Latin alphabet"
case "z":
    "The last letter of the Latin alphabet"
default:
    "Some other character"
}

No Implicit Fallthrough:
Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed, without requiring an explicit break statement.
Note:
Although break isn’t required in Swift, you can use a break statement to match and ignore a particular case or to break out of a matched case before that case has completed its execution.
The body of each case must contain at least one executable statement.
For readability, a compound case can also be written over multiple lines.
Note:
To explicitly fall through at the end of a particular switch case, use the fallthrough keyword

Interval Matching:
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
}

Tuples:
Alternatively, use the underscore character (_), also known as the wildcard pattern, to match any possible value.
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    print("\(somePoint) is at the origin")
case (_, 0):
    print("\(somePoint) is on the x-axis")
case (0, _):
    print("\(somePoint) is on the y-axis")
case (-2...2, -2...2):
    print("\(somePoint) is inside the box")
default:
    print("\(somePoint) is outside of the box")
}

Value Bindings:
A switch case can name the value or values it matches to temporary constants or variables, for use in the body of the case. 
This behavior is known as value binding, because the values are bound to temporary constants or variables within the case’s body.
let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
case (0, let y):
    print("on the y-axis with a y value of \(y)")
case let (x, y):
    print("somewhere else at (\(x), \(y))")
}
The first case, case (let x, 0), matches any point with a y value of 0 and assigns the point’s x value to the temporary constant x.

Where:
A switch case can use a where clause to check for additional conditions.
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    print("(\(x), \(y)) is just some arbitrary point")
}
// Prints "(1, -1) is on the line x == -y"

Compound Cases:
let someCharacter: Character = "e"
switch someCharacter {
case "a", "e", "i", "o", "u":
    print("\(someCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
    "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
    print("\(someCharacter) is a consonant")
default:
    print("\(someCharacter) isn't a vowel or a consonant")
}
let stillAnotherPoint = (9, 0)
switch stillAnotherPoint {
case (let distance, 0), (0, let distance):
    print("On an axis, \(distance) from the origin")
default:
    print("Not on an axis")
}

Control Transfer Statements:
continue
break
fallthrough
return
throw

Labeled Statements:
<#label name#>: while <#condition#> {
   <#statements#>
}
With a loop statement, you can use a statement label with the break or continue statement to end or continue the execution of the labeled statement.

let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
var square = 0
var diceRoll = 0
gameLoop: while square != finalSquare {
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    switch square + diceRoll {
    case finalSquare:
        // diceRoll will move us to the final square, so the game is over
        break gameLoop
    case let newSquare where newSquare > finalSquare:
        // diceRoll will move us beyond the final square, so roll again
        continue gameLoop
    default:
        // this is a valid move, so find out its effect
        square += diceRoll
        square += board[square]
    }
}
print("Game over!")
Note
If the break statement above didn’t use the gameLoop label, it would break out of the switch statement, 
not the while statement. Using the gameLoop label makes it clear which control statement should be terminated.
It isn’t strictly necessary to use the gameLoop label when calling continue gameLoop to jump to the next iteration of the loop. 
There’s only one loop in the game, and therefore no ambiguity as to which loop the continue statement will affect.
However, there’s no harm in using the gameLoop label with the continue statement. 
Doing so is consistent with the label’s use alongside the break statement and helps make the game’s logic clearer to read and understand.


Early Exit:
A guard statement
It can do this with a control transfer statement such as return, break, continue, or throw, 
or it can call a function or method that doesn’t return, such as fatalError(_:file:line:).


Deferred Actions:
You use a defer block to write code that will be executed later, when your program reaches the end of the current scope.
var score = 1
if score < 10 {
    defer {
        print(score)
    }
    score += 5
}
Then, before exiting the if statement’s scope, the deferred code is run, which prints score.
The code inside of the defer always runs, regardless of how the program exits that scope. 
That includes code like an early exit from a function, breaking out of a for loop, or throwing an error. 
This behavior makes defer useful for operations where you need to guarantee a pair of actions happen — like manually allocating and freeing memory, 
opening and closing low-level file descriptors, 
and beginning and ending transactions in a database — because you can write both actions next to each other in your code.

If you write more than one defer block in the same scope, the first one you specify is the last one to run.
if score < 10 {
    defer {
        print(score)
    }
    defer {
        print("The score is:")
    }
    score += 5
}
// Prints "The score is:"
// Prints "6"

If your program stops running — for example, because of a runtime error or a crash — deferred code doesn’t execute. 
However, deferred code does execute after an error is thrown

Checking API Availability:
if #available(iOS 10, macOS 10.12, *) {
    // Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS
} else {
    // Fall back to earlier iOS and macOS APIs
}

if #available(<#platform name#> <#version#>, <#...#>, *) {
    <#statements to execute if the APIs are available#>
} else {
    <#fallback statements to execute if the APIs are unavailable#>
}

When you use an availability condition with a guard statement, it refines the availability information that’s used for the rest of the code in that code block.
@available(macOS 10.12, *)
struct ColorPreference {
    var bestColor = "blue"
}

func chooseBestColor() -> String {
    guard #available(macOS 10.12, *) else {
       return "gray"
    }
    let colors = ColorPreference()
    return colors.bestColor
}

if #available(iOS 10, *) {
} else {
    // Fallback code
}
if #unavailable(iOS 10) {
    // Fallback code
}

--------------------------------------------------How to Read the Grammar
The notation used to describe the formal grammar of the Swift programming language follows a few conventions:
An arrow (→) is used to mark grammar productions and can be read as “can consist of.”
Syntactic categories are indicated by italic text and appear on both sides of a grammar production rule.
Literal words and punctuation are indicated by boldface constant width text and appear only on the right-hand side of a grammar production rule.
Alternative grammar productions are separated by vertical bars (|). When alternative productions are too long to read easily, they’re broken into multiple grammar production rules on new lines.
In a few cases, regular font text is used to describe the right-hand side of a grammar production rule.
Optional syntactic categories and literals are marked by a trailing question mark, ?.

Grammar of a getter-setter block:
getter-setter-block → { getter-clause setter-clause? } | { setter-clause getter-clause }
或者
getter-setter-block → { getter-clause setter-clause? }
getter-setter-block → { setter-clause getter-clause }