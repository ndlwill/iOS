Closures can capture and store references to any constants and variables from the context in which they’re defined. 
This is known as closing over those constants and variables.


Global and nested functions, as introduced in Functions, are actually special cases of closures. Closures take one of three forms:
Global functions are closures that have a name and don’t capture any values.
Nested functions are closures that have a name and can capture values from their enclosing function.
Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.


Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:
Inferring parameter and return value types from context
Implicit returns from single-expression closures
Shorthand argument names
Trailing closure syntax


The sorting closure needs to return true if the first value should appear before the second value, and false otherwise.
let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2
}
var reversedNames = names.sorted(by: backward)
// reversedNames is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]


Closure Expression Syntax:
{ (<#parameters#>) -> <#return type#> in
   <#statements#>
}
The parameters in closure expression syntax can be in-out parameters, but they can’t have a default value.
reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in
    return s1 > s2
})
However, for the inline closure expression, the parameters and return type are written inside the curly braces, not outside of them.
The start of the closure’s body is introduced by the in keyword. 
This keyword indicates that the definition of the closure’s parameters and return type has finished, and the body of the closure is about to begin.
it can even be written on a single line:
reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in return s1 > s2 } )


Inferring Type From Context:
Because the sorting closure is passed as an argument to a method, Swift can infer the types of its parameters and the type of the value it returns.
reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 } )


Implicit Returns from Single-Expression Closures:
reversedNames = names.sorted(by: { s1, s2 in s1 > s2 } )


Shorthand Argument Names:
reversedNames = names.sorted(by: { $0 > $1 } )


Operator Methods:
reversedNames = names.sorted(by: >)


Trailing Closures:
If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, 
it can be useful to write it as a trailing closure instead.
func someFunctionThatTakesAClosure(closure: () -> Void) {
    // function body goes here
}

// Here's how you call this function without using a trailing closure:
someFunctionThatTakesAClosure(closure: {
    // closure's body goes here
})

// Here's how you call this function with a trailing closure instead:
someFunctionThatTakesAClosure() {
    // trailing closure's body goes here
}

reversedNames = names.sorted() { $0 > $1 }
If a closure expression is provided as the function’s or method’s only argument and you provide that expression as a trailing closure, 
you don’t need to write a pair of parentheses () after the function or method’s name when you call the function:
reversedNames = names.sorted { $0 > $1 }


If a function takes multiple closures, you omit the argument label for the first trailing closure and you label the remaining trailing closures. 
For example, the function below loads a picture for a photo gallery:
func loadPicture(from server: Server, completion: (Picture) -> Void, onFailure: () -> Void) {
    if let picture = download("photo.jpg", from: server) {
        completion(picture)
    } else {
        onFailure()
    }
}
loadPicture(from: someServer) { picture in
    someView.currentPicture = picture
} onFailure: {
    print("Couldn't download the next picture.")
}


Capturing Values:
A closure can capture constants and variables from the surrounding context in which it’s defined.
The closure can then refer to and modify the values of those constants and variables from within its body, 
even if the original scope that defined the constants and variables no longer exists.
In Swift, the simplest form of a closure that can capture values is a nested function, written within the body of another function.
A nested function can capture any of its outer function’s arguments and can also capture any constants and variables defined within the outer function.


func makeIncrementer(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementer() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementer
}

func incrementer() -> Int {
    runningTotal += amount
    return runningTotal
}
The incrementer() function doesn’t have any parameters, and yet it refers to runningTotal and amount from within its function body. 
It does this by capturing a reference to runningTotal and amount from the surrounding function and using them within its own function body.
Capturing by reference ensures that runningTotal and amount don’t disappear when the call to makeIncrementer ends, 
and also ensures that runningTotal is available the next time the incrementer function is called.

Note
As an optimization, Swift may instead capture and store a copy of a value if that value isn’t mutated by a closure, 
and if the value isn’t mutated after the closure is created.
Swift also handles all memory management involved in disposing of variables when they’re no longer needed.

let incrementByTen = makeIncrementer(forIncrement: 10)
This example sets a constant called incrementByTen to refer to an incrementer function that adds 10 to its runningTotal variable each time it’s called. 
Calling the function multiple times shows this behavior in action:
incrementByTen()
// returns a value of 10
incrementByTen()
// returns a value of 20
incrementByTen()
// returns a value of 30

If you create a second incrementer, it will have its own stored reference to a new, separate runningTotal variable:
let incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()
// returns a value of 7

Calling the original incrementer (incrementByTen) again continues to increment its own runningTotal variable, 
and doesn’t affect the variable captured by incrementBySeven:
incrementByTen()
// returns a value of 40


Closures Are Reference Types:
functions and closures are reference types.
let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()
// returns a value of 50
incrementByTen()
// returns a value of 60


Escaping Closures:
A closure is said to escape a function when the closure is passed as an argument to the function, 
but is called after the function returns. When you declare a function that takes a closure as one of its parameters, 
you can write @escaping before the parameter’s type to indicate that the closure is allowed to escape.

One way that a closure can escape is by being stored in a variable that’s defined outside the function.
As an example, many functions that start an asynchronous operation take a closure argument as a completion handler. 
The function returns after it starts the operation, 
but the closure isn’t called until the operation is completed — the closure needs to escape, to be called later. For example:
var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}

An escaping closure that refers to self needs special consideration if self refers to an instance of a class. 
Capturing self in an escaping closure makes it easy to accidentally create a strong reference cycle.

Normally, a closure captures variables implicitly by using them in the body of the closure, but in this case you need to be explicit.
If you want to capture self, write self explicitly when you use it, or include self in the closure’s capture list.
Writing self explicitly lets you express your intent, and reminds you to confirm that there isn’t a reference cycle.
For example, in the code below, the closure passed to someFunctionWithEscapingClosure(_:) refers to self explicitly.
In contrast, the closure passed to someFunctionWithNonescapingClosure(_:) is a nonescaping closure, which means it can refer to self implicitly.

func someFunctionWithNonescapingClosure(closure: () -> Void) {
    closure()
}
class SomeClass {
    var x = 10
    func doSomething() {
        someFunctionWithEscapingClosure { self.x = 100 }
        someFunctionWithNonescapingClosure { x = 200 }
    }
}
let instance = SomeClass()
instance.doSomething()
print(instance.x)
// Prints "200"
completionHandlers.first?()
print(instance.x)
// Prints "100"

Here’s a version of doSomething() that captures self by including it in the closure’s capture list, and then refers to self implicitly:
class SomeOtherClass {
    var x = 10
    func doSomething() {
        someFunctionWithEscapingClosure { [self] in x = 100 }
        someFunctionWithNonescapingClosure { x = 200 }
    }
}

If self is an instance of a structure or an enumeration, you can always refer to self implicitly. 
However, an escaping closure can’t capture a mutable reference to self when self is an instance of a structure or an enumeration. 
Structures and enumerations don’t allow shared mutability
struct SomeStruct {
    var x = 10
    mutating func doSomething() {
        someFunctionWithNonescapingClosure { x = 200 }  // Ok
        someFunctionWithEscapingClosure { x = 100 }     // Error
    }
}
The call to the someFunctionWithEscapingClosure function in the example above is an error because it’s inside a mutating method, so self is mutable. 
That violates the rule that escaping closures can’t capture a mutable reference to self for structures.

var language = "Objc"
let code = { [language] in
    print(language)
}
language = "Swift"
code()// Objc

class Human {
    var lanuage = "Objc"
}
var human = Human()
let code = { [human] in
    print(human.lanuage)
}
human.lanuage = "Swift"
code()// Swift

用[]放置需要捕获的变量，就可以让这个变量做copy成为闭包的内部变量
准确的来讲是因为前面的例子变量是Int类型，因为Int和String都是Struct在赋值的时候，swift语言本身会对Struct的类型做copy操作。
而由于human是一个class，赋值并不会做copy，而只是强引用了此类的实例
By default, a closure expression captures constants and variables from its surrounding scope with strong references to those values. 
You can use a capture list to explicitly control how values are captured in a closure.


var closureArray: [() -> ()] = []
var i = 0
for _ in 1...5 {
 closureArray.append { print(i) }
 i += 1
}
closureArray[0]() // 5
closureArray[1]() // 5
closureArray[2]() // 5
closureArray[3]() // 5
closureArray[4]() // 5


class Human {
    var lanuage = "Objc"

    deinit {
        print("deinit")
    }
}

var human: Human! = Human()
let code = {
    print(human!.lanuage)
}
human.lanuage = "Swift"
human = nil
code()
这个代码可以运行下，会输出deinit，然后报如下的错误
Fatal error: Unexpectedly found nil while unwrapping an Optional value
这是因为human这个类已经被释放了，如果我们改下代码如下:
let code = {[human] in
    print(human!.lanuage)
}
这时候你会发现输出Swift，并且deinit没有输出，准确的讲在展开捕获列表语法时，
相当于又定义了一个临时变量let temp:Human = human，这个赋值本质上相当于human被temp这个变量强引用了。
因为code这个闭包还没有释放，仍然持有temp这个变量，而如果我们不用捕获列表，会是同一个引用指向了human变量，
当human = nil时,相当于闭包code和定义的human的引用都被释放了。
var human: Human! = Human()
print(CFGetRetainCount(human))
let code = {
    print(human!.lanuage)
}
print(CFGetRetainCount(human)) // 输出为2
var human: Human! = Human()
print(CFGetRetainCount(human))
let code = {[human] in
    print(human!.lanuage)
}
print(CFGetRetainCount(human)) // 输出为3
从上面的代码输出可以看出来，如果不用显式的捕获列表，输出human的引用为2，如果改成显式的捕获列表，
会显示human的引用为3。所以本质上显式捕获列表会定义一个临时变量temp(为了便于理解，其实这个临时变量的名字仍然较human，
只是在不同的代码scope内)，当不用显式的捕获列表human = nil是会把引用计数值为0，
如果用了显式的捕获列表,闭包中的临时变量temp不会被置位nil，所以不会崩溃。


class Human {
    var lanuage = "Objc"

    var block: (() -> Void)?

    deinit {
        print("deinit")
    }

    func recycle() -> () -> () {
        let code = {
            print(self.lanuage)
        }
        block = code
        return code
    }
}
var human: Human! = Human()
human.lanuage = "Swift"
human.recycle()
human = nil
然而你会发现控制台里面并没有输出deinit，human这个实例被循环引用了
其实swift语言，在类里面默认会把self变量放到捕获列表里面，上面的闭包的写法和下面本质上是等同的。
let code = { [self] in
    print(self.lanuage)
}
本质上[weak self]如果拆解成代码的话应该如下:
weak var `self`: Human? = self
对self变量做弱引用声明，因为是弱引用，闭包在使用这个变量时就要定义为optional，因为有可能这个变量为空，所以我们更改上面的代码如下:
let code = { [weak self] in
    print(self?.lanuage)
}
再运行就可以看到控制台输出deinit，另外在控制self引用的时候还有个关键字unowned，
这个关键字和weak的区别是：unowned同样不会强引用变量self，但是它不会改变变量的类型为optional，
也就是说如果变量self被释放后，闭包中仍然使用的话会崩溃。
所以在用unowned关键字的时候，要保证闭包在调用的时候，self不会被释放。


Autoclosures:
An autoclosure is a closure that’s automatically created to wrap an expression that’s being passed as an argument to a function. 
It doesn’t take any arguments, and when it’s called, it returns the value of the expression that’s wrapped inside of it. 
This syntactic convenience lets you omit braces around a function’s parameter by writing a normal expression instead of an explicit closure.

An autoclosure lets you delay evaluation, because the code inside isn’t run until you call the closure.
The code below shows how a closure delays evaluation.
var customersInLine = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
print(customersInLine.count)
// Prints "5"

let customerProvider = { customersInLine.remove(at: 0) }
print(customersInLine.count)
// Prints "5"

print("Now serving \(customerProvider())!")
// Prints "Now serving Chris!"
print(customersInLine.count)
// Prints "4"

You get the same behavior of delayed evaluation when you pass a closure as an argument to a function.
// customersInLine is ["Alex", "Ewa", "Barry", "Daniella"]
func serve(customer customerProvider: () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: { customersInLine.remove(at: 0) } )
// Prints "Now serving Alex!"

The version of serve(customer:) below performs the same operation but, 
instead of taking an explicit closure, it takes an autoclosure by marking its parameter’s type with the @autoclosure attribute.
// customersInLine is ["Ewa", "Barry", "Daniella"]
func serve(customer customerProvider: @autoclosure () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: customersInLine.remove(at: 0))
// Prints "Now serving Ewa!"


If you want an autoclosure that’s allowed to escape, use both the @autoclosure and @escaping attributes.
// customersInLine is ["Barry", "Daniella"]
var customerProviders: [() -> String] = []
func collectCustomerProviders(_ customerProvider: @autoclosure @escaping () -> String) {
    customerProviders.append(customerProvider)
}
collectCustomerProviders(customersInLine.remove(at: 0))
collectCustomerProviders(customersInLine.remove(at: 0))
print("Collected \(customerProviders.count) closures.")
// Prints "Collected 2 closures."
for customerProvider in customerProviders {
    print("Now serving \(customerProvider())!")
}
// Prints "Now serving Barry!"
// Prints "Now serving Daniella!"
The array is declared outside the scope of the function, which means the closures in the array can be executed after the function returns.