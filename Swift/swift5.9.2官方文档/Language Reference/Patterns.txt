Patterns
Match and destructure values.

For instance, the pattern (x, y) matches the tuple (1, 2) and any other two-element tuple. 
In addition to matching a pattern with a value, 
you can extract part or all of a composite value and bind each part to a constant or variable name.

The first kind of pattern is used for destructuring values in simple variable, constant, and optional bindings.
These include wildcard patterns, identifier patterns, and any value binding or tuple patterns containing them. 
You can specify a type annotation for these patterns to constrain them to match only values of a certain type.

The second kind of pattern is used for full pattern matching, where the values you’re trying to match against may not be there at runtime.
These include enumeration case patterns, optional patterns, expression patterns, and type-casting patterns.
You use these patterns in a case label of a switch statement, a catch clause of a do statement, or in the case condition of an if, while, guard, or for-in statement.

Grammar of a pattern:
pattern → wildcard-pattern type-annotation?
pattern → identifier-pattern type-annotation?
pattern → value-binding-pattern
pattern → tuple-pattern type-annotation?
pattern → enum-case-pattern
pattern → optional-pattern
pattern → type-casting-pattern
pattern → expression-pattern

==================================================if case & guard case
if case你可以当成switch(x) { case ...: }的简化版

let point = (0, 1)
// if case
if case (0, 0) = point { 
  print("0, 0") // 不会运行   
}

// guard case
guard case (0, 0) = point else { 
  print("...")
  FatalError()   
} 

// 相当于
switch (point) {
case (0, 0):
  print("0, 0")
default:
  print("...")
}

这个不同于用==这些直接比较值，有了case就变成pattern matching了
我们把pattern(如: (0, 0))写在前面，再写=，最后写要match的值

==================================================Identifier Pattern
An identifier pattern matches any value and binds the matched value to a variable or constant name.
For example, in the following constant declaration, someValue is an identifier pattern that matches the value 42 of type Int:

let someValue = 42

When the match succeeds, the value 42 is bound (assigned) to the constant name someValue.
When the pattern on the left-hand side of a variable or constant declaration is an identifier pattern, the identifier pattern is implicitly a subpattern of a value-binding pattern.

Grammar of an identifier pattern:
identifier-pattern → identifier

==================================================Wildcard Pattern
A wildcard pattern matches and ignores any value and consists of an underscore (_). 
Use a wildcard pattern when you don’t care about the values being matched against.
For example, the following code iterates through the closed range 1...3, ignoring the current value of the range on each iteration of the loop:
for _ in 1...3 {
    // Do something three times.
}

Grammar of a wildcard pattern:
wildcard-pattern → _

let point = (0, 3, 8)
switch point {
case (_, 0, _):
    print("在y轴")
case (0, _, _):
    print("在x轴")
case (_, _, 0):
    print("在z轴")
case (_, _, _):
    print("不在xyz轴")
}
// 在x轴


我们也可以在case后赋值
case (0, let y, let z): // 也可以写成case let (0, y, z):
    print("在x轴, y: \(y), z: \(z)")
// 在x轴, y: 3, z: 8


enum Organism {
    case plant
    case animal(legs: Int)
}
let pet = Organism.animal(legs: 4)

switch pet {
case .animal(let legs):
  ...
}

==================================================Value-Binding Pattern
A value-binding pattern binds matched values to variable or constant names.
Value-binding patterns that bind a matched value to the name of a constant begin with the let keyword; 
those that bind to the name of variable begin with the var keyword.

Identifiers patterns within a value-binding pattern bind new named variables or constants to their matching values.
For example, you can decompose the elements of a tuple and bind the value of each element to a corresponding identifier pattern.

let point = (3, 2)
switch point {
// Bind x and y to the elements of point.
case let (x, y):
    print("The point is at (\(x), \(y)).")
}
// Prints "The point is at (3, 2)."

let distributes to each identifier pattern in the tuple pattern (x, y). 
Because of this behavior, the switch cases case let (x, y): and case (let x, let y): match the same values.

Grammar of a value-binding pattern:
value-binding-pattern → var pattern | let pattern


==================================================Tuple Pattern
A tuple pattern is a comma-separated list of zero or more patterns, enclosed in parentheses. Tuple patterns match values of corresponding tuple types.

You can constrain a tuple pattern to match certain kinds of tuple types by using type annotations.
For example, the tuple pattern (x, y): (Int, Int) in the constant declaration let (x, y): (Int, Int) = (1, 2) matches only tuple types in which both elements are of type Int.

When a tuple pattern is used as the pattern in a for-in statement or in a variable or constant declaration, it can contain only wildcard patterns, identifier patterns, optional patterns, or other tuple patterns that contain those.
For example, the following code isn’t valid because the element 0 in the tuple pattern (x, 0) is an expression pattern:
let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]
// This code isn't valid.
for (x, 0) in points {
    /* ... */
}

The parentheses around a tuple pattern that contains a single element have no effect. 
The pattern matches values of that single element’s type. For example, the following are equivalent:
let a = 2        // a: Int = 2
let (a) = 2      // a: Int = 2
let (a): Int = 2 // a: Int = 2

==================================================Enumeration Case Pattern
An enumeration case pattern matches a case of an existing enumeration type.
Enumeration case patterns appear in switch statement case labels and in the case conditions of if, while, guard, and for-in statements.

If the enumeration case you’re trying to match has any associated values, the corresponding enumeration case pattern must specify a tuple pattern that contains one element for each associated value.
For an example that uses a switch statement to match enumeration cases containing associated values, see Associated Values.

An enumeration case pattern also matches values of that case wrapped in an optional.
This simplified syntax lets you omit an optional pattern.
Note that, because Optional is implemented as an enumeration, .none and .some can appear in the same switch as the cases of the enumeration type.

enum SomeEnum { case left, right }
let x: SomeEnum? = .left
switch x {
case .left:
    print("Turn left")
case .right:
    print("Turn right")
case nil:
    print("Keep going straight")
}
// Prints "Turn left"

==================================================Optional Pattern
A pattern represents the structure of a single value or a composite value.
Optional patterns consist of an identifier pattern followed immediately by a question mark and appear in the same places as enumeration case patterns.

Because optional patterns are syntactic sugar for Optional enumeration case patterns, the following are equivalent:
let someOptional: Int? = 42
// Match using an enumeration case pattern.
if case .some(let x) = someOptional {
    print(x)
}

// Match using an optional pattern.
if case let x? = someOptional {
    print(x)
}

The optional pattern provides a convenient way to iterate over an array of optional values in a for-in statement, executing the body of the loop only for non-nil elements.
let arrayOfOptionalInts: [Int?] = [nil, 2, 3, nil, 5]
// Match only non-nil values.
for case let number? in arrayOfOptionalInts {
    print("Found a \(number)")
}
// Found a 2
// Found a 3
// Found a 5

Grammar of an optional pattern:
optional-pattern → identifier-pattern ?

==================================================for case

for后面也可以跟case，同时也可以赋值

let groupSizes = [1, 5, 4, 6, 2, 1, 3]
for case 1 in groupSizes {
  print("我是1") // 2次
}

let names: [String?] = ["Joshua", nil, "Dog"]
for case let name? in names {
    print(name, terminator: " ")
}
// Joshua Dog 

第二个是Optional的特殊用法，name？代表不是nil的值，只有在name不是nil的时候才会被print。

==================================================检查数据类型 Type-Casting Patterns
There are two type-casting patterns, the is pattern and the as pattern.
The is pattern appears only in switch statement case labels. The is and as patterns have the following form:
is <#type#>
<#pattern#> as <#type#>

The is pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the is pattern — or a subclass of that type. 
The is pattern behaves like the is operator in that they both perform a type cast but discard the returned type.

The as pattern matches a value if the type of that value at runtime is the same as the type specified in the right-hand side of the as pattern — or a subclass of that type.
If the match succeeds, the type of the matched value is cast to the pattern specified in the right-hand side of the as pattern.

https://docs.swift.org/swift-book/documentation/the-swift-programming-language/typecasting/#Type-Casting-for-Any-and-AnyObject
Grammar of a type casting pattern:
type-casting-pattern → is-pattern | as-pattern
is-pattern → is type
as-pattern → pattern as type


let array: [Any] = [15, "George", 2.0]

for element in array {
    switch element {
    case is String:
        print("\(element)是String")
    case let num as Int:
        print("\(num)是Int")
    default:
        print("\(element)是个啥？？")
    }
}
// 15是Int
// George是String
// 2.0是个啥？？


==================================================case...where...
case后面还可以再加where进一步的筛选

for number in 1...9 {
  switch number {
  case let x where x % 2 == 0:
    print("偶数") 
  case _ where number % 2 > 0:
    print("奇数") 
  }
}

当where的条件只需要switch中的number时，有上面两种写法：
a) 先赋值给x，然后用x来写条件
b) 用_来表明我不care什么case，只要number % 2 > 0就行
这两种方法是一样的

==================================================if多个条件
var a: Int? = 6
if let a = a, a > 5, case 1...9 = a {
    print("yes")
}

==================================================pattern matching operator ~=
Expression Pattern
An expression pattern represents the value of an expression. 
Expression patterns appear only in switch statement case labels.

The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator.
The matches succeeds if the ~= operator returns true. By default, the ~= operator compares two values of the same type using the == operator.
It can also match a value with a range of values, by checking whether the value is contained within the range, as the following example shows.

let point = (1, 2)
switch point {
case (0, 0):
    print("(0, 0) is at the origin.")
case (-2...2, -2...2):
    print("(\(point.0), \(point.1)) is near the origin.")
default:
    print("The point is at (\(point.0), \(point.1)).")
}
// Prints "(1, 2) is near the origin."

Grammar of an expression pattern:
expression-pattern → expression


You can overload the ~= operator to provide custom expression matching behavior.
For example, you can rewrite the above example to compare the point expression with a string representations of points.
/ Overload the ~= operator to match a string with an integer.
func ~= (pattern: String, value: Int) -> Bool {
    return pattern == "\(value)"
}
switch point {
case ("0", "0"):
    print("(0, 0) is at the origin.")
default:
    print("The point is at (\(point.0), \(point.1)).")
}
// Prints "The point is at (1, 2)."


case后面的这个等号有两种情况
1. 等号两边是同种类型，这个=相当于==
case 6 = a // true
6 == a // 相当于上面

2. 等号两边的类型不一样，那么=就相当于~=，这是pattern matching的运算符号
case 1...10 = a // true
(1...10) ~= a // 相当于上面

自定义一下~=，让他变成检查一个element是否在数组里:
infix operator ~=
func ~=(arr: [Int], item: Int) -> Bool {
    return arr.contains(item)
}
[1, 3, 5] ~= 3 // true


==================================================从1到100，如果整除3，print“Fuzz”；如果整除5，print“Buzz”；如果整除3和5，print“FuzzBuzz”
for i in 1...100 {
  // 1
  switch (i % 3, i % 5) {
  // 2
  case (0, 0):
    print("FizzBuzz", terminator: " ")
  case (0, _):
    print("Fizz", terminator: " ")
  case (_, 0):
    print("Buzz", terminator: " ")
  // 3
  case (_, _):
    print(i, terminator: " ")
  }
}
print("")
