You can apply type attributes to types only.


==================================================autoclosure
Apply this attribute to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments.
You apply it to a parameter’s type in a function or method declaration, 
for a parameter whose type is a function type that takes no arguments and that returns a value of the type of the expression.
For an example of how to use the autoclosure attribute, see Autoclosures and Function Type.

https://docs.swift.org/swift-book/documentation/the-swift-programming-language/closures/#Autoclosures
https://docs.swift.org/swift-book/documentation/the-swift-programming-language/types/#Function-Type


==================================================convention
Apply this attribute to the type of a function to indicate its calling conventions.

The convention attribute always appears with one of the following arguments:
1. The swift argument indicates a Swift function reference. This is the standard calling convention for function values in Swift.
2. The block argument indicates an Objective-C compatible block reference. The function value is represented as a reference to the block object, which is an id-compatible Objective-C object that embeds its invocation function within the object. 
The invocation function uses the C calling convention.
3. The c argument indicates a C function reference. The function value carries no context and uses the C calling convention.

A nongeneric global function, a local function that doesn’t capture any local variables, 
or a closure that doesn’t capture any local variables can be converted to the C calling convention. 
Other Swift functions can’t be converted to the C calling convention. 
A function with the Objective-C block calling convention can’t be converted to the C calling convention.


In Swift, the @convention attribute is used to define the calling convention of a function type.
This function type can be a C function, a block, or a Swift function.
Understanding how to use @convention is crucial for developers who want to interact with C code from Swift, or when you need to use Swift functions as callbacks for C APIs.

// C function pointer type
@convention(c) typealias CFunction = (Int) -> Int

// Objective-C block type
@convention(block) typealias ObjCBlock = (Int) -> Int

// Swift function type
@convention(swift) typealias SwiftFunction = (Int) -> Int

Working with @convention(c):
When you want to use a C function as a callback, or when declaring a function pointer to a C function, you can use @convention(c).

import Darwin
// Declare a function pointer to a C function
@convention(c) typealias SignalHandler = (Int32) -> Void
func swiftSignalHandler(code: Int32) {
    print("Signal caught in Swift: \(code)")
}
var cSignalHandler: SignalHandler = swiftSignalHandler
signal(SIGINT, cSignalHandler)

This code declares a function pointer to a C function using @convention(c), defines a Swift function swiftSignalHandler(), and assigns it to the C function pointer.
Then it uses the signal() function from the Darwin module to catch the SIGINT signal and handle it with the Swift function.

Using @convention(block):
When you need to use a Swift closure as an Objective-C block, you can use @convention(block).
This is useful when interacting with Objective-C APIs that require blocks.

import Foundation
// Declare a Swift closure as an Objective-C block
@convention(block) typealias CompletionHandler = (NSString) -> Void
let swiftClosure: CompletionHandler = { name in
    print("Hello, \(name)!")
}
let objCBlock: AnyObject = unsafeBitCast(swiftClosure, to: AnyObject.self)
// Now you can use objCBlock as an Objective-C block

This code declares a Swift closure as an Objective-C block using @convention(block), defines a Swift closure swiftClosure(), 
and then uses unsafeBitCast() to cast it to AnyObject. Now, objCBlock can be used as an Objective-C block.


==================================================escaping
Apply this attribute to a parameter’s type in a function or method declaration to indicate that the parameter’s value can be stored for later execution.
This means that the value is allowed to outlive the lifetime of the call.
Function type parameters with the escaping type attribute require explicit use of self. for properties or methods.

https://docs.swift.org/swift-book/documentation/the-swift-programming-language/closures/#Escaping-Closures


==================================================Sendable
Apply this attribute to the type of a function to indicate that the function or closure is sendable.
Applying this attribute to a function type has the same meaning as conforming a non–function type to the Sendable protocol.

This attribute is inferred on functions and closures if the function or closure is used in a context that expects a sendable value, 
and the function or closure satisfies the requirements to be sendable.

A sendable function type is a subtype of the corresponding nonsendable function type.

https://developer.apple.com/documentation/swift/sendable