Structures and enumerations are value types. By default, the properties of a value type can’t be modified from within its instance methods.
However, if you need to modify the properties of your structure or enumeration within a particular method, you can opt in to mutating behavior for that method.


Assigning to self Within a Mutating Method:
Mutating methods can assign an entirely new instance to the implicit self property. 
The Point example shown above could have been written in the following way instead:
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}
This version of the mutating moveBy(x:y:) method creates a new structure whose x and y values are set to the target location.
The end result of calling this alternative version of the method will be exactly the same as for calling the earlier version.

enum TriStateSwitch {
    case off, low, high
    mutating func next() {
        switch self {
        case .off:
            self = .low
        case .low:
            self = .high
        case .high:
            self = .off
        }
    }
}
var ovenLight = TriStateSwitch.low
ovenLight.next()
// ovenLight is now equal to .high
ovenLight.next()
// ovenLight is now equal to .off


Type Methods:
You indicate type methods by writing the static keyword before the method’s func keyword. 
Classes can use the class keyword instead, to allow subclasses to override the superclass’s implementation of that method.

Note:
In Objective-C, you can define type-level methods only for Objective-C classes. 
In Swift, you can define type-level methods for all classes, structures, and enumerations. 
Each type method is explicitly scoped to the type it supports.

