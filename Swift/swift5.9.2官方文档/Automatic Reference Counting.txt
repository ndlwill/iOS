Swift uses Automatic Reference Counting (ARC) to track and manage your app’s memory usage. 
In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. 
ARC automatically frees up the memory used by class instances when those instances are no longer needed.

However, in a few cases ARC requires more information about the relationships between parts of your code in order to manage memory for you.
https://developer.apple.com/library/archive/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html

Reference counting applies only to instances of classes. 
Structures and enumerations are value types, not reference types, and aren’t stored and passed by reference.


==================================================How ARC Works:
Every time you create a new instance of a class, ARC allocates a chunk of memory to store information about that instance. 
This memory holds information about the type of the instance, together with the values of any stored properties associated with that instance.

Additionally, when an instance is no longer needed, ARC frees up the memory used by that instance so that the memory can be used for other purposes instead. 
This ensures that class instances don’t take up space in memory when they’re no longer needed.

However, if ARC were to deallocate an instance that was still in use, it would no longer be possible to access that instance’s properties, or call that instance’s methods. 
Indeed, if you tried to access the instance, your app would most likely crash.

To make sure that instances don’t disappear while they’re still needed, ARC tracks how many properties, constants, and variables are currently referring to each class instance. 
ARC will not deallocate an instance as long as at least one active reference to that instance still exists.

To make this possible, whenever you assign a class instance to a property, constant, or variable, 
that property, constant, or variable makes a strong reference to the instance. 
The reference is called a “strong” reference because it keeps a firm hold on that instance, and doesn’t allow it to be deallocated for as long as that strong reference remains.


==================================================ARC in Action:
Here’s an example of how Automatic Reference Counting works. 
This example starts with a simple class called Person, which defines a stored constant property called name:
class Person {
    let name: String
    init(name: String) {
        self.name = name
        print("\(name) is being initialized")
    }
    deinit {
        print("\(name) is being deinitialized")
    }
}

var reference1: Person?
var reference2: Person?
var reference3: Person?

reference1 = Person(name: "John Appleseed")
// Prints "John Appleseed is being initialized"

Note that the message "John Appleseed is being initialized" is printed at the point that you call the Person class’s initializer. This confirms that initialization has taken place.

Because the new Person instance has been assigned to the reference1 variable, there’s now a strong reference from reference1 to the new Person instance. 
Because there’s at least one strong reference, ARC makes sure that this Person is kept in memory and isn’t deallocated.

If you assign the same Person instance to two more variables, two more strong references to that instance are established:
reference2 = reference1
reference3 = reference1

There are now three strong references to this single Person instance.

If you break two of these strong references (including the original reference) by assigning nil to two of the variables, 
a single strong reference remains, and the Person instance isn’t deallocated:

reference1 = nil
reference2 = nil
ARC doesn’t deallocate the Person instance until the third and final strong reference is broken, at which point it’s clear that you are no longer using the Person instance:

reference3 = nil
// Prints "John Appleseed is being deinitialized"


Strong Reference Cycles Between Class Instances:
However, it’s possible to write code in which an instance of a class never gets to a point where it has zero strong references. 
This can happen if two class instances hold a strong reference to each other, 
such that each instance keeps the other alive. This is known as a strong reference cycle.

You resolve strong reference cycles by defining some of the relationships between classes as weak or unowned references instead of as strong references.

Here’s an example of how a strong reference cycle can be created by accident. 
This example defines two classes called Person and Apartment, which model a block of apartments and its residents:

class Person {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment?
    deinit { print("\(name) is being deinitialized") }
}

class Apartment {
    let unit: String
    init(unit: String) { self.unit = unit }
    var tenant: Person?
    deinit { print("Apartment \(unit) is being deinitialized") }
}

Every Person instance has a name property of type String and an optional apartment property that’s initially nil. 
The apartment property is optional, because a person may not always have an apartment.
Similarly, every Apartment instance has a unit property of type String and has an optional tenant property that’s initially nil. 
The tenant property is optional because an apartment may not always have a tenant.

var john: Person?
var unit4A: Apartment?

john = Person(name: "John Appleseed")
unit4A = Apartment(unit: "4A")

john!.apartment = unit4A
unit4A!.tenant = john

Unfortunately, linking these two instances creates a strong reference cycle between them.
The Person instance now has a strong reference to the Apartment instance, and the Apartment instance has a strong reference to the Person instance.
Therefore, when you break the strong references held by the john and unit4A variables, the reference counts don’t drop to zero, and the instances aren’t deallocated by ARC:
john = nil
unit4A = nil
Note that neither deinitializer was called when you set these two variables to nil.
The strong reference cycle prevents the Person and Apartment instances from ever being deallocated, causing a memory leak in your app.


==================================================Resolving Strong Reference Cycles Between Class Instances:
Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references.

Weak and unowned references enable one instance in a reference cycle to refer to the other instance without keeping a strong hold on it. 
The instances can then refer to each other without creating a strong reference cycle.

Use a weak reference when the other instance has a shorter lifetime — that is, when the other instance can be deallocated first.
In contrast, use an unowned reference when the other instance has the same lifetime or a longer lifetime.

Weak References:
A weak reference is a reference that doesn’t keep a strong hold on the instance it refers to, and so doesn’t stop ARC from disposing of the referenced instance. 
This behavior prevents the reference from becoming part of a strong reference cycle. 
You indicate a weak reference by placing the weak keyword before a property or variable declaration.

Because a weak reference doesn’t keep a strong hold on the instance it refers to, it’s possible for that instance to be deallocated while the weak reference is still referring to it.
Therefore, ARC automatically sets a weak reference to nil when the instance that it refers to is deallocated.
And, because weak references need to allow their value to be changed to nil at runtime, they’re always declared as variables, rather than constants, of an optional type.

You can check for the existence of a value in the weak reference, just like any other optional value, and you will never end up with a reference to an invalid instance that no longer exists.

Note:
Property observers aren’t called when ARC sets a weak reference to nil.

class Person {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment?
    deinit { print("\(name) is being deinitialized") }
}

class Apartment {
    let unit: String
    init(unit: String) { self.unit = unit }
    weak var tenant: Person?
    deinit { print("Apartment \(unit) is being deinitialized") }
}

The Person instance still has a strong reference to the Apartment instance, but the Apartment instance now has a weak reference to the Person instance.
This means that when you break the strong reference held by the john variable by setting it to nil, there are no more strong references to the Person instance:
john = nil
// Prints "John Appleseed is being deinitialized"

The only remaining strong reference to the Apartment instance is from the unit4A variable. 
If you break that strong reference, there are no more strong references to the Apartment instance:
unit4A = nil
// Prints "Apartment 4A is being deinitialized"

Note:
In systems that use garbage collection, weak pointers are sometimes used to implement a simple caching mechanism because objects with no strong references are deallocated only when memory pressure triggers garbage collection. 
However, with ARC, values are deallocated as soon as their last strong reference is removed, making weak references unsuitable for such a purpose.

Unowned References:
Like a weak reference, an unowned reference doesn’t keep a strong hold on the instance it refers to. 
Unlike a weak reference, however, an unowned reference is used when the other instance has the same lifetime or a longer lifetime.
You indicate an unowned reference by placing the unowned keyword before a property or variable declaration.

Unlike a weak reference, an unowned reference is expected to always have a value. 
As a result, marking a value as unowned doesn’t make it optional, and ARC never sets an unowned reference’s value to nil.

Important:
Use an unowned reference only when you are sure that the reference always refers to an instance that hasn’t been deallocated.
If you try to access the value of an unowned reference after that instance has been deallocated, you’ll get a runtime error.

In this data model, a customer may or may not have a credit card, but a credit card will always be associated with a customer.
A CreditCard instance never outlives the Customer that it refers to.
To represent this, the Customer class has an optional card property, but the CreditCard class has an unowned (and non-optional) customer property.

Because a credit card will always have a customer, you define its customer property as an unowned reference, to avoid a strong reference cycle:
class Customer {
    let name: String
    var card: CreditCard?
    init(name: String) {
        self.name = name
    }
    deinit { print("\(name) is being deinitialized") }
}

class CreditCard {
    let number: UInt64
    unowned let customer: Customer
    init(number: UInt64, customer: Customer) {
        self.number = number
        self.customer = customer
    }
    deinit { print("Card #\(number) is being deinitialized") }
}

Note

The number property of the CreditCard class is defined with a type of UInt64 rather than Int, to ensure that the number property’s capacity is large enough to store a 16-digit card number on both 32-bit and 64-bit systems.
var john: Customer?
john = Customer(name: "John Appleseed")
john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)

The Customer instance now has a strong reference to the CreditCard instance, and the CreditCard instance has an unowned reference to the Customer instance.

Because of the unowned customer reference, when you break the strong reference held by the john variable, there are no more strong references to the Customer instance:
Because there are no more strong references to the Customer instance, it’s deallocated. After this happens, there are no more strong references to the CreditCard instance, and it too is deallocated:
john = nil
// Prints "John Appleseed is being deinitialized"
// Prints "Card #1234567890123456 is being deinitialized"

Note:
The examples above show how to use safe unowned references. Swift also provides unsafe unowned references for cases where you need to disable runtime safety checks — for example, for performance reasons. 
As with all unsafe operations, you take on the responsibility for checking that code for safety.
You indicate an unsafe unowned reference by writing unowned(unsafe). 
If you try to access an unsafe unowned reference after the instance that it refers to is deallocated, your program will try to access the memory location where the instance used to be, which is an unsafe operation.


Unowned Optional References:
You can mark an optional reference to a class as unowned. In terms of the ARC ownership model, an unowned optional reference and a weak reference can both be used in the same contexts. 
The difference is that when you use an unowned optional reference, you’re responsible for making sure it always refers to a valid object or is set to nil.

class Department {
    var name: String
    var courses: [Course]
    init(name: String) {
        self.name = name
        self.courses = []
    }
}

class Course {
    var name: String
    unowned var department: Department
    unowned var nextCourse: Course?
    init(name: String, in department: Department) {
        self.name = name
        self.department = department
        self.nextCourse = nil
    }
}

Department maintains a strong reference to each course that the department offers. 
In the ARC ownership model, a department owns its courses. Course has two unowned references, one to the department and one to the next course a student should take
a course doesn’t own either of these objects.
Every course is part of some department so the department property isn’t an optional.
However, because some courses don’t have a recommended follow-on course, the nextCourse property is an optional.

let department = Department(name: "Horticulture")

let intro = Course(name: "Survey of Plants", in: department)
let intermediate = Course(name: "Growing Common Herbs", in: department)
let advanced = Course(name: "Caring for Tropical Plants", in: department)

intro.nextCourse = intermediate
intermediate.nextCourse = advanced
department.courses = [intro, intermediate, advanced]

Note:
The underlying type of an optional value is Optional, which is an enumeration in the Swift standard library. 
However, optionals are an exception to the rule that value types can’t be marked with unowned.
The optional that wraps the class doesn’t use reference counting, so you don’t need to maintain a strong reference to the optional.


==================================================Unowned References and Implicitly Unwrapped Optional Properties
The Person and Apartment example shows a situation where two properties, both of which are allowed to be nil, 
have the potential to cause a strong reference cycle. 
This scenario is best resolved with a weak reference.

The Customer and CreditCard example shows a situation where one property that’s allowed to be nil and another property that can’t be nil have the potential to cause a strong reference cycle. 
This scenario is best resolved with an unowned reference.

However, there’s a third scenario, in which both properties should always have a value, 
and neither property should ever be nil once initialization is complete. 
In this scenario, it’s useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.

This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, 
while still avoiding a reference cycle.

The example below defines two classes, Country and City, each of which stores an instance of the other class as a property. 
In this data model, every country must always have a capital city, and every city must always belong to a country. 
To represent this, the Country class has a capitalCity property, and the City class has a country property:

class Country {
    let name: String
    var capitalCity: City!
    init(name: String, capitalName: String) {
        self.name = name
        self.capitalCity = City(name: capitalName, country: self)
    }
}

class City {
    let name: String
    unowned let country: Country
    init(name: String, country: Country) {
        self.name = name
        self.country = country
    }
}

The initializer for City is called from within the initializer for Country.

Because capitalCity has a default nil value, a new Country instance is considered fully initialized as soon as the Country instance sets its name property within its initializer.
This means that the Country initializer can start to reference and pass around the implicit self property as soon as the name property is set. 
The Country initializer can therefore pass self as one of the parameters for the City initializer when the Country initializer is setting its own capitalCity property.

#####
All of this means that you can create the Country and City instances in a single statement, without creating a strong reference cycle, 
and the capitalCity property can be accessed directly, without needing to use an exclamation point to unwrap its optional value:
#####

var country = Country(name: "Canada", capitalName: "Ottawa")
print("\(country.name)'s capital city is called \(country.capitalCity.name)")
// Prints "Canada's capital city is called Ottawa"

In the example above, the use of an implicitly unwrapped optional means that all of the two-phase class initializer requirements are satisfied. 
The capitalCity property can be used and accessed like a non-optional value once initialization is complete, 
while still avoiding a strong reference cycle.


==================================================Strong Reference Cycles for Closures
A strong reference cycle can also occur if you assign a closure to a property of a class instance, 
and the body of that closure captures the instance. 
This capture might occur because the closure’s body accesses a property of the instance, 
such as self.someProperty, or because the closure calls a method on the instance, such as self.someMethod(). 
In either case, these accesses cause the closure to “capture” self, creating a strong reference cycle.

This strong reference cycle occurs because closures, like classes, are reference types. When you assign a closure to a property, 
you are assigning a reference to that closure. In essence, it’s the same problem as above — two strong references are keeping each other alive. 
However, rather than two class instances, this time it’s a class instance and a closure that are keeping each other alive.

Swift provides an elegant solution to this problem, known as a closure capture list.

The example below shows how you can create a strong reference cycle when using a closure that references self.
class HTMLElement {

    let name: String
    let text: String?


    lazy var asHTML: () -> String = {
        if let text = self.text {
            return "<\(self.name)>\(text)</\(self.name)>"
        } else {
            return "<\(self.name) />"
        }
    }


    init(name: String, text: String? = nil) {
        self.name = name
        self.text = text
    }


    deinit {
        print("\(name) is being deinitialized")
    }

}

The HTMLElement class defines a name property, which indicates the name of the element, such as "h1" for a heading element, "p" for a paragraph element, or "br" for a line break element.
HTMLElement also defines an optional text property, which you can set to a string that represents the text to be rendered within that HTML element.

However, because asHTML is a closure property rather than an instance method, you can replace the default value of the asHTML property with a custom closure, if you want to change the HTML rendering for a particular HTML element.

For example, the asHTML property could be set to a closure that defaults to some text if the text property is nil, in order to prevent the representation from returning an empty HTML tag:
let heading = HTMLElement(name: "h1")
let defaultText = "some default text"
heading.asHTML = {
    return "<\(heading.name)>\(heading.text ?? defaultText)</\(heading.name)>"
}
print(heading.asHTML())
// Prints "<h1>some default text</h1>"

Note:
The asHTML property is declared as a lazy property, 
because it’s only needed if and when the element actually needs to be rendered as a string value for some HTML output target. 
The fact that asHTML is a lazy property means that you can refer to self within the default closure, 
because the lazy property will not be accessed until after initialization has been completed and self is known to exist.

var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())
// Prints "<p>hello, world</p>"

Note:
The paragraph variable above is defined as an optional HTMLElement, so that it can be set to nil below to demonstrate the presence of a strong reference cycle.

Unfortunately, the HTMLElement class, as written above, creates a strong reference cycle between an HTMLElement instance and the closure used for its default asHTML value.

However, because the closure refers to self within its body (as a way to reference self.name and self.text), 
the closure captures self, which means that it holds a strong reference back to the HTMLElement instance.
A strong reference cycle is created between the two.

Note:
Even though the closure refers to self multiple times, it only captures one strong reference to the HTMLElement instance.

If you set the paragraph variable to nil and break its strong reference to the HTMLElement instance,
the strong reference cycle prevents deallocating both the HTMLElement instance and its closure:
paragraph = nil
Note that the message in the HTMLElement deinitializer isn’t printed, which shows that the HTMLElement instance isn’t deallocated.


==================================================Resolving Strong Reference Cycles for Closures
You resolve a strong reference cycle between a closure and a class instance by defining a capture list as part of the closure’s definition.
A capture list defines the rules to use when capturing one or more reference types within the closure’s body.
As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference.

Note:
Swift requires you to write self.someProperty or self.someMethod() (rather than just someProperty or someMethod()) whenever you refer to a member of self within a closure. 
This helps you remember that it’s possible to capture self by accident.

1. Defining a Capture List
Each item in a capture list is a pairing of the weak or unowned keyword with a reference to a class instance (such as self) or a variable initialized with some value (such as delegate = self.delegate). 
These pairings are written within a pair of square braces, separated by commas.

Place the capture list before a closure’s parameter list and return type if they’re provided:
lazy var someClosure = {
        [unowned self, weak delegate = self.delegate]
        (index: Int, stringToProcess: String) -> String in
    // closure body goes here
}

If a closure doesn’t specify a parameter list or return type because they can be inferred from context, 
place the capture list at the very start of the closure, followed by the in keyword:

lazy var someClosure = {
        [unowned self, weak delegate = self.delegate] in
    // closure body goes here
}

2. Weak and Unowned References
Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, 
and will always be deallocated at the same time.

Conversely, define a capture as a weak reference when the captured reference may become nil at some point in the future. 
Weak references are always of an optional type, and automatically become nil when the instance they reference is deallocated. 
This enables you to check for their existence within the closure’s body.

Note:
If the captured reference will never become nil, it should always be captured as an unowned reference, rather than a weak reference.

An unowned reference is the appropriate capture method to use to resolve the strong reference cycle in the HTMLElement example from Strong Reference Cycles for Closures above.
class HTMLElement {

    let name: String
    let text: String?


    lazy var asHTML: () -> String = {
            [unowned self] in
        if let text = self.text {
            return "<\(self.name)>\(text)</\(self.name)>"
        } else {
            return "<\(self.name) />"
        }
    }


    init(name: String, text: String? = nil) {
        self.name = name
        self.text = text
    }


    deinit {
        print("\(name) is being deinitialized")
    }

}

var paragraph: HTMLElement? = HTMLElement(name: "p", text: "hello, world")
print(paragraph!.asHTML())
// Prints "<p>hello, world</p>"

If you set the strong reference from the paragraph variable to nil, 
the HTMLElement instance is deallocated, as can be seen from the printing of its deinitializer message in the example below:
paragraph = nil
// Prints "p is being deinitialized"