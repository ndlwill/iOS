By default, Swift prevents unsafe behavior from happening in your code.
For example, Swift ensures that variables are initialized before they’re used, 
memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.

Swift also makes sure that multiple accesses to the same area of memory don’t conflict, 
by requiring code that modifies a location in memory to have exclusive access to that memory.
Because Swift manages memory automatically, most of the time you don’t have to think about accessing memory at all.


==================================================Conflicting Access to Memory
A conflicting access to memory can occur when different parts of your code are trying to access the same location in memory at the same time.

Note
If you’ve written concurrent or multithreaded code, conflicting access to memory might be a familiar problem.
For multithreaded code, use Thread Sanitizer to help detect conflicting access across threads.
https://developer.apple.com/documentation/xcode/diagnosing-memory-thread-and-crash-issues-early


==================================================Characteristics of Memory Access
There are three characteristics of memory access to consider in the context of conflicting access: whether the access is a read or a write, the duration of the access, and the location in memory being accessed.
Specifically, a conflict occurs if you have two accesses that meet all of the following conditions:
At least one is a write access or a nonatomic access.
They access the same location in memory.
Their durations overlap.


The difference between a read and write access is usually obvious: a write access changes the location in memory, but a read access doesn’t.
The location in memory refers to what is being accessed — for example, a variable, constant, or property.
The duration of a memory access is either instantaneous or long-term.

Overlapping accesses appear primarily in code that uses in-out parameters in functions and methods or mutating methods of a structure.


==================================================Conflicting Access to In-Out Parameters
A function has long-term write access to all of its in-out parameters. 

