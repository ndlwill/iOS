Note
An instance of a class is traditionally known as an object.

Comparing Structures and Classes:
Structures and classes in Swift have many things in common. Both can:
Define properties to store values
Define methods to provide functionality
Define subscripts to provide access to their values using subscript syntax
Define initializers to set up their initial state
Be extended to expand their functionality beyond a default implementation
Conform to protocols to provide standard functionality of a certain kind

Classes have additional capabilities that structures don’t have:
Inheritance enables one class to inherit the characteristics of another.
Type casting enables you to check and interpret the type of a class instance at runtime.
Deinitializers enable an instance of a class to free up any resources it has assigned.
Reference counting allows more than one reference to a class instance.

The additional capabilities that classes support come at the cost of increased complexity. 
As a general guideline, prefer structures because they’re easier to reason about, and use classes when they’re appropriate or necessary.

Note:
Classes and actors share many of the same characteristics and behaviors.


Memberwise Initializers for Structure Types:
All structures have an automatically generated memberwise initializer, which you can use to initialize the member properties of new structure instances.
Unlike structures, class instances don’t receive a default memberwise initializer.


Structures and Enumerations Are Value Types:
A value type is a type whose value is copied when it’s assigned to a variable or constant, or when it’s passed to a function.


Note:
Collections defined by the Swift standard library like arrays, dictionaries, and strings use an optimization to reduce the performance cost of copying. 
Instead of making a copy immediately, these collections share the memory where the elements are stored between the original instance and any copies. 
If one of the copies of the collection is modified, the elements are copied just before the modification. 
The behavior you see in your code is always as if a copy took place immediately.

let hd = Resolution(width: 1920, height: 1080)
var cinema = hd
It then declares a variable called cinema and sets it to the current value of hd. 
Because Resolution is a structure, a copy of the existing instance is made, and this new copy is assigned to cinema.
Even though hd and cinema now have the same width and height, they’re two completely different instances behind the scenes.

enum CompassPoint {
    case north, south, east, west
    mutating func turnNorth() {
        self = .north
    }
}
var currentDirection = CompassPoint.west
let rememberedDirection = currentDirection
currentDirection.turnNorth()
print("The current direction is \(currentDirection)")
print("The remembered direction is \(rememberedDirection)")
// Prints "The current direction is north"
// Prints "The remembered direction is west"


Classes Are Reference Types:
Unlike value types, reference types are not copied when they’re assigned to a variable or constant, or when they’re passed to a function. 
Rather than a copy, a reference to the same existing instance is used.
let tenEighty = VideoMode()
tenEighty.resolution = hd
tenEighty.interlaced = true
tenEighty.name = "1080i"
tenEighty.frameRate = 25.0
let alsoTenEighty = tenEighty
alsoTenEighty.frameRate = 30.0

Note that tenEighty and alsoTenEighty are declared as constants, rather than variables. 
However, you can still change tenEighty.frameRate and alsoTenEighty.frameRate because the values of the tenEighty and alsoTenEighty constants themselves don’t actually change.
tenEighty and alsoTenEighty themselves don’t “store” the VideoMode instance — instead, they both refer to a VideoMode instance behind the scenes.
It’s the frameRate property of the underlying VideoMode that’s changed, not the values of the constant references to that VideoMode.


Identity Operators:
It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class.
Identical to (===)
Not identical to (!==)

Use these operators to check whether two constants or variables refer to the same single instance:
if tenEighty === alsoTenEighty {
    print("tenEighty and alsoTenEighty refer to the same VideoMode instance.")
}
// Prints "tenEighty and alsoTenEighty refer to the same VideoMode instance."

Note that identical to (represented by three equal signs, or ===) doesn’t mean the same thing as equal to (represented by two equal signs, or ==).

Identical to means that two constants or variables of class type refer to exactly the same class instance. 
Equal to means that two instances are considered equal or equivalent in value, for some appropriate meaning of equal, as defined by the type’s designer.

When you define your own custom structures and classes, it’s your responsibility to decide what qualifies as two instances being equal. 
The process of defining your own implementations of the == and != operators is described in Equivalence Operators.


Pointers:
If you have experience with C, C++, or Objective-C, you may know that these languages use pointers to refer to addresses in memory.

A Swift constant or variable that refers to an instance of some reference type is similar to a pointer in C, 
but isn’t a direct pointer to an address in memory, and doesn’t require you to write an asterisk (*) to indicate that you are creating a reference.
Instead, these references are defined like any other constant or variable in Swift. 
The Swift standard library provides pointer and buffer types that you can use if you need to interact with pointers directly — see Manual Memory Management.
https://developer.apple.com/documentation/swift/manual-memory-management