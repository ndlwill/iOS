Functions without a defined return type return a special value of type Void. 
This is simply an empty tuple, which is written as ().


Note:
The code you write as an implicit return value needs to return some value. 
For example, you can’t use print(13) as an implicit return value. 
However, you can use a function that never returns like fatalError("Oh no!") as an implicit return value, 
because Swift knows that the implicit return doesn’t happen.

Function Argument Labels and Parameter Names:
The argument label is used when calling the function; each argument is written in the function call with its argument label before it.
The parameter name is used in the implementation of the function. By default, parameters use their parameter name as their argument label.
Specifying Argument Labels:
You write an argument label before the parameter name, separated by a space:
func someFunction(argumentLabel parameterName: Int) {
    // In the function body, parameterName refers to the argument value
    // for that parameter.
}

func greet(person: String, from hometown: String) -> String {
    return "Hello \(person)!  Glad you could visit from \(hometown)."
}
print(greet(person: "Bill", from: "Cupertino"))
// Prints "Hello Bill!  Glad you could visit from Cupertino."
The use of argument labels can allow a function to be called in an expressive, sentence-like manner, 
while still providing a function body that’s readable and clear in intent.


func someFunction(_ firstParameterName: Int, secondParameterName: Int) {
    // In the function body, firstParameterName and secondParameterName
    // refer to the argument values for the first and second parameters.
}
someFunction(1, secondParameterName: 2)


Default Parameter Values:
Place parameters that don’t have default values at the beginning of a function’s parameter list, 
before the parameters that have default values. 
Parameters that don’t have default values are usually more important to the function’s meaning — writing them first makes it easier to recognize that the same function is being called, regardless of whether any default parameters are omitted.


Variadic Parameters:
The values passed to a variadic parameter are made available within the function’s body as an array of the appropriate type. 
For example, a variadic parameter with a name of numbers and a type of Double... is made available within the function’s body as a constant array called numbers of type [Double].
func arithmeticMean(_ numbers: Double...) -> Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
arithmeticMean(1, 2, 3, 4, 5)
// returns 3.0, which is the arithmetic mean of these five numbers


In-Out Parameters:
Function parameters are constants by default.
Trying to change the value of a function parameter from within the body of that function results in a compile-time error.
If you want a function to modify a parameter’s value, and you want those changes to persist after the function call has ended, define that parameter as an in-out parameter instead.
You can only pass a variable as the argument for an in-out parameter.
Note:
In-out parameters can’t have default values, and variadic parameters can’t be marked as inout.
func swapTwoInts(_ a: inout Int, _ b: inout Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}
var someInt = 3
var anotherInt = 107
swapTwoInts(&someInt, &anotherInt)


Function Types:
func addTwoInts(_ a: Int, _ b: Int) -> Int {
    return a + b
}
func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {
    return a * b
}
The type of both of these functions is (Int, Int) -> Int. This can be read as:
“A function that has two parameters, both of type Int, and that returns a value of type Int.”
func printHelloWorld() {
    print("hello, world")
}
The type of this function is () -> Void, or “a function that has no parameters, and returns Void.”


Using Function Types:
You use function types just like any other types in Swift.
var mathFunction: (Int, Int) -> Int = addTwoInts


Function Types as Parameter Types:
func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
    print("Result: \(mathFunction(a, b))")
}
printMathResult(addTwoInts, 3, 5)


Function Types as Return Types:
func stepForward(_ input: Int) -> Int {
    return input + 1
}
func stepBackward(_ input: Int) -> Int {
    return input - 1
}
func chooseStepFunction(backward: Bool) -> (Int) -> Int {
    return backward ? stepBackward : stepForward
}
var currentValue = 3
let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)


Nested Functions:
You can also define functions inside the bodies of other functions, known as nested functions.
Nested functions are hidden from the outside world by default, but can still be called and used by their enclosing function. 
An enclosing function can also return one of its nested functions to allow the nested function to be used in another scope.
func chooseStepFunction(backward: Bool) -> (Int) -> Int {
    func stepForward(input: Int) -> Int { return input + 1 }
    func stepBackward(input: Int) -> Int { return input - 1 }
    return backward ? stepBackward : stepForward
}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!