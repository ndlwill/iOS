Subclass to add or override functionality.

Classes can also add property observers to inherited properties in order to be notified when the value of a property changes.
Property observers can be added to any property, regardless of whether it was originally defined as a stored or computed property.


Defining a Base Class:
Any class that doesn’t inherit from another class is known as a base class.
Note:
Swift classes don’t inherit from a universal base class. 
Classes you define without specifying a superclass automatically become base classes for you to build upon.


Overriding:
The override keyword also prompts the Swift compiler to check that your overriding class’s superclass (or one of its parents) has a declaration that matches the one you provided for the override. 
This check ensures that your overriding definition is correct.

An overridden method named someMethod() can call the superclass version of someMethod() by calling super.someMethod() within the overriding method implementation.
An overridden property called someProperty can access the superclass version of someProperty as super.someProperty within the overriding getter or setter implementation.
An overridden subscript for someIndex can access the superclass version of the same subscript as super[someIndex] from within the overriding subscript implementation.

Overriding Property Getters and Setters:
You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. 
You can’t, however, present an inherited read-write property as a read-only property.

Note:
If you provide a setter as part of a property override, you must also provide a getter for that override.
If you don’t want to modify the inherited property’s value within the overriding getter, 
you can simply pass through the inherited value by returning super.someProperty from the getter, 
where someProperty is the name of the property you are overriding.

class Car: Vehicle {
    var gear = 1
    override var description: String {
        return super.description + " in gear \(gear)"
    }
}


Overriding Property Observers:
Note:
You can’t add property observers to inherited constant stored properties or inherited read-only computed properties. 
The value of these properties can’t be set, and so it isn’t appropriate to provide a willSet or didSet implementation as part of an override.
Note also that you can’t provide both an overriding setter and an overriding property observer for the same property. 
If you want to observe changes to a property’s value, 
and you are already providing a custom setter for that property, you can simply observe any value changes from within the custom setter.

class AutomaticCar: Car {
    override var currentSpeed: Double {
        didSet {
            gear = Int(currentSpeed / 10.0) + 1
        }
    }
}


Preventing Overrides:
You can prevent a method, property, or subscript from being overridden by marking it as final. 
Do this by writing the final modifier before the method, property, 
or subscript’s introducer keyword (such as final var, final func, final class func, and final subscript).

Methods, properties, or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.

You can mark an entire class as final by writing the final modifier before the class keyword in its class definition (final class). 
Any attempt to subclass a final class is reported as a compile-time error.