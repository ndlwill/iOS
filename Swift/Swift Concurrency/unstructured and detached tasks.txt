https://www.donnywals.com/understanding-unstructured-and-detached-tasks-in-swift/


Creating unstructured tasks with Task.init:
Task {
  // perform work
}

An unstructured task is a task that has no parent / child relationship with the place it called from, so it doesn’t participate in structured concurrency. 
Instead, we create a completely new island of concurrency with its own scopes and lifecycle.
However, that doesn’t mean an unstructured task is created entirely independent from everything else.

An unstructured task will inherit two pieces of context from where it’s created:
The actor we’re currently running on (if any)
Task local values

The first point means that any tasks that we create inside of an actor will participate in actor isolation for that specific actor. 
For example, we can safely access an actor’s methods and properties from within a task that’s created inside of an actor:
actor SampleActor {
  var someCounter = 0

  func incrementCounter() {
    Task {
      someCounter += 1
    }
  }
}

If we were to mutate someCounter from a context that is not running on this specific actor we’d have to prefix our someCounter += 1 line with an await since we might have to wait for the actor to be available.
This is not the case for an unstructured task that we’ve created from within an actor.

Note that our task does not have to complete before the incrementCounter() method returns. 
That shows us that the unstructured task that we created isn’t participating in structured concurrency. 
If it were, incrementCounter() would not be able to complete before our task completed.


Similarly, if we spawn a new unstructured task from a context that is annotated with @MainActor, the task will run its body on the main actor:
@MainActor
func fetchData() {
  Task {
    // this task runs its body on the main actor
    let data = await fetcher.getData()

    // self.models is updated on the main actor
    self.models = data
  }
}

It’s important to note that the await fetcher.getData() line does not block the main actor.
We’re calling getData() from a context that’s running on the main actor but that does not mean that getData() itself will run its body on the main actor.
Unless getData() is explicitly associated with the main actor it will always run on a background thread.

However, the task does run its body on the main actor so once we’re no longer waiting for the result of getData(), 
our task resumes and self.models is updated on the main actor.

Note that while we await something, our task is suspended which allows the main actor to do other work while we wait. 
We don’t block the main actor by having an await on it. It’s really quite the opposite.


When to use unstructured tasks:
You will most commonly create unstructured tasks when you want to call an async annotated function from a place in your code that is not yet async.
For example, you might want to fetch some data in a viewDidLoad method, or you might want to start iterating over a couple of async sequences from within a single place.


Another reason to create an unstructured task might be if you want to perform a piece of work independently of the function you’re in.
This could be useful when you’re implementing a fire-and-forget style logging function for example.
The log might need to be sent off to a server, but as a caller of the log function I’m not interested in waiting for that operation to complete.
func log(_ string: String) {
  print("LOG", string)
  Task {
    await uploadMessage(string)
    print("message uploaded")
  }
}

#####
We could have made the method above async but then we wouldn’t be able to return from that method until the log message was uploaded. 
By putting the upload in its own unstructured task we allow log(_:) to return while the upload is still ongoing.
#####



Creating detached tasks with Task.detached:
Detached tasks are in many ways similar to unstructured tasks.
They don’t create a parent / child relationship, 
they don’t participate in structured concurrency and they create a brand new island of concurrency that we can work with.

The key difference is that a detached task will not inherit anything from the context that it was created in. 
This means that a detached task will not inherit the current actor, and it will not inherit task local values.


Consider the example you saw earlier:
actor SampleActor {
  var someCounter = 0

  func incrementCounter() {
    Task {
      someCounter += 1
    }
  }
}
Because we used a unstructed task in this example, we were able to interact with our actor’s mutable state without awaiting it.


Now let’s see what happens when we make a detached task instead:
actor SampleActor {
  var someCounter = 0

  func incrementCounter() {
    Task.detached {
      // Actor-isolated property 'someCounter' can not be mutated from a Sendable closure
      // Reference to property 'someCounter' in closure requires explicit use of 'self' to make capture semantics explicit
      someCounter += 1
    }
  }
}
The compiler now sees that we’re no longer on the SampleActor inside of our detached task. 
This means that we have to interact with the actor by calling its methods and properties with an await.


Similarly, if we create a detached task from an @MainActor annotated method, the detached task will not run its body on the main actor:
@MainActor
func fetchData() {
  Task.detached {
    // this task runs its body on a background thread
    let data = await fetcher.getData()

    // self.models is updated on a background thread
    self.models = data
  }
}

Note that detaching our task has no impact at all on where getData() executed.
###
Since getData() is an async function it will always run on a background thread unless the method was explicitly annotated with an @MainActor annotation.
###
This is true regardless of which actor or thread we call getData() from.
It’s not the callsite that decides where a function runs. It’s the function itself.



When to use detached tasks:
Using a detached task only makes sense when you’re performing work inside of the task body that you want to run away from any actors no matter what. 
If you’re awaiting something inside of the detached task to make sure the awaited thing runs in the background, a detached task is not the tool you should be using.

###
Even if you only have a slow for loop inside of a detached task, 
or you're encoding a large amount of JSON, it might make more sense to put that work in an async function so you can get the benefits of structured concurrency (the work must complete before we can return from the calling function) as well as the benefits of running in the background (async functions run in the background by default).
###

So a detached task really only makes sense if the work you’re doing should be away from the main thread, 
doesn’t involve awaiting a bunch of functions, 
and the work you’re doing should not participate in structured concurrency.

例子: Background Data Processing （func performDataProcessing()）
// Simulate a data processing function
func processData(_ data: [Int]) -> [Int] {
    // Heavy computation
    return data.map { $0 * 2 }
}

// Simulate fetching data from a network request
func fetchData() async -> [Int] {
    // Mock data fetched from network
    return Array(1...1_000_000)
}

// Perform the data processing in a detached task
func performDataProcessing() {
    Task.detached {
        // Fetch data
        let data = await fetchData()
        
        // Process data in the background
        let processedData = processData(data)
        
        // Print a small part of the result to verify
        print("Processed Data: \(processedData.prefix(10))")
    }
}

// Call the function to start processing
performDataProcessing()



// ==========func performDataProcessing() async -> [Int]
import Foundation

// Simulate a data processing function
func processData(_ data: [Int]) -> [Int] {
    // Heavy computation
    return data.map { $0 * 2 }
}

// Simulate fetching data from a network request
func fetchData() async -> [Int] {
    // Mock data fetched from network
    return Array(1...1_000_000)
}

// Perform the data processing in a detached task
func performDataProcessing() async -> [Int] {
    // Use async let to concurrently fetch and process data
    async let data: [Int] = fetchData()
    let processedData = await Task.detached { () -> [Int] in
        let data = await data
        return processData(data)
    }.value
    
    return processedData
}

// Main function to call performDataProcessing and handle the result
func main() async {
    let result = await performDataProcessing()
    print("Processed Data: \(result.prefix(10))")
}

// Start the async main function
Task {
    await main()
}

###
As a rule of thumb I avoid detached tasks until I find that I really need one. Which is only very sporadically.
###


In Summary:
You learned that unstructured tasks inherit context while detached tasks do not. 
You also learned that neither a detached task nor an unstructured task becomes a child task of their context because they don’t participate in structured concurrency.

You learned that unstructured tasks are the preferred way to create new tasks.
You saw how unstructured tasks inherit the actor they are created from, 
and you learned that awaiting something from within a task does not ensure that the awaited thing runs on the same actor as your task.

After that, you learned how detached tasks are unstructured, but they don’t inherit any context from when they are created.
In practice this means that they always run their bodies in the background.
However, this does not ensure that awaited functions also run in the background.
An @MainActor annotated function will always run on the main actor, and any async method that’s not constrained to the main actor will run in the background. 
This behavior makes detached tasks a tool that should only be used when no other tool solves the problem you’re solving.



==================================================
https://onevcat.com/2021/09/structured-concurrency/

override func viewDidLoad() {
  super.viewDidLoad()    
  withUnsafeCurrentTask { task in
    // 1
    print(task as Any)  // => nil
  }
  Task {
    // 2
    await foo()
  }
}

func foo() async {
  withUnsafeCurrentTask { task in
    // 3
    if let task = task {
      // 4
      print("Cancelled: \(task.isCancelled)")
      // => Cancelled: false

      print(task.priority)
      // TaskPriority(rawValue: 33)
    } else {
      print("No task")
    }
  }
}
withUnsafeCurrentTask 本身不是异步函数，你也可以在普通的同步函数中使用它。
如果当前的函数并没有运行在任何任务上下文环境中，也就是说，到 withUnsafeCurrentTask 为止的调用链中如果没有异步函数的话，这里得到的 task 会是 nil。
使用 Task 的初始化方法，可以得到一个新的任务环境。
对于 foo 的调用，发生在上一步的 Task 闭包作用范围中，它的运行环境就是这个新创建的 Task。
对于获取到的 task，可以访问它的 isCancelled 和 priority 属性检查它是否已经被取消以及当前的优先级。我们甚至可以调用 cancel() 来取消这个任务。


使用 withUnsafeCurrentTask 获取到的任务实际上是一个 UnsafeCurrentTask 值。
和 Swift 中其他的 Unsafe 系 API 类似，Swift 仅保证它在 withUnsafeCurrentTask 的闭包中有效。
你不能存储这个值，也不能在闭包之外调用或访问它的属性和方法，那会导致未定义的行为。

因为检查当前任务的状态相对是比较常用的操作，Swift 为此准备了一个“简便方法”：使用 Task 的静态属性来获取当前状态，比如：
extension Task where Success == Never, Failure == Never {
  static var isCancelled: Bool { get }
  static var currentPriority: TaskPriority { get }
}
虽然被定义为 static var，但是它们并不表示针对所有 Task 类型通用的某个全局属性，而是表示当前任务的情况。
因为一个异步函数的运行环境必须有且仅会有一个任务上下文，所以使用 static 变量来表示这唯一一个任务的特性，是可以理解的。


Task {
  let t1 = Task {
    print("t1: \(Task.isCancelled)")
  }

  let t2 = Task {
    print("t2: \(Task.isCancelled)")
  }

  t1.cancel()
  print("t: \(Task.isCancelled)")
}

// 输出：
// t: false
// t1: true
// t2: false

上例中虽然 t1 和 t2 是在外层 Task 中再新生成并进行并发的，但是它们之间没有从属关系，并不是结构化的。
这一点从 t: false 先于其他输出就可以看出，t1 和 t2 的执行都是在外层 Task 闭包结束后才进行的，它们逃逸出去了，这和结构化并发的收束规定不符。

想要创建结构化的并发任务，就需要让内层的 t1 和 t2 与外层 Task 具有某种从属关系。
你可以已经猜到了，外层任务作为根节点，内层任务作为叶子节点，就可以使用树的数据结构，来描述各个任务的从属关系，并进而构建结构化的并发了。
在 Swift 并发中，在任务树上创建一个叶子节点，有两种方法：通过任务组 (task group) 或是通过 async let 的异步绑定语法。

任务组:
struct TaskGroupSample {
  func start() async {
    print("Start")
    // 1
    await withTaskGroup(of: Int.self) { group in
      for i in 0 ..< 3 {
        // 2
        group.addTask {
          await work(i)
        }
      }
      print("Task added")

      // 4
      for await result in group {
        print("Get result: \(result)")
      }
      // 5
      print("Task ended")
    }

    print("End")
  }

  private func work(_ value: Int) async -> Int {
    // 3
    print("Start work \(value)")
    await Task.sleep(UInt64(value) * NSEC_PER_SEC)
    print("Work \(value) done")
    return value
  }
}

func withTaskGroup<ChildTaskResult, GroupResult>(
  of childTaskResultType: ChildTaskResult.Type, 
  returning returnType: GroupResult.Type = GroupResult.self,
  body: (inout TaskGroup<ChildTaskResult>) async -> GroupResult
) async -> GroupResult

childTaskResultType 正如其名，我们需要指定子任务们的返回类型。
同一个任务组中的子任务只能拥有同样的返回类型，这是为了让 TaskGroup 的 API 更加易用，让它可以满足带有强类型的 AsyncSequence 协议所需要的假设。
returning 定义了整个任务组的返回值类型，它拥有默认值，通过推断就可以得到，我们一般不需要理会。
在 body 的参数中能得到一个 inout 修饰的 TaskGroup，我们可以通过使用它来向当前任务上下文添加结构化并发子任务。
addTask API 把新的任务添加到当前任务中。被添加的任务会在调度器获取到可用资源后立即开始执行。在这里的例子里，for...in 循环中的三个任务会被立即添加到任务组里，并开始执行。
group 满足 AsyncSequence，因此我们可以使用 for await 的语法来获取子任务的执行结果。
group 中的某个任务完成时，它的结果将被放到异步序列的缓冲区中。
每当 group 的 next 会被调用时，如果缓冲区里有值，异步序列就将它作为下一个值给出；如果缓冲区为空，那么就等待下一个任务完成，这是异步序列的标准行为。
for await 的结束意味着异步序列的 next 方法返回了 nil，此时group 中的子任务已经全部执行完毕了，withTaskGroup 的闭包也来到最后。接下来，外层的 “End” 也会被输出。整个结构化并发结束执行。

Task {
  await TaskGroupSample().start()
}

// 输出：
// Start
// Task added
// Start work 0
// Start work 1
// Start work 2
// Work 0 done
// Get result: 0
// Work 1 done
// Get result: 1
// Work 2 done
// Get result: 2
// Task ended
// End

由 work 定义的三个异步操作并发执行，它们各自运行在独自的子任务空间中。这些子任务在被添加后即刻开始执行，并最终在离开 group 作用域时再汇集到一起。

隐式等待
为了获取子任务的结果，我们在上例中使用 for await 明确地等待 group 完成。
这从语义上明确地满足结构化并发的要求：子任务会在控制流到达底部前结束。
不过一个常见的疑问是，其实编译器并没有强制我们书写 for await 代码。如果我们因为某种原因，比如由于用不到这些结果，而导致忘了等待 group，会发生什么呢？
即使我们没有明确 await 任务组，编译器在检测到结构化并发作用域结束时，会为我们自动添加上 await 并在等待所有任务结束后再继续控制流。比如，在上面的代码中，如果我们将 for await 部分删去：
await withTaskGroup(of: Int.self) { group in
    for i in 0 ..< 3 {
        group.addTask {
            await work(i)
        }
    }
    print("Task added")

    // for await...

    print("Task ended")
}

print("End")

// Start
// Task added
// Task ended
// Start work 0
// ...
// Work 2 done
// End
虽然 “Task ended” 的输出似乎提早了，但代表整个任务组完成的 “End” 的输出依然处于最后，它一定会在子任务全部完成之后才发生。

对于结构化的任务组，编译器会为在离开作用域时我们自动生成 await group 的代码，上面的代码其实相当于：
await withTaskGroup(of: Int.self) { group in
  for i in 0 ..< 3 {
    group.addTask {
      await work(i)
    }
  }
  print("Task added")

  // 编译器自动生成的代码
  for await _ in group { }
}

print("End")

它满足结构化并发控制流的单入单出，将子任务的生命周期控制在任务组的作用域内，这也是结构化并发的最主要目的。
即使我们手动 break 了 group 中的部分结果，然后退出了这个异步序列，结构化并发依然会保证在整个闭包退出前，让所有的子任务得以完成：
await withTaskGroup(of: Int.self) { group in
  for i in 0 ..< 3 {
    group.addTask {
      await work(i)
    }
  }
  print("Task added")
  for await result in group {
    print("Get result: \(result)")
    // 在首个子任务完成后就跳出
    break
  }
  print("Task ended")

  // 编译器自动生成的代码
  await group.waitForAll()
}



let v: Int = await withTaskGroup(of: Int.self) { group in
  var value = 0
  for i in 0 ..< 3 {
    group.addTask {
      return await work(i)
    }
  }
  for await result in group {
    value += result
  }
  return value
}
print("End. Result: \(v)")


一种很常见的错误，是把 value += result 的逻辑写到 addTask 中

let v: Int = await withTaskGroup(of: Int.self) { group in
  var value = 0
  for i in 0 ..< 3 {
    group.addTask {
      let result = await work(i)
      value += result
      return result
    }
  }

  // 等待所有子任务完成
  await group.waitForAll()
  return value
}
这样的做法会带来一个编译错误
Mutation of captured var ‘value’ in concurrently-executing code

在将代码通过 addTask 添加到任务组时，我们必须有清醒的认识：这些代码有可能以并发方式同时运行。编译器可以检测到这里我们在一个明显的并发上下文中改变了某个共享状态。
不加限制地从并发环境中访问是危险操作，可能造成崩溃。得益于结构化并发，现在编译器可以理解任务上下文的区别，在静态检查时就发现这一点，从而从根本上避免了这里的内存风险。

即使只是读取这个 var value 值，也是不被允许的
await withTaskGroup(of: Int.self) { group in
  var value = 0
  for i in 0 ..< 3 {
    group.addTask {
      print("Value: \(value)")
      return await work(i)
    }
  }
}

将给出错误
Reference to captured var ‘value’ in concurrently-executing code

和上面修改 value 的道理一样，由于 value 可能在并发操作执行的同时被外界改变，这样的访问也是不安全的。
如果我们能保证 value 的值不会被更改的话，可以把 var value 的声明改为 let value 来避免这个错误
await withTaskGroup(of: Int.self) { group in
  // var value = 0
  let value = 0

  // ...
}

或者使用 [value] 的语法，来捕获当前的 value 值。由于 value 是值类型的值，因此它将会遵循值语义，被复制到 addTask 闭包内使用。子任务闭包内的访问将不再使用闭包外的内存，从而保证安全：
await withTaskGroup(of: Int.self) { group in
  var value = 0
  for i in 0 ..< 3 {
    // 用 [value] 捕获当前的 value 值 0
    group.addTask { [value] in
      let result = await work(i)
      print("Value: \(value)") // Value: 0
      return result
    }
  }
  // 将 value 改为 100
  value = 100

  // ...
}


不过，如果我们把 value 再向上提到类的成员一级的话，这个静态检查将失去作用：
// 错误的代码，不要这样做
class TaskGroupSample {
  var value = 0
  func start() async {
    await withTaskGroup(of: Int.self) { group in
      for i in 0 ..< 3 {
        group.addTask {

        // 可以访问 value
        print("Value: \(self.value)")

        // 可以操作 value
        let result = await self.work(i)
        self.value += result

        return result
      }
    }
  }

  // ...
  }
}


任务组逃逸:
和 withUnsafeCurrentTask 中的 task 类似，withTaskGroup 闭包中的 group 也不应该被外部持有并在作用范围之外使用。
// 错误的代码，不要这样做
func start() async {
  var g: TaskGroup<Int>? = nil
  await withTaskGroup(of: Int.self) { group in
    g = group
    //...
  }
  g?.addTask {
    await work(1)
  }
  print("End")
}



async let 异步绑定:
除了任务组以外，async let 是另一种创建结构化并发子任务的方式。
func start() async {
  print("Start")
  async let v0 = work(0)
  async let v1 = work(1)
  async let v2 = work(2)
  print("Task added")

  let result = await v0 + v1 + v2
  print("Task ended")
  print("End. Result: \(result)")
}

async let 和 let 类似，它定义一个本地常量，并通过等号右侧的表达式来初始化这个常量。区别在于，这个初始化表达式必须是一个异步函数的调用，通过将这个异步函数“绑定”到常量值上，Swift 会创建一个并发执行的子任务，并在其中执行该异步函数。
async let 赋值后，子任务会立即开始执行。如果想要获取执行的结果 (也就是子任务的返回值)，可以对赋值的常量使用 await 等待它的完成。
在上例中，我们使用了单一 await 来等待 v0、v1 和 v2 完成。和 try 一样，对于有多个表达式都需要暂停等待的情况，我们只需要使用一个 await 就可以了。当然，如果我们愿意，也可以把三个表达式分开来写：
let result0 = await v0
let result1 = await v1
let result2 = await v2

let result = result0 + result1 + result2

需要特别强调，虽然这里我们顺次进行了 await，看起来好像是在等 v0 求值完毕后，再开始 v1 的暂停；然后在 v1 求值后再开始 v2。但是实际上，在 async let 时，这些子任务就一同开始以并发的方式进行了。

修改 await 的顺序，会发生什么呢？
let result1 = await v1
let result2 = await v2
let result0 = await v0

let result = result0 + result1 + result2
如果是考察每个子任务实际完成的时序，那么答案是没有变化：在 async let 创建子任务时，这个任务就开始执行了，因此 v0、v1 和 v2 真正执行的耗时，依旧是 0 秒，1 秒和 2 秒。
但是，使用 await 最终获取 v0 值的时刻，是严格排在获取 v2 值之后的：当 v0 任务完成后，它的结果将被暂存在它自身的续体栈上，等待执行上下文通过 await 切换到自己时，才会把结果返回。
也就是说在上例中，通过 async let 把任务绑定并开始执行后，await v1 会在 1 秒后完成；再经过 1 秒时间，await v2 完成；然后紧接着，await v0 会把 2 秒之前就已经完成的结果立即返回给 result0

这个例子中虽然最终的时序上会和之前有细微不同，但是这并没有违反结构化并发的规定。而且在绝大多数场景下，这也不会影响并发的结果和逻辑。


隐式取消:
在使用 async let 时，编译器也没有强制我们书写类似 await v0 这样的等待语句。
如果没有 await，那么 Swift 并发会在被绑定的常量离开作用域时，隐式地将绑定的子任务取消掉，然后进行 await。也就是说，对于这样的代码：
func start() async {
  async let v0 = work(0)

  print("End")
}

它等效于：

func start() async {
  async let v0 = work(0)

  print("End")

  // 下面是编译器自动生成的伪代码
  // 注意和 Task group 的不同

  // v0 绑定的任务被取消
  // 伪代码，实际上绑定中并没有 `task` 这个属性
  v0.task.cancel()
  // 隐式 await，满足结构化并发
  _ = await v0    
}

和 TaskGroup API 的不同之处在于，被绑定的任务将先被取消，然后才进行 await。


嵌套使用 withTaskGroup:
func start() async {
  // 第一层任务组
  await withTaskGroup(of: Int.self) { group in
    group.addTask {

      // 第二层任务组
      await withTaskGroup(of: Int.self) { innerGroup in
        innerGroup.addTask {
          await work(0)
        }
        innerGroup.addTask {
          await work(2)
        }

        return await innerGroup.reduce(0) { 
          result, value in
          result + value
        }
      }

    }
    group.addTask {
      await work(1)
    }
  }
  print("End")
}

在结构化并发的任务模型中，子任务会从其父任务中继承任务优先级以及任务的本地值 (task local value)；在处理任务取消时，除了父任务会将取消传递给子任务外，在子任务中的抛出也会将取消向上传递。


func start() async {
  async let v02: Int = {
    async let v0 = work(0)
    async let v2 = work(2)
    return await v0 + v2
  }()

  async let v1 = work(1)
  _ = await v02 + v1
  print("End")
}
这里在 v02 等号右侧的是一个匿名的异步函数闭包调用，其中通过两个新的 async let 开始了嵌套的子任务。
上例中的写法和下面这样的 await 有本质不同:
func start() async {
  async let v02: Int = {
    return await work(0) + work(2)
  }()

  // ...
}
await work(0) + work(2) 将会顺次执行 work(0) 和 work(2)，并把它们的结果相加。这时两个操作不是并发执行的，也不涉及新的子任务。

当然，我们也可以把两个嵌套的 async let 提取到一个署名的函数中，这样调用就会回到我们所熟悉的方式:
func start() async {
  async let v02 = work02()
  //...
}

func work02() async -> Int {
  async let v0 = work(0)
  async let v2 = work(2)
  return await v0 + v2
}



非结构化任务:
TaskGroup.addTask 和 async let 是 Swift 并发中“唯二”的创建结构化并发任务的 API。
它们从当前的任务运行环境中继承任务优先级等属性，为即将开始的异步操作创建新的任务环境，然后将新的任务作为子任务添加到当前任务环境中。

我们也看到过使用 Task.init 和 Task.detached 来创建新任务，并在其中执行异步函数的方式:
func start() async {
  Task {
    await work(1)
  }

  Task.detached {
    await work(2)
  }
  print("End")
}

###
这类任务具有最高的灵活性，它们可以在任何地方被创建。它们生成一棵新的任务树，并位于顶层，不属于任何其他任务的子任务，生命周期不和其他作用域绑定，当然也没有结构化并发的特性。
###

TaskGroup.addTask 和 async let - 创建结构化的子任务，继承优先级和本地值。
Task.init - 创建非结构化的任务根节点，从当前任务中继承运行环境：比如 actor 隔离域，优先级和本地值等。
Task.detached - 创建非结构化的任务根节点，不从当前任务中继承优先级和本地值等运行环境，完全新的游离任务环境。

创建非结构化任务时，我们可以得到一个具体的 Task 值，它充当了这个新建任务的标识。
从 Task.init 或 Task.detached 的闭包中返回的值，将作为整个 Task 运行结束后的值。使用 Task.value 这个异步只读属性，我们可以获取到整个 Task 的返回值
extension Task {
  var value: Success { get async throws }
}

// 或者当 Task 不会失败时，value 也不会 throw：
extension Task where Failure == Never {
  var value: Success { get async }
}

想要访问这个值，和其他任意异步属性一样，需要使用 await:

func start() async {
  let t1 = Task { await work(1) }
  let t2 = Task.detached { await work(2) }

  let v1 = await t1.value
  let v2 = await t2.value
}

一旦创建任务，其中的异步任务就会被马上提交并执行。所以上面的代码依然是并发的：t1 和 t2 之间没有暂停，将同时执行，t1 任务在 1 秒后完成，而 t2 在两秒后完成。
await t1.value 和 await t2.value 的顺序并不影响最终的执行耗时，即使是我们先 await 了 t2，t1 的预先计算的结果也会被暂存起来，并在它被 await 的时候给出。

用 Task.init 或 Task.detached 明确创建的 Task，是没有结构化并发特性的。
Task 值超过作用域并不会导致自动取消或是 await 行为。想要取消一个这样的 Task，必须持有返回的 Task 值并明确调用 cancel：
let t1 = Task { await work(1) }
// 稍后
t1.cancel()

这种非结构化并发中，外层的 Task 的取消，并不会传递到内层 Task。
或者，更准确来说，这样的两个 Task 并没有任何从属关系，它们都是顶层任务:
let outer = Task {
  let innner = Task {
    await work(1)
  }
  await work(2)
}

outer.cancel()

outer.isCancelled // true
inner.isCancelled // false


将结构化并发和非结构化的任务组合起来使用:
func start() async {
  async let t1 = Task {
    await work(1)
    print("Cancelled: \(Task.isCancelled)")
  }.value

  async let t2 = Task.detached {
    await work(2)
    print("Cancelled: \(Task.isCancelled)")
  }.value
}

t1 和 t2 确实是结构化的，但是它们开启的新任务，却并非如此：虽然 t1 和 t2 在超出 start 作用域时，由于没有 await，这两个绑定都将被取消，但这个取消并不能传递到非结构化的 Task 中，所以两个 isCancelled 都将输出 false。

我们应该尽量避免在结构化并发的上下文中使用非结构化任务。

不过确实也有一些情况我们会倾向于选择非结构化的并发，比如一些并不影响异步系统中其他部分的非关键操作。
像是下载文件后将它写入缓存就是一个好例子：在下载完成后我们就可以马上结束“下载”这个核心的异步行为，
并在开始缓存的同时，就将文件返回给调用者了。写入缓存作为“顺带”操作，不应该作为结构化任务的一员。此时使用独立任务会更合适。