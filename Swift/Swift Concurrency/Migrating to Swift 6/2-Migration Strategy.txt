Migration Strategy
Get started migrating your project to the Swift 6 language mode.


Enabling complete concurrency checking in a module can yield many data-race safety issues reported by the compiler.


==================================================Strategy
This document outlines a general strategy that could be a good starting point. 
There is no one single approach that will work for all projects.

The approach has three key steps:
Select a module
Enable stricter checking with Swift 5
Address warnings

This process will be inherently iterative. Even a single change in one module can have a large impact on the state of the project as a whole.


==================================================Begin from the Outside
It can be easier to start with the outer-most root module in a project. 
This, by definition, is not a dependency of any other module. Changes here can only have local effects, making it possible to keep work contained.

Dependencies under your control that have ##unsafe global state## or ##trivially-Sendable types## can be the root cause of many warnings across your project.
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/commonproblems/#Unsafe-Global-and-Static-Variables
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/commonproblems/#Implicitly-Sendable-Types


==================================================Use the Swift 5 Language Mode
You could find it quite challenging to move a project from Swift 5 with no checking directly to the Swift 6 language mode.
It is possible, instead, to incrementally enable more of the Swift 6 checking mechanisms while remaining in Swift 5 mode.
This will surface issues only as warnings, keeping your build and tests functional as you progress.

To start, enable a single upcoming concurrency feature. This allows you to focus on one specific type of problem at a time.
Proposal
Description
Feature Flag

SE-0401 // https://github.com/swiftlang/swift-evolution/blob/main/proposals/0401-remove-property-wrapper-isolation.md
Remove Actor Isolation Inference caused by Property Wrappers
DisableOutwardActorInference

SE-0412 // https://github.com/swiftlang/swift-evolution/blob/main/proposals/0412-strict-concurrency-for-global-variables.md
Strict concurrency for global variables
GlobalConcurrency

SE-0418 // https://github.com/swiftlang/swift-evolution/blob/main/proposals/0418-inferring-sendable-for-methods.md
Inferring Sendable for methods and key path literals
InferSendableFromCaptures
These can be enabled independently and in any order.


After you have addressed issues uncovered by upcoming feature flags, the next step is to enable complete checking for the module. 
This will turn on all of the compilerâ€™s remaining data isolation checks.
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/completechecking/


==================================================Address Warnings
There is one guiding principle you should use as you investigate warnings: express what is true now. Resist the urge to refactor your code to address issues.

You will find it beneficial to minimize the amount of change necessary to get to a warning-free state with complete concurrency checking. 
After that is done, use any unsafe opt-outs you applied as an indication of follow-on refactoring opportunities to introduce a safer isolation mechanism.

Note
To learn more about addressing common problems, see Common Compiler Errors.
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/commonproblems/