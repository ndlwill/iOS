https://www.avanderlee.com/swift/mainactor-dispatch-main-thread/

MainActor usage in Swift explained to dispatch to the main thread

MainActor is a new attribute introduced in Swift 5.5 as a global actor providing an executor which performs its tasks on the main thread.
When building apps, it’s important to perform UI updating tasks on the main thread, which can sometimes be challenging when using several background threads.
Using the @MainActor attribute will help you make sure your UI is always updated on the main thread.

Global actors act similar to actors

----------What is a MainActor?
A MainActor is a globally unique actor who performs his tasks on the main thread. 
It should be used for properties, methods, instances, and closures to perform tasks on the main thread. 
Proposal SE-0316 Global Actors introduced the main actor as its an example of a global actor, and it inherits the GlobalActor protocol.

----------Understanding Global Actors
Global Actors can be seen as singletons: there’s only one instance of each.
As of now, global actors only work by enabling experimental concurrency. 
You can do so by adding the following value to “Other Swift Flags” in Xcode’s build settings:
-Xfrontend -enable-experimental-concurrency


You can see Global Actors as singletons: only one instance exists. 
We can define a global actor as follows:
@globalActor
actor SwiftLeeActor {
    static let shared = SwiftLeeActor()
}

The shared property is a requirement of the GlobalActor protocol and ensures having a globally unique actor instance. 
Once defined, you can use the global actor throughout your project, just like you would with other actors:

@SwiftLeeActor
final class SwiftLeeFetcher {
    // ..
}

Anywhere you use the global actor attribute, you’ll ensure synchronization through the shared actor instance to ensure mutually exclusive access to declarations.


The underlying @MainActor implementation is similar to our custom-defined @SwiftLeeActor:
@globalActor
final actor MainActor: GlobalActor {
    static let shared: MainActor
}

###
It’s available by default and defined inside the concurrency framework. 
In other words, you can start using this global actor immediately and mark your code to be executed on the main thread by synchronizing via this global actor.
###


----------How to use MainActor in Swift?
###
A global actor can be used with properties, methods, closures, and instances.
###

For example, we could add the main actor attribute to a view model to make it perform all its tasks on the main thread:

@MainActor
final class HomeViewModel {
    // ..
}

Using nonisolated, we can make sure that methods without the main thread requirement perform as fast as possible.
###
A class can only be annotated with a global actor if it has no superclass, the superclass is annotated with the same global actor, or the superclass is NSObject.
A subclass of a global-actor-annotated class must be isolated to the same global actor.
###

###
In other cases, we might want to define individual properties with a global actor:
final class HomeViewModel {
    @MainActor var images: [UIImage] = []

}
###
Marking the images property with the @MainActor property ensures that it can only be updated from the main thread

Individual methods can be marked with the attribute as well:
@MainActor func updateViews() {
    // Perform UI updates..
    images = []
}

And even closures can be marked to perform on the main thread:
func updateData(completion: @MainActor @escaping () -> ()) {
    Task {
        await someHeavyBackgroundOperation()
        await completion()
    }
}
Although in this case, you should rewrite the updateData method to an async variant without needing a completion closure.


----------Using the main actor directly
The MainActor in Swift comes with an extension to use the actor directly:
@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension MainActor {

    /// Execute the given body closure on the main actor.
    public static func run<T>(resultType: T.Type = T.self, body: @MainActor @Sendable () throws -> T) async rethrows -> T
}

This allows us to use the MainActor directly from within methods, even if we didn’t define any of its body using the global actor attribute:

Task {
    await someHeavyBackgroundOperation()
    await MainActor.run {
        // Perform UI updates
    }
}

In other words, there’s no real need to use DispatchQueue.main.async anymore.


----------When should I use the MainActor attribute?
Before Swift 5.5, you might have defined many dispatch statements to make sure tasks are running on the main thread. 
An example could look as follows:

func fetchImage(for url: URL, completion: @escaping (Result<UIImage, Error>) -> Void) {
    URLSession.shared.dataTask(with: url) { data, response, error in
        guard let data, let image = UIImage(data: data) else {
            DispatchQueue.main.async {
                completion(.failure(ImageFetchingError.imageDecodingFailed))
            }
            return
        }

        DispatchQueue.main.async {
            completion(.success(image))
        }
    }.resume()
}

In the above example, you’re sure a dispatch is needed to return the image to the main thread. 
We have to perform dispatches in several places, resulting in code clutter with several closures.

In those cases, isolating properties, methods, instances, or closures to the main actor ensures tasks perform on the main thread. 
Ideally, we would rewrite the above example as follows:


@MainActor
func fetchImage(for url: URL) async throws -> UIImage {
    let (data, _) = try await URLSession.shared.data(from: url)
    guard let image = UIImage(data: data) else {
        throw ImageFetchingError.imageDecodingFailed
    }
    return image
}

The @MainActor attribute ensures the logic executes on the main thread while the network request is still performed on the background queue. 
Dispatching to the main actor only takes place if needed to ensure the best performance possible.