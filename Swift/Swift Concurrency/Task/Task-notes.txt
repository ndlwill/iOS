https://developer.apple.com/documentation/Swift/Task

iOS 13.0+
struct Task<Success, Failure> where Success : Sendable, Failure : Error

Task closure lifetime:
Tasks are initialized by passing a closure containing the code that will be executed by a given task.

After this code has run to completion, the task has completed, resulting in either a failure or result value, this closure is eagerly released.

Retaining a task object doesn’t indefinitely retain the closure, because any references that a task holds are released after the task completes.
Consequently, tasks rarely need to capture weak references to values.

For example, in the following snippet of code it is not necessary to capture the actor as weak, because as the task completes it’ll let go of the actor reference, breaking the reference cycle between the Task and the actor holding it.

struct Work: Sendable {}

actor Worker { // #####actor 换成 class 也是同样效果，能走deinit actor#####
var work: Task<Void, Never>?
var result: Work?

    deinit {
        // even though the task is still retained,
        // once it completes it no longer causes a reference cycle with the actor


        print("deinit actor") // 能释放
    }


    func start() {
        work = Task {
            print("start task work")
            try? await Task.sleep(for: .seconds(3))
            self.result = Work() // we captured self
            print("completed task work")
            // but as the task completes, this reference is released
        }
        // we keep a strong reference to the task
    }

}

await Worker().start()

不会循环引用

start task work
completed task work
deinit actor
