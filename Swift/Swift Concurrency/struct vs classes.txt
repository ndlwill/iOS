What is a class in Swift?
A class in Swift is a reference type which can contain:
properties
methods
subscripts
initializers
protocol conformances
extensions

It’s often described as a template definition of an object

class ArticleClass {
    let title: String
    let url: URL
    var readCount: Int = 0

    init(title: String, url: URL) {
        self.title = title
        self.url = url
    }
}

What is a struct in Swift?
A struct in Swift is a value type which, just like classes, can contain:
properties
methods
subscripts
initializers
protocol conformances
extensions
It can also be seen as a template definition of an object

struct ArticleStruct {
    let title: String
    let url: URL
    var readCount: Int = 0
}

What are the differences between a struct and a class?
1.Value vs reference types
One of the most important differences is that a struct is a value type while a class is a reference type.
References to a class instance share single data which means that any changes in that class will be available to each reference.
let articleClass = ArticleClass(title: "Struct vs Class", url: URL(string: "www.avanderlee.com")!)
let articleClassCopy = articleClass

articleClass.readCount = 10
print(articleClassCopy.readCount) // Prints: 10

A struct is a value type and will create a unique copy for each new reference.
var articleStruct = ArticleStruct(title: "Struct vs Class", url: URL(string: "www.avanderlee.com")!, readCount: 0)
var articleStructCopy = articleStruct

articleStruct.readCount = 10
print(articleStructCopy.readCount) // Prints: 0

THE BENEFIT OF MUTATION IN SAFETY:
With this, structs have the benefit of mutation in safety as you can trust that no other part of your app is changing the data at the same time. 
This makes it easier to reason about your code and is especially helpful in multi-threaded environments where a different thread could alter your data at the same time.
This could create nasty bugs which are hard to debug.
In the absence of mutation, both classes, and structs act exactly the same and the benefit of mutation does no longer count.

STRUCTS AND CONSTANTS:
Another related difference to value types is the use of constants. If you were sharp you could see that the articleStruct was defined as a variable instead of a let constant like we did with the articleClass. 
A struct can only be mutated if it’s defined as a variable and it will only update the referencing instance.

2.Structs get an initializer for free
// Before Swift 5.1 Memberwise initializers:
// Generated memberwise init: init(title: String, url: URL, readCount: Int)
let article = ArticleStruct(title: "", url: URL(string: "")!, readCount: 0)

// After Swift 5.1 Memberwise initializers, using the default 0 for read count
// Generated memberwise init: init(title: String, url: URL, readCount: Int = 0)
let article = ArticleStruct(title: "", url: URL(string: "")!)

3.Classes allow inheritance
Classes can inherit the characteristics of another class and with that, act like abstract classes.

With protocols in Swift, this is often no longer needed and replaceable with protocols. 
Protocols can be used with both classes and structs while inheritance is only possible with classes.

4.Classes can be deinitialized
A class allows executing code just before it gets destroyed by using a deinit method. 
When you define the same deinit method in a struct you’ll get the following error:
Deinitializers may only be declared within a class



when should I go for a struct and when for a class?
The additional capabilities that classes support come at the cost of increased complexity. 
As a general guideline, prefer structures because they’re easier to reason about, and use classes when they’re appropriate or necessary.
In practice, this means most of the custom data types you define will be structures and enumerations.

when working with Cocoa classes, you’re often required to subclass from NSObject which requires you to use a class.
A simple bullet point list will make it a lot easier to decide.
You should use a class when:
Comparing instance identity is needed by using ===
Shared mutable state is required
Objective-C interoperability is required


You should use a struct when:
Comparing instance data is needed by using ==
Unique copies with an independent state are required
The data is used in multiple threads

Try to go for a struct by default.
if you do decide to go for a class, consider to mark it as final and help the compiler by telling it that there are no other classes that inherit from your defined class.