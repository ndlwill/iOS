栈区的地址 比 堆区的地址 大
栈是从高地址->低地址，向下延伸，由系统自动管理，是一片连续的内存空间
堆是从低地址->高地址，向上延伸，由程序员管理，堆空间结构类似于链表，是不连续的
堆不连续指的是堆内存空间中的不同内存块之间可能存在空隙，而不是指同一块内存区域中存储的内容是分散的。

日常开发中的溢出是指堆栈溢出，可以理解为栈区与堆区边界碰撞的情况
栈溢出 是因为栈的空间被用尽
堆溢出 是因为堆的空间被用尽


//栈区声明一个地址，用来存储age变量
var age = 18
栈区直接存储的是值
获取age的栈区地址：po withUnsafePointer(to: &age){print($0)}
查看age内存情况：x/8g 0x00007ffeefbff3e0

值类型 特点:
1、地址中存储的是值
2、值类型的传递过程中，相当于传递了一个副本，也就是所谓的深拷贝
3、值传递过程中，并不共享状态



==================================================结构体
在结构体中，如果不给属性默认值，编译是不会报错的。即在结构体中属性可以赋值，也可以不赋值
init方法可以重写，也可以使用系统默认的

结构体的SIL分析:
如果没有init，系统会提供不同的默认初始化方法
如果提供了自定义的init，就只有自定义的

为什么结构体是值类型？
struct CJLTeacher {
    var age: Int = 18
    var age2: Int = 20
}
var  t = CJLTeacher()

po t，t的打印直接就是值，没有任何与地址有关的信息

获取t的内存地址，并查看其内存情况
获取地址：po withUnsafePointer(to: &t){print($0)}
查看内存情况：x/8g 0x0000000100008158

在SIL文件中，我们查看结构体的初始化方法，可以发现只有init，而没有malloc，在其中看不到任何关于堆区的分配

结构体是值类型，且结构体的地址就是第一个成员的内存地址



==================================================引用类型
在类中，如果属性没有赋值，也不是可选项，编译会报错
需要自己实现init方法

为什么类是引用类型？
class CJLTeacher1 {
    var age: Int = 18
    var age2: Int = 20
}
var t1 = CJLTeacher1()

po t1，t1内存空间中存放的是地址

获取t1变量的地址，并查看其内存情况:
获取t1指针地址：po withUnsafePointer(to: &t1){print($0)}// 得到0x0000000100008218
查看t1全局区地址内存情况：x/8g 0x0000000100008218 // 第一块是0x00000001040088f0，说明t1存的是地址，这块地址就是堆区的地址
查看t1地址中存储的堆区地址内存情况：x/8g 0x00000001040088f0

引用类型 特点：
1、地址中存储的是堆区地址
2、堆区地址中存储的是值

此时将t1赋值给t2，如果修改了t2，会导致t1修改吗？
修改了t2，会导致t1改变，主要是因为t2、t1地址中都存储的是 同一个堆区地址，如果修改，修改是同一个堆区地址，所以修改t2会导致t1一起修改，即浅拷贝



如果结构体中包含类对象，此时如果修改t1中的实例对象属性，t会改变吗？
class CJLTeacher1 {
    var age: Int = 18
    var age2: Int = 20
}

struct CJLTeacher {
    var age: Int = 18
    var age2: Int = 20
    var teacher: CJLTeacher1 = CJLTeacher1()
}

var  t = CJLTeacher()

var t1 = t
t1.teacher.age = 30

//分别打印t1和t中teacher.age,结果如下
t1.teacher.age = 30 
t.teacher.age = 30

如果修改t1中的实例对象属性，会导致t中实例对象属性的改变。虽然在结构体中是值传递，但是对于teacher，由于是引用类型，所以传递的依然是地址

注意：在编写代码过程中，应该尽量避免值类型包含引用类型

查看当前的SIL文件，尽管CJLTeacher1是放在值类型中的，在传递的过程中，不管是传递还是赋值，teacher都是按照引用计数进行管理的
通过打印teacher（t.teacher）的引用计数来验证我们的说法，其中teacher(CJLTeacher1类型)的引用计数为3

main中retain一次
CJLTeacher teacher.getter方法中retain一次
CJLTeacher teacher.setter方法中retain一次



==================================================mutating
值类型本身是不允许修改属性

struct CJLStack {
    var items: [Int] = []
    func push(_ item: Int){
        print(item)
    }
}
查看SIL文件：// SIL 是 Swift 的独有设计，它是 Swift 编译器的一部分，用来进行优化、分析和生成最终的机器代码。
push函数除了item，还有一个默认参数self，self是let类型，表示不允许修改

给push添加mutating，发现可以添加到数组了

查看其SIL文件，找到push函数，发现与之前有所不同，push添加mutating（只用于值类型）后，
本质上是给值类型函数添加了inout关键字，相当于在值传递的过程中，传递的是引用（即地址）
self是var类型，可以修改


==================================================inout关键字
一般情况下，在函数的声明中，默认的参数都是不可变的，如果想要直接修改，需要给参数加上inout关键字
未加inout关键字，给参数赋值，编译报错
添加inout关键字，可以给参数赋值


1、结构体中的函数如果想修改其中的属性，需要在函数前加上mutating，而类则不用
2、mutating本质也是加一个 inout修饰的self
3、Inout相当于取地址，可以理解为地址传递，即引用
4、mutating修饰方法，而inout 修饰参数