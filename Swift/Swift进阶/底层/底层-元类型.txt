1. AnyObject
代表任意类的instance，类的类型，仅类遵守的协议

class LGTeacher {
    var age: Int = 18
}

var t = LGTeacher()

//此时代表的就是当前 LGTeacher 的实例对象
var t1: AnyObject = t

//此时代表的就是 LGTeacher 这个类的类型
var t2: AnyObject = LGTeacher.self

//仅类遵守的协议
protocol JSONMap: AnyObject {}
//class可遵守此协议
class LGJSONMap: JSONMap {}


t1代表LGTeacher的实例对象，t2代表LGTeacher类的类型，JSONMap是仅类遵守的协议，因为LGJSONMap是Class类型，所以可以遵守JSONMap协议
JSONMap是仅类遵守的协议，结构体无法使用，编译报错


2. Any
代表任意类型，包括funcation类型或者Optional类型
Any包含的类型比AnyObject更为广泛，可以理解为AnyObject是Any的子集。


3. AnyClass
代表任意实例的类型：AnyObject.Type
public typealias AnyClass = AnyObject.Type


4. T.self
T是实例对象，返回的就是它本身
T是类，那么返回的是Metadata

class LGTeacher {
    var age: Int = 18
}

var t = LGTeacher()
//返回实例对象本身
var t1 = t.self
//返回LGTeacher这个类的类型，metadata元类型
var t2 = LGTeacher.self

t1返回的是实例对象本身， t2返回的是LGTeacher.Type，也就是LGTeacher这个类的类型


5. T.Type

⼀种类型，T.self的类型是T.Type // LGTeacher.self


6. type(of:)
⽤来获取⼀个值的动态类型

var age: Int = 18

func test(_ value : Any) {
    print(type(of: value))
}

test(age)

//输出以下内容：
//Int

value的静态类型(static type)是Any，是编译期确定好的。而type(of:)方法⽤来获取⼀个值的动态类型(dynamic type)，所以输出的是Int


==================================================value是LGTeacher类型
class LGTeacher {
    func teahc() {
        print("LGTeacher teahc")
    }
}

class LGChild : LGTeacher {
    override func teahc() {
        print("LGChild teahc")
    }
}

func test(_ value : LGTeacher) {
    value.teahc();
}

var t = LGChild()
test(t)

//输出以下内容：
//LGChild teahc

value编译期类型是LGTeacher，运行时的实际类型是LGChild，所以打印结果是LGChild teahc


==================================================value是TestProtocol类型
protocol TestProtocol {}

class LGTeacher : TestProtocol {}

func test(_ value : TestProtocol) {
    print(type(of: value))
}

var t1 = LGTeacher()
var t2: TestProtocol = LGTeacher()

test(t1)
test(t2)

//输出以下内容：
//LGTeacher
//LGTeacher

运行时的实际类型都是LGTeacher，所以打印的type(of:)都是LGTeacher


==================================================value是泛型
protocol TestProtocol {}

class LGTeacher: TestProtocol {}

func test<T>(_ value : T) {
    print(type(of: value))
}

var t1 = LGTeacher()
var t2: TestProtocol = LGTeacher()

test(t1)
test(t2)

//输出以下内容：
//LGTeacher
//TestProtocol


test方法的参数改为泛型，两次打印type(of:)的结果不一样了，t1输出LGTeacher，t2输出TestProtocol。
因为当泛型和协议同时参与，编译器无法推导出准确类型，需要在调用type(of:)时将value转换为Any

func test<T>(_ value : T) {
    print(type(of: value as Any))
}

//输出以下内容：
//LGTeacher
//LGTeacher

修改后的代码，打印结果都是LGTeacher