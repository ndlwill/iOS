swift中String 是一个结构体 我们主要使用String.Characters， 它是Character的集合，有着类似Array的特性。


用两种Unicode的方式表示字符é
str1 = \u{00E9}
str2 = \u{0065}\u{0301}

.utf8 从编码单元分析:
str1.utf8.elementsEqual(str2.utf8)//false


Swift Character:
A single extended grapheme cluster that approximates a user-perceived character.
The Character type represents a character made up of one or more Unicode scalar values, grouped by a Unicode boundary algorithm.
Because each character in a string can be made up of one or more Unicode scalar values, the number of characters in a string may not match the length of the Unicode scalar value representation or the length of the string in a particular binary representation.
###
For example, a country’s Unicode flag character is made up of two regional indicator scalar values that correspond to that country’s ISO 3166-1 alpha-2 code. The alpha-2 code for The United States is “US”, so its flag character is made up of the Unicode scalar values "\u{1F1FA}" (REGIONAL INDICATOR SYMBOL LETTER U) and "\u{1F1F8}" (REGIONAL INDICATOR SYMBOL LETTER S). When placed next to each other in a string literal, these two scalar values are combined into a single grapheme cluster, represented by a Character instance in Swift.
###
let usFlag: Character = "\u{1F1FA}\u{1F1F8}"
print(usFlag)
// Prints "🇺🇸"




Characters and Grapheme Clusters(图形集簇，字符蔟）:
https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/Articles/stringsClusters.html
NSString objects are conceptually UTF-16 with platform endianness. 


In many writing systems, a single character may be composed of a base letter plus an accent or other decoration.
The number of possible letters and accents precludes Unicode from representing each combination as a single code point, 
so in general such combinations are represented by a base character followed by one or more combining marks. 
For compatibility reasons, Unicode does have single code points for a number of the most common combinations

In general, these combinations—surrogate pairs, base characters plus combining marks, Hangul jamo, and Indic consonant clusters—are referred to as grapheme clusters.
In order to take them into account, you can use NSString’s rangeOfComposedCharacterSequencesForRange: or rangeOfComposedCharacterSequenceAtIndex: methods, or CFStringGetRangeOfComposedCharactersAtIndex.
These can be used to adjust string indexes or substring ranges so that they fall on grapheme cluster boundaries, taking into account all of the constraints mentioned above. 

字符蔟： Character 中的编码点组合在一起可以组成单个字符蔟

标准等价：不管是何种方式生成的é，只看两个都是显示为é， 在 Unicode的规范中把这个就叫做“标准等价”

OC字符串的比较更推荐用compare方法， isEqual方法用上面的不同生成方法比较就会得到false的结果


避免给String添加像Str[i] 的索引的类扩展， 这样低效


在array上做切片操作返回的不是array，而是arraySlice

String(“abc”) 和 “abc”是不同的。“abc”是字符串字面量


ExpressibleByStringLiteral有什么用？ 通过字面意思（字符串）实例化指定类。
需要创建一个URL应该如下
let urls = URL(string: "https://www.liaoworking.com")
我们可以通过ExpressibleByStringLiteral 来用一种意想不到的方式去创建一个URL
extension URL: ExpressibleByStringLiteral {

public init(stringLiteral value: String) 
{
	guard let url = URL(string: "\(value)") else {
    	preconditionFailure("This url: \(value) is not invalid")
	}
	self = url
}
下一次当你创建URL的时候可以这样 
let url: URL = "https://www.liaoworking.com"


利用ExpressibleByStringLiteral 协议来更方便的把String 转化成Date 如下
let date: Date = “2020-05-26 23:32:15” 


emoji在不同的编码单元（utf8，utf16）中长度不同。
let flag = "🇵🇷"
print(flag.count)
// Prints "1"
print(flag.unicodeScalars.count)
// Prints "2"
print(flag.utf16.count)
// Prints "4"
print(flag.utf8.count)
// Prints "8"


一个字符串String就是一个字符序列
单字节Unicode字符，\xnn，其中nn是两个十六进制数
双字节Unicode字符，\unnnn，其中nnnn是四个十六进制数
四字节Unicode字符，\Unnnnnnnn，其中nnnnnnnn是八个十六进制数

let dollarSign = "\x24" // $, Unicode scalar U+0024  
let blackHeart = "\u2665" // ♥, Unicode scalar U+2665  
let sparklingHeart = "\U0001F496" // , Unicode scalar U+1F496 


Swift的字符串String就是由字符Character组成的，每一个Character都代表了一个特定的Unicode字符。通过for-in循环，可以遍历字符串中的每一个字符：
//public typealias Element = Character
for character: String.Element in "Dog!🇺🇸" {// 表示String是集合
    print(character)
}  
// D  
// o  
// g  
// !  
// 🇺🇸


// public typealias Element = Unicode.Scalar
for character: String.UnicodeScalarView.Element in "Dog!🇺🇸".unicodeScalars {
    print(character)
}
D
o
g
!
🇺
🇸
我们可以使用unicodeScalars属性遍历一个Unicode标量编码的字符串。
这个属性是 UnicodeScalarsView类型，UnicodeScalarsView是一个UnicodeScalar类型的集合。每一个Unicode标 量都是一个任意21位Unicode码位。

for character in "Dog!🇺🇸".utf8 {
    print(character)
}
68
111
103
33
240
159
135
186
240
159
135
184

let yenSign: Character = "￥"  



Unicode是编码和表示文本的国际标准。它几乎可以显示所有语言的所有字符的标准形态。
Unicode术语
每一个Unicode字符都能被编码为一个或多个unicode scalar。
一个unicode scalar是一个唯一的21位数（或者名称），对应着一个字符或者标识。例如 U+0061是一个小写的A (“a”), 或者U+1F425是一个面向我们的黄色小鸡
当一个Unicode字符串写入文本或者其他储存时，unicode scalar会根据Unicode定义的格式来编码。每一个格式化编码字符都是小的代码块，称成为code units.他包含UTF-8格式(每一个字符串由8位的code units组成)。和UTF-16格式（每一个字符串由16位的code units组成)

Unicode字符串
Swift 支持多种不同的方式取得Unicode字符串.
你可以使用for-in语句遍历字符串，来获得每一个字符的Unicode编码值。
UTF-8字符编码单元集合使用String类型的utf-8属性
UTF-16字符编码单元集合使用String类型的utf-16属性
21位Unicode标量集合使用String类型的unicodeScalars属性

下面的每一个例子展示了不同编码显示由 D , o , g , !（DOG FACE, 或者Unicode标量 U+1F436）字符组成的字符串
UTF-8
你可以使用String类型的utf8属性遍历一个UTF-8编码的字符串。这个属性是UTF8View类型，UTF8View是一个8位无符号整形(UInt8)的集合,集合中的每一个字节都是UTF-8编码。
for codeUnit in dogString.utf8 {  
print("\(codeUnit) ")  
}  
print("\n")  
// 68 111 103 33 240 159 144 182
在上面的例子中，前4个十进制codeunit值（68,111,103,33）显示为字符串 D , o ,g 和 ! ，和他们的ASCII编码相同一样。后面4个codeunit的值（240,159,144,182）是DOG FACE字符的4字节UTF-8编码。

UTF-16
你可以使用String类型的utf16属性遍历一个UTF-16编码的字符串。这个属性是UTF16View类型，UTF16View是一个16位无符号整形(UInt16)的集合,集合中的每一个字节都是UTF-16编码。
for codeUnit in dogString.utf16 {  
print("\(codeUnit) ")  
}  
print("\n")  
// 68 111 103 33 55357 56374
前4个十进制codeunit值（68,111,103,33）显示为字符串 D , o ,g 和 ! ，他们的UTF-16 的codeunit和他们UTF-8的编码值相同。
第5和第6个codeunit值（55357和56374）是DOG FACE字符的UTF-16的代理对编码。他们的值是由值为U+D83D（十进制55357）的高位代理(lead surrogate)和值为U+DC36 (十进制56374)的低位代理（trail surrogate）组成。

Unicode标量
你可以使用String类型的unicodeScalars属性遍历一个Unicode标量编码的字符串。这个属性是 UnicodeScalarsView类型，UnicodeScalarsView是一个UnicodeScalar类型的集合。每一个Unicode标 量都是一个任意21位Unicode码位，没有高位代理，也没有低位代理。
每一个UnicodeScalar使用value属性，返回标量的21位值，每一位都是32位无符号整形(UInt32)的值
for scalar in dogString.unicodeScalars {  
print("\(scalar.value) ")  
}  
print("\n")  
// 68 111 103 33 128054
value属性在前4个UnicodeScalar值（68,111,103,33）再一次展示编码了字符 D , o , g 和 ！ 。第五个也是最后一个UnicodeScalar 是DOG FACE字符，十进制为128054，等价于16进制的1F436，相当于Unicode标量的U+1F436。

每一个UnicodeScalar可以被构造成一个新的字符串来代替读取他们的value属性
for scalar in dogString.unicodeScalars { println("\(scalar) ") }  



CustomStringConvertible 和 CustomDebugStringConvertible:
这两个协议主要就是类似于Objective-C中的重写description方法
继承协议 实现description 和 debugDescription 属性 即可打印出想要的数据内容

struct Person:CustomStringConvertible,CustomDebugStringConvertible {
    var age: Int
    var name: String
    var job: String

    var description: String {
        return "\(age) \(name) \(job)"
    }

    var debugDescription: String {
        return "\(name) \(age) \(job)"
    }
  }

  let meetings = Person(age: 18, name: "liaoWorking", job: "iOSDeveloper")
  print(meetings)
  /**
   *  "18 liaoWorking iOSDeveloper\n"
   */
  debugPrint(meetings)
  /**
   *  "liaoWorking 18 iOSDeveloper\n"
   */
}


Swift String中有很多字符类型的属性 如utf16(utf16View类型),utf8(utf8View类型),unicodeScalars(UnicodeScalarsView类型)
为什么是以View结尾的？
在api文档中对他们的介绍是：字符串所包含的编码单元的视图 (A view of a string's contents as a collection of code units. )


TextOutputStream 协议:
实现TextOutputStream协议只需要实现其write方法。 调用print(“”, to: &打印转换的实例对象)这个方法即可。
/// The `ASCIILogger` type's `write(_:)` method processes its string input by
/// escaping each Unicode scalar, with the exception of `"\n"` line returns.
/// By sending the output of the `print(_:to:)` function to an instance of
/// `ASCIILogger`, you invoke its `write(_:)` method.
///
///     let s = "Hearts ♡ and Diamonds ♢"
///     print(s)
///     // Prints "Hearts ♡ and Diamonds ♢"
///
///     var asciiLogger = ASCIILogger()
///     print(s, to: &asciiLogger)
///     // Prints "Hearts \u{2661} and Diamonds \u{2662}"
public protocol TextOutputStream {

    /// Appends the given string to the stream.
    mutating func write(_ string: String)
}

struct ASCIILogger: TextOutputStream {
    mutating func write(_ string: String) {
        let ascii = string.unicodeScalars.lazy.map { scalar in
            scalar == "\n"
              ? "\n"
              : scalar.escaped(asASCII: true)
        }
        print(ascii.joined(separator: ""), terminator: "")
    }
}