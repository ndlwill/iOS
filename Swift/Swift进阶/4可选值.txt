https://github.com/Liaoworking/Advanced-Swift

==========可选值flatMap
// Data??
let data = URL(string: "111").map { url in
    try? Data(contentsOf: url)
}

// Data?
let data = URL(string: "111").flatMap { url in
    try? Data(contentsOf: url)
}

let urlString = "http://www.objc.io/logo.png"
let view = URL(string: urlString)
    .flatMap { (url) -> Data? in
    try? Data(contentsOf: url)
    }
    .flatMap { (data) -> UIImage? in
        UIImage(data: data)
    }
    .map { (image) -> UIImageView in
        UIImageView(image: image)
}

if let view = view {
    UIView().addSubview(view)
}

==========使用flatMap过滤nil
想要求一个字符串数组中的数字和
let numbers = ["1","2","3","4","liaoworking"]
///普通青年
var sum = 0
for case let i? in numbers.map({
    Int($0)
}) {
    sum += i// Int($0)为nil就不走这里了
}
//        sum的值为10

///优质青年
///当我们用?? 把nil替换成0
numbers.map { Int($0) }.reduce(0) { $0 + ($1 ?? 0)} //10

///文艺青年
///在标准库中flatMap的作用可能正是你想要
numbers.flatMap { Int($0) }.reduce(0, +) // 10
/// swift4.1后的筛选作用的flatMap的命名
numbers.compactMap { Int($0) }.reduce(0, +) // 10

注：这里的flatMap的作用：把一个映射为可选值的序列进行展平。

因为flat又有降维作用也有筛选的作用

swift4.1中加入的compactMap来细分出flatMap的筛选作用


swift中case匹配是通过~=运算符进行的



在调试版本中进行断言
我们只会在开发版本中进行断言(assert),发布版本就算了。 书中主要讲了利用断言进行调试

assert(Bool, "error here")   ///其中Bool为false时执行断言“error here”
注：断言assert 是仅在Debug 版本起作用


// 强制解包(使用!)的时机
let ages = ["liaoWorking":17,"wangzhuxian":16]
    /// 有强制解包   这里的强制解包绝对安全
    ages.keys.filter { name in ages[name]! < 50 }.sorted()

    ///巧妙的避开了强制解包 
    ages.filter { (_, age) in age < 50 }
        .map { (name, _) in name }
        .sorted()


swift调用OC里面有返回值的方法，其OC方法返回值就是隐式可选值。 
假设OC里Person类有一个属性name是NSString类型的. 这里的name在OC里面可能是nil
NSString *string = [Person alloc]init].name;
/// 在swift中去调用时  我们这样写，编译器不会报错 但是当saySomething为nil的时候就会崩溃
Person().name.count
/// 我们需要自己在name属性后主动添加?防止因为隐式可选值引起的崩溃。
Person().name?.count