了解mutating关键字要先了解inout行为。

func triple(x:Int){
    x = x * 3 //error x is let
}
///inout 关键字可以将原来的值覆盖
func triple( x:inout Int) {
    x = x * 3
}
mutating 关键字实质上就是隐式的将self标记成inout了
所以我们就明白为什么 重载 += 左边的参数会被标记成inout了


写时复制:
var x = [1,2,4]
var y = x
x.append(5) //1,2,4,5
y.removeLast() //1,2
这时，把x赋值给y时会发生复制。这时候两个数组的引用指向的是内存中的同一个位置。共享存储部分。 
当改变x时这个共享会被检查到。 内存将会被复制出来。 我们就独立的改变了两个变量。 耗性能的元素复制操作只会在必要的时候发送。这个就叫做写时复制。

通俗来说： 复制时用的是一个内存地址，当某一个集合改变时恰到好处的复制了一份出来。

==================================================写时复制的高效方法
首先要知道一个对象是否是唯一引用的,通过系统提供的isKnownUniquelyReferenced(&obj)函数来获取。

//会返回一个Bool值告诉你是否唯一 对于OC的对象直接返回false
isKnownUniquelyReferenced(&object: T)

final class Box<A> {
    var unbox:A
    init(_ value:A) {
        self.unbox = value
    }
}

var a = Box(NSMutableData())
isKnownUniquelyReferenced(&a)//true
var b = a  
isKnownUniquelyReferenced(&a)//false
isKnownUniquelyReferenced(&b)//false


struct MyData {
    fileprivate var _data: Box<NSMutableData>
    var _dataForWriting: NSMutableData {
        mutating get {
            if !isKnownUniquelyReferenced(&_data) {//检查对_data的引用是否是唯一性
                _data = Box(_data.unbox.mutableCopy() as! NSMutableData)
                print("Making a copy")
            }
            return _data.unbox
        }
    }
    init(_ data: NSData) {
        self._data = Box(data.mutableCopy() as! NSMutableData)
    }
}

extension MyData {
    mutating func append(_ other: MyData) {
        _dataForWriting.append(other._data.unbox as Data)
    }
}

let someBytes = MyData(NSData(base64Encoded: "wAEP/w==", options: [])!)
var empty = MyData(NSData())
var emptyCopy = empty
for _ in 0..<5 {
    empty.append(someBytes)

}
empty // <c0010fff c0010fff c0010fff c0010fff c0010fff>
emptyCopy // <>




结构体的存储位置:
如果结构体的变量被一个函数闭合（内部使用）了，这个结构体就会存放在堆上。 结构体太大也会被存在堆上

#####tips#####
实际项目中如果对unowned 和weak 拿捏的不太准的话鼎力推荐使用weak ！！！,我们项目里面已经没有unowned self 这样的用法了。
我之前项目中一直的一个崩溃就是 用[unwoned self] 修饰self 但self可能为nil。 导致直接崩溃。


闭包会引起循环引用
捕获列表： 闭包里面对周围的常量或变量进行的操作叫捕获。
var a = 0
var b = 0
/// a 就在捕获列表中，b没有
let closure = { [a] in
    print(a, b)
}

a = 10
b = 10
closure()
// Prints "0 10"

原因：当你使用了捕获列表之后，你无论怎么在闭包外面操作改变原始的值。闭包并不关心。因为这个时候它已经不是捕获的引用了，而是最初原始值的copy副本

注：捕获列表中的值的作用域只能在闭包内，闭包外无法使用。