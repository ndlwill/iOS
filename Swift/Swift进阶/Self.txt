1、静态成员的 Self
Swift 5.1之后，可以使用 Self替代类名来访问静态成员

class ListViewController: UITableViewController {
    static let cellReuseIdentifier = "list-cell-identifier"

    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.register(
            ListTableViewCell.self,
            forCellReuseIdentifier: Self.cellReuseIdentifier
        )
    }
}

2、使用 Self 动态获取引用类型
Swift的Self关键字（或类型）使我们能够在未知具体类型的上下文中动态引用实际上的类型，例如，通过在协议扩展中引用协议的实现类型：

extension Numeric {
    func incremented(by value: Self = 1) -> Self {
        return self + value
    }
}

我们给Numeric协议扩展了一个自增的方法，但是我们现在不知道具体自增的类型，使用Self作为返回类型，则可以动态获取对应的类型：

let num1 = 5.incremented()           //num1: Int
let num2 = 5.0.incremented()         //num2: Double

3、 使用Self引用封闭类型
Self的范围现已扩展到还包括具体类型（例如枚举，结构体和类），使我们能够将Self用作一种引用方法或属性的封闭类型的别名，如下所示：

struct TextTransform {
    let closure: (String) -> String
}

extension TextTransform {
    static var capitalize: Self {
        return TextTransform { $0.capitalized }
    }

    static var removeLetters: Self {
        return TextTransform { $0.filter { !$0.isLetter } }
    }
}

我们现在可以在上方使用Self而不是完整的TextTransform类型名称看，当然这纯粹是语法糖——但它可以使我们的代码更紧凑，尤其是在处理长类型名称时。

我们甚至还可以在方法或属性中使用Self内联，同时使用隐式返回，进一步使上述代码更加紧凑：
extension TextTransform {
    static var capitalize: Self {
        Self { $0.capitalized }
    }

    static var removeLetters: Self {
        Self { $0.filter { !$0.isLetter } }
    }
}


给String扩展两个方法：
extension String {
    func withTransform(_ textTransform: TextTransform) -> String {
        textTransform.closure(self)
    }
    
    mutating func withTransforms(_ textTransforms: [TextTransform]) -> String {
        textTransforms.forEach{ trans in
            self = self.withTransform(trans)
        }
        return self
    }
}

let singelUse = "i am a string"
    .withTransform(.capitalize)
    .withTransform(.removeLetters)

var str = "i am a string"
let groupUse = str.withTransforms([
    .capitalize,
    .removeLetters
])



==========元类型
元类型 Dog.Type 不仅可以保存 Dog 类型的值，还可以保存它的所有子类的值

let dogType: Dog.Type = SubDog.self

func saySomething(dog: Dog.Type) {
    print("\(dog) 汪汪汪!")
}

saySomething(dog: dogType)// SubDog 汪汪汪