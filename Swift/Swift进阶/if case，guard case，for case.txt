==========if case let:
语句 case let x = y 模式允许你检查 y 是否能匹配 x。
而 if case let x = y { … } 严格等同于 switch y { case let x: … }：当你只想与一条 case 匹配时，这种更紧凑的语法尤其有用。有多个 case 时更适合使用 switch。

// 人分为：男性，女性，中性
// 男人拥有：姓名，年龄，游戏机数量
// 女人拥有：姓名，年龄，化妆品数量
// 中性拥有：姓名
enum PersonKind {
    case Man(name: String, age: Int,playerNumber:Int)
    case Woman(name: String, age: Int, HuaZhuangPinNumber: Int)
    case UnknowPerson(name: String)
}

 let pk1 = PersonKind.Man(name: "周杰伦", age: 30, playerNumber: 2000)
 // let pk2 : PersonKind = PersonKind.Woman(name: "张柏芝", age: 35, HuaZhuangPinNumber: 1000)
 // let pk3 = PersonKind.UnknowPerson(name: "泰国人之张三")
 switch  pk1 {
   case let PersonKind.Man(name, age, playerNumber):
        print(name,age,playerNumber)
   case let PersonKind.Woman(name, age, HuaZhuangPinNumber):
        print(name,age,HuaZhuangPinNumber)
    case let PersonKind.UnknowPerson(name):
        print(name)
  }

if case let PersonKind.Man(name, age, playerNumber) = pk1 {
      print(name,age,playerNumber)
}

==========if case let where:
if case let where，比上面多一个关键词where相当于多一个条件，比如判断男性，并且如果游戏机的数量大于100才进行打印，现在由于swift版本问题，where用逗号,代替，在后面进行条件拼接即可，如果你写了where,Xcode也会自动帮你纠错。

 if case let PersonKind.Man(name, age, playerNumber) = pk1, playerNumber > 100 {
    print(name,age,playerNumber)
 }

==========guard case let:
当然，guard case let 类似于 if case let，你可以使用 guard case let 和 guard case let … where … 来确保匹配一个模式或一个条件，而当无法匹配模式或满足条件时就退出。

let pk1 = PersonKind.Man(name: "周杰伦", age: 30, playerNumber: 2000)
guard case let PersonKind.Man(name, age, playerNumber) = pk1, playerNumber > 3000  else{
   print("男性，游戏机数量大于3000这两个条件肯定有一个不成立")
   return
}

==========for case let:
将 for 和 case 组合在一起也能让你有条件地遍历一个集合对象。使用 for case … 语义上类似于 for 循环，而且将它整个循环体封装在了 if case 的结构之中：它只会遍历、处理那些模式匹配了的元素。

 let pk1 = PersonKind.Man(name: "周杰伦", age: 30, playerNumber: 2000)
 let pk2 : PersonKind = PersonKind.Woman(name: "张柏芝", age: 35, HuaZhuangPinNumber: 1000)
 let pk3 = PersonKind.UnknowPerson(name: "泰国人之张三")

 let array = [pk3,pk1,pk2,pk3,pk3]

 for case let PersonKind.UnknowPerson(name) in array{
     print(name)
  }

for case let ... where:
同理，相当于多一个条件，where关键词放在集合的后面

let pk1 = PersonKind.Man(name: "周杰伦", age: 30, playerNumber: 2000)
let pk2 : PersonKind = PersonKind.Woman(name: "张柏芝", age: 35, HuaZhuangPinNumber: 1000)
let pk3 = PersonKind.UnknowPerson(name: "泰国人之张三")
let pk4 = PersonKind.UnknowPerson(name: "泰国人之王五")

let array = [pk3,pk1,pk2,pk3,pk3,pk4]

for case let PersonKind.UnknowPerson(name) in array where name == "泰国人之张三"{
    print(name)
}

/*
打印结果，不会打印王五这个人：
泰国人之张三
泰国人之张三
泰国人之张三
*/


注意：使用 for … where 而不带 case 模式匹配依然是符合 Swift 语法规则的。比如你这样写也是 OK 的：

for m in array where m.name == "泰国人之张三" { … }
这里没有使用模式匹配（没有 case 或 ~=）