https://developer.apple.com/documentation/swift/type(of:)


Returns the dynamic type of a value.
iOS 8.0+
func type<T, Metatype>(of value: T) -> Metatype

Parameters
value
The value for which to find the dynamic type.

Return Value
The dynamic type, which is a metatype instance.


You can use the type(of:) function to find the dynamic type of a value, particularly when the dynamic type is different from the static type.
The static type of a value is the known, compile-time type of the value.
The dynamic type of a value is the value’s actual type at run-time, which can be a subtype of its concrete type.



the count variable has the same static and dynamic type: Int. 
When count is passed to the printInfo(_:) function, however, 
the value parameter has a static type of Any (the type declared for the parameter) and a dynamic type of Int.

func printInfo(_ value: Any) {
    let t = type(of: value)
    print("'\(value)' of type '\(t)'")
}

let count: Int = 5
printInfo(count)
// '5' of type 'Int'

###
The dynamic type returned from type(of:) is a concrete metatype (T.Type) for a class, structure, enumeration, or other nonprotocol type T, or an existential metatype (P.Type) for a protocol or protocol composition P.
###
When the static type of the value passed to type(of:) is constrained to a class or protocol, you can use that metatype to access initializers or other static members of the class or protocol.


class Smiley {
    class var text: String {
        return ":)"
    }
}


class EmojiSmiley: Smiley {
     override class var text: String {
        return "😀"
    }
}


func printSmileyInfo(_ value: Smiley) {
    let smileyType = type(of: value)
    print("Smile!", smileyType.text)
}


let emojiSmiley = EmojiSmiley()
printSmileyInfo(emojiSmiley)
// Smile! 😀
The function uses type(of:) to find the dynamic type of value, which itself is an instance of the Smiley.Type metatype.



Finding the Dynamic Type in a Generic Context:
Normally, you don’t need to be aware of the difference between concrete and existential metatypes, but calling type(of:) can yield unexpected results in a generic context with a type parameter bound to a protocol.

where a generic parameter T is bound to a protocol P, the type parameter is not statically known to be a protocol type in the body of the generic function. 
As a result, type(of:) can only produce the concrete metatype P.Protocol.

When printGenericInfo(_:) is called with a string that has P as its static type, the call to type(of:) returns P.self instead of String.self (the dynamic type inside the parameter).

func printGenericInfo<T>(_ value: T) {
    let t = type(of: value)
    print("'\(value)' of type '\(t)'")
}


protocol P {}
extension String: P {}


let stringAsP: P = "Hello!"
printGenericInfo(stringAsP)
// 'Hello!' of type 'P'

This unexpected result occurs because the call to type(of: value) inside printGenericInfo(_:) must return a metatype that is an instance of T.Type, but String.self (the expected dynamic type) is not an instance of P.Type (the concrete metatype of value).
To get the dynamic type inside value in this generic context, cast the parameter to Any when calling type(of:).
func betterPrintGenericInfo<T>(_ value: T) {
    let t = type(of: value as Any)
    print("'\(value)' of type '\(t)'")
}


betterPrintGenericInfo(stringAsP)
// 'Hello!' of type 'String'


struct SwiftRocks {
    static let author = "Bruno Rocha"
    func postArticle(name: String) {}
}

let blog: SwiftRocks = SwiftRocks()
SwiftRocks.Type是SwiftRocks的元类型。
let something = type(of: blog) // SwiftRocks.Type
let author: String = something.author
let instance: SwiftRocks = something.init()


元类型也可以用于相等性检查，在设计工厂时觉得这很方便。
func create<T: BlogPost>(blogType: T.Type) -> T {
    switch blogType {
    case is TutorialBlogPost.Type:
        return blogType.init(subject: currentSubject)
    case is ArticleBlogPost.Type:
        return blogType.init(subject: getLatestFeatures().random())
    case is TipBlogPost.Type:
        return blogType.init(subject: getKnowledge().random())
    default:
        fatalError("Unknown blog kind!")
    }
}


SwiftRocks指的是实例的类型，它只允许你使用实例属性；
元类型SwiftRocks. Type指的是类本身的类型，它允许你使用SwiftRocks的类属性

所以type(of:)返回对象的元类型


要将元类型作为值 您需要键入该类型的String.self

###
String是类型，"Hello World" 是实例的值一样;String.Type是类型，String.self是元类型的值。
String.Type is the type and String.self is the value of a metatype

let intMetatype: Int.Type = Int.self
###


.self是苹果所谓的静态元类型，它指的是对象的编译时类型
SwiftRocks.author 它还可以写成是SwiftRocks.self.author。

type(of:)将返回一个动态元类型，它是对象的真实运行时类型的元类型。
let myNum: Any = 1 // Compile time type of myNum is Any, but the runtime type is Int.
type(of: myNum) // Int.type

如果对象的子类很重要，你应该使用type(of:)来访问该子类的元类型。否则，你可以直接通过.self访问静态元类型。



协议元类型(Protocol Metatypes):
以下代码将无法编译
protocol MyProtocol {}
let metatype: MyProtocol.Type = MyProtocol.self // Cannot convert value of...

MyProtocol.Type不引用协议自己的元类型，而是任何继承该协议的元类型。苹果称之为existential metatype。
The reason for that is that in the context of protocols, MyProtocol.Type doesn't refer to the protocol's own metatype,
but the metatype of whatever type is inheriting that protocol. Apple calls this an existential metatype.


protocol MyProtocol {}
struct MyType: MyProtocol {}
let metatype: MyProtocol.Type = MyType.self // Now works!

在这种情况下，metatype只能访问MyProtocol类属性和方法，但会调用MyType的实现。
要获取协议类型本身的具体元类型，可以使用.Protocol后缀。这与在其他类型上使用.Type基本相同。
let protMetatype: MyProtocol.Protocol = MyProtocol.self