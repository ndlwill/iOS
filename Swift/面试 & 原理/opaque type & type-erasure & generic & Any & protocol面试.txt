不透明类型（Opaque Types）
定义：不透明类型隐藏其底层具体类型，只揭示其功能。具体类型在函数内部已知并固定，但对调用者隐藏。
用例：当你想要承诺一个函数返回符合协议的特定类型而不揭示确切的底层类型时，你可以使用不透明类型。
语法：使用 some 关键字引入。例如，func makeShape() -> some Shape。
类型标识：每次调用函数时，具体类型都是相同的，保留类型标识。
优点：不透明类型保留类型信息，例如当协议具有关联类型或需要 Self 时。

泛型（Generics）
定义：泛型允许你编写灵活且可重用的代码，可以与不同类型一起工作，调用时指定。
用例：当你想编写一个可以与不同类型一起工作的函数或类型时，同时保持类型安全，你可以使用泛型。
语法：使用尖括号（<T>）引入。例如，func swapValues<T>(_ a: inout T, _ b: inout T)。
类型标识：泛型不保留特定上下文中的特定类型标识。同一个泛型函数可以操作完全不同的类型。
优点：泛型在不同类型之间提供了高度的可重用性和灵活性，同时不损害类型安全。



type’s identity:类型标识, 是指类型的具体实现，即某个值所属的具体类型。
opaque type 指的是具体的某一种类型，但这个类型对外是隐藏的
调用者并不知道这个类型的具体身份（identity），只知道它符合某个协议或满足某些条件。

protocol Shape {
    func area() -> Double
}

struct Circle: Shape {
    var radius: Double
    func area() -> Double {
        return .pi * radius * radius
    }
}

struct Square: Shape {
    var sideLength: Double
    func area() -> Double {
        return sideLength * sideLength
    }
}

func makeShape() -> some Shape {
    return Circle(radius: 10)
}
类型信息保留：尽管 makeShape() 返回的类型信息对调用者是隐藏的，Swift 编译器仍然保留了这个信息，并在内部知道 makeShape() 返回的确切类型是 Circle。

let shape = makeShape()
print(shape.area())

Type’s Identity: makeShape() 的返回值的 type’s identity 是 Circle，但这个信息对调用者是隐藏的。
调用者只知道返回的值遵循 Shape 协议，却不知道它的具体类型是 Circle。

为什么隐藏类型身份（identity）？
隐藏类型身份的主要原因是为了封装实现细节，同时提供类型安全性和编译时检查的能力。
这样可以让函数的使用者依赖协议或接口，而不是具体的实现类型，###从而实现更高的灵活性和更低的耦合度。###
(我的理解就是，当方法内容需要调整时，只需要调整实现，调用者不需要修改方法的调用)
###
它可以让实现细节保持隐藏，同时保持类型的安全性。
###


type-erasure & Any:
type-erasure 遵守协议，有结构（是个具体类型）
Any 允许任何类型

generic & Any:
generic 强制执行类型一致性，提供类型安全
Any 完全灵活，但缺乏类型安全


opaque type:
保留类型信息，但隐藏具体类型
type-erasure:
隐藏具体类型，但遵守特定协议
generic:
可适应任何类型
Any:
可以存储任何类型的值

type-erasure & opaque type:
两者都隐藏具体类型，但opaque type保留类型信息

generic & opaque type:
都有助于代码重用和灵活性
generic在定义时不知道具体类型，opaque type在返回时保留类型信息
当你使用 some 关键字来定义一个返回类型时，Swift 知道这个函数会返回某种具体类型，并且这个具体类型在每次调用时都是一致的。
然而，调用者并不知道这个类型的具体身份是什么，只知道它符合某个协议或满足某个类型约束。


为什么使用 Opaque Type？
封装实现细节：你可以隐藏返回值的具体类型，只暴露出它满足的协议或约束。这有助于封装实现细节，减少调用者对具体类型的依赖。
类型安全性：尽管具体类型是隐藏的，Swift 仍然能够在编译时进行类型检查，确保类型的正确性。
灵活性：当你想要返回某个协议类型的具体实现时，使用 some 可以让你隐藏具体类型，同时仍然提供类型安全。


Any & opaque type:
opaque type隐藏具体类型（some protocol），但保留类型信息(返回特定类型)
Any不保留类型信息

type-erasure & generic:
type-erasure通常用于特定协议，但隐藏具体类型
generic提供更广泛的灵活性，允许任何类型


从 Protocols中 定义方(开发者) 和 调用方(使用者)的角度来说:
Generics中，是开发者不需要知道类型或协议，但是使用者知道类型或协议。
Opaque中，是开发者知道协议，但是使用者不知道协议。
Type Erasure是在Generics的基础之上,通过盒子包装来规避编译器的一种方式。


不同类型	对比
Opaque Type 与 Generic	Opaque Type和泛型都有助于代码重用和灵活性。泛型在定义时不知道具体类型，而Opaque Type在返回时保留类型信息。
Opaque Type 与 Any?	Opaque Type隐藏具体类型但保留类型信息；Any?不保留类型信息。
类型擦除与 Generic	类型擦除通常用于特定协议，隐藏具体类型；泛型提供更广泛的灵活性，允许任何类型。
类型擦除与 Any?	类型擦除遵循协议，有结构；Any?完全灵活，允许任何类型。
Generic 与 Any?	泛型强制执行类型一致性，提供类型安全；Any?完全灵活但缺乏类型安全。


举一个MVVM架构的例子，将Model中的某些具体类型用Opaque Types表达，然后再进行改造:
我们创建一个"User"的模型，具体类型用Opaque Types表达，并创建一个"UserViewModel"来处理该模型。


Any?
把id类型设置为Any?，使得我们可以接受任何类型的id。
protocol Model {
    var id: Any? { get }
}

struct User: Model {
    var id: Any?
}

protocol ViewModel {
    associatedtype ModelType: Model
    init(model: ModelType)
}

struct UserViewModel: ViewModel {
    var model: User

    init(model: User) {
        self.model = model
    }
}


泛型:
通过使用泛型，我们可以保持类型的安全性，而不必知道具体类型。
protocol Model {
    associatedtype Identifier
    var id: Identifier { get }
}

struct User: Model {
    typealias Identifier = UUID
    var id: Identifier
}

protocol ViewModel {
    associatedtype ModelType: Model
    init(model: ModelType)
}

struct UserViewModel<M: Model>: ViewModel {
    var model: M

    init(model: M) {
        self.model = model
    }
}
UserViewModel可以处理任何满足Model协议的类型。


类型擦除:
我们可以使用类型擦除来隐藏具体类型，通常使用一种包装器来实现。如下面的例子中，我们创建了一个AnyModel来隐藏具体的Model类型
protocol Model {
    associatedtype Identifier
    var id: Identifier { get }
}

struct User: Model {
    typealias Identifier = UUID
    var id: Identifier
}

struct AnyModel: Model {
    typealias Identifier = Any
    
    var id: Identifier
    
    init<M: Model>(_ model: M) {
        self.id = model.id as! Identifier
    }
}

protocol ViewModel {
    associatedtype ModelType: Model
    init(model: ModelType)
}

struct UserViewModel: ViewModel {
    var model: AnyModel

    init(model: User) {
        self.model = AnyModel(model)
    }
}
具体的Model类型被隐藏在了AnyModel里面，UserViewModel只知道它处理的是一个满足Model协议的对象。


Opaque Types:
我们无需公开具体的Model类型，只需表达它遵循了某个协议。
protocol Model {
    associatedtype Identifier
    var id: Identifier { get }
}

struct User: Model {
    typealias Identifier = UUID
    var id: Identifier
}

protocol ViewModel {
    associatedtype ModelType: Model
    init(model: ModelType)
}

struct UserViewModel: ViewModel {
    // Property declares an opaque return type, but has no initializer expression from which to infer an underlying type
    var model: some Model

    init(model: User) {
        self.model = model
    }
}
这个会报错
ViewModel不知道具体的Model类型，只知道Model满足某个协议，从而实现了封装。

###
对于上面的总结，Generic 还是比较主要和重要的
###

所有能用Generic的场景都可以使用Opaque Type 吗? 我是否应该把所有的Generic的升级到使用Opaque Type?


举一个可以用Generic的场景, 但是却不可以使用Opaque Type 的例子.
一个典型的场景就是泛型容器，比如一个可以储存任何类型的数组。
在这种情况下，我们需要在类型声明和实例化时都使用同一个类型参数，因此我们不能使用Opaque Type。

struct GenericArray<Element> {
    var elements: [Element]
    
    init(_ elements: [Element]) {
        self.elements = elements
    }
    
    func getElement(at index: Int) -> Element {
        return elements[index]
    }
}

let intArray = GenericArray([1, 2, 3])
let firstElement = intArray.getElement(at: 0) // Returns 1

let stringArray = GenericArray(["Hello", "World"])
let firstString = stringArray.getElement(at: 0) // Returns "Hello"

在这个例子中，我们创建了一个名为GenericArray的泛型结构体，它可以储存任何类型的数组。
我们可以在实例化GenericArray时指定Element的具体类型（例如Int或String），
然后在调用getElement(at:)方法时，返回值的类型也会是我们指定的类型。

然而，如果我们尝试使用Opaque Type来替换这个例子中的泛型
Opaque Type只能用在函数或方法的返回类型上，因此我们无法使用它来定义一个可以储存任意类型的数组。



各种方法都有其优点和缺点。
Opaque Types保持类型一致性，但不能用于存储变量。
类型擦除隐藏了具体类型，但可能使性能下降。
泛型提供了类型安全，但可能会使代码变得复杂。
Any?是最灵活的，但是在使用时需要进行类型检查或强制类型转换。