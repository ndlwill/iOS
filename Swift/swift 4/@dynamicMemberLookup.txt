https://github.com/apple/swift-evolution/blob/main/proposals/0195-dynamic-member-lookup.md

Swift 4.2 中引入了一个新的语法@dynamicMemberLookup（动态成员查找）
Types that use it provide "dot" syntax for arbitrary names which are resolved at runtime - in a completely type safe way.

a = someValue.someMember
someValue.someMember = a
mutateParameter(&someValue.someMember)
and have it be interpreted by the compiler as:
a = someValue[dynamicMember: "someMember"]
someValue[dynamicMember: "someMember"] = a
mutateParameter(&someValue[dynamicMember: "someMember"])

@dynamicMemberLookup struct DictBuilder<Value> {
    struct Helper<Value> {
        let key: String
        var parent: DictBuilder<Value>
        
        func callAsFunction(_ value: Value) -> DictBuilder<Value> {
            var copy = parent
            copy.dict[key] = value
            return copy
        }
    }
    
    var dict = [String: Value]()
    
    subscript(dynamicMember key: String) -> Helper<Value> {
        return DictBuilder.Helper(key: key, parent: self)
    }
}

let dict = DictBuilder<Int>()
    .a(1)
    .b(2)
    .c(3)
    .dict
    
print(dict)

==================================================Compile-time safety with KeyPath
@dynamicMemberLookup
struct Cache {
    private var storage: [String: Data] = [:]
    
    subscript(dynamicMember key: String) -> Data? {
        storage[key]
    }
}

var cache = Cache()
let profile = cache.profile

This feature works completely in runtime and leverages the name of any property we type after the dot symbol to the subscript of the Cache type with the dynamicMember parameter.
The whole logic runs in runtime, and the result is undefined during compilation. 
It is entirely up to you to decide which data you should return from the subscript during runtime and how you want to handle the dynamicMember parameter.

Compile-time safety with KeyPath:
The only downside we can find is the absence of compile-time safety. 
We can treat the Cache type as if it has any property name we type in the code. 
Fortunately, the parameter of the @dynamicMemberLookup subscript may be not only String-typed but also KeyPath.

@dynamicMemberLookup
final class Store<State, Action>: ObservableObject {
    typealias ReduceFunction = (State, Action) -> State
    
    @Published private var state: State
    private let reduce: ReduceFunction
    
    init(
        initialState state: State,
        reduce: @escaping ReduceFunction
    ) {
        self.state = state
        self.reduce = reduce
    }
    
    subscript<T>(dynamicMember keyPath: KeyPath<State, T>) -> T {
        state[keyPath: keyPath]
    }
    
    func send(_ action: Action) {
        state = reduce(state, action)
    }
}

As you can see in the example above, we define the subscript with the dynamicMember parameter accepting an instance of the strong-typed KeyPath. 
In this case, we allow KeyPath of the State type, which helps us to have compile-time safety. 
Because the compiler will show an error anytime we pass a wrong KeyPath, which is not connected to the State type.

struct State {
    var products: [String] = []
    var isLoading = false
}

enum Action {
    case fetch
}

let store: Store<State, Action> = .init(initialState: .init()) { state, action in
    var state = state
    switch action {
    case .fetch:
        state.isLoading = true
    }
    return state
}


print(store.isLoading)
print(store.products)
print(store.favorites) // Compiler error

In the example above, we access the private state property of the Store using the subscript accepting the KeyPath. 
It looks similar to the previous example, but in this case, 
the compiler shows an error whenever you try to access an unavailable property of the State type.


==================================================Combining dynamic member lookup with key paths
@dynamicMemberLookup
struct Settings {
    var colorTheme = ColorTheme.modern
    var itemPageSize = 25
    var keepUserLoggedIn = true

    subscript(dynamicMember member: String) -> Any? {
        switch member {
        case "colorTheme":
            return colorTheme
        case "itemPageSize":
            return itemPageSize
        case "keepUserLoggedIn":
            return keepUserLoggedIn
        default:
            return nil
        }
    }
}
Since the above type supports dynamic member lookup, we can use any arbitrary name when accessing one of its properties, 
and the compiler won’t give us any kind of warning or error when there’s no declared property matching that name:

let settings = Settings()
let theme = settings.colorTheme
let somethingUnknown = settings.somePropertyName

However, there is one more way to use @dynamicMemberLookup that can also be incredibly useful even within completely static Swift code — and that’s to combine it with key paths.

Reference type from “Combining value and reference types in Swift” (which enables a value type to be passed as a reference), 
and add support for dynamically looking up one of its wrapped Value type’s members — but this time using a KeyPath, rather than a String:
@dynamicMemberLookup
class Reference<Value> {
    private(set) var value: Value

    init(value: Value) {
        self.value = value
    }

    subscript<T>(dynamicMember keyPath: KeyPath<Value, T>) -> T {
        value[keyPath: keyPath]
    }
}

Now this is really cool, because what the above enables us to do is to access any of our Value type’s properties directly as if they were properties of our Reference type itself — like this:
let reference = Reference(value: Settings())
let theme = reference.colorTheme

Since we implemented our Reference type’s dynamicMember subscript using a key path, 
we won’t be able to look up any arbitrary property name when using it, like we could when using strings.

We can even add a mutable version too, by creating a subscript overload that accepts a WritableKeyPath, and by then implementing both a getter and a setter for it:
extension Reference {
    subscript<T>(dynamicMember keyPath: WritableKeyPath<Value, T>) -> T {
        get { value[keyPath: keyPath] }
        set { value[keyPath: keyPath] = newValue }
    }
}

With the above in place, we can now directly mutate any Value that’s wrapped using our Reference type — just as if we were mutating the reference instance itself:
let reference = Reference(value: Settings())
reference.theme = .oldSchool



@dynamicMemberLookup
class Reference<Value> {
    fileprivate(set) var value: Value

    init(value: Value) {
        self.value = value
    }

    subscript<T>(dynamicMember keyPath: KeyPath<Value, T>) -> T {
        value[keyPath: keyPath]
    }
}

class MutableReference<Value>: Reference<Value> {
    subscript<T>(dynamicMember keyPath: WritableKeyPath<Value, T>) -> T {
        get { value[keyPath: keyPath] }
        set { value[keyPath: keyPath] = newValue }
    }
}


Using the above, we can now easily pass a value type as a reference, 
and both read and mutate its properties as if we were accessing the wrapped value directly — for example like this:

class ProfileViewModel {
    private let user: User
    private let settings: MutableReference<Settings>

    init(user: User, settings: MutableReference<Settings>) {
        self.user = user
        self.settings = settings
    }

    func makeEmailAddressIcon() -> Icon {
        // Reading Setting's 'colorTheme' property:
        var icon = Icon.email
        icon.useLightVersion = settings.colorTheme.isDark
        return icon
    }

    func rememberMeSwitchToggled(to newValue: Bool) {
        // Mutating Setting's 'keepUserLoggedIn' property:
        settings.keepUserLoggedIn = newValue
    }
}