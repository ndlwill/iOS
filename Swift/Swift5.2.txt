-----将 Key Path 表达式作为函数
可以像调用函数一样使用关键路径表达式。
配合高阶函数可以进一步简化代码。
适用于结构体与类。
// 结构体
struct Student {
    var stuName: String
    var stuClass: String
    var stuAge: Int
    var canVote:Bool {
        return stuAge > 18
    }
}

// 构造三个实例并放入数组
let zhangsan = Student(stuName: "张三", stuClass: "移动互联应用技术", stuAge: 17)
let lisi = Student(stuName: "李四", stuClass: "云计算技术与应用", stuAge: 18)
let wangwu = Student(stuName: "王五", stuClass: "大数据技术与应用", stuAge: 19)
let stus = [zhangsan, lisi, wangwu]

// 1. 获取所有人的名字
let stuNames = stus.map(\.stuName)
// ["张三", "李四", "王五"]

// 2. 筛选年龄达到可以投票的学生
let stuNo = stus.filter(\.canVote)
// [{stuName "王五", stuClass "大数据技术与应用", stuAge 19}]


-----可调用类型
callAsFunction 是 Swift 5.2 引入的一种特性，用于使自定义类型（通常是结构体或类）的实例可以像函数一样被调用。
struct Adder {
    let base: Int
    
    // 定义了一个 callAsFunction 方法
    func callAsFunction(_ x: Int) -> Int {
        return base + x
    }
}
let adder = Adder(base: 10)
let result = adder(5) // 调用 Adder 实例，返回 15


如果一个值是通过类型中名为callAsFunction的方法实现的，那么可以直接通过语法该类型的实例()获取该值。
适用于结构体与类。

// 结构体
struct Student {
    var stuName: String
    var stuClass: String
    var stuAge: Int
    
    // 声明一个callAsFunction的函数，返回值根据需要调整
    func callAsFunction() -> String {
        if stuAge > 18 {
            return "具有投票权"
        }
        return "不具有投票权"
    }
}

let zhangsan = Student(stuName: "张三", stuClass: "移动互联应用技术", stuAge: 17)
// 直接通过对象调用
print(zhangsan()) // "不具有投票权"，等价于 zhangsan.callAsFunction()

let lisi = Student(stuName: "李四", stuClass: "云计算技术与应用", stuAge: 19)
print(lisi()) // "具有投票权"
