闭包和OC中的block非常相似
OC中的block是匿名的函数
Swift中的闭包是一个特殊的函数
block和闭包都经常用于回调

block的写法:
类型:
返回值(^block的名称)(block的参数)

值:
^(参数列表) {
    // 执行的代码
};


函数和闭包都是引用类型
###闭包是引用类型###

定义网络请求的类
class HttpTool: NSObject {

    func loadRequest(callBack : ()->()){
        dispatch_async(dispatch_get_global_queue(0, 0)) { () -> Void in
            print("加载数据", [NSThread.currentThread()])

             dispatch_async(dispatch_get_main_queue(), { () -> Void in
                callBack()
             })
        }
    }
}
进行网络请求,请求到数据后利用闭包进行回调
    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {
        // 网络请求
        httpTool.loadRequest ({ () -> () in
            print("回到主线程", NSThread.currentThread());
        })
    }

Swift 闭包：
可以使用简化参数名，如$0, $1(从0开始，表示第i个参数...)
闭包写法总结:
闭包的写法:
类型:(形参列表)->(返回值)
技巧:初学者定义闭包类型,直接写()->().再填充参数和返回值

值:
{
    (形参) -> 返回值类型 in
    // 执行代码
}

// 无参无返回值的闭包
let studname = { print("Swift 闭包实例。") }
studname()

// 以下闭包形式接收两个参数并返回布尔值：
{(Int, Int) -> Bool in
   Statement1
   Statement 2
    ---
   Statement n
}



闭包的简写
如果闭包没有参数,没有返回值.in和in之前的内容可以省略
    httpTool.loadRequest({
        print("回到主线程", NSThread.currentThread());
    })


// MARK:- 尾随闭包写法
尾随闭包写法:
如果闭包是函数的最后一个参数,则可以将闭包写在()后面
如果函数只有一个参数,并且这个参数是闭包,那么()可以不写
httpTool.loadRequest() {
    print("回到主线程", NSThread.currentThread());
}
// 开发中建议该写法
httpTool.loadRequest {
    print("回到主线程", NSThread.currentThread());
}

---------------------sorted
let names = ["AT", "AE", "D", "S", "BE"]

// 使用普通函数(或内嵌函数)提供排序功能,闭包函数类型需为(String, String) -> Bool。
func backwards(s1: String, s2: String) -> Bool {
    return s1 > s2 // 逆序排序
}
var reversed = names.sorted(by: backwards)
print(reversed)


参数名称缩写：
您可以直接通过$0,$1,$2来顺序调用闭包的参数
var reversed = names.sorted( by: { $0 > $1 } )// 对应参数名称缩写的类型会通过函数类型进行推断。in 关键字同样也可以被省略
print(reversed)

运算符函数：
var reversed = names.sorted(by: >)

尾随闭包：
var reversed = names.sorted() { $0 > $1 }
print(reversed)
sort() 后的 { $0 > $1} 为尾随闭包。

如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉。
reversed = names.sorted { $0 > $1 }

------------------尾随闭包
书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用
func someFunctionThatTakesAClosure(closure: () -> Void) {
    // 函数体部分
}

// 以下是不使用尾随闭包进行函数调用
someFunctionThatTakesAClosure({
    // 闭包主体部分
})

// 以下是使用尾随闭包进行函数调用
someFunctionThatTakesAClosure() {
  // 闭包主体部分
}

--------------------------------------------捕获值
即使定义这些常量和变量的原域已经不存在，闭包仍然可以在闭包函数体内引用和修改这些值
嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量

func makeIncrementor(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementor() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementor
}

let incrementByTen = makeIncrementor(forIncrement: 10)

// 返回的值为10
print(incrementByTen())

// 返回的值为20
print(incrementByTen())

// 返回的值为30
print(incrementByTen())

let alsoIncrementByTen = incrementByTen
// 返回的值也为50
print(alsoIncrementByTen())// 40

--------------------------------------------闭包的循环引用
swift没有dealloc方法，有析构函数
deinit{
	
}

如果在HttpTool中有对闭包进行强引用,则会形成循环引用
class HttpTool: NSObject {

    // 定义属性,来强引用传入的闭包
    var callBack : (()->())?

    func loadRequest(callBack : ()->()){
        dispatch_async(dispatch_get_global_queue(0, 0)) { () -> Void in
            print("加载数据", [NSThread.currentThread()])

             dispatch_async(dispatch_get_main_queue(), { () -> Void in
                callBack()
             })
        }

        self.callBack = callBack
    }
}


swift中解决循环引用的方式
    //1.// weak var weakSelf = self;

    //2.//这个方式不能省略() -> () in
    // [weak self] () -> () in

    //3.
    // [unowned self] () -> () in
    
    httpTool.loadRequest { [unowned self] () -> () in
    	//1.//weakSelf!.view.backgroundColor = UIColor.redColor()

    	//2.
    	//self!.view.backgroundColor = UIColor.redColor()

    	//3.
        self.view.backgroundColor = UIColor.redColor()
        print("回到主线程", NSThread.currentThread());
    }


ViewController的self是个可选类型  可能有值可能没有值

__weak:当弱指针指向的对象销毁时，指针自动指向nil
__unsafe_unretained:不安全 当弱指针指向的对象销毁时，指针依然指向之前的内存地址