A property wrapper type that instantiates an observable object.
iOS14.0
@frozen @propertyWrapper
struct StateObject<ObjectType> where ObjectType : ObservableObject

Use a state object as the single source of truth for a reference type that you store in a view hierarchy.
Create a state object in an App, Scene, or View by applying the @StateObject attribute to a property declaration and providing an initial value that conforms to the ObservableObject protocol.
Declare state objects as private to prevent setting them from a memberwise initializer, which can conflict with the storage management that SwiftUI provides:

class DataModel: ObservableObject {
    @Published var name = "Some Name"
    @Published var isEnabled = false
}

struct MyView: View {
    @StateObject private var model = DataModel() // Create the state object.

    var body: some View {
        Text(model.name) // Updates when the data model changes.
        MySubView()
            .environmentObject(model)
    }
}

SwiftUI creates a new instance of the model object only once during the lifetime of the container that declares the state object.
For example, SwiftUI doesn’t create a new instance if a view’s inputs change, but does create a new instance if the identity of a view changes.
When published properties of the observable object change, SwiftUI updates any view that depends on those properties, like the Text view in the above example.

#####
Note
If you need to store a value type, like a structure, string, or integer, use the State property wrapper instead.
Also use State if you need to store a reference type that conforms to the Observable() protocol.
#####


###
Share state objects with subviews
###

