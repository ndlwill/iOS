Manage the data that your app uses to drive its interface.

SwiftUI offers a declarative approach to user interface design. 
As you compose a hierarchy of views, you also indicate data dependencies for the views. 
When the data changes, either due to an external event or because of an action that the user performs, SwiftUI automatically updates the affected parts of the interface. 
As a result, the framework automatically performs most of the work that view controllers traditionally do.

The framework provides tools, like state variables and bindings, for connecting your app’s data to the user interface.
These tools help you maintain a single source of truth for every piece of data in your app, in part by reducing the amount of glue logic you write.
Select the tool that best suits the task you need to perform:
1.Manage transient UI state locally within a view by wrapping value types as State properties.
2.Share a reference to a source of truth, like local state, using the Binding property wrapper.
3.Connect to and observe reference model data in views by applying the Observable() macro to the model data type.
Instantiate an observable model data type directly in a view using a State property.
Share the observable model data with other views in the hierarchy without passing a reference using the Environment property wrapper.


#####
Leveraging property wrappers
#####
SwiftUI implements many data management types, like State and Binding, as Swift property wrappers.
Apply a property wrapper by adding an attribute with the wrapper’s name to a property’s declaration.

@State private var isVisible = true // Declares isVisible as a state variable.

The property gains the behavior that the wrapper specifies.
The state and data flow property wrappers in SwiftUI watch for changes in your data, and automatically update affected views as necessary.
When you refer directly to the property in your code, you access the wrapped value, which for the isVisible state property in the example above is the stored Boolean.
if isVisible == true {
    Text("Hello") // Only renders when isVisible is true.
}

Alternatively, you can access a property wrapper’s projected value by prefixing the property name with the dollar sign ($).
SwiftUI state and data flow property wrappers project a Binding, which is a two-way connection to the wrapped value, allowing another view to access and mutate a single source of truth.

Toggle("Visible", isOn: $isVisible) // The toggle can update the stored value.