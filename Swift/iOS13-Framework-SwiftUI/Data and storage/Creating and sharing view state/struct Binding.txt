A property wrapper type that can read and write a value owned by a source of truth.
iOS13.0
@frozen @propertyWrapper @dynamicMemberLookup
struct Binding<Value>

Use a binding to create a two-way connection between a property that stores data, and a view that displays and changes the data.
A binding connects a property to a source of truth stored elsewhere, instead of storing data directly.
For example, a button that toggles between play and pause can create a binding to a property of its parent view using the Binding property wrapper.

struct PlayButton: View {
    @Binding var isPlaying: Bool


    var body: some View {
        Button(isPlaying ? "Pause" : "Play") {
            isPlaying.toggle()
        }
    }
}

The parent view declares a property to hold the playing state, using the State property wrapper to indicate that this property is the value’s source of truth.
struct PlayerView: View {
    var episode: Episode
    @State private var isPlaying: Bool = false


    var body: some View {
        VStack {
            Text(episode.title)
                .foregroundStyle(isPlaying ? .primary : .secondary)
            PlayButton(isPlaying: $isPlaying) // Pass a binding.
        }
    }
}

When PlayerView initializes PlayButton, it passes a binding of its state property into the button’s binding property.
Applying the $ prefix to a property wrapped value returns its projectedValue, which for a state property wrapper returns a binding to the value.
Whenever the user taps the PlayButton, the PlayerView updates its isPlaying state.

Note
To create bindings to properties of a type that conforms to the Observable protocol, use the Bindable property wrapper.