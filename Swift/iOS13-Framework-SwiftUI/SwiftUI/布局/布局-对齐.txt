在 WWDC 2022 中，苹果为 SwiftUI 增添了 Layout 协议，让我们有了更多的机会了解和验证 SwiftUI 的布局原理。


#####
对齐（ Alignment ）
在 SwiftUI 中，对齐是指在布局容器中，将多个视图按照对齐指南（ Alignment Guide ）进行对齐。

在“对齐”行为中最关键的两点为:
以什么为对齐指南
对哪些视图进行“对齐”
#####


Alignment Guides in SwiftUI:
https://swiftui-lab.com/alignment-guides/

#####
对齐指南（ alignment guide）用来标识视图间进行对齐的依据，
#####
它具备如下特点：
1. 对齐指南不仅可以标识点，还可以标识线
在 SwiftUI 中，分别用 HorizontalAlignment 和 VerticalAlignment 来标识在视图纵轴和横轴方向的参考线，并且可以由两者共同构成对视图中的某个具体的参考点的标识。
HorizontalAlignment. leading 、HorizontalAlignment. center 、HorizontalAlignment. trailing 分别标识了前沿、中心和后缘（ 沿视图水平轴 ）。
VerticalAlignment. top 、VerticalAlignment. center 、VerticalAlignment. bottom 则分别标识了顶部、中心和底部（ 沿视图垂直轴 ）。
而 Alignment. topLeading 则由 HorizontalAlignment. leading 和 VerticalAlignment. top 构成，两条参考线的交叉点标识了视图的顶部—前沿。

2. 对齐指南由函数构成
HorizontalAlignment 和 VerticalAlignment 本质上是一个返回类型为 CGFloat 的函数。该函数将返回沿特定轴向的对齐位置（ 偏移量 ）

3. 对齐指南支持多种布局方向
正是由于对齐指南由函数构成，因此其先天便具备了灵活的适应能力。在 SwiftUI 中，系统预置对齐指南都提供了对不同布局方向的支持。只需修改视图的排版方向，对齐指南将自动改变其对应的位置

VStack(alignment:.leading){
    Text("Hello world")
    Text("WWDC 2022")
}
.environment(\.layoutDirection, .rightToLeft)


自定义对齐指南:
除了 SwiftUI 提供的预置对齐指南外，开发者也可以自定义对齐指南：

struct OneThirdWidthID: AlignmentID {
    static func defaultValue(in context: ViewDimensions) -> CGFloat {
        context.width / 3
    }
}
// 自定义了一个 HorizontalAlignment , 该参考值为视图宽度的三分之一
extension HorizontalAlignment {
    static let oneThird = HorizontalAlignment(OneThirdWidthID.self)
}

// 也可以为 ZStack 、frame 定义同时具备两个维度值的参考点
extension Alignment {
    static let customAlignment = Alignment(horizontal: .oneThird, vertical: .top)
}
自定义对齐指南与 SwiftUI 预置的对齐指南一样，可用于任何支持对齐的容器视图。


alignmentGuide 修饰器:
在 SwiftUI 中，开发者可以使用 alignmentGuide 修饰器来修改视图某个对齐指南的值(为对齐指南设定显式值)

struct AlignmentGuideDemo:View{
    var body: some View{
        VStack(alignment:.leading) {
            rectangle // Rectangle1
                .alignmentGuide(.leading, computeValue: { viewDimensions in
                    let defaultLeading = viewDimensions[.leading] // default is 0
                    let newLeading = defaultLeading + 30
                    return newLeading
                })

            rectangle // Rectangle2
        }
        .border(.pink)
    }

    var rectangle:some View {
        Rectangle()
            .fill(.blue.gradient)
            .frame(width: 100, height: 100)
    }
}
通过 alignmentGuide 我们将 Rectangle 1 的 HorizontalAlignment. leading 沿水平轴向右侧偏移了 30


对齐指南的显式值:
对齐指南值 = 显式值 ?? 默认值

视图中的每个对齐指南都有默认值（ 通过在对齐指南定义中的 defaultValue 方法获取 ）
在不为对齐指南设置显式值（ 显式值为 nil ）的情况下，对齐指南将返回默认值。

Rectangle()
    .fill(.blue.gradient)
    .frame(width: 100, height: 100)
// 默认的对齐指南值：
// leading: 0 , HorizontalAlignment.center: 50, trailing: 100
// top: 0 , VerticalAlignment.center: 50 , bottom: 100
// firstTextBaseline : 100 , lastTextBaseline : 100

如果我们使用了 alignmentGuide 为某个对齐指南设置了显式值，那么此时对齐指南的值为我们设置的显式值。

Rectangle()
    .fill(.blue.gradient)
    .frame(width: 100, height: 100)
    .alignmentGuide(.leading, computeValue: { viewDimensions in
        let leading = viewDimensions[.leading] // 由于此时显式值为 nil , 因此 leading 值为 0
        return viewDimensions.width / 3 // 将 leading 的显式值设置为宽度三分之一处
    })
    .alignmentGuide(.leading, computeValue: { viewDimensions in
        let leading = viewDimensions[.leading] //  因为上面设置了显式值，此时 leading 值为 33.33
        let explicitLeading = viewDimensions[explicit: .leading] // 显式值 , 此时为 Optional(33.33)
        return viewDimensions[HorizontalAlignment.center] // 再度设置 leading 的显式值。此时显式值为 Optional(50) , .leading 值为 50
    })

即使你没有修改对齐指南的默认值，但只要为 alignmentGuide 提供了返回值，便设置了显式值

Rectangle()
    .fill(.blue.gradient)
    .frame(width: 100, height: 100)
    .alignmentGuide(.leading, computeValue: { viewDimensions in
        let leading = viewDimensions[.leading] // 此时 leading 的显式值为 nil
        return leading  // 此时 leading 为 0 ，leading 的显式值为 0
    })


特殊的对齐指南:
firstTextBaseline、lastTextBaseline 。因为这两个对齐指南会根据视图内容的不同而变化。

Rectangle()
    .fill(.orange.gradient)
    .frame(width: 100, height: 100)
视图中没有文字，firstTextBaseline 和 lastTextBaseline 等同于 bottom


Text("Hello world")
    .border(.red)
单行文字，firstTextBaseline 和 lastTextBaseline 相同


Text("山不在高，有仙则名。水不在深，有龙则灵。斯是陋室，惟吾德馨。苔痕上阶绿，草色入帘青。谈笑有鸿儒，往来无白丁。可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。南阳诸葛庐，西蜀子云亭。孔子云：何陋之有？")
    .frame(width:200)
多行文字，firstTextBaseline 为第一行文字基线，lastTextBaseline 为最后一行文字基线

复合视图的 firstTextBaseline 和 lastTextBaseline 计算方法为:
对于 firstTextBaseline ，如果复合视图中（ 容器中 ）的子视图存在显式值非 nil 的 firstTextBaseline ，则返回显式值位置最高的 firstTextBaseline，否则返回默认值（ 通常为 bottom ）
对于 lastTextBaseline ，如果复合视图中（ 容器中 ）的子视图存在显式值非 nil 的 lastTextBaseline ，则返回显式值位置最低的 lastTextBaseline，否则返回默认值（ 通常为 bottom ）


为符合 Layout 协议的自定义布局设置显式对齐指南:
SwiftUI 4.0 新增的 Layout 协议，让开发者拥有了自定义布局容器的能力。
Layout 协议提供了两个不同参数类型的 explicitAlignment 方法，分别对应 VerticalAlignment 和 HorizontalAlignment 类型。
explicitAlignment 让开发者可以站在布局的角度来设置对齐指南的显式值。explicitAlignment 的默认实现将为任何的布局指南的显式值返回 nil 。


// SwiftUI 通过此方法来获取特定的对齐指南的显式值
func explicitAlignment(of guide: VerticalAlignment,  // 查询的对齐指南
                       in bounds: CGRect, // 自定义容器的 bounds ，该 bounds 的尺寸由 sizeThatFits 方法计算得出，与 placeSubviews 的 bounds 参数一致
                       proposal: ProposedViewSize,  // 父视图的建议尺寸
                       subviews: Subviews,  // 容器内的子视图代理
                       cache: inout CacheInfo // 缓存数据，本例中，我们在缓存数据中保存了每个子视图的 viewDimension、虚拟 bounds 能信息
                      ) -> CGFloat? {
    let offsetY = cache.cropBounds.minY * -1
    let infinity: CGFloat = .infinity

    // 检查子视图中是否有 显式 firstTextBaseline 不为 nil 的视图。如果有，则返回位置最高的 firstTextBaseline 值。 
    if guide == .firstTextBaseline,!cache.subviewInfo.isEmpty {
        let firstTextBaseline = cache.subviewInfo.reduce(infinity) { current, info in
            let baseline = info.viewDimension[explicit: .firstTextBaseline] ?? infinity
            // 将子视图的显式 firstTextBaseline 转换成 bounds 中的偏移值
            let transformBaseline = transformPoint(original: baseline + info.bounds.minY, offset: offsetY, targetBoundsMinX: 0)
            // 返回位置最高的值（ 值最小 ）
            return min(current, transformBaseline)
        }
        return firstTextBaseline != infinity ? firstTextBaseline : nil
    }

    if guide == .lastTextBaseline,!cache.subviewInfo.isEmpty {
        let lastTextBaseline = cache.subviewInfo.reduce(-infinity) { current, info in
            let baseline = info.viewDimension[explicit: .lastTextBaseline] ?? -infinity
            let transformBaseline = transformPoint(original: baseline + info.bounds.minY, offset: offsetY, targetBoundsMinX: 0)
            return max(current, transformBaseline)
        }
        return lastTextBaseline != -infinity ? lastTextBaseline : nil
    }

    return nil
}

如果你只想让你的自定义布局容器呈现与 SwiftUI 预置容器一致的对齐指南效果，直接使用 Layout 协议的默认实现即可（ 无需实现 explicitAlignment 方法 ）。
即使布局容器通过 explicitAlignment 为对齐指南提供了显式值，开发者仍然可以通过 alignmentGuide 做进一步设置。


对哪些视图进行“对齐”:
VStack(alignment:.trailing) { ... }
ZStack(alignment: .center) { ... }
HStack(alignment:.lastTextBaseline) { ... }
GridRow(alignment:.firstTextBaseline) { ... }

ZStack(alignment: .bottomLeading) {
    Rectangle()
        .fill(.orange.gradient)
        .frame(width: 100, height: 300)
    Rectangle()
        .fill(.cyan.gradient).opacity(0.7)
        .frame(width: 300, height: 100)
}
#####
按顺序重叠排列 Rectangle 1 和 Rectangle 2，并让两者的 bottomLeading 对齐
因为在布局容器构造方法中设定的对齐指南只用于容器的子视图之间。
#####


布局容器在布局时，容器会为每个子视图提供一个建议尺寸（ proposal size ），子视图将参考容器提供的建议尺寸返回自己的需求尺寸（ 子视图也可以完全无视容器的建议尺寸而提供任意的需求尺寸 ）。
容器按照预设的行为（ 在指定轴向排列、点对齐、线对齐、添加间隙等 ）在一个虚拟的画布中摆放所有的子视图。
摆放结束后，容器将汇总摆放后的所有子视图的情况并向它的父视图（ 父容器 ）返回一个自身的需求尺寸。
因此，在布局容器对子视图进行对齐摆放过程中，布局容器的尺寸并没有确定下来，所以不会存在将子视图的对齐指南与容器的对齐指南进行“对齐”的可能。

一个 ZStack 的复制品:
// 容器的父视图（父容器）通过调用容器的 sizeThatFits 获取容器的建议尺寸，本方法通常会被多次调用，并提供不同的建议尺寸
func sizeThatFits(
    proposal: ProposedViewSize, // 容器的父视图（父容器）提供的建议尺寸
    subviews: Subviews, // 当前容器内的所有子视图的代理
    cache: inout CacheInfo // 缓存数据，本例中用于保存子视图的返回的需求尺寸，减少调用次数
) -> CGSize {
    cache = .init() // 清除缓存
    for subview in subviews {
        // 为子视图提供建议尺寸，获取子视图的需求尺寸 (ViewDimensions)
        let viewDimension = subview.dimensions(in: proposal)
        // 根据 MyZStack 的 alignment 的设置获取子视图 alignmentGuide 对应的点
        let alignmentGuide: CGPoint = .init(
            x: viewDimension[alignment.horizontal],
            y: viewDimension[alignment.vertical]
        )
        // 以子视图的 alignmentGuide 对应点为 (0,0) , 在虚拟的画布中，为子视图创建 Bounds
        let bounds: CGRect = .init(
            origin: .init(x: -alignmentGuide.x, y: -alignmentGuide.y),
            size: .init(width: viewDimension.width, height: viewDimension.height)
        )
        // 保存子视图在虚拟画布中的信息
        cache.subviewInfo.append(.init(viewDimension: viewDimension, bounds: bounds))
    }

    // 根据所有子视图在虚拟画布中的数据，生成 MyZStack 的 Bounds
    cache.cropBounds = cache.subviewInfo.map(\.bounds).cropBounds()
    // 返回当前容器的需求尺寸，当前容器的父视图将使用该尺寸在它的内部进行摆放
    return cache.cropBounds.size
}

// 容器的父视图（父容器）将在需要的时机调用本方法，为本容器的子视图设置渲染尺寸
func placeSubviews(
    in bounds: CGRect, // 根据当前容器在 sizeThatFits 提供的尺寸，在真实渲染处创建的 Bounds
    proposal: ProposedViewSize, // 容器的父视图（父容器）提供的建议尺寸
    subviews: Subviews, // 当前容器内的所有子视图的代理
    cache: inout CacheInfo // 缓存数据，本例中用于保存子视图的返回的需求尺寸，减少调用次数
) {
    // 虚拟画布左上角的偏移值 ( 到 0,0 )
    let offsetX = cache.cropBounds.minX * -1
    let offsetY = cache.cropBounds.minY * -1

    for index in subviews.indices {
        let info = cache.subviewInfo[index]
        // 将虚拟画布中的位置信息转换成渲染 bounds 的位置信息
        let x = transformPoint(original: info.bounds.minX, offset: offsetX, targetBoundsMinX: bounds.minX)
        let y = transformPoint(original: info.bounds.minY, offset: offsetY, targetBoundsMinX: bounds.minY)
        // 将转换后的位置信息设置到子视图上
        subviews[index].place(at: .init(x: x, y: y), anchor: .topLeading, proposal: proposal)
    }
}



很多 modifier 的功能也都是通过布局来实现的。例如 overlay、background、frame、padding 等等。
你可以将 overlay 和 background 视作一个特殊版本的 ZStack

// 主视图
Rectangle()
    .fill(.orange.gradient)
    .frame(width: 100, height: 100)
    // 附加视图
    .overlay(alignment:.topTrailing){
        Text("Hi")
    }

伪代码:

_OverlayLayout {
    // 主视图
    Rectangle()
        .fill(.orange.gradient)
        .frame(width: 100, height: 100)
    
    // 附加视图
    Text("Hi")
        .layoutValue(key: Alignment.self, value: .topTrailing) // 一种子视图向最近容器传递信息的方式
}
与 ZStack 的不同在于，它只会包含两个子视图，且它的尺寸将仅由主视图来决定
主视图将和附加视图按照设定的对齐指南进行对齐
只要理解了这点，就会知道该如何调整主视图或辅助视图的对齐指南了，比如：

// 主视图
Rectangle()
    .fill(.orange.gradient)
    .frame(width: 100, height: 100)
    .alignmentGuide(.trailing, computeValue: {
        $0[.trailing] - 30
    })
    .alignmentGuide(.top, computeValue: {
        $0[.top] + 30
    })
    // 附加视图
    .overlay(alignment:.topTrailing){
        Text("Hi")
    }


frame:
frame 本质上就是 SwiftUI 中一个用于调节尺寸的布局容器，它会变换容器传递给子视图的建议尺寸，也可能会改变子视图返回给容器的需求尺寸
VStack {
    Text("Hello world")
       .frame(width: 10, height: 30, alignment: .top)
}

由于添加了 frame 修饰器，因此 FrameLayout（ 实现 frame 的后端布局容器 ）将无视 VStack 提供的建议尺寸，强行为 Text 提供 10 x 30 的建议尺寸，并且无视子视图 Text 的需求尺寸，为父视图（ VStack ）返回 10 x 30 的需求尺寸。
虽然 FrameLayout 中只包含一个子视图，但在布局时它会让子视图与一个特定尺寸的虚拟视图进行对齐。
或许将上面的 frame 代码转换成 background 的布局模式会更加方便理解：

_BackgroundLayout {
    Color.clear
        .frame(width: 10, height: 30)
    
    Text("Hello world")
        .layoutValue(key: Alignment.self, value: .top)
}