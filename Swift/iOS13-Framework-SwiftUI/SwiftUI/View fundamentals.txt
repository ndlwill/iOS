https://developer.apple.com/documentation/swiftui/view-fundamentals


###
Because the system may reinitialize a view at any time, it’s important to avoid doing any significant work in your view’s initialization code.
It’s often best to omit an explicit initializer, as in the example above, allowing Swift to synthesize a member-wise initializer instead.
###


Laying out:
When SwiftUI renders a view hierarchy, it recursively evaluates each child view: 
The parent view proposes a size to the child views it contains, and the child views respond with a computed size.


Limit the view size:
In the example above, SwiftUI has built-in views that manage size in different ways, including views that:
Expand to fill the space offered by their parent, like Color, LinearGradient, and Circle.
Have an ideal size that varies according to their contents, like Text and the container views.
Have an ideal size that never varies, like Toggle or DatePicker.

You can constrain a view to a fixed size by adding a frame modifier. 
For example, use the frame(width:height:alignment:) modifier to limit the width the circle to 40 points
When you add a frame modifier, SwiftUI wraps the affected view, effectively adding a new view to the view hierarchy.