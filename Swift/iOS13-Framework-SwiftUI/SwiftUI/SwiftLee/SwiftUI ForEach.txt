https://www.avanderlee.com/swiftui/swiftui-foreach-loop-index/


==================================================What is SwiftUI ForEach?
The SwiftUI ForEach view allows you to iterate over a collection and generate views for each element.
It’s especially useful when working with List, LazyVStack, or any container that supports multiple children.

struct ContentView: View {
    let names = ["Antoine", "Maaike", "Sep", "Jip"]

    var body: some View {
        ForEach(names, id: \.self) { name in
            Text(name)
        }
    }
}

#####
// 我们使用 \.self 作为标识符来遍历集合中的所有名称，因为 String 符合 Hashable
In the above example, we iterate over all names in the collection by using \.self as the identifier since String conforms to Hashable. 
For custom types, it’s better to provide a unique identifier via the Identifiable protocol.
#####


==================================================ForEach with Identifiable Data
#####
Iterating over a collection using the Identifiable protocol is the cleanest approach.
It allows us to remove the \.self identifier and rely on the id property requirement of the Identifiable protocol instead:

struct ContentView: View {
    let people = [
        Person(id: UUID(), name: "Antoine"),
        Person(id: UUID(), name: "Maaike")
    ]

    var body: some View {
        ForEach(people) { person in
            Text(person.name)
        }
    }
}

Using Identifiable helps SwiftUI track view identity across state updates and avoid unnecessary redraws. // 使用 Identifiable 有助于 SwiftUI 在状态更新期间跟踪视图身份并避免不必要的重绘。
#####


==================================================Using ForEach in Lists
When used inside a List, the SwiftUI ForEach view becomes essential for rendering dynamic rows:
List {
    ForEach(people) { person in
        HStack {
            Image(systemName: "person")
            Text(person.name)
        }
    }
}


==================================================Iterating with an Index
By using an enumerated array, you can iterate over items and their indexes:

ForEach(Array(people.enumerated()), id: \.offset) { index, person in
    Text("Index \(index): \(person.name)")
}

This can occasionally be useful if you need to have the index at hand while performing index-based view styling, for example.