https://www.avanderlee.com/swiftui/identifiable-protocol-object-identifier/


#####
The Identifiable protocol in SwiftUI allows you to add a unique object identity. 
The protocol requires a single ID property of any hashable type, making it a flexible protocol for all kinds of instances.
#####


==================================================Conforming your object to Identifiable
When creating new instances in Swift, you’re likely not considering adding Identifiable protocol conformance immediately. 
It’s more common to run into SwiftUI-related build errors like:
Referencing initializer ‘init(_:content:)’ on ‘ForEach’ requires that ‘Article’ conform to ‘Identifiable’


#####
SwiftUI requires an identity for each object since it would otherwise not be able to determine whether it’s necessary to redraw a view after the collection changes. 
In other words, adding identity impacts the behavior of your views. // 换句话说，添加标识会影响视图的行为。
#####
struct Article {
    let title: String
    let url: URL
}

extension Article: Identifiable {
    var id: String {
        url.absoluteString // However, as soon as we encounter two articles with the same URL, the resulting output becomes unexpected
    }
}
#####
This demonstrates why you should carefully add identity to objects and consider whether the ID used is unique in all cases.
#####
we can properly add identity support by introducing a new unique post ID property:

struct Article {
    let postID: Int
    let title: String
    let url: URL
}

extension Article: Identifiable {
    var id: Int {
        postID
    }
}


==================================================Relying on the default implementation for classes
#####
You might have noticed you’re not required to add any ID property to classes to which you’ve added Identifiable conformance. // 您可能已经注意到，对于已添加 Identifiable 一致性的类，无需添加任何 ID 属性。
The Identifiable protocol provides a default implementation for class types, which are only guaranteed to remain unique for the lifetime of an object.

The default ID type will be ObjectIdentifier, a unique identifier for a class instance or metatype.
#####
class ArticleClass: Identifiable {
    let postID: Int
    let title: String
    let url: URL
    
    init(postID: Int, title: String, url: URL) {
        self.postID = postID
        self.title = title
        self.url = url
    }
}
There’s no requirement to add a new ID property and printing out the default implementation shows something like:
print("\(articleClass.id)")
/// Prints: ObjectIdentifier(0x0000600000be0810)

#####
The ID equals the object pointer, so it’s only guaranteed to be unique during the object’s lifetime.
#####

Note: 
it’s essential to realize you should use a struct for the articles in this example. 
It might look like a solution to change all your types to classes, but this is wrong.