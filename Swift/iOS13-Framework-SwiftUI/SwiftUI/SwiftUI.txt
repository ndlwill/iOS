https://fatbobman.com/zh/
https://www.zhihu.com/people/fatbobman3000/posts

https://swiftui-lab.com/alignment-guides/

// ###
https://www.zhihu.com/column/c_1264596761944944640

https://swiftui-lab.com/alignment-guides/

SwiftUI:
“视图是状态的函数” 这一 SwiftUI 的基本概念
每个视图都有与其对应的状态，当状态变化时，SwiftUI 都将重新计算与其对应视图的 body 值。

苹果开发平台的新UI框架，基于swift。由于swift ABI 稳定，将会诞生更多的swift框架。
SwiftUI是用来替换原IOS平台的UIKit和macOS的APPKit的UI框架，特性是声明式的编程。

异步编程:
原本的Foundation+UIKIt/AppKit通过通知、代理、闭包和GCD等提供了丰富的异步编程方式，
这些处理方式在过去一直服务于苹果应用开发，在SwiftUI早期我们仍然可能会用到这部分内容，
但是SwiftUI+Combine也提供了其独有的异步处理事件方式

==================================================

struct MemberView : View {
    @Environment(\.dismiss) private var dismiss
 
    @Binding private var groups: [Group]
    @Binding private var members: [Member]
    
    @State private var member: Member
 
    init(groups: Binding<[Group]>, members: Binding<[Member]>, member: Member? = nil) {
        _groups = groups
        _members = members
 
        _member = .init(wrappedValue: member ?? Member())
    }
    
    var body: some View {
        Form {
            Section(header: Text("Member Data")) {
                TextField("Member Name", text: $member.name)
            }
        }
    }
}

_groups 获取的是 Binding<[Group]> 类型

@Binding 是 属性包装器，表示 groups 本身 不存储值，而是引用了外部 Binding<[Group]> 进行数据绑定。
_groups 是 groups 这个 @Binding 变量的 底层存储，其类型是 Binding<[Group]>。


给 groups 赋值，实际上是 给 @Binding 属性包装器的 wrappedValue 赋值，从而修改它绑定的外部数据。
所以 groups 其实是 Binding<[Group]>.wrappedValue 的简写。