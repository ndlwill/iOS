List 和 LazyVStack 作为两大核心惰性容器
为开发者展示大量数据提供了强大的支持

LazyVStack 主要指代 ScrollView 与 LazyVStack 的组合使用，通常还会配合 ForEach 来动态提供数据。

其他惰性容器（如 LazyHStack、LazyVGrid、LazyHGrid 等）


List 本质上是苹果对 UIKit/AppKit 组件的巧妙封装。在 iOS 13 到 iOS 15 期间，它的底层依托于 UITableView；而从 iOS 16 开始，其实现基础转向了更为灵活的 UICollectionView。
LazyVStack 及其他 Lazy+ 系列容器均为 SwiftUI 的原生实现，它们的底层并不依赖于任何特定的 UIKit/AppKit 组件。


List 是一个具备默认风格和行为的多功能容器，而 LazyVStack 则是一个纯粹、灵活的布局工具。



LazyVStack:
LazyVStack 作为 SwiftUI 的惰性容器，在布局方面有其独特之处，尤其是在处理子视图高度时。
与 VStack 不同，LazyVStack 在子视图未指定明确高度时，会采用子视图的理想尺寸。
struct ContentView: View {
  var body: some View {
    LazyVStack {
      Rectangle()
    }
  }
}

Rectangle 只会呈现为高度为 10 的矩形（Shape 的默认理想尺寸），而在 VStack 中会出现的填满可用空间的矩形。


为 List 提供数据源时，建议让数据类型同时遵循 Identifiable 和 Hashable 协议，避免使用 id 修饰器作为滚动控制的定位标签。