


/// 缓存微博配图
private func cachesImages(viewModels: [StatusViewModel])
{
    // 0.创建一个组
    let group = dispatch_group_create()
    
    for viewModel in viewModels
    {
        // 1.从模型中取出配图数组
        guard let picurls = viewModel.thumbnail_pic else
        {
             // 如果当前微博没有配图就跳过, 继续下载下一个模型的
            continue
        }
        // 2.遍历配图数组下载图片
        for url in picurls
        {
            // 将当前的下载操作添加到组中
            dispatch_group_enter(group)
            
            // 3.3利用SDWebImage下载图片
            
            SDWebImageManager.sharedManager().downloadImageWithURL(url, options: SDWebImageOptions(rawValue: 0), progress: nil, completed: { (image, error, _, _, _) -> Void in
                NJLog("图片下载完成")
                // 将当前下载操作从组中移除
                dispatch_group_leave(group)
            })
        }
        /*
        // 1.从viewModels中取出模型
        let status = viewModel.status
        
        // 2.从模型中取出配图数组
        guard let picurls = status.pic_urls else
        {
            // 如果当前微博没有配图就跳过, 继续下载下一个模型的
            continue
        }
        // 3.遍历配图数组下载图片
        for dict in picurls
        {
            
            // 3.1取出图片的URL字符串
            guard let urlStr = dict["thumbnail_pic"] as? String else
            {
                continue
            }
            // 3.2根据字符串创建URL
            let url = NSURL(string: urlStr)
            
            // 将当前的下载操作添加到组中
            dispatch_group_enter(group)
            
            // 3.3利用SDWebImage下载图片
            
            SDWebImageManager.sharedManager().downloadImageWithURL(url, options: SDWebImageOptions(rawValue: 0), progress: nil, completed: { (image, error, _, _, _) -> Void in
                NJLog("图片下载完成")
                // 将当前下载操作从组中移除
                dispatch_group_leave(group)
            })
        }
        */
    }
    
    // 监听下载操作   全部完成后通知
    dispatch_group_notify(group, dispatch_get_main_queue()) { () -> Void in
        NJLog("全部下载完成")
        self.statuses = viewModels
    }
}