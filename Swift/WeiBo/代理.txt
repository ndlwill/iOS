protocol VisitorViewDelegate: NSObjectProtocol
{
    // 默认情况下协议中的方法都是必须实现的
    func visitorViewDidClickLoginBtn(visitor: VisitorView)
    func visitorViewDidClickRegisterBtn(visitor: VisitorView)
}


// 和OC一样代理属性必须使用weak修饰
//    weak var delegate: VisitorViewDelegate?

@IBAction func registerBtnClick(sender: AnyObject) {
    // 和OC不一样, Swift中如果简单的调用代理方法, 不用判断代理能否响应
    delegate?.visitorViewDidClickRegisterBtn(self)
}

@IBAction func loginBtnClick(sender: AnyObject) {
    delegate?.visitorViewDidClickLoginBtn(self)
}




//extension BaseTableViewController: VisitorViewDelegate
//{
//    func visitorViewDidClickLoginBtn(visitor: VisitorView)
//    {
//        NJLog("")
//    }
//    func visitorViewDidClickRegisterBtn(visitor: VisitorView)
//    {
//        NJLog("")
//    }
//}


-------------------------------------------
class BaseTableViewController: UITableViewController {
    
    visitorView?.loginButton.addTarget(self, action: Selector("loginBtnClick:"), forControlEvents: UIControlEvents.TouchUpInside)
    visitorView?.registerButton.addTarget(self, action: Selector("registerBtnClick:"), forControlEvents: UIControlEvents.TouchUpInside)
    
    @objc private func loginBtnClick(btn: UIButton)
    {
        NJLog("")
    }
    @objc private func registerBtnClick(btn: UIButton)
    {
        NJLog("")
    }
}