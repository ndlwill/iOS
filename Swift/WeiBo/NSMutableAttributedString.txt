class ViewController: UIViewController {

    @IBOutlet weak var demoLabel: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let str = "dfas[哈哈]fd[好爱哦]af[嘻嘻]d"
        
        /*
        // 1.1.表情的规则
        let pattern = "\\[.*?\\]"
        
        // 2.利用规则创建一个正则表达式对象
        let regex = try! NSRegularExpression(pattern: pattern, options: NSRegularExpressionOptions.CaseInsensitive)
        
        // 3.匹配结果
        let results = regex.matchesInString(str, options: NSMatchingOptions(rawValue: 0), range: NSRange(location: 0, length: str.characters.count))
        
        // 4.创建一个属性字符串
        let attrMStr = NSMutableAttributedString(string: str)
        // for result in results {
        for var i = results.count - 1; i >= 0; i-- {
            // 4.1.取出匹配结果的chs
            let result = results[i]
            let chs = (str as NSString).substringWithRange(result.range)
            
            // 4.2.查找chs对应的pngPath
            let pngPath = findPngPath(chs)
            
            // 4.3.根据路径创建属性字符串
            guard let tempPngPath = pngPath else {
                continue
            }
            let attachment = NSTextAttachment()
            attachment.image = UIImage(contentsOfFile: tempPngPath)
            let fontHeight = self.demoLabel.font.lineHeight
            attachment.bounds = CGRect(x: 0, y: -4, width: fontHeight, height: fontHeight)
            let emoAttrStr = NSAttributedString(attachment: attachment)
            
            // 4.4.将之前字符串中chs替换成表情
            attrMStr.replaceCharactersInRange(result.range, withAttributedString: emoAttrStr)
        }
        */
        
        let attrMStr = XMGKeyboardPackage.createMutableAttrString(str, font: demoLabel.font)

        // 5.显示属性字符串
        self.demoLabel.attributedText = attrMStr
    }
    
    /*
    func findPngPath(chs : String) -> String? {
        // 1.加载所有的表情
        let packages = XMGKeyboardPackage.loadEmotionPackages()
        
        // 2.遍历所有的表情包,拿到chs对应的pngPath
        for package in packages {
            // 2.1.如果表情包没有值,则该表情包不需要再进行遍历
            guard let emoticons = package.emoticons else {
                print("该表情包没有值")
                continue
            }
            
            // 2.2.定义表情pngPath
            var pngPath : String?
            
            // 2.3.遍历每一个表情包中的表情
            for emoticon in emoticons {
                // 2.3.1.如果该表情的chs属性为空,则遍历下一个表情
                guard let emoticonChs = emoticon.chs else {
                    continue
                }
                
                // 2.3.2.如果chs不为空,则判断表情的chs是否和传入的chs相等
                // 如果相同:则将pngPath取出
                if emoticonChs == chs {
                    pngPath = emoticon.pngPath
                    break
                }
            }
            
            // 2.4.如果遍历了一个表情包种已经取出了pngPath,则不需要再遍历下一个表情包
            if pngPath != nil {
                return pngPath
            }
        }
        
        // 3.如果遍历了所以的表情包依然没有值,则直接返回nil
        return nil
    }
    */
}