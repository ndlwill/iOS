VM:
作用: 1.可以对M和V进行瘦身
      2.处理业务逻辑

view拿到view modal处理好的数据直接显示，不用view先处理完数据再显示

class Status: NSObject {
    /// 微博创建时间
    var created_at: String?
//        {
//        didSet
//        {
//            // "Sun Dec 06 11:10:41 +0800 2015"
//            if let timeStr = created_at where timeStr != ""
//            {
//                // 1.将服务器返回的时间格式化为NSDate
//                let createDate = NSDate.createDate(timeStr, formatterStr: "EE MM dd HH:mm:ss Z yyyy")
//                
//                // 2.生成发布微博时间对应的字符串
//                created_Time = createDate.descriptionStr()
//            }
//        }
//    }
    
    /// 字符串型的微博ID
    var idstr: String?
    
    /// 微博信息内容
    var text: String?
    
    /// 微博来源
    var source: String?
//        {
//        didSet
//        {
//            if let sourceStr: NSString = source where sourceStr != ""
//            {
//                // 6.1获取从什么地方开始截取
//                let startIndex = sourceStr.rangeOfString(">").location + 1
//                // 6.2获取截取多长的长度
//                let length = sourceStr.rangeOfString("<", options: NSStringCompareOptions.BackwardsSearch).location - startIndex
//                
//                // 6.3截取字符串
//                let rest = sourceStr.substringWithRange(NSMakeRange(startIndex, length))
//                
//                source_Text = "来自: " + rest
//            }
//        }
//    }
    
    /// 微博作者的用户信息
    var user: User?
    
//    /// 微博格式化之后的创建时间
//    var created_Time: String = ""
//    
//    /// 微博格式化之后的来源
//    var source_Text: String = ""
    
    init(dict: [String: AnyObject])
    {
        super.init()
        setValuesForKeysWithDictionary(dict)
    }
    
    /// KVC的setValuesForKeysWithDictionary方法内部会调用setValue方法
    override func setValue(value: AnyObject?, forKey key: String) {
        
//        NJLog("key = \(key), value = \(value)")
        // 1.拦截user赋值操作
        if key == "user"
        {
            user = User(dict: value as! [String : AnyObject])
            return
        }
        super.setValue(value, forKey: key)
    }
    override func setValue(value: AnyObject?, forUndefinedKey key: String) {
        
    }
    
    override var description: String {
        let property = ["created_at", "idstr", "text", "source"]
        let dict = dictionaryWithValuesForKeys(property)
        return "\(dict)"
    }
    
}


class User: NSObject {
    /// 字符串型的用户UID
    var idstr: String?
    
    /// 用户昵称
    var screen_name: String?
    
    /// 用户头像字符串地址（中图），50×50像素
    var profile_image_url: String?
//        {
//        didSet
//        {
//            icon_URL = NSURL(string: profile_image_url ?? "")
//        }
//    }
    
    /// 用户认证类型 -1：没有认证，0，认证用户，2,3,5: 企业认证，220: 达人
    var verified_type: Int = -1
//        {
//        didSet{
//            switch verified_type
//            {
//            case 0:
//                verified_image = UIImage(named: "avatar_vip")
//            case 2, 3, 5:
//                verified_image = UIImage(named: "avatar_enterprise_vip")
//            case 220:
//                verified_image = UIImage(named: "avatar_grassroot")
//            default:
//                verified_image = nil
//            }
//            }
//    }
    
//    /// 用户认证图片
//    var verified_image: UIImage?
    
    /// 会员等级 ,取值范围 1~6
    var mbrank: Int = -1
//        {
//           didSet
//           {
//
//                if mbrank >= 1 && mbrank <= 6
//                {
//                    mbrankImage = UIImage(named: "common_icon_membership_level\(mbrank)")
//                }
//        }
//    }
    
//    /// 会员图片
//    var mbrankImage: UIImage?
    
//    /// 用户头像URL地址
//    var icon_URL: NSURL?
    
    init(dict: [String: AnyObject])
    {
        super.init()
        setValuesForKeysWithDictionary(dict)
    }
    override func setValue(value: AnyObject?, forUndefinedKey key: String) {
        
    }
    
    override var description: String {
        let property = ["idstr", "screen_name", "profile_image_url", "verified_type", "mbrank"]
        let dict = dictionaryWithValuesForKeys(property)
        return "\(dict)"
    }

}



/*
M: 模型(保存数据)
V: 视图(展现数据)
C: 控制器(管理模型和视图, 桥梁)
VM:处理数据
class StatusViewModel: NSObject {
    /// 模型对象
    var status: Status
    
    init(status: Status)
    {
        self.status = status
        
        // 处理头像
        icon_URL = NSURL(string: status.user?.profile_image_url ?? "")
        
        // 处理会员图标
        if status.user?.mbrank >= 1 && status.user?.mbrank <= 6
        {
            mbrankImage = UIImage(named: "common_icon_membership_level\(status.user!.mbrank)")
        }
        
        // 处理认证图片
        switch status.user?.verified_type ?? -1
        {
        case 0:
            verified_image = UIImage(named: "avatar_vip")
        case 2, 3, 5:
            verified_image = UIImage(named: "avatar_enterprise_vip")
        case 220:
            verified_image = UIImage(named: "avatar_grassroot")
        default:
            verified_image = nil
        }
        
        // 处理来源
        if let sourceStr: NSString = status.source where sourceStr != ""
        {
            // 6.1获取从什么地方开始截取
            let startIndex = sourceStr.rangeOfString(">").location + 1
            // 6.2获取截取多长的长度
            let length = sourceStr.rangeOfString("<", options: NSStringCompareOptions.BackwardsSearch).location - startIndex
            
            // 6.3截取字符串
            let rest = sourceStr.substringWithRange(NSMakeRange(startIndex, length))
            
            source_Text = "来自: " + rest
        }
        
        // 处理时间
        // "Sun Dec 06 11:10:41 +0800 2015"
        if let timeStr = status.created_at where timeStr != ""
        {
            // 1.将服务器返回的时间格式化为NSDate
            let createDate = NSDate.createDate(timeStr, formatterStr: "EE MM dd HH:mm:ss Z yyyy")
            
            // 2.生成发布微博时间对应的字符串
            created_Time = createDate.descriptionStr()
        }

    }
    
    /// 用户认证图片
    var verified_image: UIImage?
    
    /// 会员图片
    var mbrankImage: UIImage?

    /// 用户头像URL地址
    var icon_URL: NSURL?
    
    /// 微博格式化之后的创建时间
    var created_Time: String = ""
    
    /// 微博格式化之后的来源
    var source_Text: String = ""
}
