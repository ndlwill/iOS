//了解 不建议使用，不适用于复杂的布局（文字＋图片等）   适用于中间只有文字
tableView.estimatedRowHeight = 200//预估
tableView.rowHeight = UITableViewAutomaticDimension//自动计算



// 注意: 显示图片依赖于配图, 所以只有下载好了图片才能刷新表格
方案：
先下载图片，通过UIImage获取图片大小，设置行高


/// 计算cell和collectionview的尺寸
private func calculateSize() -> (CGSize, CGSize)
{
    /*
    没有配图: cell = zero, collectionview = zero
    一张配图: cell = image.size, collectionview = image.size
    四张配图: cell = {90, 90}, collectionview = {2*w+m, 2*h+m}
    其他张配图: cell = {90, 90}, collectionview =
    */
    let count = viewModel?.thumbnail_pic?.count ?? 0
    // 没有配图
    if count == 0
    {
        return (CGSizeZero, CGSizeZero)
    }
    
    // 一张配图
    if count == 1
    {
        let key = viewModel!.thumbnail_pic!.first!.absoluteString
        // 从缓存中获取已经下载好的图片, 其中key就是图片的url
        let image = SDWebImageManager.sharedManager().imageCache.imageFromDiskCacheForKey(key)
        return (image.size, image.size)
    }
    
    let imageWidth: CGFloat = 90
    let imageHeight: CGFloat = 90
    let imageMargin: CGFloat = 10
    // 四张配图
    if count == 4
    {
        let col = 2
        let row = col
        // 宽度 = 图片的宽度 * 列数 + (列数 - 1) * 间隙
        let width = imageWidth * CGFloat(col) + CGFloat(col - 1) * imageMargin
        // 宽度 = 图片的高度 * 行数 + (行数 - 1) * 间隙
        let height = imageHeight * CGFloat(row) + CGFloat(row - 1) * imageMargin
        return (CGSize(width: imageWidth, height: imageHeight), CGSize(width: width, height: height))
    }
    
    // 其他张配图
    let col = 3
    let row = (count - 1) / 3 + 1
    // 宽度 = 图片的宽度 * 列数 + (列数 - 1) * 间隙
    let width = imageWidth * CGFloat(col) + CGFloat(col - 1) * imageMargin
    // 宽度 = 图片的高度 * 行数 + (行数 - 1) * 间隙
    let height = imageHeight * CGFloat(row) + CGFloat(row - 1) * imageMargin
    return (CGSize(width: imageWidth, height: imageHeight), CGSize(width: width, height: height))
    
}


//显示配图 计算行高
// 返回行高
    override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
        
        let viewModel = statuses![indexPath.row]
        // 1.从缓存中获取行高
        guard let height = rowHeightCaches[viewModel.status.idstr ?? "-1"] else
        {
            NJLog("计算行高")
            // 缓存中没有行高
            // 2.计算行高
            // 2.1获取当前行对应的cell
            let cell = tableView.dequeueReusableCellWithIdentifier("homeCell") as! HomeTableViewCell
            
            // 2.1缓存行高
            let  temp = cell.calculateRowHeight(viewModel)
            
            rowHeightCaches[viewModel.status.idstr ?? "-1"] = temp
            
            // 3.返回行高
            return temp
        }
        
        // 缓存中有就直接返回缓存中的高度
        return height
    }

缓存行高(不用每次都去算行高) 提高性能
/// 缓存行高
private var rowHeightCaches =  [String: CGFloat]()


override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // 释放缓存数据
        rowHeightCaches.removeAll()
    }