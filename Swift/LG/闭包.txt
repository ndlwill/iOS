闭包能够捕获和存储定义在其上下文中的任何常量和变量的引用

闭包的三种形式:
1.全局函数是一种特殊的闭包,全局函数是一个有名字但不会捕获任何值的闭包
//定义一个全局函数，只是当前的全局函数并不捕获值
func test() {
    print("test")
}

2.内嵌函数是一个有名字且能从其上层函数捕获值的闭包
func makeIncrementer() -> () -> Int{
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int{
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}

3.闭包表达式
可以捕获其上下文中常量或变量值的没有名字的闭包
下面是一个闭包表达式，即一个匿名函数，而且是从上下文中捕获变量和常量
//闭包表达式语法有如下的一般形式：
{ (parameters) -> (return type) in
    statements
}

Swift中的闭包，可以当做变量，也可以当做参数传递

通过let将闭包声明为一个常量，即一旦赋值后就不能改变了
let clourse: (Int) -> Int
clourse = {(age: Int) in
    return age
}


func makeIncrementer() -> () -> Int {
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int {
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}
let makeInc = makeIncrementer()
print(makeInc())
print(makeInc())
print(makeInc())

<!--打印结果-->
11
12
13

内嵌函数捕获了runningTotal，不再是单纯的一个变量了
print(makeIncrementer()())
print(makeIncrementer()())
print(makeIncrementer()())

<!--打印结果-->
11
11
11

SIL分析
1、通过alloc_box在堆上申请了一块内存空间，并将变量存储到堆上
2、通过project_box从堆上取出变量
3、将取出的变量交给闭包进行调用
捕获值的本质是 将变量存储到堆上

总结:
一个闭包能够从上下文捕获已经定义的常量和变量，即使这些定义的常量和变量的原作用域不存在，闭包仍然能够在其函数体内引用和修改这些值
当每次修改捕获值时，修改的是堆区中的value值
当每次重新执行当前函数时，都会重新创建内存空间

makeInc是用于存储makeIncrementer函数调用的全局变量，所以每次都需要依赖上一次的结果
而直接调用函数时，相当于每次都新建一个堆内存，所以每次的结果都是不关联的，即每次结果都是一致的

闭包是一个引用类型（本质是函数地址传递），底层结构为：闭包 = 函数地址 + 捕获变量的地址
函数也是引用类型（本质是结构体，其中保存了函数的地址）


闭包是引用类型:
可以将SIL降一级，通过IR代码来观察数据的构成

IR基本语法
将代码转换为IR文件
swiftc -emit-ir 文件名 > ./main.ll && code main.ll

例如：
- cd 文件所在路径
- swiftc -emit-ir main.swift > ./main.ll && open main.ll

数组:
/*
- elementnumber 数组中存放数据的数量
- elementtype 数组中存放数据的类型
*/
[<elementnumber> x <elementtype>]

<!--举例-->
/*
24个i8都是0
- iN：表示多少位的整型，即8位的整型 - 1字节
*/
alloca [24 x i8], align 8

结构体
/*
- T：结构体名称
- <type list> ：列表，即结构体的成员列表
*/
//和C语言的结构体类似
%T = type {<type list>}


<!--举例-->
/*
- swift.refcounted：结构体名称
- %swift.type*：swift.type指针类型
- i64：64位整型 - 8字节
*/
%swift.refcounted = type { %swift.type*, i64}

指针类型
<type> *

<!--举例-->
//64位的整型 - 8字节
i64*

getelementptr指令
在LLVM中获取数组和结构体的成员时通过getelementptr
<result> = getelementptr <ty>, <ty>* <ptrval>{, [inrange] <ty> <id x>}*

<result> = getelementptr inbounds <ty>, <ty>* <ptrval>{, [inrange] <ty> <idx>}*

<!--举例-->
struct munger_struct{
    int f1;
    int f2;
};
void munge(struct munger_struct *P){
    P[0].f1 = P[1].f1 + P[2].f2;
}

//使用
struct munger_struct* array[3];

int main(int argc, const char * argv[]) {
    
    munge(array);
    
    return 0;
}


通过下面的命令将c/c++编译成IR
clang -S -emit-llvm 文件名 > ./main.ll && code main.ll

<!--举例-->
clang -S -emit-llvm ${SRCROOT}/HTClourseTest/main.c > ./main.ll && "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" main.ll

int main(int argc, const char * argv[]) { 
    int array[4] = {1, 2, 3, 4}; 
    int a = array[0];
    return 0;
}
其中int a = array[0];这句对应的LLVM代码应该是这样的：
/*
- [4 x i32]* array：数组首地址
- 第一个0：相对于数组自身的偏移，即偏移0字节 0 * 4字节
- 第二个0：相对于数组元素的偏移，即结构体第一个成员变量 0 * 4字节
*/
a = getelementptr inbounds [4 x i32], [4 x i32]* array, i64 0, i64 0


仿写其内部的结构体，然后构造一个函数的结构体，将makeInc的地址绑定到结构体中
struct HeapObject {
    var type: UnsafeRawPointer
    var refCount1: UInt32
    var refCount2: UInt32
}

//函数返回值结构体
//BoxType 是一个泛型，最终是由传入的Box决定的
struct FunctionData<BoxType>{
    //内嵌函数地址
    var ptr: UnsafeRawPointer
    var captureValue: UnsafePointer<BoxType>
}

//捕获值的结构体
struct Box<T> {
    var refCounted: HeapObject
    var value: T
}

//封装闭包的结构体，目的是为了使返回值不受影响
struct VoidIntFun {
    var f: () ->Int
}

//下面代码的打印结果是什么？
func makeIncrementer() -> () -> Int{
    var runningTotal = 10
    //内嵌函数，也是一个闭包
    func incrementer() -> Int{
        runningTotal += 1
        return runningTotal
    }
    return incrementer
}
let makeInc = VoidIntFun(f: makeIncrementer())

let ptr = UnsafeMutablePointer<VoidIntFun>.allocate(capacity: 1)
//初始化的内存空间
ptr.initialize(to: makeInc)
//将ptr重新绑定内存
let ctx = ptr.withMemoryRebound(to: FunctionData<Box<Int>>.self, capacity: 1) {
     $0.pointee
}
print(ctx.ptr)
print(ctx.captureValue.pointee)

<!--打印结果-->
0x00000001000018f0
Box<Int>(refCounted: HTClourseTest.HeapObject(type: 0x0000000100004038, refCount1: 2, refCount2: 2), value: 10)
结论：所以当我们var makeInc2 = makeIncrementer()使用时，相当于给makeInc2就是FunctionData结构体，
其中关联了内嵌函数地址，以及捕获变量的地址，所以才能在上一个的基础上进行累加
