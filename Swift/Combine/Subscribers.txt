https://developer.apple.com/documentation/combine/processing-published-elements-with-subscribers
Processing Published Elements with Subscribers
Apply back pressure to precisely control when publishers produce elements.

In Combine, a Publisher produces elements, and a Subscriber acts on the elements it receives.
However, a publisher can’t send elements until the subscriber attaches and asks for them.
The subscriber also controls the rate at which the publisher delivers elements, 
by using the Subscribers.Demand(需求) type to indicate how many elements it can receive.
A subscriber can indicate demand in either of two ways:
1. By calling request(_:) on the Subscription instance that the publisher provided when the subscriber first subscribed.
2. By returning a new demand when the publisher calls the subscriber’s receive(_:) method to deliver an element.

Many apps just use the operators sink(receiveValue:) and assign(to:on:) to create the convenience subscriber types Subscribers.Sink and Subscribers.Assign, respectively.
These two subscribers issue a demand for unlimited when they first attach to the publisher.
Once a publisher has unlimited demand, there can be no further negotiation of demand between subscriber and publisher.


==================================================Consume Elements as the Publisher Produces Them
When a publisher has high or unlimited demand, it could send elements faster than a subscriber can process them.
This scenario could lead to elements being dropped, or rapidly increasing memory pressure as elements fill a buffer while they await processing.

This scenario can occur if you use the convenience subscribers, because they demand an unlimited number of elements.
Ensure that the closure you provide to sink(receiveValue:) and the side-effects of assign(to:on:) adhere to the following traits:
Don’t block the publisher.
Don’t consume excessive memory by buffering elements.
Don’t get overwhelmed and fail to process elements.

Fortunately, many commonly used publishers, such as publishers associated with user-interface elements, publish at a manageable rate. 
Other common publishers only produce a single element, like the URL Loading System’s URLSession.DataTaskPublisher. 
It’s perfectly safe to use sink and assign subscribers with these publishers.

Apply Back Pressure with a Custom Subscriber