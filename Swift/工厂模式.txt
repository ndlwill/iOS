1.简单工厂模式
import UIKit

protocol Service {
    var url: URL { get }
}

// dev阶段
class StagingService: Service {
    var url: URL { return URL(string: "https://dev.localhost/")! }
}

// product阶段
class ProductionService: Service {
    var url: URL { return URL(string: "https://live.localhost/")! }
}

class EnvironmentFactory {
    enum Environment {
        case staging
        case production
    }

    func create(_ environment:Environment) -> Service{
        switch environment {
        case .staging:
            return StagingService()
        case .production:
            return ProductionService()
        }
    }
}

let env = EnvironmentFactory()
let serv = env.create(.production)
print(serv.url) //https://live.localhost/

2.工厂方法模式
import UIKit

protocol Service {
    var url: URL { get }
}

protocol ServiceFactory{
    func create() -> Service
}

// dev阶段
class StagingService: Service {
    var url: URL { return URL(string: "https://dev.localhost/")! }
}

// product阶段
class ProductionService: Service {
    var url: URL { return URL(string: "https://live.localhost/")! }
}

// dev 工厂类
class StagingServiceFactory: ServiceFactory{
    func create() -> Service {
        return StagingService()
    }
}

// production 工厂类
class ProductionServiceFactory: ServiceFactory{
    func create() -> Service {
        return ProductionService()
    }
}

let serv = ProductionServiceFactory().create()
print(serv.url)

3.抽象工厂模式
import UIKit

// 服务协议
protocol ServiceFactory {
    // 创建一个服务
    func create() -> Service
}

protocol Service {
    var url: URL { get }
}

// dev阶段
class StagingService: Service {
    var url: URL { return URL(string: "https://dev.localhost/")! }
}

class StagingServiceFactory: ServiceFactory {
    // dev工厂就是创建一个dev的服务
    func create() -> Service {
        return StagingService()
    }
}

// product阶段
class ProductionService: Service {
    var url: URL { return URL(string: "https://live.localhost/")! }
}

class ProductionServiceFactory: ServiceFactory {
    // product工厂就是创建一个product的服务
    func create() -> Service {
        return ProductionService()
    }
}

// 抽象工厂
class AppServiceFactory: ServiceFactory {

    enum Environment {
        case production
        case staging
    }

    var env: Environment

    init(env: Environment) {
        self.env = env
    }

    func create() -> Service {
        switch self.env {
        case .production:
            return ProductionServiceFactory().create()
        case .staging:
            return StagingServiceFactory().create()
        }
    }
}

let factory = AppServiceFactory(env: .production)
let service = factory.create()
print(service.url)