判断句中必须有明确的真假
不再有非0即真
必须有明确的Bool值
Bool有两个取值:false/true

let a = 10
if a > 9 {
    print(a)
}


// 这个是可选类型,因为只有声明成可选类型后,才可以判断是否为空
let view : UIView? = UIView()

if view != nil {
    
}

swift3 中已经取消了++、--

三目运算符
var a = 10
var b = 50
var result = a > b ? a : b

guard是Swift2.0新增的语法
它与if语句非常类似
guard语句必须带有else语句，它的语法如下：
当条件表达式为true时候跳过else语句中的内容，执行语句组内容
条件表达式为false时候执行else语句中的内容，跳转语句一般是return、break、continue和throw



var age = 18
func online(age : Int) -> Void {
    guard age >= 18 else {
        print("回家去")
        return
    }

    print("可以上网")
}
online(age)

运行 switch 中匹配到的子句之后，程序会退出 switch 语句，并不会继续向下运行，所以不需要在每个子句结尾写 break
switch后可以不跟()
case后可以不跟break(默认会有break)

let sex = 0
switch sex {
case 0 :
    print("男")
case 1 :
    print("女")
default :
    print("其他")
}

let vegetable = "red pepper"
switch vegetable {
case "celery":
    print("Add some raisins and make ants on a log.")
case "cucumber", "watercress":
    print("That would make a good tea sandwich.")
case let x where x.hasSuffix("pepper"):
    print("Is it a spicy \(x)?")
default:
    print("Everything tastes good in soup.")
}


如果希望出现之前的case穿透,则可以使用关键字fallthrough
let sex = 0

switch sex {
case 0:
    fallthrough
case 1:
    print("正常人")
default:
    print("其他")
}

在大多数语言中，switch 语句块中，case 要紧跟 break，否则 case 之后的语句会顺序运行，而在 Swift 语言中，默认是不会执行下去的，switch 也会终止。如果你想在 Swift 中让 case 之后的语句会按顺序继续运行，则需要使用 fallthrough 语句


let sex = 0
switch sex {
case 0, 1:
    print("正常人")
default:
    print("其他")
}

Switch支持多种数据类型
浮点型
字符串


区间判断
开区间:0..<10 表示:0~9,不包括10
闭区间:0...10 表示:0~10

let score = 88

switch score {
case 0..<60:
    print("不及格")
case 60..<80:
    print("及格")
case 80..<90:
    print("良好")
case 90..<100:
    print("优秀")
default:
    print("满分")
}