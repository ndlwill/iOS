Unlike Objective-C initializers, Swift initializers don’t return a value.

Initializers are called to create a new instance of a particular type.
init() {
    // perform some initialization here
}


Optional Property Types:
If your custom type has a stored property that’s logically allowed to have “no value” — perhaps because its value can’t be set during initialization, 
or because it’s allowed to have “no value” at some later point — declare the property with an optional type. 
Properties of optional type are automatically initialized with a value of nil, 
indicating that the property is deliberately intended to have “no value yet” during initialization.


Assigning Constant Properties During Initialization:
Note:
For class instances, a constant property can be modified during initialization only by the class that introduces it. It can’t be modified by a subclass.
class SurveyQuestion {
    let text: String
    var response: String?
    init(text: String) {
        self.text = text
    }
    func ask() {
        print(text)
    }
}


Default Initializers:
The default initializer simply creates a new instance with all of its properties set to their default values.
class ShoppingListItem {
    var name: String?
    var quantity = 1
    var purchased = false
}
var item = ShoppingListItem()
Because all properties of the ShoppingListItem class have default values, 
and because it’s a base class with no superclass, 
ShoppingListItem automatically gains a default initializer implementation that creates a new instance with all of its properties set to their default values.


Memberwise Initializers for Structure Types:
Structure types automatically receive a memberwise initializer if they don’t define any of their own custom initializers.
Unlike a default initializer, the structure receives a memberwise initializer even if it has stored properties that don’t have default values.
struct Size {
    var width = 0.0, height = 0.0
}
let twoByTwo = Size(width: 2.0, height: 2.0)
When you call a memberwise initializer, you can omit values for any properties that have default values. 
In the example above, the Size structure has a default value for both its height and width properties. 
You can omit either property or both properties, and the initializer uses the default value for anything you omit. For example:
let zeroByTwo = Size(height: 2.0)
print(zeroByTwo.width, zeroByTwo.height)
// Prints "0.0 2.0"
let zeroByZero = Size()
print(zeroByZero.width, zeroByZero.height)
// Prints "0.0 0.0"


Initializer Delegation for Value Types:
Initializers can call other initializers to perform part of an instance’s initialization. 
This process, known as initializer delegation, avoids duplicating code across multiple initializers.

For value types, you use self.init to refer to other initializers from the same value type when writing your own custom initializers. 
You can call self.init only from within an initializer.
Note that if you define a custom initializer for a value type, 
you will no longer have access to the default initializer (or the memberwise initializer, if it’s a structure) for that type.
Note:
If you want your custom value type to be initializable with the default initializer and memberwise initializer, 
and also with your own custom initializers, write your custom initializers in an extension rather than as part of the value type’s original implementation.

struct Size {
    var width = 0.0, height = 0.0
}
struct Point {
    var x = 0.0, y = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
    init() {}
    init(origin: Point, size: Size) {
        self.origin = origin
        self.size = size
    }
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}


Class Inheritance and Initialization:
Swift defines two kinds of initializers for class types to help ensure all stored properties receive an initial value. 
These are known as designated initializers and convenience initializers.


Designated Initializers and Convenience Initializers:
Designated initializers are the primary initializers for a class. 
A designated initializer fully initializes all properties introduced by that class and calls an appropriate superclass initializer to continue the initialization process up the superclass chain.

Classes tend to have very few designated initializers, and it’s quite common for a class to have only one. 
Designated initializers are “funnel” points through which initialization takes place, and through which the initialization process continues up the superclass chain.

Every class must have at least one designated initializer.
In some cases, this requirement is satisfied by inheriting one or more designated initializers from a superclass

Convenience initializers are secondary, supporting initializers for a class. 
You can define a convenience initializer to call a designated initializer from the same class as the convenience initializer with some of the designated initializer’s parameters set to default values. 
You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.

You don’t have to provide convenience initializers if your class doesn’t require them. 
Create convenience initializers whenever a shortcut to a common initialization pattern will save time or make initialization of the class clearer in intent.

Syntax for Designated and Convenience Initializers:
Designated initializers for classes are written in the same way as simple initializers for value types:
init(<#parameters#>) {
   <#statements#>
}
Convenience initializers are written in the same style, but with the convenience modifier placed before the init keyword, separated by a space:
convenience init(<#parameters#>) {
   <#statements#>
}


Initializer Delegation for Class Types:
To simplify the relationships between designated and convenience initializers, Swift applies the following three rules for delegation calls between initializers:
Rule 1
A designated initializer must call a designated initializer from its immediate superclass.
Rule 2
A convenience initializer must call another initializer from the same class.
Rule 3
A convenience initializer must ultimately call a designated initializer.
A simple way to remember this is:
Designated initializers must always delegate up.
Convenience initializers must always delegate across.


Two-Phase Initialization:
Class initialization in Swift is a two-phase process. 
In the first phase, each stored property is assigned an initial value by the class that introduced it. 
Once the initial state for every stored property has been determined, 
the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use.

Swift’s compiler performs four helpful safety-checks to make sure that two-phase initialization is completed without error:
Safety check 1
A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer.

Safety check 2
A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. 
If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.

Safety check 3
A convenience initializer must delegate to another initializer before assigning a value to any property (including properties defined by the same class). 
If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.

Safety check 4
An initializer can’t call any instance methods, read the values of any instance properties, or refer to self as a value until after the first phase of initialization is complete.

The class instance isn’t fully valid until the first phase ends.
Properties can only be accessed, and methods can only be called, once the class instance is known to be valid at the end of the first phase.

Phase 1
A designated or convenience initializer is called on a class.
Memory for a new instance of that class is allocated. The memory isn’t yet initialized.
A designated initializer for that class confirms that all stored properties introduced by that class have a value. The memory for these stored properties is now initialized.
The designated initializer hands off to a superclass initializer to perform the same task for its own stored properties.
This continues up the class inheritance chain until the top of the chain is reached.
Once the top of the chain is reached, and the final class in the chain has ensured that all of its stored properties have a value, the instance’s memory is considered to be fully initialized, and phase 1 is complete.

Phase 2
Working back down from the top of the chain, each designated initializer in the chain has the option to customize the instance further. Initializers are now able to access self and can modify its properties, call its instance methods, and so on.
Finally, any convenience initializers in the chain have the option to customize the instance and to work with self.


Initializer Inheritance and Overriding:
Unlike subclasses in Objective-C, Swift subclasses don’t inherit their superclass initializers by default.

Note:
You always write the override modifier when overriding a superclass designated initializer, 
even if your subclass’s implementation of the initializer is a convenience initializer.

As a result, you don’t write the override modifier when providing a matching implementation of a superclass convenience initializer.

class Vehicle {
    var numberOfWheels = 0
    var description: String {
        return "\(numberOfWheels) wheel(s)"
    }
}
The default initializer (when available) is always a designated initializer for a class
let vehicle = Vehicle()
print("Vehicle: \(vehicle.description)")
// Vehicle: 0 wheel(s)

class Bicycle: Vehicle {
    override init() {
        super.init()
        numberOfWheels = 2
    }
}

If a subclass initializer performs no customization in phase 2 of the initialization process, and the superclass has a synchronous, 
zero-argument designated initializer, you can omit a call to super.init() after assigning values to all of the subclass’s stored properties.
Instead of making an explicit call to super.init(), this initializer relies on an implicit call to its superclass’s initializer to complete the process.
class Hoverboard: Vehicle {
    var color: String
    init(color: String) {
        self.color = color
        // super.init() implicitly called here
    }
    override var description: String {
        return "\(super.description) in a beautiful \(color)"
    }
}
let hoverboard = Hoverboard(color: "silver")
print("Hoverboard: \(hoverboard.description)")
// Hoverboard: 0 wheel(s) in a beautiful silver

Note:
Subclasses can modify inherited variable properties during initialization, but can’t modify inherited constant properties.


Automatic Initializer Inheritance:
As mentioned above, subclasses don’t inherit their superclass initializers by default. 
However, superclass initializers are automatically inherited if certain conditions are met.
In practice, this means that you don’t need to write initializer overrides in many common scenarios, 
and can inherit your superclass initializers with minimal effort whenever it’s safe to do so.

Assuming that you provide default values for any new properties you introduce in a subclass, the following two rules apply:
Rule 1
If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.
Rule 2
If your subclass provides an implementation of all of its superclass designated initializers — either by inheriting them as per rule 1, 
or by providing a custom implementation as part of its definition — then it automatically inherits all of the superclass convenience initializers.

These rules apply even if your subclass adds further convenience initializers.

Note:
A subclass can implement a superclass designated initializer as a subclass convenience initializer as part of satisfying rule 2.


Designated and Convenience Initializers in Action:
class Food {
    var name: String
    init(name: String) {
        self.name = name
    }
    convenience init() {
        self.init(name: "[Unnamed]")
    }
}

Classes don’t have a default memberwise initializer, and so the Food class provides a designated initializer that takes a single argument called name.
let namedMeat = Food(name: "Bacon")
// namedMeat's name is "Bacon"
The init(name: String) initializer from the Food class is provided as a designated initializer, because it ensures that all stored properties of a new Food instance are fully initialized.
The Food class doesn’t have a superclass, and so the init(name: String) initializer doesn’t need to call super.init() to complete its initialization.

class RecipeIngredient: Food {
    var quantity: Int
    init(name: String, quantity: Int) {
        self.quantity = quantity
        super.init(name: name)
    }
    override convenience init(name: String) {
        self.init(name: name, quantity: 1)
    }
}

Even though RecipeIngredient provides the init(name: String) initializer as a convenience initializer, 
RecipeIngredient has nonetheless provided an implementation of all of its superclass’s designated initializers. 
Therefore, RecipeIngredient automatically inherits all of its superclass’s convenience initializers too.

In this example, the superclass for RecipeIngredient is Food, which has a single convenience initializer called init(). 
This initializer is therefore inherited by RecipeIngredient.
The inherited version of init() functions in exactly the same way as the Food version, except that it delegates to the RecipeIngredient version of init(name: String) rather than the Food version.

All three of these initializers can be used to create new RecipeIngredient instances:
let oneMysteryItem = RecipeIngredient()
let oneBacon = RecipeIngredient(name: "Bacon")
let sixEggs = RecipeIngredient(name: "Eggs", quantity: 6)

class ShoppingListItem: RecipeIngredient {
    var purchased = false
    var description: String {
        var output = "\(quantity) x \(name)"
        output += purchased ? " ✔" : " ✘"
        return output
    }
}
Note:
ShoppingListItem doesn’t define an initializer to provide an initial value for purchased, because items in a shopping list (as modeled here) always start out unpurchased.

Because it provides a default value for all of the properties it introduces and doesn’t define any initializers itself, ShoppingListItem automatically inherits all of the designated and convenience initializers from its superclass.
You can use all three of the inherited initializers to create a new ShoppingListItem instance:
ar breakfastList = [
    ShoppingListItem(),
    ShoppingListItem(name: "Bacon"),
    ShoppingListItem(name: "Eggs", quantity: 6),
]
breakfastList[0].name = "Orange juice"
breakfastList[0].purchased = true
for item in breakfastList {
    print(item.description)
}
// 1 x Orange juice ✔
// 1 x Bacon ✘
// 6 x Eggs ✘


Failable Initializers:
To cope with initialization conditions that can fail, define one or more failable initializers as part of a class, structure, or enumeration definition. 
You write a failable initializer by placing a question mark after the init keyword (init?).

Note:
You can’t define a failable and a nonfailable initializer with the same parameter types and names.

A failable initializer creates an optional value of the type it initializes. 
You write return nil within a failable initializer to indicate a point at which initialization failure can be triggered.

Note
Strictly speaking, initializers don’t return a value. 
Rather, their role is to ensure that self is fully and correctly initialized by the time that initialization ends. 
Although you write return nil to trigger an initialization failure, you don’t use the return keyword to indicate initialization success.

struct Animal {
    let species: String
    init?(species: String) {
        if species.isEmpty { return nil }
        self.species = species
    }
}


Failable Initializers for Enumerations:
enum TemperatureUnit {
    case kelvin, celsius, fahrenheit
    init?(symbol: Character) {
        switch symbol {
        case "K":
            self = .kelvin
        case "C":
            self = .celsius
        case "F":
            self = .fahrenheit
        default:
            return nil
        }
    }
}


Failable Initializers for Enumerations with Raw Values:
Enumerations with raw values automatically receive a failable initializer, init?(rawValue:), that takes a parameter called rawValue of the appropriate raw-value type and selects a matching enumeration case if one is found, 
or triggers an initialization failure if no matching value exists.


Propagation of Initialization Failure:
A failable initializer of a class, structure, or enumeration can delegate across to another failable initializer from the same class, structure, or enumeration.
Similarly, a subclass failable initializer can delegate up to a superclass failable initializer.

In either case, if you delegate to another initializer that causes initialization to fail, 
the entire initialization process fails immediately, and no further initialization code is executed.

Note:
A failable initializer can also delegate to a nonfailable initializer. 
Use this approach if you need to add a potential failure state to an existing initialization process that doesn’t otherwise fail.
class Product {
    let name: String
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}

class CartItem: Product {
    let quantity: Int
    init?(name: String, quantity: Int) {
        if quantity < 1 { return nil }
        self.quantity = quantity
        super.init(name: name)
    }
}


Overriding a Failable Initializer:
You can override a superclass failable initializer in a subclass, just like any other initializer.
Alternatively, you can override a superclass failable initializer with a subclass nonfailable initializer.
This enables you to define a subclass for which initialization can’t fail, even though initialization of the superclass is allowed to fail.

Note that if you override a failable superclass initializer with a nonfailable subclass initializer, 
the only way to delegate up to the superclass initializer is to force-unwrap the result of the failable superclass initializer.

Note:
You can override a failable initializer with a nonfailable initializer but not the other way around.
class Document {
    var name: String?
    // this initializer creates a document with a nil name value
    init() {}
    // this initializer creates a document with a nonempty name value
    init?(name: String) {
        if name.isEmpty { return nil }
        self.name = name
    }
}

class AutomaticallyNamedDocument: Document {
    override init() {
        super.init()
        self.name = "[Untitled]"
    }
    override init(name: String) {
        super.init()
        if name.isEmpty {
            self.name = "[Untitled]"
        } else {
            self.name = name
        }
    }
}
The AutomaticallyNamedDocument overrides its superclass’s failable init?(name:) initializer with a nonfailable init(name:) initializer.
Because AutomaticallyNamedDocument copes with the empty string case in a different way than its superclass, its initializer doesn’t need to fail, and so it provides a nonfailable version of the initializer instead.

You can use forced unwrapping in an initializer to call a failable initializer from the superclass as part of the implementation of a subclass’s nonfailable initializer.
class UntitledDocument: Document {
    override init() {
        super.init(name: "[Untitled]")!
    }
}


The init! Failable Initializer:
You typically define a failable initializer that creates an optional instance of the appropriate type by placing a question mark after the init keyword (init?). 
Alternatively, you can define a failable initializer that creates an implicitly unwrapped optional instance of the appropriate type.

You can delegate from init? to init! and vice versa, and you can override init? with init! and vice versa. 
You can also delegate from init to init!, although doing so will trigger an assertion if the init! initializer causes initialization to fail.


Required Initializers:
Write the required modifier before the definition of a class initializer to indicate that every subclass of the class must implement that initializer:
class SomeClass {
    required init() {
        // initializer implementation goes here
    }
}
You must also write the required modifier before every subclass implementation of a required initializer, to indicate that the initializer requirement applies to further subclasses in the chain. 
You don’t write the override modifier when overriding a required designated initializer:
class SomeSubclass: SomeClass {
    required init() {
        // subclass implementation of the required initializer goes here
    }
}

Note:
You don’t have to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initializer.


Setting a Default Property Value with a Closure or Function:
If a stored property’s default value requires some customization or setup, 
you can use a closure or global function to provide a customized default value for that property.
Whenever a new instance of the type that the property belongs to is initialized, 
the closure or function is called, and its return value is assigned as the property’s default value.
class SomeClass {
    let someProperty: SomeType = {
        // create a default value for someProperty inside this closure
        // someValue must be of the same type as SomeType
        return someValue
    }()
}
Note that the closure’s end curly brace is followed by an empty pair of parentheses. This tells Swift to execute the closure immediately.
If you omit these parentheses, you are trying to assign the closure itself to the property, and not the return value of the closure.

Note:
If you use a closure to initialize a property, remember that the rest of the instance hasn’t yet been initialized at the point that the closure is executed. 
This means that you can’t access any other property values from within your closure, even if those properties have default values. 
You also can’t use the implicit self property, or call any of the instance’s methods.

The boardColors array is initialized with a closure to set up its color values:
struct Chessboard {
    let boardColors: [Bool] = {
        var temporaryBoard: [Bool] = []
        var isBlack = false
        for i in 1...8 {
            for j in 1...8 {
                temporaryBoard.append(isBlack)
                isBlack = !isBlack
            }
            isBlack = !isBlack
        }
        return temporaryBoard
    }()
    func squareIsBlackAt(row: Int, column: Int) -> Bool {
        return boardColors[(row * 8) + column]
    }
}

Whenever a new Chessboard instance is created, the closure is executed, and the default value of boardColors is calculated and returned.

let board = Chessboard()
print(board.squareIsBlackAt(row: 0, column: 1))
// Prints "true"
print(board.squareIsBlackAt(row: 7, column: 7))
// Prints "false"