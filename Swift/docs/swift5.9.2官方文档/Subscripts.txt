Access the elements of a collection.

Classes, structures, and enumerations can define subscripts, which are shortcuts for accessing the member elements of a collection, list, or sequence.

You can define multiple subscripts for a single type, 
and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript.
Subscripts aren’t limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.


Subscript Syntax:
Subscripts enable you to query instances of a type by writing one or more values in square brackets after the instance name.
You write subscript definitions with the subscript keyword, and specify one or more input parameters and a return type, in the same way as instance methods.
Unlike instance methods, subscripts can be read-write or read-only. 
This behavior is communicated by a getter and setter in the same way as for computed properties:
subscript(index: Int) -> Int {
    get {
        // Return an appropriate subscript value here.
    }
    set(newValue) {
        // Perform a suitable setting action here.
    }
}
As with computed properties, you can choose not to specify the setter’s (newValue) parameter.

you can simplify the declaration of a read-only subscript by removing the get keyword and its braces:
subscript(index: Int) -> Int {
    // Return an appropriate subscript value here.
}

struct TimesTable {
    let multiplier: Int
    subscript(index: Int) -> Int {
        return multiplier * index
    }
}
let threeTimesTable = TimesTable(multiplier: 3)
print("six times three is \(threeTimesTable[6])")
// Prints "six times three is 18"


Subscript Options:
Like functions, subscripts can take a varying number of parameters and provide default values for their parameters
However, unlike functions, subscripts can’t use in-out parameters.
struct Matrix {
    let rows: Int, columns: Int
    var grid: [Double]
    init(rows: Int, columns: Int) {
        self.rows = rows
        self.columns = columns
        grid = Array(repeating: 0.0, count: rows * columns)
    }
    func indexIsValid(row: Int, column: Int) -> Bool {
        return row >= 0 && row < rows && column >= 0 && column < columns
    }
    subscript(row: Int, column: Int) -> Double {
        get {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            return grid[(row * columns) + column]
        }
        set {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            grid[(row * columns) + column] = newValue
        }
    }
}

var matrix = Matrix(rows: 2, columns: 2)

matrix[0, 1] = 1.5
matrix[1, 0] = 3.2


Type Subscripts:
enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
    static subscript(n: Int) -> Planet {
        return Planet(rawValue: n)!
    }
}
let mars = Planet[4]
print(mars)