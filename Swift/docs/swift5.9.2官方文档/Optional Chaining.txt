Access members of an optional value without unwrapping.

Optional chaining is a process for querying and calling properties, methods, 
and subscripts on an optional that might currently be nil. 
If the optional contains a value, the property, method, or subscript call succeeds; 
if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, 
and the entire chain fails gracefully if any link in the chain is nil.

Note:
Optional chaining in Swift is similar to messaging nil in Objective-C, but in a way that works for any type, and that can be checked for success or failure.


Optional Chaining as an Alternative to Forced Unwrapping:
To reflect the fact that optional chaining can be called on a nil value, 
the result of an optional chaining call is always an optional value, 
even if the property, method, or subscript you are querying returns a non-optional value.


Calling Methods Through Optional Chaining:
func printNumberOfRooms() {
    print("The number of rooms is \(numberOfRooms)")
}
This method doesn’t specify a return type. However, functions and methods with no return type have an implicit return type of Void
This means that they return a value of (), or an empty tuple.
If you call this method on an optional value with optional chaining, 
the method’s return type will be Void?, not Void, because return values are always of an optional type when called through optional chaining.
if john.residence?.printNumberOfRooms() != nil {
    print("It was possible to print the number of rooms.")
} else {
    print("It was not possible to print the number of rooms.")
}

The same is true if you attempt to set a property through optional chaining. 
The example above in Accessing Properties Through Optional Chaining attempts to set an address value for john.residence, 
even though the residence property is nil. Any attempt to set a property through optional chaining returns a value of type Void?, 
which enables you to compare against nil to see if the property was set successfully:
if (john.residence?.address = someAddress) != nil {
    print("It was possible to set the address.")
} else {
    print("It was not possible to set the address.")
}
// Prints "It was not possible to set the address."


Accessing Subscripts Through Optional Chaining:
Note:
When you access a subscript on an optional value through optional chaining, you place the question mark before the subscript’s brackets, not after. 
The optional chaining question mark always follows immediately after the part of the expression that’s optional.
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "Unable to retrieve the first room name."


Accessing Subscripts of Optional Type:
If a subscript returns a value of optional type — such as the key subscript of Swift’s Dictionary type — place a question mark after the subscript’s closing bracket to chain on its optional return value:
var testScores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0] += 1
testScores["Brian"]?[0] = 72
// the "Dave" array is now [91, 82, 84] and the "Bev" array is now [80, 94, 81]
The third call fails, because the testScores dictionary doesn’t contain a key for "Brian".


Linking Multiple Levels of Chaining:
If the type you are trying to retrieve isn’t optional, it will become optional because of the optional chaining.
If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.
Therefore:
If you try to retrieve an Int value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.
Similarly, if you try to retrieve an Int? value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.