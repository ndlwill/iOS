If a value (known as a raw value) is provided for each enumeration case, 
the value can be a string, a character, or a value of any integer or floating-point type.

Alternatively, enumeration cases can specify associated values of any type to be stored along with each different case value, much as unions or variants do in other languages.

enum CompassPoint {
    case north
    case south
    case east
    case west
}

Note:
Swift enumeration cases don’t have an integer value set by default, unlike languages like C and Objective-C. 
In the CompassPoint example above, north, south, east and west don’t implicitly equal 0, 1, 2 and 3. 
Instead, the different enumeration cases are values in their own right, with an explicitly defined type of CompassPoint.

Multiple cases can appear on a single line, separated by commas:
enum Planet {
    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
}

Matching Enumeration Values with a Switch Statement:
directionToHead = .south
switch directionToHead {
case .north:
    print("Lots of planets have a north")
case .south:
    print("Watch out for penguins")
case .east:
    print("Where the sun rises")
case .west:
    print("Where the skies are blue")
}

When it isn’t appropriate to provide a case for every enumeration case, you can provide a default case to cover any cases that aren’t addressed explicitly:
let somePlanet = Planet.earth
switch somePlanet {
case .earth:
    print("Mostly harmless")
default:
    print("Not a safe place for humans")
}

Iterating over Enumeration Cases:
it’s useful to have a collection of all of that enumeration’s cases. 
You enable this by writing : CaseIterable after the enumeration’s name. 
Swift exposes a collection of all the cases as an allCases property of the enumeration type
enum Beverage: CaseIterable {
    case coffee, tea, juice
}
let numberOfChoices = Beverage.allCases.count
print("\(numberOfChoices) beverages available")
// Prints "3 beverages available"

for beverage in Beverage.allCases {
    print(beverage)
}


Associated Values:
enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}
Constants and variables of type Barcode can store either a .upc or a .qrCode (together with their associated values), 
but they can store only one of them at any given time.
switch productBarcode {
case .upc(let numberSystem, let manufacturer, let product, let check):
    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
case .qrCode(let productCode):
    print("QR code: \(productCode).")
}
If all of the associated values for an enumeration case are extracted as constants, 
or if all are extracted as variables, you can place a single let or var annotation before the case name, for brevity:
switch productBarcode {
case let .upc(numberSystem, manufacturer, product, check):
    print("UPC : \(numberSystem), \(manufacturer), \(product), \(check).")
case let .qrCode(productCode):
    print("QR code: \(productCode).")
}


Raw Values:
enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}
Note:
Raw values are not the same as associated values.
The raw value for a particular enumeration case is always the same. 


Implicitly Assigned Raw Values:
When you’re working with enumerations that store integer or string raw values, 
you don’t have to explicitly assign a raw value for each case. 
When you don’t, Swift automatically assigns the values for you.

For example, when integers are used for raw values, 
the implicit value for each case is one more than the previous case. 
If the first case doesn’t have a value set, its value is 0.

When strings are used for raw values, the implicit value for each case is the text of that case’s name.


Initializing from a Raw Value:
let possiblePlanet = Planet(rawValue: 7)
// possiblePlanet is of type Planet? and equals Planet.uranus


Recursive Enumerations:
A recursive enumeration is an enumeration that has another instance of the enumeration as the associated value for one or more of the enumeration cases. 
You indicate that an enumeration case is recursive by writing indirect before it, which tells the compiler to insert the necessary layer of indirection.

enum ArithmeticExpression {
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
}
You can also write indirect before the beginning of the enumeration to enable indirection for all of the enumeration’s cases that have an associated value:
indirect enum ArithmeticExpression {
    case number(Int)
    case addition(ArithmeticExpression, ArithmeticExpression)
    case multiplication(ArithmeticExpression, ArithmeticExpression)
}

let five = ArithmeticExpression.number(5)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))

A recursive function is a straightforward way to work with data that has a recursive structure. For example, here’s a function that evaluates an arithmetic expression:
func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}

print(evaluate(product))
// Prints "18"

This function evaluates a plain number by simply returning the associated value. 
It evaluates an addition or multiplication by evaluating the expression on the left-hand side, 
evaluating the expression on the right-hand side, and then adding them or multiplying them.