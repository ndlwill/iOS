https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/incrementaladoption/#Dynamic-Isolation

Incremental Adoption
Learn how you can introduce Swift concurrency features into your project incrementally.


Dynamic Isolation:
Dynamic isolation provides runtime mechanisms you can use as a fallback for describing data isolation. 
It can be an essential tool for interfacing a Swift 6 component with another that has not yet been updated, 
even if these components are within the same module.


Internal-Only Isolation:
Suppose you have determined that a reference type within your project can be best described with MainActor static isolation.
@MainActor
class WindowStyler {
    private var backgroundColor: ColorComponents


    func applyStyle() {
        // ...
    }
}

This MainActor isolation may be logically correct. 
But if this type is used in other unmigrated locations, adding static isolation here could require many additional changes.
An alternative is to use dynamic isolation to help control the scope.
class WindowStyler {
    @MainActor
    private var backgroundColor: ColorComponents


    func applyStyle() {
        MainActor.assumeIsolated {
            // use and interact with other `MainActor` state
        }
    }
}

Here, the isolation has been internalized into the class. 
This keeps any changes localized to the type, allowing you make changes without affecting any clients of the type.

However, a major disadvantage of this technique is the type’s true isolation requirements remain invisible. 
There is no way for clients to determine if or how they should change based on this public API. 
You should use this approach only as a temporary solution, and only when you have exhausted other options.


Usage-Only Isolation:
If it is impractical to contain isolation exclusively within a type, you can instead expand the isolation to cover only its API usage.
To do this, first apply static isolation to the type, and then use dynamic isolation at any usage locations:

@MainActor
class WindowStyler {
    // ...
}

class UIStyler {
    @MainActor
    private let windowStyler: WindowStyler
    
    func applyStyle() {
        MainActor.assumeIsolated {
            windowStyler.applyStyle()
        }
    }
}

Combining static and dynamic isolation can be a powerful tool to keep the scope of changes gradual.


Explicit MainActor Context:
The assumeIsolated method is synchronous and exists to recover isolation information from runtime back into the type-system by preventing execution if the assumption was incorrect. that would otherwise be invisible to the compiler. 
The MainActor type also has a method you can use to manually switch isolation in an asynchronous context.

// type that should be MainActor, but has not been updated yet
class PersonalTransportation {
}

await MainActor.run {
    // isolated to the MainActor here
    let transport = PersonalTransportation()
    
    // ...
}

Remember that static isolation allows the compiler to both verify and automate the process of switching isolation as needed. 
Even when used in combination with static isolation, it can be difficult to determine when MainActor.run is truly necessary.
While MainActor.run can be useful during migration, it should not be used as a substitute for expressing the isolation requirements of your system statically.
The ultimate goal should still be to apply @MainActor to PersonalTransportation.


Unmarked Sendable Closures:
The sendability of a closure affects how the compiler infers isolation for its body.
A callback closure that actually does cross isolation boundaries but is missing a Sendable annotation violates a critical invariant of the concurrency system.

// definition within a pre-Swift 6 module
extension JPKJetPack {
    // Note the lack of a @Sendable annotation
    static func jetPackConfiguration(_ callback: @escaping () -> Void) {
        // Can potentially cross isolation domains
    }
}

@MainActor
class PersonalTransportation {
    func configure() {
        JPKJetPack.jetPackConfiguration {
            // MainActor isolation will be inferred here
            self.applyConfiguration()
        }
    }


    func applyConfiguration() {
    }
}

If jetPackConfiguration can invoke its closure in another isolation domain, it must be marked @Sendable. 
When an un-migrated module hasn’t yet done this, it will result in incorrect actor inference. 
This code will compile without issue but crash at runtime.

To workaround this, you can manually annotate the closure with @Sendable.
This will prevent the compiler from inferring MainActor isolation.
Because the compiler now knows actor isolation could change, it will require at await at the callsite.

@MainActor
class PersonalTransportation {
    func configure() {
        JPKJetPack.jetPackConfiguration { @Sendable in
            // Sendable closures do not infer actor isolation,
            // making this context non-isolated
            await self.applyConfiguration()
        }
    }


    func applyConfiguration() {
    }
}

