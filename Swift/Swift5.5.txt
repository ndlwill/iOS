-----条件编译支持表达式
struct ContentView: View {
    var body: some View {
        Text("SwiftUI")
        #if os(iOS) 
            .foregroundColor(.blue)
        #elseif os(macOS)
            .foregroundColor(.green)
        #else
            .foregroundColor(.pink)
        #endif
    }
}


-----CGFloat与Double支持隐式转换
let number1: CGFloat = 12.34
let number2: Double = 56.78
let result = number1 + number2 // result为Double类型


struct ContentView: View {
    @State private var scale = 1.0 // Double类型

    var body: some View {
        VStack {
            Image(systemName: "heart")
                .scaleEffect(scale) // 隐式转换为CGFloat

            Slider(value: $scale, in: 0 ... 1)
        }
    }
}


-----在通用上下文中扩展静态成员查找（static member lookup）
struct ContentView: View {
    @Binding var name: String

    var body: some View {
        HStack {
            Text(name)

            TextField("", text: $name)
                // .textFieldStyle(RoundedBorderTextFieldStyle()) // 以前写法
                .textFieldStyle(.roundedBorder) // 新写法，更简洁
        }
    }
}

-----局部变量支持lazy
func lazyInLocalContext() {
    print("lazy之前")
    lazy var swift = "Hello Swift 5.5"
    print("lazy之后")
    
    print(swift)
}

// 调用
lazyInLocalContext()

/* 输出
lazy之前
lazy之后
Hello Swift 5.5
*/


-----函数和闭包参数支持属性包装
@propertyWrapper struct Trimmed {
    private var value: String = ""

    var wrappedValue: String {
        get { value }
        set { value = newValue.trimmingCharacters(in: .whitespacesAndNewlines) }
    }

    init(wrappedValue initialValue: String) {
        wrappedValue = initialValue
    }
}

struct Post {
    func trimed(@Trimmed content: String) { // 函数参数支持PropertyWrapper
        print(content)
    }
}

let post = Post()
post.trimed(content: "  Swift 5.5 Property Wrappers  ")


-----带有关联值的枚举支持Codable
枚举就可以像结构体、类一样用来作为数据模型了

// 定义带有关联值的枚举
enum Score: Codable {
    case number(score: Double)
    case letter(score: String)
}

// 创建对象
let scores: [Score] = [.number(score: 98.5), .letter(score: "优")]

// 转JSON
let encoder = JSONEncoder()
encoder.outputFormatting = .prettyPrinted
do {
    let result = try encoder.encode(scores)
    let json = String(decoding: result, as: UTF8.self)
    print(json)
} catch {
    print(error.localizedDescription)
}



enum Score: Codable {
    case number(score: Double)
    case letter(score: String)
}

// JSON
let json = """
[
  {
    "number" : {
      "score" : 98.5
    }
  },
  {
    "letter" : {
      "score" : "优"
    }
  }
]
"""

// 转枚举
let decoder = JSONDecoder()
do {
    let scores = try decoder.decode([Score].self, from: json.data(using: .utf8)!)
    for score in scores {
        switch score {
        case let .number(value):
            print(value)
        case let .letter(value):
            print(value)
        }
    }
} catch {
    print(error.localizedDescription)
}