Required initializers
Instead, it only requires you to implement that initializer into a subclass, but you can still use any other initializers.


A well-known example is the required decoder initializer within custom instances of a view controller. 
As soon as you add your own custom initializer, it will show you the error


Question is, why does it not show up without a custom initializer?
The following quote from the Swift documentation makes that clear:
You do not have to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initializer.

The default view controller class can no longer make sure that it decodes correctly. 
Therefore, a custom implementation is needed to handle possible new cases correctly.


Interesting to point out is that the override modifier is not needed for required initializers.
The reason is that the modifier is implied when overriding a required initializer.
However, you must write the keyword before every subclass implementation.
This is to indicate that the initializer requirement applies to further subclasses in the chain.


Whenever your class requires a certain setup when subclassed, mark the initializer as required.
This makes sure that any new subclass instances will add support for that kind of usage.
Subclassing is not possible when your class is marked as final. Therefore, the keyword is not needed.
The compiler will also require you to use it when implementing a protocol initializer.