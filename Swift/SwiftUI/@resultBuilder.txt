@resultBuilder是在Swift5.4添加的，之前是叫@_functionBuilder
一个类、结构体添加@resultBuilder注解时必须包含至少一个buildBlock方法，并且这个方法是static静态的。这个方法可以接收0个或多个参数，在函数内部确定了参数的组成形式。

@resultBuilder struct StringBuilder {
    static func buildBlock(_ string1: String, _ string2: String, _ string3: String) -> String {
        string1 + " - " + string2 + " - " + string3
    }
}

func test(@StringBuilder strings: () -> String) {
    print(strings())
}

test {
    "1"
    "2"
    "3"
}

StringBuilder是一个字符串构建者结构体，里面的buildBlock方法接收3个参数，并且在3个参数中间插入” - “作为函数的返回值。
test函数接收一个使用@StringBuilder修饰的名为strings的闭包作为参数，函数体是调用这个闭包并打印到控制台。
最后使用3个字符串作为参数调用test函数，执行这段代码后会得到”1 - 2 - 3”的输出结果


@resultBuilder struct ViewBuilder
ViewBuilder本质上是一个结构体，并且被@resultBuilder注解，也就是说ViewBuilder是一个reult builder（结果建造者）类型了。
ViewBuilder结构体有11个名为buildBlock的函数，分别接收从0到10个View类型的参数，
因此在SwiftUI中一个接收@ViewBuilder类型参数的视图容器最多能接收10个子视图，如果不能满足需求可以通过拆分来增加子视图的个数。

使用@resultBuilder注解ViewBuilder结构体后，就可以用@ViewBuilder修饰闭包，这个闭包可以接收多个指定类型的对象，而这些对象会按照buildBlock函数的实现进行组织
A custom parameter attribute that constructs views from closures.
简单来说ViewBuilder就是一个包含多个视图的闭包

在SwiftUI框架中，所有的容器视图都是使用@ViewBuilder来修饰最后一个参数，因此这些容器视图可以接受多个子视图作为参数
// HStack
public struct HStack<Content> : View where Content : View {
    ...

    @inlinable public init(alignment: VerticalAlignment = .center, spacing: CGFloat? = nil, @ViewBuilder content: () -> Content)

    ...
}
单看()->Content是一个没有参数的闭包，但是前面使用了@ViewBuilder修饰，这就是一个可以接收多个视图的闭包了，最终看起来像是这样的：(view1: Content, view2: Content....) -> Content。