struct ViewBuilder
A custom parameter attribute that constructs views from closures.

You typically use ViewBuilder as a parameter attribute for child view-producing closure parameters, 
allowing those closures to provide multiple child views. 
For example, the following contextMenu function accepts a closure that produces one or more views via the view builder.

func contextMenu<MenuItems: View>(@ViewBuilder menuItems: () -> MenuItems) -> some View
myView.contextMenu {
    Text("Cut")
    Text("Copy")
    Text("Paste")
    if isSymbol {
        Text("Jump to Definition")
    }
}

==================================================

Text("Liaoworking")
.background(Color.red)
.cornerRadius(5)

MyView()
.background(Color.red)
.cornerRadius(5)

extension View {
    func addRedBGWithRoundCorner() -> some View {
        self
        .background(Color.red)
        .cornerRadius(5)
    }
}

//调用：
Text("111").addRedBGWithRoundCorner()


还可以用@ViewBuilder注解来创建你的自定义视图达到相同的效果:
struct RedBackgroundAndCornerView<Content: View>: View {
    let content: Content
    
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        content
            .background(Color.red)
            .cornerRadius(5)
    }
}

RedBackgroundAndCornerView {
    Text("111")
}

@ViewBuilder 不仅可以标注计算型属性，还可以标注func

==================================================

@ViewBuilder 还有一个更好用的地方
可能你在开发中经常会遇到下面这个编译报错
Function declares an opaque return type 'some View', but the return statements in its body do not have matching underlying types

struct ContentView: View {
    var body: some View {
        content
    }

    var content: some View {
        if true {
            return Text("111")
        } else {
            return Image("222")
        }
    }
}

这个时候就可以用神器 @ViewBuilder 去标注你的content属性， 可以顺利的编译

struct ContentView: View {
    var body: some View {
        content
    }

    @ViewBuilder
    var content: some View {
        if true {
            return Text("111")
        } else {
            return Image("222")
        }
    }
}