https://swiftui-lab.com/frame-behaviors/


在SwiftUI中，frame()是一个modifier，modifier在SwiftUI中并不是真的修改了view。大多数情况下，当我们对某个view应用一个modifier的时候，实际上会创建一个新的view。

Behaviors:
view在计算自己size的时候会有不同的行为方式，我们分为4类
类似于Vstack，它们会尽可能让自己内部的内容展示完整，但也不会多要其他的额外空间
类似于Text这种只返回自身需要的size，如果size不够，它非常聪明的做一些额外的操作，比如换行等等
类似于Shape这种给多大尺寸就使用多大尺寸
还有一些可能超出父控件的view

布局原则:
当布局某个view时，其父view会给出一个建议的size
如果该view存在child，那么就拿着这个建议的尺寸去问他的child，child根据自身的behavior返回一个size，如果没有child，则根据自身的behavior返回一个size
用该size在其父view中进行布局

在考虑布局的时候，是自下而上的。

struct ContentView: View {
    var body: some View {
        Text("Hello, World!")
    }
}
ContentView的size其实是跟Text一样的


struct ContentView: View {
    var body: some View {
        Text("Hello, World!")
            .frame(width: 200, height: 100)
            .background(Color.green)
            .frame(width: 400, height: 200)
            .background(Color.orange.opacity(0.5))
    }
}
我们先考虑ContentVIew，他的父view给他的建议尺寸为整个屏幕的大小，我们称为size0，他去询问他的child，
他的child为最下边的那个background，这个background自己也不知道自己的size，因此他继续拿着size0去询问他自己的child，
他的child是个frame，返回了width400， height200， 因此background告诉ContentView他需要的size为width400， height200，
因此最终ContentView的size为width400， height200。

很显然，我们也计算出了最下边background的size，注意，里边的Color也是一个view，Color本身是一个Shape，background返回一个透明的view

我们再考虑最上边的background，他父view给的建议的size为width: 400, height: 200，他询问其child，得到了需要的size为width: 200, height: 100，因此该background的size为width: 200, height: 100。

我们在看Text，父View给的建议的size为width: 200, height: 100，但其只需要正好容纳文本的size，因此他的size并不会是width: 200, height: 100
必须要理解Text的size并不会是width: 200, height: 100，这跟我们平时开发的思维有所不同。


实际上frame本质上并不能直接修改view的size


func frame(width: CGFloat? = nil, height: CGFloat? = nil, alignment: Alignment = .center)
struct ExampleView: View {
    @State private var width: CGFloat = 50

    var body: some View {
        VStack {
            SubView()
                .frame(width: self.width, height: 120)
                .border(Color.blue, width: 2)

            Text("Offered Width \(Int(width))")
            Slider(value: $width, in: 0...200, step: 1)
        }
    }
}

struct SubView: View {
    var body: some View {
        GeometryReader { proxy in
            Rectangle()
                .fill(Color.yellow.opacity(0.7))
                .frame(width: max(proxy.size.width, 120), height: max(proxy.size.height, 120))
        }
    }
}
黄色方块的宽度依赖frame(width: max(proxy.size.width, 120), height: max(proxy.size.height, 120))


==========
func frame(minWidth: CGFloat? = nil, idealWidth: CGFloat? = nil, maxWidth: CGFloat? = nil, minHeight: CGFloat? = nil, idealHeight: CGFloat? = nil, maxHeight: CGFloat? = nil, alignment: Alignment = .center)
这么多参数可以分为3组：
minWidth，idealWidth，maxWidth
minHeight，idealHeight，maxHeight
alignment

当我们给minWidth，idealWidth，maxWidth赋值的时候，一定要遵循数值递增原则，否则，xcode会给出错误提示。
minWidth表示的是最小的宽度， idealWidth表示最合适的宽度，maxWidth表示最大的宽度，通常如果我们用到了该方法，我们只需要考虑minWidth和maxWidth就行了。

frame modifier通过计算minWidth，maxWidth和child size ，就可以看着上边的规则返回一个size，view用这个size作为自身在父view中的size。

struct ContentView: View {
    var body: some View {
        Text("Hello, World!")
            .frame(minWidth: 40, maxWidth: 400)
            .background(Color.orange.opacity(0.5))
            .font(.largeTitle)
    }
}
上边的代码中，我们同时设置了minWidth和maxWidth，background的size返回400

struct ContentView: View {
    var body: some View {
        Text("Hello, World!")
            .frame(minWidth: 400)
            .background(Color.orange.opacity(0.5))
            .font(.largeTitle)
    }
}
如果只设置了minWidth，那么background的size返回400

struct ContentView: View {
    var body: some View {
        Text("Hello, World!")
            .frame(maxWidth: 400)
            .background(Color.orange.opacity(0.5))
            .font(.largeTitle)
    }
}
只要设置了maxWidth，background返回的就是maxWidth的值。


==========Fixed Size Views
func fixedSize() -> some View
func fixedSize(horizontal: Bool, vertical: Bool) -> some View

在SwiftUI中，任何View都可以用这个modifer，当我们应用了该modifier后，布局系统在返回size的时候，就会返回与之对应的idealWIdth或者idealHeight。

先看一段代码：
struct ContentView: View {
    var body: some View {
        Text("这个文本还挺长的，到达了一定字数后，就超过了一行的显示范围了！！！")
            .border(Color.blue)
            .frame(width: 200, height: 100)
            .border(Color.green)
            .font(.title)
    }
}
按照3大布局原则，绿色边框的宽为200， 高为100， 蓝色边框的父view提供的宽为200， 高为100，其child， text在宽为200， 高为100限制下，返回了篮框的size，因此篮框和text的size相同。


修改一下代码：
struct ContentView: View {
    var body: some View {
        Text("这个文本还挺长的，到达了一定字数后，就超过了一行的显示范围了！！！")
            .fixedSize(horizontal: true, vertical: false)
            .border(Color.blue)
            .frame(width: 200, height: 100)
            .border(Color.green)
            .font(.title)
    }
}
可以看到，绿框没有任何变化，篮框变宽了，当在水平方向上应用了fixedSize时，.border(Color.blue)在询问child的size时，
child会返回它的idealWidth，我们并没有给出一个指定的idealWidth，每个view里边都有自己的idealWidth。

我们给它显式的指定一个idealWidth：
struct ContentView: View {
    var body: some View {
        Text("这个文本还挺长的，到达了一定字数后，就超过了一行的显示范围了！！！")
            .frame(idealWidth: 300)
            .fixedSize(horizontal: true, vertical: false)
            .border(Color.blue)
            .frame(width: 200, height: 100)
            .border(Color.green)
            .font(.title)
    }
}
当我们想要固定某个view的某个轴的尺寸的时候，fixedSize这个modifier是一个利器。

==========fixedSize的小demo
struct ExampleView: View {
    @State private var width: CGFloat = 150
    @State private var fixedSize: Bool = true

    var body: some View {
        GeometryReader { proxy in

            VStack {
                Spacer()

                VStack {
                    LittleSquares(total: 7)
                        .border(Color.green)
                        .fixedSize(horizontal: self.fixedSize, vertical: false)
                }
                .frame(width: self.width)
                .border(Color.primary)
                .background(MyGradient())

                Spacer()

                Form {
                    Slider(value: self.$width, in: 0...proxy.size.width)
                    Toggle(isOn: self.$fixedSize) { Text("Fixed Width") }
                }
            }
        }.padding(.top, 140)
    }
}

struct LittleSquares: View {
    let sqSize: CGFloat = 20
    let total: Int

    var body: some View {
        GeometryReader { proxy in
            HStack(spacing: 5) {
                ForEach(0..<self.maxSquares(proxy), id: \.self) { _ in
                    RoundedRectangle(cornerRadius: 5).frame(width: self.sqSize, height: self.sqSize)
                        .foregroundColor(self.allFit(proxy) ? .green : .red)
                }
            }
        }.frame(idealWidth: (5 + self.sqSize) * CGFloat(self.total), maxWidth: (5 + self.sqSize) * CGFloat(self.total))
    }

    func maxSquares(_ proxy: GeometryProxy) -> Int {
        return min(Int(proxy.size.width / (sqSize + 5)), total)
    }

    func allFit(_ proxy: GeometryProxy) -> Bool {
        return maxSquares(proxy) == total
    }
}

struct MyGradient: View {
    var body: some View {
        LinearGradient(gradient: Gradient(colors: [Color.red.opacity(0.1), Color.green.opacity(0.1)]), startPoint: UnitPoint(x: 0, y: 0), endPoint: UnitPoint(x: 1, y: 1))
    }
}

如果idealWidth来固定住view的宽度，那么view的宽度就不会改变，这在某些场景下还是挺有用的。

最核心的代码是：
.frame(idealWidth: (5 + self.sqSize) * CGFloat(self.total), maxWidth: (5 + self.sqSize) * CGFloat(self.total))

==========Layout Priority:
SwiftUI中，view默认的layout priority 都是0，对于同一层级的view来说，系统会按照顺序进行布局，
当我们使用.layourPriority()修改了布局的优先级后，系统则优先布局高优先级的view。


struct ContentView: View {
    var body: some View {
        VStack {
            Text("床前明月光，疑是地上霜")
                .background(Color.green)
            Text("举头望明月，低头思故乡")
                .background(Color.blue)
        }
        .frame(width: 100, height: 100)
    }
}
这2个text的优先级是相同的，因此他们平分布局空间，我们给第2个text提升一点优先级:
struct ContentView: View {
    var body: some View {
        VStack {
            Text("床前明月光，疑是地上霜")
                .background(Color.green)
            Text("举头望明月，低头思故乡")
                .background(Color.blue)
                .layoutPriority(1)
        }
        .frame(width: 100, height: 100)
    }
}
可以明显的看出来，优先布局第2个text。

总结:
父view提供一个建议的size
view根据自身的特点再结合它的child计算出一个size
使用该size在父view中布局

