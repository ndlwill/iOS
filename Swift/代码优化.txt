struct Car {
    var driving = false
}

class Test {
    var cars: [Car] = []

    var carsInDriving: [Car] {
        cars.filter({$0.driving})
    }

    func loop() {
        for car in carsInDriving {
            // ...
        }
    }
}



优化方案1:
struct Car {
    var driving = false
}

class Test {
    private var _carsInDriving: Set<Car>? = nil
    var cars: [Car] {
        didSet {
            _carsInDriving = nil
        }
    }

    var carsInDriving: Set<Car> {
        if let carsInDriving = _carsInDriving {
            return carsInDriving
        } else {
            let carsInDriving = Set(cars.filter({$0.driving}))
            _carsInDriving = carsInDriving
            return carsInDriving
        }
    }

    func loop() {
        for car in carsInDriving {
            // ...
        }
    }
}
carsInDriving 的 getter 方法在 _carsInDriving 为空时具有 O(n) 的时间复杂度，否则它具有 O(1) 的时间复杂度。


优化方案2:
struct Car {
    var driving = false
}

class Test {
    var cars: [Car] = []

    func loop() {
        for car in cars where car.driving {
            // ...
        }
    }
}
方案的另一种写法:
当我们在集合类型（如数组）上调用lazy属性时，我们会得到一个特殊的集合视图，该视图会在需要时才进行计算，从而可能提高性能。

struct Car {
    var driving = false
}

class Test {
    var cars: [Car] = []

    func loop() {
        for car in cars.lazy.filter({$0.driving}) {
            // ...
        }
    }
}


优化方案3:
除了lazy, 还加了一个暂存. 空间换时间.
struct Car {
    var driving = false
}

class Test {
    var cars: [Car] = []

    lazy var carsInDriving: [Car] = {
        cars.filter({$0.driving})
    }()

    func loop() {
        for car in carsInDriving {
            // You can do something with each driving car here.
        }
    }
}


优化方案4:
struct Car {
    var driving = false
}

class Test {
    var cars: [Car] = []

    lazy var carsInDriving: LazySequence<[Car]> = {
        cars.lazy.filter({$0.driving})
    }()

    func loop() {
        for car in carsInDriving {
            // ...
        }
    }
}
carsInDriving是一个lazy属性，并且是一个LazySequence。
当你第一次访问carsInDriving（在这里是在loop函数中）时，它将计算其值并将结果存储起来。
这种方法可以防止在每次调用loop函数时都进行过滤操作
但是，如果cars数组中车辆的driving状态经常发生变化，那么这种方法可能不能反映最新的状态，因为carsInDriving在第一次计算后就被存储了起来，不会再更新。