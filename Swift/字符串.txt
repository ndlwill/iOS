Swift 的 String 类型是基于 Unicode建立的

在OC中字符串类型时NSString,在Swift中字符串类型是String
OC中字符串@"",Swift中字符串""

String 是一个结构体，性能更高
NSString 是一个 OC 对象，性能略差
String 支持直接遍历
Swift 提供了 String 和 NSString 之间的无缝转换


// 使用字符串字面量
var stringA = "Hello, World!"
// String 实例化
var stringB = String("Hello, World!")

// 使用字符串字面量创建空字符串
var stringA = ""
// 实例化 String 类来创建空字符串
let stringB = String()

遍历字符串
// 字符串遍历
var str = "Hello, Swift"
for c in str.characters {
    print(c)
}

if stringA.isEmpty {
   print( "stringA 是空的" )
} 

var unicodeString   = "菜鸟教程"
print("UTF-8 编码: ")
for code in unicodeString.utf8 {
   print("\(code) ")
}

转换字符串数字为整型
let myString: String = "256"
let myInt: Int? = Int(myString)

var varA   = 20
let constA = 100
var varC:Float = 20.0
var stringA = "\(varA) 乘于 \(constA) 等于 \(varC * 100)"

字符串长度使用 String.count 属性来计算
Swift 3 版本使用的是 String.characters.count

两个字符串的拼接
let str1 = "Hello"
let str2 = "World"
let str3 = str1 + str2

字符串和其他数据类型的拼接
let name = "why"
let age = 18
let info = "my name is \(name), age is \(age)"

字符串比较
var varA   = "Hello, Swift!"
var varB   = "Hello, World!"
if varA == varB {
   print( "\(varA) 与 \(varB) 是相等的" )
}

字符串的格式化
比如时间:03:04
let min = 3
let second = 4
let time = String(format: "%02d:%02d", arguments: [min, second])


字符串的截取
Swift中提供了特殊的截取方式
该方式非常麻烦
Index非常难创建

简单的方式是将String转成NSString来使用
在标识符后加:as NSString即可
let myStr = "www.520it.com"
var subStr = (myStr as NSString).substringFromIndex(4)
subStr = (myStr as NSString).substringToIndex(3)
subStr = (myStr as NSString).substringWithRange(NSRange(location: 4, length: 5))


==============字符(Character)
Swift 中不能创建空的 Character（字符）