pattern是swift里面非常好用的语法
在if语句中以case开始的条件都属于模式匹配条件

//传统用法
if x>=6 && x < 12 { 

}
//模式匹配用法
if case 6..<12 = x {

}

//传统用法
if let x = x, x>=6 && x < 12 { 

}
//模式匹配用法
if case .some(6..<12) = x {

}

pattern有很多种，看一下官方文档
pattern → wildcard-pattern 
pattern → identifier-pattern 
pattern → value-binding-pattern 
pattern → tuple-pattern 
pattern → enum-case-pattern 
pattern → optional-pattern 
pattern → type-casting-pattern 
pattern → expression-pattern


1.type-casting-pattern:
var t : Any = 10
if case is Int = t {
    print("bingo")
}
if t is Int {

}

2.tuple-pattern:
if case (1..<10, 1..<20) = (7, 8) {

}
在这里(1..<10, 1..<20)是一个pattern，而不是普通的tuple

3.optional-pattern:
var t : Any? = 10
// 判断t是不是nil，和判断 t ！= nil 等效
if case _? = t {

}
//判断t是不是nil，如果有值则绑定到x
if case let x? = t {

}

4.expression-pattern:
前面提到的case 6..<12 = x实际上就是这一种pattern，实际上这里调用了一个函数，也是一个操作符~=
func ~= (pattern: String, value: Int) -> Bool {
    return pattern == "\(value)"
}
if case "123" = 123 {

}
通过重载~=操作符，我们可以实现很多自定义的模式匹配

if case expression1 = expression2 {
    statements
}
//等价于
switch expression2 {
    case expression1:
        statements
    default:
        break
}

混合使用:
var t : Any? = 10

if case let xs? = t, xs is Int {
    print("bingo")
}