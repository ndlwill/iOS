https://www.swiftbysundell.com/articles/opaque-return-types-primary-associated-types/

This is where Swift 5.7’s introduction of primary associated types comes in.
If we take a look at the declaration of Combine’s Publisher protocol, we can see that it’s been updated to take advantage of this feature by declaring that its associated Output and Failure types are primary (by putting them in angle brackets right after the protocol’s name):

protocol Publisher<Output, Failure> {
    associatedtype Output
    associatedtype Failure: Error
    ...
}

That in turn enables us to use the some keyword in a brand new way — 
by declaring what exact types that our return value will use for each of the protocol’s primary associated types. 
So if we first update our UserLoader to use that new feature:

struct UserLoader {
    ...

    func loadUser(withID id: User.ID) -> some Publisher<User, Error> {
        urlSession
            .dataTaskPublisher(for: urlForLoadingUser(withID: id))
            .map(\.data)
            .decode(type: User.self, decoder: decoder)
    }

    ...
}