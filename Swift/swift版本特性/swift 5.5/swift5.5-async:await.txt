Swift 并发：
async/await

加载缩略图步骤:
• 从 URL 字符串创建一个 URLRequest 对象；
• URLSession 的 dataTask(with:completion:) 方法获取要请求图片数据；
• UIImage(data:) 从图片数据中创建一个图像；
• UIImage 的 prepareThumbnail 方法从原始图像中渲染一个缩略图

这些操作的每一步都依赖于前一个步骤的结果，所以必须按顺序执行。在这四步操作中，第二步和第四步会比较费时，所以这两步操作一般通过异步调用来完成。



async/await 版本代码
• 入参不再的 completion 处理程序；
• 返回值是 UIImage 类型，表示函数返回的缩略图，同时通过关键字 throws 标识可以抛出一个异常；
• 在 throws 前面添加了关键字 async，表明这是一个异步函数（注意：如果没有 throws 关键字，则 async 直接放在 -> 前面）

• 调用依然从 thumbnailURLRequest 开始，该操作是同步的，阻塞线程；
• 调用 URLSession 的 data(for:) 开始下载数据，这里有几个变化:
   • 使用 await 标记方法调用，表明这是一个异步操作；如果一个表达式里面有多个异步函数调用，则只需要写一次 await
   • data(for: ) 方法是可等待的，调用后，会挂起自己，解除线程阻塞；
   • 使用 try 是因为 fetchThumbnail 被标记为 throws，如果网络请求有错误，则直接抛出异常；
   • data(for:) 完成后，恢复 fetchThumbnail，并将返回的数据及请求响应赋值给 data 和 response，就像普通的赋值操作一样；

更安全：整个过程能确保出错时抛出异常；
• 更简洁：避免的代码的层层嵌套；
• 更能体现意图：整个代码基本是和我们预定的流程保持了一致；


可等待属性
需要注意几点：
• 异步属性必须是只读的，可写属性不能声明为异步属性；
• 异步属性需要有一个明确的 getter，async 关键字位于 get 后；
• 从 Swift 5.5 开始，getter 也可以抛出异常，如果同时是异步的，则 async 关键字位于 throws 前面；
• await 可用于属性 body 中的表达式，以表明操作的异步性；



普通函数的调用流程：
• 调用函数；
• 函数获取线程的控制权，并完全占用该线程；
• 函数执行完成返回或者抛出错误，将控制权交还调用方
这里普通函数放弃线程控制权的唯一方式就是执行完成。

而异步函数的调用流程:
• 调用函数；
• 函数获得线程控制权；
• 函数运行后，挂起，同时放弃对线程的控制，并将控制权交给系统，系统可自由支配该线程；
• 系统确定何时恢复函数；
• 函数恢复后重新获得控制权，并继续工作；
• 函数执行完成或抛出异常后，返回调用方，将控制权交还给调用方
这里需要注意几点：
• 一个异步函数挂起时，也会挂起它的调用者，所以调用者也必须是异步的；
• 异步函数可以多次挂起，就像上面的 fetchThumbnail 方法一样使用了两个 await 关键字；
• 异步函数挂起时，不会阻塞线程；
• 异步函数可能会在一个完全不同的线程上恢复；
• async 函数并不一定会挂起；


Continuation 模式:
Swift 是如何与系统协作，完成异步代码的恢复呢。答案就是 Continuation 模式，方法的调用者等待函数调用的结果并提供一个闭包来指定下一步要做什么。
当函数调用完成时，调用完成处理程序恢复调用者想要对结果执行的操作。这种协同执行正是 Swift 中异步函数的工作方式。

为此，Swift 提供了 withCheckedThrowingContinuation 函数
Suspends the current task, then calls the given closure with a checked throwing continuation for the current task.

以及 CheckedContinuation 结构体
A mechanism to interface between synchronous and asynchronous code, logging correctness violations.

通过这些结构体和函数，调用方可以访问可用于恢复挂起的异步函数的延续值。CheckedContinuation 结构体还提供了多个 resume 方法，用来回传结果值。
Continuation 提供了一种强大的方式来手动控制异步函数的执行，不过有一点需要记住：
resume 在每个代码分支上必须且只能调用一次
如果某个分支没有调用 resume，异步调用将永远挂起；而如果某个分支调用了多次，则可能会破坏程序数据。这两种情况 Swift 都会给出警告或错误。