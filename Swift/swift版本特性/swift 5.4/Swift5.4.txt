-----改进隐式成员语法
在 UIKit 和 SwiftUI 中设置颜色时，无法直接通过.的方式进行颜色的书写，必须带上前缀UIColor或者Color，
因为无法根据上下文进行成员推测，Swift 5.4 中改进了这个语法，可以省去前缀且支持链式调用。

let view = UIView()
view.backgroundColor = .red.withAlphaComponent(0.5)


-----支持多个可变参数
// 多个可变参数
func score(courses: String..., scores: Int...) {
    for i in 0 ..< courses.count {
        print("《\(courses[i])》课程的成绩：\(scores[i])")
    }
}

// 调用
score(courses: "Swift", "iOS开发", "SwiftUI", scores: 90, 95, 100)


-----嵌套函数支持重载
func method() {
    // 内嵌函数一
    func add(num1: Int, num2: Int) -> Int {
        num1 + num2
    }
    // 内嵌函数二
    func add(num1: Int, num2: Int, num3: Int) -> Int {
        num1 + num2 + num3
    }
    // 内嵌函数三
    func add(num1: Double, num2: Double) -> Double {
        num1 + num2
    }
    // 内嵌函数四
    func add(a num1: Int, b num2: Int) -> Int {
        num1 + num2
    }

    add(num1: 10, num2: 20) // 30
    add(num1: 10, num2: 20, num3: 30) // 60
    add(num1: 10.0, num2: 20.0) // 30
    add(a: 10, b: 20) // 30
}

method()



-----#####Result builders#####
Swift 5.4 之前叫 Function builders，它使用一个buildBlock方法可以将多个内容构建为一个结果，该特性在 SwiftUI 广泛使用。
可以使用@resultBuilder自定义 Result builders。

@resultBuilder
struct StringBuilder {
    // buildBlock中将多个值构建为一个结果
    static func buildBlock(_ strs: String...) -> String {
        // 以换行符拼接多个字符串
        strs.joined(separator: "\n")
    }

    // if逻辑分支
    static func buildEither(first component: String) -> String {
        return "if \(component)"
    }

    // else逻辑分支
    static func buildEither(second component: String) -> String {
        return "else \(component)"
    }
}

@StringBuilder
func buildString() -> String {
    "静夜思"
    "唐•李白"
    "床前明月光，疑是地上霜。"
    "举头望明月，低头思故乡。"

    if Bool.random() {
        "一首诗"
    } else {
        "一首词"
    }
}

print(buildString())


SwiftUI 是最著名的例子之一，它本身就是一个用于构建用户界面的 DSL。SwiftUI 的声明式语法让开发者能够以简洁直观的方式构建视图
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Hello, World!")
                .font(.largeTitle)
                .padding()
            Button(action: {
                print("Button tapped")
            }) {
                Text("Tap Me")
            }
        }
    }
}
VStack、Text、Button 等都是 SwiftUI 的 DSL 元素，表达了用户界面的结构和行为。


Result Builders（以前称为 Function Builders）是 Swift 5.4 引入的特性，它们允许你使用 DSL 风格的语法来构建复杂的数据结构或操作
SwiftUI 就是通过 Result Builders 实现的


-----局部变量支持属性包装
// 属性包装
@propertyWrapper struct Trimmed {
    private var value: String = ""

    var wrappedValue: String {
        get { value }
        set { value = newValue.trimmingCharacters(in: .whitespacesAndNewlines) }
    }

    init(wrappedValue initialValue: String) {
        wrappedValue = initialValue
    }
}

struct Post {
    func trimed() {
        // 局部变量
        @Trimmed var content: String = "  Swift 5.4 Property Wrappers  "
        print(content)
    }
}

class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()

        let post = Post()
        post.trimed()
    }
}


// 自定义View
struct CustomView<Content: View>: View {
    // 属性包装定义内容
    @ViewBuilder var content: () -> Content

    var body: some View {
        ScrollView(.horizontal) {
            HStack(content: content)
                .padding()
        }
    }
}

struct ContentView: View {
    var body: some View {
        CustomView {
            ForEach(0 ..< 10) { _ in
                Image(systemName: "heart")

                Text("SwiftUI")
            }
        }
    }
}