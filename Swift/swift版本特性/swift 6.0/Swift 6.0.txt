#####
https://www.swift.org/migration/documentation/migrationguide/
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/commonproblems/
https://www.swift.org/migration/documentation/swift-6-concurrency-migration-guide/incrementaladoption/
#####


Int128与UInt128
增加 128 位整数类型Int128与UInt128。
// Int128
var a: Int128 = 10
// UInt128
let b: UInt128 = 20


并发编程
默认启用完全并发。
确保了全局变量的并发安全性。
消除了 Swift 5.10 中误报数据竞争的警告。
1. Complete concurrency enabled by default:
By far the biggest change is that complete concurrency checking is enabled by default.
Swift 6 improves concurrency checking further, and the Swift team say it "removes many false-positive data-race warnings" that were present in 5.10.

Easily the biggest is SE-0414, defines isolation regions that allow the compiler to conclusively prove different parts of your code can run concurrently.

At the core of this change lies the existing concept of sendability. A Sendable type is one that can be safely passed around in a concurrent environment, 
which can include value types such as structs, final classes with constant properties, actors that automatically protect their own mutable state, and more.

Before Swift 6 the compiler was very strict: if you had a non-sendable value on one actor and tried to send it to another actor, you'd get concurrency checking warnings. For example, although SwiftUI view bodies run on the main actor, SwiftUI views themselves don't, 
which can easily cause all sorts of false positive warnings from the compiler – Swift thinks there's a potential race condition when really there isn't.

You can see the problem with the following code:
class User {
    var name = "Anonymous"
}

struct ContentView: View {
    var body: some View {
        Text("Hello, world!")
            .task {
                let user = User()
                await loadData(for: user)
            }
    }

    func loadData(for user: User) async {
        print("Loading data for \(user.name)…")
    }
}

Before Swift 6 the call to loadData() would throw up a warning: "passing argument of non-sendable type 'User' outside of main actor-isolated context may introduce data races."

After Swift 6 this warning goes away: Swift now detects that the code doesn't actually present a problem because user isn't being accessed from two or more places at once, so it won't emit a warning – the compiler is able to analyze the program's flow and detect that it's safe.

This change effectively means sendable objects are now either those that conform to Sendable, 
or those that don't need to conform to Sendable because the compiler can prove they are being used safely – it's a dramatic simplification of concurrency for developers, made possible by truly cutting-edge compiler development.

But there are many other, smaller improvements, including:
SE-430 adds a new sending keyword for when we need to send values between isolation regions.
SE-0423 improves concurrency support when needing to operate with Objective-C frameworks.
SE-0420 allows us to make async functions that are isolated to the same actor as their caller.


2. count(where:): // 相当于filter()+count的组合操作
https://github.com/swiftlang/swift-evolution/blob/main/proposals/0220-count-where.md

SE-0220 introduced a new count(where:) method that performs the equivalent of a filter() and count in a single pass.

let scores = [100, 80, 85]
let passCount = scores.count { $0 >= 85 }


3. Typed throws // 类型化throws，throws时可以指定类型
SE-0413 introduced the ability to specify exactly what types of errors a function can throw, known as "typed throws".
This resolves an annoyance with errors in Swift: we needed a general catch clause even when we had specifically caught all possible errors.

enum CopierError: Error {
    case outOfPaper
}

struct Photocopier {
    var pagesRemaining: Int

    mutating func copy(count: Int) throws(CopierError) {
        guard count <= pagesRemaining else {
            throw CopierError.outOfPaper
        }

        pagesRemaining -= count
    }
}

Note: With this change you can either use throws to specify any kind of error being thrown, 
or throws(OneSpecificErrorType) to signal that only that one type can be thrown. 
You cannot write throws(A, B, C) to throw one of several errors.

Now we can write code to attempt photocopying, catching the single error that can possibly be thrown:
do {
    var copier = Photocopier(pagesRemaining: 100)
    try copier.copy(count: 101)
} catch CopierError.outOfPaper {
    print("Please refill the paper")
}

This comes with several other advantages:
Because Swift knows that CopierError is the only error type that can be thrown, we can write throw .outOfPaper.
If the code in a do block only throws one kind of error, the error value in a general catch block will automatically have the same error type rather than being any kind of error.
If we attempt to throw any other kind of error not listed in the throws clause, Swift will issue a compile error.

Where this gets really clever is that throws(any Error) is equivalent to using just throws by itself, and throws(Never) is equivalent to a non-throwing function.
That might sound obscure, but it means in many places rethrows can be expressed more clearly: the function throws whatever the function parameter throws.

As an example, Swift 6's new count(where:) method accepts a closure used to evaluate how many items match whatever kind of filter you're running.
That closure might throw errors, and if it does count(where:) will throw that same error type:
public func count<E>(
    where predicate: (Element) throws(E) -> Bool
) throws(E) -> Int {

If that closure doesn't throw an error, throws(E) is effectively throws(Never), meaning that count(where:) will also not throw errors.

Even though typed throws seem very appealing, they aren't a great choice when the errors that can be thrown might change in the future. 
They are a particularly poor choice in library code, because they lock you into a contract you might not want to stick to in the future.

who sum it up like this: even with the addition of typed throws to Swift, untyped throws is better for most scenarios.


4. Pack iteration
https://www.swift.org/blog/pack-iteration/

Parameter packs, introduced in Swift 5.9, make it possible to write generics that abstract over the number of arguments. 
This eliminates the need to have overloaded copies of the same generic function for one argument, two arguments, three arguments, and so on. 
With Swift 6.0, pack iteration makes it easier than ever to work with parameter packs. 

The Swift standard library provided comparison operators for tuples up to only 6 elements for a long time:
func == (lhs: (), rhs: ()) -> Bool
func == <A, B>(lhs: (A, B), rhs: (A, B)) -> Bool where A: Equatable, B: Equatable
func == <A, B, C>(lhs: (A, B, C), rhs: (A, B, C)) -> Bool where A: Equatable, B: Equatable, C: Equatable
// and so on, up to 6-element tuples

let areEqual = (1, true, "hello") == (1, false, "hello")
print(areEqual)
// false
However, this code wouldn’t work if the tuples contained 7 elements!

In each of the generic functions above, every element of the input tuple has to have its type declared in the generic parameter list of the function. 
Thus, we need to add a new element to the generic parameter list any time we want to support a larger tuple size.
Because of this, the artificial limit of 6-element tuples was imposed.
Parameter packs added the ability to abstract a function over a variable number of type parameters. This means that we can lift the 6-element limit using an == operator written like this:
func == <each Element: Equatable>(lhs: (repeat each Element), rhs: (repeat each Element)) -> Bool
(1)Note each Element in the list of generic parameters. The each keyword indicates that Element is a type parameter pack, meaning that it can accept any number of generic arguments. Just like with non-pack (scalar) generic parameters, we can declare a conformance requirement on the type parameter pack. 
In this case, we require each Element type to conform to the Equatable protocol.
(2)This function takes in two tuples, lhs and rhs, as arguments. In both cases, the tuple’s element type is repeat each Element. This is called the pack expansion type, which consists of a repeat keyword followed by a repetition pattern, which has to contain a pack reference. 
In our case, the repetition pattern is each Element.
(3)At the call site, the user provides value parameter packs for each tuple that will be substituted into their corresponding type parameter packs. 
At runtime, the repetition pattern will be repeated for each element in the substituted pack.

With the tuple equality operator implemented using parameter packs, let’s look at the call site again to understand these concepts better.
let areEqual = (1, true, "hello") == (1, false, "hello")
print(areEqual)
// false
The call to == substitutes the type pack {Int, Bool, String} for the Element type pack. 
Note that both lhs and rhs have the same type. Finally, the function == is called with value packs {1, true, "hello"} for the value pack of the lhs tuple and {1, false, "hello"} for the value pack of the rhs tuple.


SE-0408 introduces pack iteration, which adds the ability to loop over the parameter pack feature introduced in Swift 5.9.

Although value packs remain one of the most complex features of Swift, the evolution proposal shows just how useful this feature is by adding tuple comparison for any arity in just a few lines of code:
func == <each Element: Equatable>(lhs: (repeat each Element), rhs: (repeat each Element)) -> Bool {
    for (left, right) in repeat (each lhs, each rhs) {
        guard left == right else { return false }
    }
    return true
}

If that means nothing to you, the Simple English version is that SE-0015 added support for direct tuple comparison up to arity 6, meaning that two tuples with up to six items could be compared using ==.
If you tried comparing tuples with seven items – e.g. (1, 2, 3, 4, 5, 6, 7) == (1, 2, 3, 4, 5, 6, 7) – Swift would throw up an error. SE-0408, along with the code above, removes that restriction.

Tantalizingly, the Future Directions section of this evolution proposal suggest that in the future we might see a variant of Swift's zip() function that supports any number of sequences.

That being said, if I were to speculate I'd say this particular feature feels more like Apple continuing work to formalize a technique SwiftUI has used for some time: being able to iterate over TupleView children in a VStack.


5. Add Collection Operations on Noncontiguous Elements: // 增加了RangeSet类型
SE-0270 introduces various new methods to handle more complex operations on collections, such as moving or remove multiple items that aren't contiguous.

This change is powered by a new type called RangeSet.
If you've ever used IndexSet from Foundation, think of RangeSet as being IndexSet except for any kind of Comparable type rather than just integers.

Lots of Swift API has been upgraded to RangeSet. To give us some example data to work with, we could create an array of students with exam results like this:
struct ExamResult {
    var student: String
    var score: Int
}

let results = [
    ExamResult(student: "Eric Effiong", score: 95),
    ExamResult(student: "Maeve Wiley", score: 70),
    ExamResult(student: "Otis Milburn", score: 100)
]

We can get a RangeSet containing the indices of all students who score 85% or higher like this:
let topResults = results.indices { student in
    student.score >= 85
}
And if we wanted to get access to those students, we can use a new Collection subscript:
for result in results[topResults] {
    print("\(result.student) scored \(result.score)%")
}

This subscript returns another new type called DiscontiguousSlice, 
which is similar to Slice in that for performance reasons it refers to elements stored in a different collection, 
except the indices are discontiguous, meaning that they aren't necessarily adjacent in the collection.

The "set" part of the name is there because RangeSet supports a variety of functions that come from the SetAlgebra protocol, including union(), intersection(), and isSuperset(of:). 
This also means that inserting one range into another will merge any overlapping ranges rather than creating duplicates.


6. Access-level modifiers on import declarations: // import支持访问权限
SE-0409 adds the ability to mark import declarations with access control modifiers, such as private import SomeLibrary.

There are various ways this will be useful, including the ability for library developers to avoid accidentally leaking their own dependencies. For example, a banking might be split into multiple parts:
The app itself, presenting the user interface.
A Banking library that handles all the functionality and core logic.
Several smaller, internal libraries that handle individual pieces of work that are lower level, such as a Transactions package, a Networking package, and so on.

So, the app depends on the Banking library, and the Banking library in turn depends on Transactions, Networking, and other internal libraries.

We can demonstrate that setup with some code that also demonstrates the problem being resolved here. First, we could say that the low-level Transactions package has a struct such as this one:
public struct BankTransaction {
    // code here
}
Up in the Banking library we might write a function to send money from one account number to another using that BankTransaction:
public func sendMoney(from: Int, to: Int) -> BankTransaction {
    // handle sending money then send back the result
    return BankTransaction()
}
And now in the main app we can call sendMoney() to do the work.

That's all regular Swift code, but it can create a rather unpleasant problem: very often wrapper libraries don't want to reveal the inner workings of the libraries they rely on internally, which is exactly what happens here – our main app is given access to the BankTransaction struct from the Transactions library, when really it should only use APIs from the Banking library.

From 6.0 onwards we can solve this problem by using access control on the import for Transactions: by using internal import Transactions or similar in the Banking library, 
Swift will refuse to build any code declared as public that exposes API from the Transactions library.

This really helps to clear up code boundaries: the Banking framework can still go ahead and use all the libraries it wants internally, but it won't be allowed to send those back to clients – the app in this case – by accident. 
If we genuinely did want to expose the internal framework types, we would use public import Transactions to make that explicit.

On a more fine-grained level, this also allows files inside the same module to add extra restrictions – one file could privately import a framework without wanting to accidentally expose the contents of that framework elsewhere.

Although Swift 6 hasn't shipped yet, it's looking like the default for imports will be internal when running in Swift 6 mode, but public in Swift 5 mode to retain compatibility with existing code.


7. Upgrades for noncopyable types:
Noncopyable types were introduced in Swift 5.9, but are getting several upgrades in Swift 6.

As a reminder, noncopyable types allow us create types that have unique ownership, which we can pass around using borrowing or consuming as needed.

One example of noncopyable types I previously used were the secret messages used in the Mission Impossible movies – they famously self-destruct after being read, which we can model with a noncopyable type that is consumed (i.e. destroyed) upon reading:
struct Message: ~Copyable {
    var agent: String
    private var message: String

    init(agent: String, message: String) {
        self.agent = agent
        self.message = message
    }

    consuming func read() {
        print("\(agent): \(message)")
    }
}

func createMessage() {
    let message = Message(agent: "Ethan Hunt", message: "You need to abseil down a skyscraper for some reason.")
    message.read()
}

createMessage()

In that code, the compiler enforces that message.read() can only ever be called once, because it consumes the object.

The first major improvement is SE-0427, which introduces a batch of improvements at once. 
The biggest of those is that every struct, class, enum, generic type parameter, and protocol in Swift 6 automatically conforms to a new Copyable protocol unless you explicitly opt out using ~Copyable.

This impacts on the other changes introduced with this proposal. For example, noncopyable types can now be used with generics, allowing things like optional noncopyable instances because Swift's Optional is implemented a generic enum. 
However, because generic type parameters automatically conform to Copyable we must explicitly opt out using ~Copyable.

Similarly, this change means noncopyable types can now conform to protocols, 
but only when those protocols are also marked ~Copyable because otherwise they get automatically opted into Copyable as mentioned above. 
(In case you were curious, Copyable types can conform to noncopyable protocols just fine.)

SE-0429 improves things further by adding partial consumption of noncopyable values.

Previously it could be a problem when one noncopyable type incorporated another. 
For example, even fairly trivial code like the below was a problem before SE-0429:
struct Package: ~Copyable {
    var from: String = "IMF"
    var message: Message

    consuming func read() {
        message.read()
    }
}
That code is now valid Swift, as long as the types in question don't have deinitializers.

A third major noncopyable improvement is SE-0432, which allows us to borrow noncopyable types while switching over them. 
Previously it was impossible to do pattern matching with where clauses that depended on noncopyable values, whereas thanks to SE-0432 this is now possible in Swift 6.

Continuing our Mission Impossible example, we could say that one set of orders might be signed or anonymous, like this:
enum ImpossibleOrder: ~Copyable {
    case signed(Package)
    case anonymous(Message)
}
Because that enum has associated values that are noncopyable, it must itself be noncopyable. 
However, the associated values being noncopyable also means that pattern matching with where was tricky – if you wanted to perform one set of actions for one Message type, 
and a different set for another Message type, you were out of luck.

With SE-0432 this is now resolved, meaning code like the below is now allowed:

func issueOrders() {
    let message = Message(agent: "Ethan Hunt", message: "You need to abseil down a skyscraper for some reason.")
    let order = ImpossibleOrder.anonymous(message)

    switch consume order {
    case .signed(let package):
        package.read()
    case .anonymous(let message) where message.agent == "Ethan Hunt":
        print("Play dramatic music")
        message.read()
    case .anonymous(let message):
        message.read()
    }
}

Put together, this collection of changes helps make noncopyable types work much more naturally in Swift.


Swift5.9中的NonCopyable类型
NonCopyable是适用于struct和enum的概念。
和Swift中默认的类型不一样，Swift中未被NonCopyable修饰的类型在赋值、作为函数参数传递、作为函数返回值返回时默认是进行copy操作的。
而NonCopyable只有一个所有者，和Rust中的所有者概念类似

NonCopyable只有单一所有权并且不会被复制

NonCopyable不能应用到下面的类型上:
protocols
generic parameters
associated type requirements in protocols
the Self type in a protocol declaration, or in extensions

NonCopyable作为函数参数必须指明所有权的处理方式
和Rust中一样，在Swift中对所有权的处理的方式也有三种
(1)所有权转移，这可以使用 consuming 关键字。
(2)不可变借用，这可以使用 borrowing 关键字。borrowing修饰后参数即是let，不可修改。
(3)可变借用，这可以使用 inout 关键字

NonCopyable的deinit:
NonCopyable的enum和struct可以声明deinit，deinit会在生命周期消失时调用


8. BitwiseCopyable:
SE-0426 introduces a new BitwiseCopyable protocol, which has the sole purpose of allowing the compiler to create more optimized code for conforming types.

Most of the time you don't need to do anything to enable BitwiseCopyable support. Swift will automatically apply it to most structs and enums you create as long as all the properties they contain are also bitwise copyable. 
That includes a huge collection of built-in types: all integers, all floating-point numbers, Bool, Duration, StaticString, and more.

Where things take a little more thinking is when you're building a library – if Swift were to automatically apply a conformance to BitwiseCopyable it could cause problems if your type changed in the future in a way that made it not support the protocol.

So, Swift disables the automatic inference for types you export with public or package visibility unless you explicitly mark those types with @frozen.

If you specifically need to disable BitwiseCopyable, you can do that by adding ~BitwiseCopyable to your type's inheritance list. 
For example, the standard library's CommandLine enum is both public and @frozen, so the Swift team explicitly opt out of it being bitwise copyable like this:
@frozen
public enum CommandLine : ~BitwiseCopyable {
}

Important: Opting out of BitwiseCopyable must happen directly where your type is declared rather than in an extension.