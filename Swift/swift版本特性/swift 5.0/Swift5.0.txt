Swift 5.0  ABI Stability

==================================================Result

经常会有很多时候接收异步回调，比如网络部分 URLSession 的 dataTask(with:completionHandler:) 方法
let request = URLRequest(url: URL(string: "https://xxxx")!)
        
URLSession.shared.dataTask(with: request) { 
data, response, error in
    
    if error != nil {
            
        //处理错误error
            
        } else {
            
            //处理数据data
    }
}

这里有三个参数：(Data?, URLResponse?, Error?)，它们都是可选型，当请求成功时，Data参数包含 response 中的数据，Error 为 nil；
当发生错误时，Error 指明具体的错误，Data 为 nil。显然 data 和 error 是互斥的，
不存在 data 和 error 同时为 nil 或者同时非 nil的情况，但是编译器却无法确认这个事实。
于是在 Swift 5 中，新增了一个枚举类型 Result，使我们能够更简单、更清晰地处理复杂代码中的错误。


public enum Result<Success, Failure> where Failure: Error {

    /// A success, storing a `Success` value.
    case success(Success)

    /// A failure, storing a `Failure` value.
    case failure(Failure)
    
    ...
}

接收两个泛型参数，一个为Success，一个为Failure，但是Failure必须是Error类型的
Success代表正确执行的值
Failure代表出现问题时的错误值

import UIKit


it’s expected that most uses of Result will use Swift.Error as the Error type argument
// 定义Error
enum FileReadError: Error {
    case FileISNull
    case FileNotFound
}

// 用Result处理
func readFileContent(filePath: String) -> Result<String, FileReadError> {
    // 1.filePath为""
    if filePath == "" {
        
        return .failure(.FileISNull)
    }
    // 2.filepath有值，但是没有对应的文件
    if filePath != "/User/Desktop/123.plist" {
        
        return .failure(.FileNotFound)
        
    }
    // 3.取出其中的内容
    return .success("123")
}

//let result = readFileContent(filePath: "")  //文件为空

//let result = readFileContent(filePath: "11111")  //文件找不到

let result = readFileContent(filePath: "/User/Desktop/123.plist")  //123

// 处理Result
switch result {
    
case .failure(let error):
    
    switch error {
        
    case .FileISNull:
        print("文件为空")
        
    case .FileNotFound:
        print("文件找不到")
    }
    
case .success(let content):
    print(content)
    
}


错误处理:
有了Result，处理异常有了明显的变化，显得更简洁

// swift5 之前的 throw 的异常需要 do try catch 处理
do {
    handle(try String(contentsOfFile: myFile))
} catch {
    handleError(error)
}


// 有了Reuslt之后
let str = Result { try String(contentsOfFile: myFile) }
handle(str)



异步回调:
// 1.定义Error
enum NetworkError: Error {    
    case URLInvalid
}

// 定义一个函数，包含一个逃逸闭包进行异步回调
func getInfo(from urlString: String, completionHandler: @escaping (Result<String, NetworkError>) -> Void)  {
    
    if urlString.hasPrefix("https://") {        
        // 经过一系列网络处理以后得到一个服务器返回的数据
        let data = "response result"        
        // 获取数据
        completionHandler(.success(data))
    }
        
    else{        
        // URL有问题
        completionHandler(.failure(.URLInvalid))
    }
}

// 调用函数
getInfo(from: "https://www.baidu.com") { result in
    
    // 处理Result
    switch result {
        
    case .success(let content):        
        print(content)
        
    case .failure:
        // 如果参数不是https://开头 会打印
        print("url有问题")
    }
}



Result有个get()方法，要么返回成功值，要么抛出错误
fetchUnreadCount1(from: "https://www.hackingwithswift.com") { result in
    if let count = try? result.get() {
        print("\(count) unread messages.")
    }
}


Result可以接受一个闭包来初始化，如果闭包成功返回，就会把它放到success的一边，如果抛出错误，就放到failure的一边
let result = Result { try String(contentsOfFile: someFile) }


==================================================Raw string
使用#来包裹的Raw字符串，里面的字符不会做处理，特别是一些转义字符。
let answer = 42
let dontpanic = #"The answer to life, the universe, and everything is \#(answer)."#


这个对于正则的特别好用
let regex1 = "\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"
let regex2 = #"\\[A-Z]+[A-Za-z]+\.[a-z]+"#


==================================================自定义字符串插值
struct User {
    var name: String
    var age: Int
}

extension String.StringInterpolation {
    mutating func appendInterpolation(_ value: User) {
        appendInterpolation("My name is \(value.name) and I'm \(value.age)")
    }
}

let user = User(name: "Guybrush Threepwood", age: 33)
print("User details: \(user)")
// User details: My name is Guybrush Threepwood and I'm 33,


==================================================动态可调用类型
Apply this attribute to a class, structure, enumeration, or protocol to treat instances of the type as callable functions. 
The type must implement either a dynamicallyCall(withArguments:) method, a dynamicallyCall(withKeywordArguments:) method, or both.

You can call an instance of a dynamically callable type as if it’s a function that takes any number of arguments.
@dynamicCallable
struct TelephoneExchange {
    func dynamicallyCall(withArguments phoneNumber: [Int]) {
        if phoneNumber == [4, 1, 1] {
            print("Get Swift help on forums.swift.org")
        } else {
            print("Unrecognized number")
        }
    }
}


let dial = TelephoneExchange()


// Use a dynamic method call.
dial(4, 1, 1)
// Prints "Get Swift help on forums.swift.org"


dial(8, 6, 7, 5, 3, 0, 9)
// Prints "Unrecognized number"


// Call the underlying method directly.
dial.dynamicallyCall(withArguments: [4, 1, 1])



@dynamicCallable
struct Repeater {
    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {
        return pairs
            .map { label, count in
                repeatElement(label, count: count).joined(separator: " ")
            }
            .joined(separator: "\n")
    }
}


let repeatLabels = Repeater()
print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))
// a
// b b
// c c c
// b b
// a




@dynamicCallable属性，来支持方法的动态调用，类似@dynamicMemberLookup

@dynamicCallable
struct RandomNumberGenerator {
    func dynamicallyCall(withKeywordArguments args: KeyValuePairs<String, Int>) -> Double {
        let numberOfZeroes = Double(args.first?.value ?? 0)
        let maximum = pow(10, numberOfZeroes)
        return Double.random(in: 0...maximum)
    }
}

let random = RandomNumberGenerator()
let result = random(numberOfZeroes: 0)

无参数标签withArguments，你可以使用任何遵循ExpressibleByArrayLiteral的类型，例如 数组，数组切片，set等
有参数标签的withKeywordArguments，使用任何遵循ExpressibleByDictionaryLiteral的类型，例如，字典，和key value 对，更多KeyValuePairs

https://www.hackingwithswift.com/example-code/language/what-are-keyvaluepairs

你可以将其用在结构体，枚举，类和协议上
如果你使用withKeywordArguments而不是withArguments，你仍然按照无参数标签的方式使用，只是key是空字符串。
如果withKeywordArguments或者withArguments标记为抛出错误，调用类型也会抛出错误。
不能在扩展中使用@dynamicCallable
你仍然可以添加属性和方法。


==================================================处理未来的枚举值
有时候枚举的switch中使用default来防治出错，但不会真正的使用，但是如果未来加了新的case，那些处理地方就会遗漏。
###
现在可以添加@unknkow来出触发Xcode的提示
###

func showNew(error: PasswordError) {
    switch error {
    case .short:
        print("Your password was too short.")
    case .obvious:
        print("Your password was too obvious.")
    @unknown default:
        print("Your password wasn't suitable.")
    }
}

如果代码中，没有处理干净PasswordError (switch block is no longer exhaustive)，就会告警.