Implemented (Swift 6.1)


Proposed solution
We propose to allow keypath expressions to define a reference to static properties. The following usage, which currently generates a compiler error, will be allowed as valid Swift code.

struct Bee {
  static let name = "honeybee"
}

let kp = \Bee.Type.name


Keypath expressions where the first component refers to a static property will include .Type on their root types stated in the key path contextual type or in the key path literal. For example:
struct Bee {
  static let name = "honeybee"
}

let kpWithContextualType: KeyPath<Bee.Type, String> = \.name // key path contextual root type of Bee.Type
let kpWithLiteral = \Bee.Type.name // key path literal \Bee.Type

Attempting to write the above metatype keypath without including `.Type will trigger an error diagnostic:
let kpWithLiteral = \Bee.name // error: static member 'name' cannot be used on instance of type 'Bee'

Keypath expressions where the component referencing a static property is not the first component do not require .Type:
struct Species {
  static let isNative = true
}

struct Wasp {
  var species: Species.Type {Species.self}
}

let kpSecondComponentIsStatic = \Wasp.species.isNative