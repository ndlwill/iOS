并发编程:
nonisolated支持到了类型与扩展，这样其内的所有属性与方法不需要再单独添加nonisolated。

// 结构体
nonisolated struct Station {
}
class Train {
}
// 扩展
nonisolated extension Train {
}


==================================================尾随逗号:
元组、函数的参数、闭包捕获列表以及字符串插值等都可以像数组一样，在最后一个元素的后面添加,，以便轻松地追加、删除、重新排列或者注释最后一个元素。

// 元组
(404, "Not Found",)
// 函数的参数
func sum(num1: Int, num2: Int,) -> Int {
    num1 + num2
}
var vehicle = "Car"
// 闭包捕获列表
let closure = { [vehicle,] in
    print("Vehicle:", vehicle)
}
// 字符串插值
"This is a \(vehicle,)"

==================================================

增加新的关键字@implementation，配合@objc可以为 Objective-C 导入的.h声明提供实现。
实现方式：在 Swift 中扩展 Objective-C 类，然后通过@objc @implementation实现属性与方法以替换 Objective-C 的@implementation。
// .h文件
@interface Person: NSObject

@property(nonatomic, copy) NSString *name; 
-(void)eat;

@end


// .m文件
// @implementation Person
// @end


import UIKit

class ViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()

        // 调用
        let person = Person()
        person.name = "zhangsan"
        person.eat() // zhangsan吃饭了
    }
}

// MARK: - @objc @implementation extension Objective-C类
@objc @implementation extension Person {
    // 实现属性
    var name: String?

    // 实现方法
    func eat() {
        print("\(name ?? "")吃饭了")
    }
}

一旦在 Swift 进行了实现，Objective-C 中的@implementation不需要再实现，否则会报2 duplicate symbols的编译错误。