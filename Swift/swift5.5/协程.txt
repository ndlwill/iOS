协程是一种非抢占式或者说协作式的计算机程序并发调度的实现，程序可以主动挂起或者恢复执行。

说起任务调度，我们很自然地想到线程。从任务载体的角度来讲，协程和线程在应用场景上的确有很大的重叠之处，协程最初也确实是被应用于操作系统的任务调度的。
只不过后来抢占式的调度成为了操作系统的主流实现，因此以协程为执行任务单位的协作式的调度就很少出现在我们眼前了。
我们现在提到线程，基本上指的就是操作系统的内核线程；而提到协程，绝大多数都是编程语言层面实现的任务载体
我们看待一个线程，就好像一艘轮船一样，而协程似乎就是装在上面的一个集装箱。

从任务的承载上来讲，线程比协程更重；从调度执行的能力来讲，线程是由操作系统调度的，而协程则是由编程语言的运行时调度的。

对于 Swift 而言，主要应对的自然是简化复杂的异步逻辑。
而针对类似的场景，各家实际上已经给出了近乎一致的语法：async/await。
其中 async 用于修饰函数，将其声明为一个异步函数，await 则用于非阻塞地等待异步函数的结果 

使用 Alamofire 这个网络框架发起网络请求：
static func getImageData(url: String) async throws -> Data{
  try await AF.request(url).responseDataAsync() // 调用异步函数，挂起等待结果
}
使用 async 修饰的函数与普通的同步函数不同，它被称作异步函数。异步函数可以调用其他异步函数，而同步函数则不能调用异步函数。

###
通过 async 关键字将函数分为两类，过去的普通函数为同步函数，被修饰的函数则为异步函数。
调用异步函数的时候需要使用 await 关键字，使得这个异步调用拥有了挂起等待恢复的语义。
###

在 Swift 5.5 以前，getImageData 的实现通常依赖回调来实现结果的返回：
static func getImageData(url: String,
                    onSuccess: @escaping (Data) -> Void,
                    onError: @escaping (Error) -> Void) {
    AF.request(url).responseData { response in
        switch response.result {
        case .success(let data):
            onSuccess(data)
        case .failure(let error):
            onError(error)
        }
    }
}
我想要在回调当中再触发一些其他的异步操作
GitHubApi.getImageData(
        url: avatar_url,
        onSuccess: { data in
            ...
            cropImage(
                onSuccess: { croppedImage in
                    saveImage(
                        onSuccess: {
                            ...
                        },
                        onError: {
                            ...
                        })
                },
                onError: {
                    ...
                })
        },
        onError: { error in
            ...
        })

随着逻辑复杂度的增加，代码的缩进会越来越深，可维护性也越来越差
用 async/await 改造一下
do {
    let data = await GitHubApiAsync.getImageData(url: userItem.user.avatar_url)
    let croppedImage = await cropImage(data)
    await saveImage(croppedImage)
} catch {
    ...
}

对于有一个或两个分支的异步回调，我们都可以很轻松地将其转换为使用 async 修饰的异步函数，进而使用 await 来完成调用。