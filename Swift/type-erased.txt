A type-erased sequence.
An instance of `AnySequence` forwards its operations to an underlying base sequence having the same `Element` type, 
hiding the specifics of the underlying sequence.
@frozen public struct AnySequence<Element> {}


类型擦除是一种能够使我们可以忽略某个类型的具体实现的方式。这对于处理泛型代码和一些具有复杂类型需求的场景非常有用。
###
假设您有一个需要接收遵循某个协议的类型实例的函数，但你并不关心这个类型实例具体是什么类型，你只关心它遵循了这个协议。
在这种情况下，类型擦除就会变得非常有用，因为它允许你忽略这个类型的具体实现。
类型擦除通常是通过创建一个新的类型来实现的，这个新的类型会遵循相同的协议，并且内部持有一个具体的实例。
然后，所有协议方法的调用都会被转发到这个内部持有的实例上。
###

###
Type-erasure 是一种技术，通常用于将泛型类型转换为非泛型类型，从而隐藏其具体类型参数。
###
Swift 中常见的 type-erasure 用例包括 Any 类型、AnyObject，以及标准库中的 AnySequence、AnyIterator 等。


// 1. 定义一个协议
protocol Boxed {
    associatedtype ValueType
    var value: ValueType { get }
}

// 2. 实现具体类型的 Box
struct Box<T>: Boxed {
    let value: T
}

// 3. 实现 type-erased Box
struct AnyBox: Boxed {
    private let _getValue: () -> Any
    
    init<B: Boxed>(_ base: B) {
        _getValue = { base.value }
    }
    
    var value: Any {
        return _getValue()
    }
}

// 4. 使用 type-erased Box
let intBox = Box(value: 42)
let stringBox = Box(value: "Hello")

let anyIntBox = AnyBox(intBox)
let anyStringBox = AnyBox(stringBox)

print(anyIntBox.value)  // 输出：42
print(anyStringBox.value)  // 输出："Hello"

定义协议 Boxed:
Boxed 是一个协议，它有一个关联类型 ValueType 和一个属性 value。

具体类型的 Box:
Box 是一个泛型结构体，它实现了 Boxed 协议，用于存储任意类型的值。

实现 type-erased 的 Box:
AnyBox 是 type-erased 的 Box。它通过闭包 _getValue 来存储对具体 Box 类型的值的访问，并将其转换为 Any 类型，从而隐藏具体类型信息。

使用 AnyBox:
通过 AnyBox 我们可以将不同类型的 Box 包装成同一类型，从而在类型系统中隐藏具体的类型参数。


###
这种 type-erasure 技术在需要处理不同类型但又希望统一接口的场景中非常有用。
###



假设我们有一个可以处理任何序列的函数，但我们并不关心这个序列的具体类型。
我们可以使用类型擦除来实现这样的函数。Swift 提供了一个名为 AnySequence 的类型擦除，可以用于接收任何遵循 Sequence 协议的类型
func processSequence(_ sequence: AnySequence<Int>) {
    for element in sequence {
        print(element)
    }
}

let array = [1, 2, 3, 4, 5, 6]
processSequence(AnySequence(array))

let range = 1...6
processSequence(AnySequence(range))