detach()的作用是将子线程和主线程的关联分离，也就是说detach()后子线程在后台独立继续运行，主线程无法再取得子线程的控制权，即使主线程结束，子线程未执行也不会结束。当主线程结束时，由运行时库负责清理与子线程相关的资源。
实际应用如让一个文字处理应用同时编辑多个文档，让每个文档处理窗口拥有自己的线程，每个线程运行同样的代码，并隔离不同窗口处理的数据。

detach()同时也带来了一些问题，如子线程要访问主线中的对象，而主线中的对象又因为主线程结束而被销毁时，会导致程序崩溃。

void testDetachThread(const string &str,int num)
{
	for (int i=0;i<num;i++)
	{
		cout <<i<<" "<<"id:"<<this_thread::get_id()<<"  "<< str << endl;
	}
}

int main()
{
	string str = "shen";
	//const char* data = str.c_str();
	thread detach_thread(testDetachThread, str.c_str(), 5);
	detach_thread.detach();
}


这段代码很有可能出问题，在main函数执行完了，str被释放了才执行testDetachThread这个函数，那么就会访问非法指针。

构建临时对象：
主线程一定会先构建一个临时对象，传递给子线程。

thread detach_thread(testDetachThread, string(data), 5);
以上代码用join不会出现问题，因为主线程会等待子线程执行完再继续执行。