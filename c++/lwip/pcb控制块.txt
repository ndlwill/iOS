/* the TCP protocol control block */
struct tcp_pcb {
/** common PCB members */
  IP_PCB;//宏，在ip.h中定义，包含源目ip字段
/** protocol specific PCB members */
  TCP_PCB_COMMON(struct tcp_pcb);//宏，tcp_pcb和tcp_pcb_listen共有字段

  /* ports are in host byte order */
  u16_t remote_port;//远端port
  
  u8_t flags;//控制块状态、标志字段
#define TF_ACK_DELAY   ((u8_t)0x01U)   /* Delayed ACK. *///延迟发送ack(延迟确认)
#define TF_ACK_NOW     ((u8_t)0x02U)   /* Immediate ACK. *///立即发送ack
#define TF_INFR        ((u8_t)0x04U)   /* In fast recovery. *///连接处于快速重传状态
#define TF_TIMESTAMP   ((u8_t)0x08U)   /* Timestamp option enabled *///连接时间戳选项已使能
#define TF_RXCLOSED    ((u8_t)0x10U)   /* rx closed by tcp_shutdown *///
#define TF_FIN         ((u8_t)0x20U)   /* Connection was closed locally (FIN segment enqueued). *///连接已关闭
#define TF_NODELAY     ((u8_t)0x40U)   /* Disable Nagle algorithm *///禁止nagle算法
#define TF_NAGLEMEMERR ((u8_t)0x80U)   /* nagle enabled, memerr, try to output to prevent delayed ACK to happen *///本地缓冲区溢出

  /* the rest of the fields are in host byte order
     as we have to do some math with them */

  /* Timers *///
  u8_t polltmr, pollinterval;//这2个字段用于周期性调用一个函数,polltmr周期增加,当超过pollinterval，poll函数被调用
  u8_t last_timer;//控制块最近一次被定时器处理时间
  u32_t tmr;//系统时间

  /* receiver variables *///接收窗口相关字段
  u32_t rcv_nxt;   /* next seqno expected *///下一个期望接受的序列号
  u16_t rcv_wnd;   /* receiver window available *///当前接受窗口大小
  u16_t rcv_ann_wnd; /* receiver window to announce *///将向对方通告窗口大小
  u32_t rcv_ann_right_edge; /* announced right edge of window *///上次一通告时窗口右边界值

  /* Retransmission timer. */
  s16_t rtime;//重传定时器，随时间增加，当大于rto时重传报文

  u16_t mss;   /* maximum segment size *///对方可接收最大报文段

  /* RTT (round trip time) estimation variables *///RTT估算相关字段
  u32_t rttest; /* RTT estimate in 500ms ticks *///RTT估计时，已500ms为周期递增
  u32_t rtseq;  /* sequence number being timed *///用于测试RTT的报文序号
  s16_t sa, sv; /* @todo document this *///RTT估计的平均值和时间差

  s16_t rto;    /* retransmission time-out *///重发超时时间，由上面计算得到
  u8_t nrtx;    /* number of retransmissions *///重发次数，多次重发时，使用该字段设置rto

  /* fast retransmit/recovery *///快速重传快速恢复字段
  u8_t dupacks;//lastack重复收到次数
  u32_t lastack; /* Highest acknowledged seqno. *///接受到最大确认号

  /* congestion avoidance/control variables *///拥塞控制字段
  u16_t cwnd;//当前连接拥塞窗口大小
  u16_t ssthresh;//拥塞避免算法启动阈值

  /* sender variables *///发送窗口字段
  u32_t snd_nxt;   /* next new seqno to be sent *///下一个将要发生序列号
  u32_t snd_wl1, snd_wl2; /* Sequence and acknowledgement numbers of last
                             window update. *///上次窗口更新时收到数据序号和确认号
  u32_t snd_lbb;       /* Sequence number of next byte to be buffered. *///下一个被缓存的应用数据编号
  u16_t snd_wnd;   /* sender window *///发送窗口大小
  u16_t snd_wnd_max; /* the maximum sender window announced by the remote host *///对端通告的最大接收窗口

  u16_t acked;//上次成功发送的字节数

  u16_t snd_buf;   /* Available buffer space for sending (in bytes). *///可用发送缓冲区大小
#define TCP_SNDQUEUELEN_OVERFLOW (0xffffU-3)//次宏用于缓冲区溢出检查
  u16_t snd_queuelen; /* Available buffer space for sending (in tcp_segs). *///缓冲数据已占用pbuf个数

#if TCP_OVERSIZE
  /* Extra bytes available at the end of the last pbuf in unsent. */
  u16_t unsent_oversize;
#endif /* TCP_OVERSIZE */ 

  /* These are ordered by sequence number: */
  struct tcp_seg *unsent;   /* Unsent (queued) segments. *///未发生报文段队列
  struct tcp_seg *unacked;  /* Sent but unacknowledged segments. *///发送了但未收到确认报文段队列
#if TCP_QUEUE_OOSEQ  
  struct tcp_seg *ooseq;    /* Received out of sequence segments. *///收到的无序报文段队列
#endif /* TCP_QUEUE_OOSEQ */
                             //上一次成功接收但未被应用层取用的数据pbuf
  struct pbuf *refused_data; /* Data previously received but not yet taken by upper layer */

#if LWIP_CALLBACK_API
  /* Function to be called when more send buffer space is available. */
  tcp_sent_fn sent;//当数据被成功发送后调用
  /* Function to be called when (in-sequence) data has arrived. */
  tcp_recv_fn recv;//接收到数据后调用
  /* Function to be called when a connection has been set up. */
  tcp_connected_fn connected;//建立连接后调用
  /* Function which is called periodically. */
  tcp_poll_fn poll;//该函数被内核周期性调用
  /* Function to be called whenever a fatal error occurs. */
  tcp_err_fn errf;//连接发生错误时调用
#endif /* LWIP_CALLBACK_API */

#if LWIP_TCP_TIMESTAMPS
  u32_t ts_lastacksent;
  u32_t ts_recent;
#endif /* LWIP_TCP_TIMESTAMPS */

  /* idle time before KEEPALIVE is sent */
  u32_t keep_idle;//保活计时器上限值
#if LWIP_TCP_KEEPALIVE
  u32_t keep_intvl;
  u32_t keep_cnt;
#endif /* LWIP_TCP_KEEPALIVE */
  
  /* Persist timer counter */
  u8_t persist_cnt;//坚持定时器计数值
  /* Persist timer back-off */
  u8_t persist_backoff;//坚持定时器探测报文发送数目

  /* KEEPALIVE counter */
  u8_t keep_cnt_sent;//保活报文发送次数
}
