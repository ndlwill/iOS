https://blog.csdn.net/weixin_44821644/category_10657640.html

==================================================tcp_write
应用层的数据发送需要通告tcp传递，在已经建立tcp连接中，通过tcp_write()函数向对方发送数据。
tcp_write()通过已建立连接的tcp控制块给对方发送数据。
代码的实现逻辑是将数据复制到控制块的unsent队列，代码中为节省内存，分多种情况将发送数据连接到unsent。

发送数据插入unsent队列时，需要考虑三种情况：
1. 写入最后一个pbuf
由于tcp是面向字节流的传输协议，所以unsent队列中最后一个pbuf如果有剩余的内存可以使用，则将数据填充进去。

u16_t space;  //报文可用的内存空间，是一个抽象的数值
u16_t unsent_optlen;  //选项长度

//找到unsent队列最后一个成员
for (last_unsent = pcb->unsent; last_unsent->next != NULL;
        last_unsent = last_unsent->next);

unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);  //最后一个报文的选项长度
LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
//last_unsent的报文剩余内存 = 本地最大报文长度-（last_unsent里tcp数据长度+选项长度）
space = mss_local - (last_unsent->len + unsent_optlen); 


    //将数据复制到最后一个pbuf的剩余内存中，这里并不直接复制，而是记录复制所需的参数（oversize_used）
oversize = pcb->unsent_oversize;  //最后一个pbuf剩下的空间，是一个真实的内存
//如果最后的pbuf中还有剩余内存
if (oversize > 0) {
    LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
    seg = last_unsent;
    //理解space，oversize大小可能不同，取其中的最小值，len一般都比较大
    oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
    pos += oversize_used; //pos记录数据移动字节
    oversize -= oversize_used;  //更新oversize
    space -= oversize_used;
}

需要区别好space,oversize两个变量。一个报文有大小限制，其下可以挂有多个pbuf，space表示该报文还剩下多少的空间；
oversize表示一个pbuf中，剩余内存的大小。

2. 新建pbuf
经过1之后，若仍有剩余数据未加入unsent，且最后一个报文段还能继续添加pbuf，则在新建pbuf。
这里还有一个特殊情况，就是发送的数据在内存上正好与最后的pbuf连续，这种特殊情况下，不需要内存复制，只需要将pbuf的大小修改。

/*
     * 将一个新的pbuf连接到pcb->unsent尾部
     * 这里分复制内存和引用内存两种情况：
     * 复制内存即：复制数据到新的内存空间
     * 引用即：申请新的内存空间，并把指针指向数据的内存地址
     */
    //最后一个pbuf已经满了且剩余有数据未复制，并且当前的报文还能再放pbuf的话，就在当前报文再添加一个pbuf
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = LWIP_MIN(space, len - pos);  //计算新的pbuf大小，要么是当前报文剩余的大小，要么是剩下数据的大小
      seg = last_unsent;

      //使用内存复制
      if (apiflags & TCP_WRITE_FLAG_COPY) {
        /* Data is copied */
        //申请内存大小为seglen的pbuf
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
        //复制数据到新pbuf
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);

        queuelen += pbuf_clen(concat_p);  //计算concat_p中pbuf的长度并添加到报文
      } else {	
		//使用地址引用的方式
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next); //找到last_unsent的最后一个pbuf
        //!如果该pbuf是PBUF_ROM类型且内存与数据的内存是连续的，则直接扩展该pbuf的长度，不用新建
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
          extendlen = seglen; //记下扩展长度
        } else {  //其他类型的pbuf
        	//申请一块PBUF_ROM类型的pbuf，不给payload分配内存
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
   
          //将新的pbuf的payload指向数据地址，省去了复制的步骤
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
          queuelen += pbuf_clen(concat_p);  //计算concat_p中pbuf的长度并添加到报文
        }
      }

      pos += seglen;  //更新pos
    }
  } else {  //最后的pbuf足够放下数据
  }

3. 新建报文
若经过1，2步骤后仍有数据未被放入unsent，则在循环中新建报文存放数据，并将该报文段插入unsent队尾。
（这一步并无真正入队，只是创建了一个本地的队列）
  //循环创建报文，将剩余数据放入报文，报文入队
  //pos已入队的数据，len数据总长度
  while (pos < len) {	
    struct pbuf *p;
    u16_t left = len - pos; //剩余数据长度
    u16_t max_len = mss_local - optlen; //一个报文的最大长度
    u16_t seglen = LWIP_MIN(left, max_len); //当前报文的大小，要么是最大的报文长度，要么是数据剩余长度

    //使用内存复制
    if (apiflags & TCP_WRITE_FLAG_COPY) {

      //新建一个pbuf，大小是报文大小加上tcp首部
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      //复制数据到新pbuf
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
    } else {
      
      //使用引用：p2，p分别是tcp内容和tcp首部的pbuf，p2的payload指向数据地址
      struct pbuf *p2;
      //分配p2，PBUF_ROM类型不会给payload分配空间
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
      }

      //p2的payload指向数据区
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;

      //给报文头部分配p，如果分配失败，先释放p2
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
        pbuf_free(p2);
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }

      //将首部和报文内容通过链表连接
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p); //更新报文队列长度

    //如果发送队列或者缓存超出限制，则释放内存
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }
    //给新的pbuf创建一个tcp_seg报文
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
    }

    //如果是队列第一个报文段，直接引用
    if (queue == NULL) {
      queue = seg;
    } else {

      //将新报文连接到链尾
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
    }
    prev_seg = seg; //更新最后一个报文

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;	//移动pos
  }

4. 将数据入队
之前的代码都没有真正把数据添加到unsent队列，在1中我们记录的oversize_used用来表示最后一个pbuf填入的数据长度，在2中，我们创建了一个新的pbuf，在3中，我们创建了一个报文队列。
接下来的代码，则是将以上三种情况的数据一一入unsent队
填充第一阶段的pbuf数据:

//如果last_unsent的最后一个pbuf有数据需要填入
if (oversize_used > 0) {
struct pbuf *p;

//找到unsent最后一个pbuf
for (p = last_unsent->p; p; p = p->next) {
    p->tot_len += oversize_used;  //所有pbuf的tot_len（理解）都要加上oversize_used
    if (p->next == NULL) {
    //在最后一个pbuf复制oversize_used大小的数据
    TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
    p->len += oversize_used;
    }
}
last_unsent->len += oversize_used;  //报文长度也增加
}
pcb->unsent_oversize = oversize;  //更新报文oversize

将第二阶段的pbuf连接到报文上:
//把新增了concat_p连接到该报文的pbuf链表
if (concat_p != NULL) {
LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
    (last_unsent != NULL));
pbuf_cat(last_unsent->p, concat_p);
last_unsent->len += concat_p->tot_len;  //更新链接后的报文长度
} else if (extendlen > 0) { //内存扩展的情况： 内存连接在一起，直接把这个pbuf扩展了
struct pbuf *p;
LWIP_ASSERT("tcp_write: extension of reference requires reference",
    last_unsent != NULL && last_unsent->p != NULL);
//所有pbuf的totlen都增加
for (p = last_unsent->p; p->next != NULL; p = p->next) {
    p->tot_len += extendlen;
}
//由于数据地址与pbuf内存是连续的，所以不需要复制内存
p->tot_len += extendlen;
p->len += extendlen;
last_unsent->len += extendlen;  //报文长度增加
}

将本地的报文队列插到unsent，最后更新tcp的发送窗口
if (last_unsent == NULL) {
pcb->unsent = queue;
} else {
last_unsent->next = queue;
}
pcb->snd_lbb += len;  
pcb->snd_buf -= len;	//发送buffer减少
pcb->snd_queuelen = queuelen;	//更新发送队列长度


#####
总结:
tcp_write()函数只将数据插入unsent队列，并未真正将数据发送出去，而真正将数据发送出去的函数是tcp_output();
#####


==================================================tcp_output
tcp_write()函数的作用是将数据插入unsent队列，其并无真正的把数据交给ip层发送。

tcp_output()的功能就是将unsent队列中的tcp报文交给ip层发送。

一般情况下，tcp_output()函数会在500ms定时任务中被循环调用。所以当用户使用tcp_write()将数据写入unsent队列后，会在定时任务中将数据传递给ip层发送。

源码分析:
首先需要先判断能不能发送unsent队列，若当前的PCB正在接收数据或者当前发送窗口小于要发送的报文长度，都不能发送数据

//发送控制块中的所有unsents报文段
err_t
tcp_output(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg, *useg;//seg：要发送的报文段，useg：未确认的报文段
  u32_t wnd, snd_nxt; //wnd：真实发送窗口，snd_nxt:下一个发送的序号
  err_t err;
  struct netif *netif;  //发送的网络接口

  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
    pcb->state != LISTEN);

  //如果该tcp正在接收数据，则不发送
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }
  //真实发送窗口是发送窗口和拥塞窗口的最小
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);

  //取第一个报文段
  seg = pcb->unsent;

  //如果tcp使用TF_ACK_NOW标志，或者本地不能发送数据（unsent为null或者当前窗口无法发送seg），则发送一个不带任何数据的ack
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  //将useg指向unacked队尾
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  }
  //找到最佳的网络接口
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    return ERR_RTE;
  }

  //检查本地ip地址
  if (ip_addr_isany(&pcb->local_ip)) {
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  }
   //发送窗口太小而不能发送当前报文，等待对方接收窗口变大，所以启动零窗口探测，坚持定时器开启
  if (seg != NULL &&
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
    /* Start the persist timer */
    //启动坚持定时器
    if (pcb->persist_backoff == 0) {
      pcb->persist_cnt = 0;
      pcb->persist_backoff = 1;
    }
    //由于发送窗口太小，函数实际上无输出
    goto output_done;
  }

接下来就是遍历unsent队列，将tcp报文发送，直到发送窗口不满足发送调节
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
                (TCPH_FLAGS(seg->tcphdr) & TCP_RST) == 0);

    //如果nagle算法有效或者缓存有错误（这是由write导致的内存错误），停止发送
    if ((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
      break;
    }

    //!SYN_SENT状态下发送的报文的ack位无效
    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    }

    //发送一个tcp报文
    err = tcp_output_segment(seg, pcb, netif);
    if (err != ERR_OK) {
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
      return err;
    }
    pcb->unsent = seg->next;  //队列头部已经发送，更新
    //!SYN_SENT状态下发送的报文的ack位无效
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW); //清除应答标志位
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg); //计算下一个要发送的序号

    //如果pcb->snd_nxt比snd_nxt小，则更新下一个要发送的序号
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
    }

    //将已发送报文插入unacked队列
    if (TCP_TCPLEN(seg) > 0) {
      seg->next = NULL;

      //unacked为空，seg则放入队首
      if (pcb->unacked == NULL) {
        pcb->unacked = seg;
        useg = seg;
      } else {
        //unacked队列的排队是小号在前，大号在后的模式
        //若seg<useg则在循环中中找到合适的位置
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {

          //如果当前报文序号比较低，则查找适合的位置插入，序号越大越靠后
          struct tcp_seg **cur_seg = &(pcb->unacked); 
          //找到cur_seg>seg的的报文,并在该报文前插入seg
          while (*cur_seg &&
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
          (*cur_seg) = seg;
        } else {  //
          
          //seg>useg，seg插入unacked队尾
          useg->next = seg;
          useg = useg->next;  //更新unacked
        }
      }

    } else {
      //对于空的报文段直接删除不需要插入unacked
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;  //发送下一个报文
  }


tcp_output_segment()是真正将报文传递给ip层的函数，该函数主要做的是，填充即将发送的tcp报文首部的通告窗口，确认序号，mss以及校验和。
同时开启PCB的超时重传和rtt估算，最后移动payload指针到首部，并将报文的pbuf传递给ip层。

//通过调用ip层发送tcp报文
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  err_t err;
  u16_t len;
  u32_t *opts;

  //TODO ref为1才能发送
  if (seg->p->ref != 1) {
    return ERR_OK;
  }

  //填充tcp首部确认号字段
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);

  //填充tcp首部通告窗口
  seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  
  //pcb通告接收窗口右边界=下一个接收序号+通告接收窗口长度
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  
  opts = (u32_t *)(void *)(seg->tcphdr + 1);  //选项字段

  //填充mss选项
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip); //针对ip路径计算mss大小
    mss = TCP_MSS;
    *opts = TCP_BUILD_MSS_OPTION(mss);  //构建适用于tcp首部的mss
    opts += 1;  //opts移动
  }

  //如果超时重传定时器没开就给老资开
  if (pcb->rtime < 0) {
    pcb->rtime = 0;
  }
  //如果该tcp的rtt计时器关闭了则开启rtt估测
  if (pcb->rttest == 0) {
    pcb->rttest = tcp_ticks;  //记录当前时间
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);  //被估算的报文段的编号

    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload); //计算首部占用的字节空间

  //如果首部为0那肯定有问题
  if (len == 0) {
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  //pbuf的len指的是tcp数据的长度
  seg->p->len -= len;
  seg->p->tot_len -= len;

  //移动payload到tcp首部，因为需要传递给ip层
  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;

   //计算tcp校验和
  seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  
  TCP_STATS_INC(tcp.xmit);
  
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));

  //调用ip层发送该报文的pbuf
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}

ip_output_if()函数就是将tcp报文传递给ip层，tcp报文传递给ip层时数据变化如下，tcp_hdr中被填入相应的参数，payload移动到tcp_hdr

总结:
tcp_output();将unsent队列的报文填充完整，然后交给ip层，实现数据的发送