struct tcp_pcb {
  IP_PCB; //ip层的成员（ip地址等）

  TCP_PCB_COMMON(struct tcp_pcb);

  u16_t remote_port;  //tcp层的远端端口

  tcpflags_t flags;   //tcp传输中的标志，如下：

#define TF_ACK_DELAY   0x01U   /* 延迟回答 ack会在fastmr定时器中被发送 Delayed ACK.*/
#define TF_ACK_NOW     0x02U   /* 立即回答 Immediate ACK. */
#define TF_INFR        0x04U   /* 快速重连状态 In fast recovery. */
#define TF_CLOSEPEND   0x08U   /* fin报文fastmr定时器中被发送*/
#define TF_RXCLOSED    0x10U   /* 关闭接收 rx closed by tcp_shutdown */
#define TF_FIN         0x20U   /* 本地主动请求关闭Connection was closed locally (FIN segment enqueued). */
#define TF_NODELAY     0x40U   /* Disable Nagle algorithm 禁止Nagle算法*/
#define TF_NAGLEMEMERR 0x80U   /* nagle enabled, memerr, try to output to prevent delayed ACK to happen */

  u8_t polltmr, pollinterval; //polltmr>pollinterval时，回调 tcp_poll_fn
  u8_t last_timer;  //上次进入定时任务的时刻
  u32_t tmr;  //保活定时器有关，当接收到对方的数据时会更新


  u32_t rcv_nxt;   //接收窗口期待的下一个序号
  tcpwnd_size_t rcv_wnd;   //接收窗口长度
  tcpwnd_size_t rcv_ann_wnd; //通告窗口（通知对方本地的接收窗口大小）
  u32_t rcv_ann_right_edge; //通告窗口的右边界 rcv_nxt+rcv_ann_wnd 

  s16_t rtime;  //重传定时器

  u16_t mss;   //最大报文长度

  u32_t rttest; //RTT估测  rttest=tcpticks开启rtt，rttest=0关闭 
  u32_t rtseq;  // rtt测试的报文序号 
  s16_t sa, sv; /* @todo document this */

  s16_t rto;    //重发超时时间 rtime>rto时触发超时重传 rto是动态计算的
  u8_t nrtx;    //重传次数<7 

  u8_t dupacks; //快速重连，回答重复次数
  u32_t lastack; //最高的应答序号 Highest acknowledged seqno. */

  tcpwnd_size_t cwnd; //拥塞窗口
  tcpwnd_size_t ssthresh; //拥塞算法启动条件

  u32_t snd_nxt;   //下一个将被发送的序号
  u32_t snd_wl1, snd_wl2; //上次收到报文的序号和确认序号
                          //snd_wl1 = last seqno
                          //snd_wl2 = last ackno 
  u32_t snd_lbb;       //下一个要被送入buffer的序号（发送窗口最右）
  tcpwnd_size_t snd_wnd;   //发送窗口大小（由接收方大小决定）
  tcpwnd_size_t snd_wnd_max; //远程端口声明的最大发送窗口 

  tcpwnd_size_t snd_buf;   //当前可用的发送缓存大小 
  u16_t snd_queuelen; //unsent队列中的pbuf数量

  u16_t unsent_oversize;  //unsent队列最后一个pbuf的剩余字节
 
  struct tcp_seg *unsent;   //未发送的报文链表
  struct tcp_seg *unacked;  //发送未确认的报文链表 

  struct tcp_seg *ooseq;    //接收到的无序报文链表（序号小的在前）

  struct pbuf *refused_data; //已接收但未送到上层应用
  struct tcp_pcb_listen* listener;  //监听控制块

  tcp_sent_fn sent;	//回调函数：当报文被对方确认时执行，用于释放资源

  tcp_recv_fn recv;	//回调函数：当接收到数据时执行
  
  tcp_connected_fn connected;	//回调函数：当tcp连接建立时执行
  
  tcp_poll_fn poll;	//周期回调函数：用于处理一些超时等

  tcp_err_fn errf;	//回调函数：当接收到RST报文或其他异常断开时执行

#if LWIP_TCP_TIMESTAMPS //使用tcp时间戳
  u32_t ts_lastacksent;
  u32_t ts_recent;
#endif
  u32_t keep_idle;  //保活机制，超过此值，发送探查检查连接
  u8_t persist_cnt; //坚持定时器，当计数值超过某个值时，则发出零窗口探查数据包
  u8_t persist_backoff; //发出探查包的次数以及是否开启坚持
  u8_t keep_cnt_sent; //发送保活探查报文的数量
};


接口函数:
struct tcp_pcb * tcp_new     (void);  //新建一个默认pcb

//注册各个回调函数及参数
void             tcp_recv    (struct tcp_pcb *pcb, tcp_recv_fn recv); //接收回调
void             tcp_sent    (struct tcp_pcb *pcb, tcp_sent_fn sent);	//发送回调
void             tcp_err     (struct tcp_pcb *pcb, tcp_err_fn err);	//错误回调
void             tcp_accept  (struct tcp_pcb *pcb, tcp_accept_fn accept);	//连接回调

void             tcp_poll    (struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval);	//周期回调


void             tcp_recved  (struct tcp_pcb *pcb, u16_t len);  //应用处理完数据后，必须调用此函数来更新通告窗口；len：被应用程序读取的数据长度
err_t            tcp_bind    (struct tcp_pcb *pcb, const ip_addr_t *ipaddr, //将pcb绑定到本地某端口
                              u16_t port);
err_t            tcp_connect (struct tcp_pcb *pcb, const ip_addr_t *ipaddr, //将pcb连接到远程端口，connected为连接成功回调函数
                              u16_t port, tcp_connected_fn connected);
                              
//pcb开始监听绑定的端口
#define          tcp_listen(pcb) tcp_listen_with_backlog(pcb, TCP_DEFAULT_LISTEN_BACKLOG)

void             tcp_abort (struct tcp_pcb *pcb); //暴力删除pcb并给对方发送rst

err_t            tcp_close   (struct tcp_pcb *pcb); //按步骤断开双方连接
err_t            tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx); //关闭连接（可选择是否发送rst使对方也关闭）

err_t            tcp_write   (struct tcp_pcb *pcb, const void *dataptr, u16_t len,  //将数据写入发送buffer
                              u8_t apiflags);

void             tcp_setprio (struct tcp_pcb *pcb, u8_t prio);  //设置pcb优先级

err_t            tcp_output  (struct tcp_pcb *pcb); //输出tcp报文

