将运行链路层协议的任何设备均称为结点（node）。结点包括主机、路由器、交换机和WiFi 接入点。
我们也把沿着通信路径连接相邻结点的通信信道称为链路（link）。
为了将一个数据报从源主机传输到目标主机，数据报必须通过端到端路径上的各段链路才能到达目标主机。
在通过特定的链路时，传输结点将数据报封装在链路层帧中，并将该帧传送到链路中 。

链路层的主体部分是网卡中实现的，在发送的数据帧的时候，协议栈取得由高层传递过的数据报（注意，数据帧与数据报不是一个东西，数据帧一般形容链路层的数据，是一帧一帧的，也是链路层的服务——数据成帧），
在链路层中封装该数据报，也就是填写数据帧的各个字段，然后遵循链路接入协议将该帧数据进行传输；在接收端，控制器接收了整个数据帧，抽取出网络层的数据报，往上层传递。

不同主机的信息都是必须通过链路层才能传递数据，所有链路层的完整与稳定是传递信息的必要条件。

MAC地址:
MAC地址（Media Access Control Address），亦称为EHA（Ethernet HardwareAddress）、硬件地址、物理地（Physical Address）。
MAC 地址就是在媒体接入层上使用的地址，也叫物理地址、硬件地址或链路地址，其被固化在网卡的ROM中。可见MAC地址实际上就是网卡地址或网卡标识符。
MAC 地址长度为6 字节（48 比特），其前3 个字节表示组织唯一标志符（Organizationally Unique Identifier，即OUI），由IEEE 的注册管理机构给不同厂家分配的代码，以区分不同的厂家，后3 个字节由厂家自行分配，称为扩展标识符。同一个厂家生产的网卡中MAC 地址后24 位是不同的。

ARP:
地址解析协议（Address Resolution Protocol，ARP）是通过解析IP 地址得到数据链路层地址的，是一个在网络协议包中极其重要的网络传输协议，它与网卡有着极其密切的关系
在TCP/IP 分层结构中，把ARP 划分为网络层，为什么呢，因为在网络层看来，源主机与目标主机是通过IP 地址进行识别的，而所有的数据传输又依赖网卡底层硬件，即链路层，
那么就需要将这些IP 地址转换为链路层可以识别的东西，在所有的链路中都有着自己的一套寻址机制，如在以太网中使用MAC 地址进行寻址，标识不同的主机，
那么就需要有一个协议将IP 地址转换为MAC 地址，由此就出现了ARP 协议，ARP 协议在网络层被应用，它是网络层与链路层连接的重要枢纽.

在局域网中，网络中实际传输的是“帧”，帧里面是有目标主机的MAC 地址的。
在以太网中，一个主机要和另一个主机进行直接通信，必须要知道目标主机的MAC 地址,那就需要ARP 进行地址解析，所谓“地址解析”就是主机在发送帧前将目标IP 地址转换成目标MAC 地址的过程。
ARP 协议的基本功能就是通过目标设备的IP 地址，查询目标设备的MAC 地址，以保证通信的顺利进行。

以太网帧结构:
每个网卡都有唯一一个物理地址，在硬件中进行数据帧传输的时候就必须有正确的目的物理地址，例如以太网的48位MAC 地址就是存储在网卡内部存储器中。
以太网帧以一个7 字节的前同步码（Preamble）字段开始。该前同步码的值都是10101010（0x55，大端模式）；而后紧接着一个字节的帧开始符，其值是10101011（0xD5，大端模式）。前同步码字段的作用是实现物理层帧输入输出的同步，而帧开始符表示着以太网帧的开始，剩下的5 个字段才是真正的以太网数据帧结构。

目标MAC 地址（6 字节）：这个字段包含目标网卡的MAC 地址，当一个网卡收到一个以太网数据帧，如果该数据帧的目标地址是网卡自身的MAC 地址或者是MAC 广播地址，它都将该帧的数据字段的内容传递给网络层；如果它收到了具有任何其他MAC 地址的帧，则将该数据帧丢弃。
源MAC 地址（6 字节）：这个字段包含了传输该帧到局域网上的适配器的MAC 地址。
类型字段（2 字节）：类型字段允许以太网复用多种网络层协议。为了理解这点，我们需要记住主机能够使用除了IP 以外的其他网络层协议。事实上，一台给定的主机可以支持多种网络层协议，以对不同的应用采用不同的协议。因此，当以太网帧到达网卡中，网卡需要知道它应该将数据字段的内容传递给哪个网络层协议。如IP 协议、ARP 协议等。
以太网数据帧的长度在64-1518字节之间
数据字段（46~1500 字节）：这个字段承载了IP 数据报。以太网的最大传输单元（MTU）是1500 字节。
这意味着如果IP 数据报超过了1500 字节，则主机必须将该数据报分片。数据字段的最小长度是46 字节，这意味着如果IP 数据报小于46 字节，数据报必须被填充到46 字节。
当采用填充时，传递到网络层的数据包括IP 数据报和填充部分，网络层使用IP 数据报首部中的长度字段来去除填充部分。
CRC（4 字节）：CRC 字段包含了以太网的差错校验信息

在以太网帧中，目标MAC 地址可以分成三类，单播地址、多播地址和广播地址。
单播地址通常是与某个网卡的MAC 地址对应，它要求以太网第一个字节的bit0（最先发出去的位）必须是0；
而多播地址则要求第一个字节的bit0 为1，这样子多播地址就不会与任何网卡的MAC 地址相同，可以被多个网卡同时接收；
广播地址的48 位MAC 地址全为1，也就是FF-FF-FF-FF-FF-FF， 同一局域网内的所有网卡都会收到广播的数据包。

所有的以太网计算都向网络层提供不可靠的无连接服务，也就是说在网卡发送数据的时候，不会向目标网卡进行事先的通知（握手），
网卡只在以太网帧中封装好来自上层的数据报，然后把数据报发送到局域网上。
同样的当一个网卡接收一个以太网数据帧的时候，它也不会进行回复确认，如果当网卡执行CRC 校验不通过的时候，它也不会发送否定确认，
这样子当一些以太网帧不通过CRC 校验时，网卡只是将其丢弃，而发送的一方就不会知道它传输的数据是否达到并且通过校验。

IP 地址映射为物理地址:
TCP/IP 协议有自己的IP 地址，IP 地址（IPv4）是一个32 位的IP 地址，网络层发送数据包只需要知道目标主机IP 地址即可，而以太网发送数据则必须知道对方的硬件MAC 地址，同时IP 地址的分配与硬件MAC 地址是没有关系的，为了让网络层只需要知道IP 地址就可以完成通信工作，那就需要有一个协议将IP 地址映射成为对应的MAC 地址
此外还需要考虑IP 地址可能是动态的，非常灵活，使用静态的映射方法是行不通的，所以ARP协议就提供优质的地址动态解析的机制，让32 位的IP 地址能映射成为48 位的MAC 地址，让上层应用于底层完全分离开，这样子在上层应用就能灵活使用IP 地址作为标识，进行通信。

ARP 缓存表:
为了实现IP 地址与网卡MAC 地址的查询与转换，ARP 协议引入了ARP 缓存表的概念，每台主机或路由器在其内存中具有一个ARP 缓存表（ARP table）
这张表包含IP 地址到MAC 地址的映射关系，表中记录了<IP 地址，MAC 地址>对，它们是主机最近运行时获得关于其他主机的IP 地址到物理地址的映射
当需要发送IP 数据的时候，主机就会根据目标IP 地址到ARP 缓存表中进行查找对应的MAC 地址，然后通过网卡将数据发送出去。
ARP 表也包含一个寿命（TTL）值，它指示了从表中删除每个映射的时间。从一个表项放置到某ARP 表中开始，一个表项通常的过期时间是10 分钟。

ARP 协议的核心就是对缓存表的操作，发送数据包的时候，查找ARP 缓存表以得到对应的MAC 地址，必要时进行ARP 缓存表的更新，此外ARP 还需要不断处理其他主机的ARP 请求，在ARP 缓存表中的TTL 即将过期的时候更新缓存表以保证缓存表中的表项有效。

其运作过程大致可以理解为:
1. 如果主机A 想发送数据给主机B，主机A 首先会检查自己的ARP 缓存表，查看是否有主机B 的IP 地址和MAC 地址的对应关系，如果有，则会将主机B 的MAC 地址作为源MAC 地址封装到数据帧中。如果本地ARP 缓存中没有对应关系，主机A 就会向局域网中广播ARP 请求（包括发送方的IP 地址、MAC 地址、接收方的IP 地址），每台主机接收到ARP 请求后都检查自己的IP 地址是否与ARP 请求中的接收方IP 地址相同，若不相同则丢弃ARP 请求包。
2. 当交换机接受到此数据帧之后，发现此数据帧是广播帧，因此，会将此数据帧从非接收的所有接口发送出去。
3. 当主机B 接受到此数据帧后，会校对IP 地址是否是自己的，并将主机A 的IP 地址和MAC 地址的对应关系记录到自己的ARP 缓存表中，同时会发送一个ARP 响应，其中包括自己的MAC 地址。
4. 主机A 在收到这个回应的数据帧之后，在自己的ARP 缓存表中记录主机B 的IP地址和MAC 地址的对应关系。而此时交换机已经学习到了主机A 和主机B 的MAC 地址了。

ARP 协议的核心是ARP 缓存表，ARP 的实质就是对缓存表的建立、更新、查询等操作，ARP 缓存表的核心是表项（entry）。LwIP 使用一个arp_table 数组描述ARP 缓存表，数组的内容是表项的内容.
static struct etharp_entry arp_table[ARP_TABLE_SIZE];
每个表项都必须记录一对IP 地址与MAC 地址的映射关系，此外还有一些基本的信息，如表项的状态、生命周期（生存时间）以及对应网卡的基本信息，LwIP 使用一个etharp_entry 结构体对表项进行描述.
编译器预先定义了缓存表的大小，ARP_TABLE_SIZE 默认为10，也就是最大能存放10 个表项，由于这个表很小，LwIP 对表的操作直接采用遍历方式，遍历每个表项并且更改其中的内容。
struct etharp_entry {
#if ARP_QUEUEING
  /** Pointer to queue of pending outgoing packets on this ARP entry. */
  struct etharp_q_entry *q;
#else /* ARP_QUEUEING */
  /** Pointer to a single pending outgoing packet on this ARP entry. */
  struct pbuf *q;
#endif /* ARP_QUEUEING */
  ip4_addr_t ipaddr;            // 记录目标IP 地址
  struct netif *netif;          // 对应网卡信息
  struct eth_addr ethaddr;      // 记录与目标IP 地址对应的MAC 地址
  u16_t ctime;                  // 生存时间
  u8_t state;                   // 表项的状态，LwIP 中用枚举类型定义了不同的状态
};
 
struct etharp_q_entry {
  struct etharp_q_entry *next;
  struct pbuf *p;
};

/** ARP states */
enum etharp_state {
  ETHARP_STATE_EMPTY = 0,
  ETHARP_STATE_PENDING,
  ETHARP_STATE_STABLE,
  ETHARP_STATE_STABLE_REREQUESTING_1,
  ETHARP_STATE_STABLE_REREQUESTING_2
#if ETHARP_SUPPORT_STATIC_ENTRIES
  , ETHARP_STATE_STATIC
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
};

ARP 缓存表在初始化的时候，所有的表项都会被初始化为ETHARP_STATE_EMPTY，也就是空状态，表示这些表项能被使用，在需要添加表项的时候，LwIP 内核就会遍历ARP 缓存表，找到合适的表项，进行添加。
如果ARP 表项处于ETHARP_STATE_PENDING 状态，表示ARP 已经发出了一个ARP 请求包，但是还未收到目标IP 地址主机的应答，处于这个状态的缓存表项是有等待时间的，它通过宏定义ARP_MAXPENDING 指定，默认为5 秒钟，如果从发出ARP 请求包后的5 秒内还没收到应答，那么该表项又会被删除；而如果收到应答后，ARP 就会更新缓存表的信息，记录目标IP 地址与目标MAC 地址的映射关系并且开始记录表项的生存时间，同时该表项的状态会变成ETHARP_STATE_STABLE 状态。
当要发送数据包的时候，而此时表项为ETHARP_STATE_PENDING 状态，那么这些数据包就会暂时被挂载到表项的数据包缓冲队列上，直到表项的状态为ETHARP_STATE_STABLE，才进行发送数据包。
状态ETHARP_STATE_STABLE 的表项，这些表项代表着ARP 记录了IP 地址与MAC 地址的映射关系，能随意通过IP 地址进行数据的发送，但是这些表项是具有生存时间的，通过宏定义ARP_MAXAGE 指定，默认为5 分钟，在这些时间，LwIP 会不断维护这些缓存表以保持缓存表的有效。
当表项是ETHARP_STATE_STABLE 的时候又发送一个ARP 请求包，那么表项状态会暂时被设置为ETHARP_STATE_STABLE_REREQUESTING_1，然后被设置为ETHARP_STATE_STABLE_REREQUESTING_2 状态，这些是一个过渡状态，当收到ARP 应答后，表项又会被设置为ETHARP_STATE_STABLE，这样子能保持表项的有效。
所以ARP 缓存表是一个动态更新的过程，为什么要动态更新呢？因为以太网的物理性质并不能保证数据传输的是可靠的。以太网发送数据并不会知道对方是否已经接收成功，而两台主机的物理线路不可能一直保持有效畅通，那么如果不是动态更新的话，主机就不会知道另一台主机是否在工作中，这样子发出去的数据是没有意义的。
比如两台主机A 和B，一开始两台主机都是处于连接状态，能正常进行通信，但是某个时刻主机B 断开了，但是主机A 不会知道主机B 是否正常运行，因为以太网不会提示主机B 已经断开，那么主机A 会一直按照MAC 地址发送数据，而此时在物理链路层就已经是不通的，那么这些数据是没有意义的，而如果ARP 动态更新的话，主机A 就会发出ARP 请求包，如果得不到主机B 的回应，则说明无法与主机B 进行通信，那么就会删除ARP 表项，就无法进行通信。


ARP 缓存表的超时处理:
ARP 表项的生存时间是5分钟，而ARP 请求的等待时间是5 秒钟，当这些时间到达后，就会更新ARP 表项，如果在物理链路层无法连通则会删除表项。
ARP 层有一个超时处理函数对ARP 进行管理，这些操作都是根据ARP 表项的ctime 字段进行的，它记录着对应表项的生存时间，而超时处理函数是etharp_tmr()，它是一个周期性的超时处理函数，每隔1 秒就调用一次，当ctime 的值大于指定的时间，就会删除对应的表项。
void
etharp_tmr(void)
{
  int i;
 
  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* /* 遍历ARP 表，从ARP 表中删除过期的表项 */*/
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    if (state != ETHARP_STATE_EMPTY
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;                        // 时间累积
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* 等待表项稳定或者表项已经过期 */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* 清除释放表项 */
        etharp_free_entry(i);
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
        /* Don't send more than one request every 2 seconds.  */
        /* 过渡 */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        /* 进入ETHARP_STATE_STABLE 状态 */
        arp_table[i].state = ETHARP_STATE_STABLE;
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
        /* still pending, resend an ARP query */
        /*仍然挂起，重新发送ARP 请求 */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
      }
    }
  }
}

ARP 报文:
ARP 的请求与应答都是依赖ARP 报文结构进行的，ARP 报文是放在以太网数据帧中进行发送的

在ARP 表建立前，主机并不知道目标MAC 地址，所以在一开始的时候只能通过广播的方式将ARP 请求包发送出去，处于同一局域网的主机都能接收到广播的数据包。
所以一开始目标MAC 地址是FF-FF-FF-FF-FF-FF，而以太网首部的帧类型是有多种，对于ARP数据包来说，其值为0x0806，对于IP 数据报来说，其值为0x0800 。

ARP 报文部分，ARP 也是一种协议，也有ARP 首部，在ARP 首部一开始的2 个字节存储的是硬件类型，表示要知道目标网卡的硬件类型，其中，值为1 表示以太网地址，其他还可能表示令牌环地址；
接下来还有2 字节的协议类型，表示硬件地址要映射的协议地址类型，其中，0x0800 表示IP 地址，其他还可能是ICMP/IGMP 等；
接下来有1 个字节表示硬件地址长度，指出该报文中硬件地址的长度，对于以太网，它的值为6；
还有1 字节的协议地址长度，对于ARP 请求或应答来说，该值为4；
ARP 首部最后的op 字段用于记录ARP 操作的类型，分别是：
【ARP 请求，其值为1】 【ARP 应答，其值为2】 【RARP 请求，其值为3】 【RARP 应答，其值为4】
ARP 首部后面的四个字段分别是源MAC 地址、源IP 地址、目标MAC 地址、目标IP 地址。
在ARP 请求包中，除了目标MAC 地址是未知以外，其他地址3 个字段都应该填写正确，然后通过广播的形式将该ARP 请求包发送出去，目标主机接收到该请求包后判断目标IP 地址与自身IP 地址是否一致，如果一致则返回ARP 应答；
对应ARP 应答包，只需要把自己的MAC 地址填充进去，并且请求包的源主机信息与目标主机信息进行交换位置，然后把op 字段设置为2，就返回ARP 应答包即可。
注：在发送ARP 请求包的时候，以太网首部的目标MAC 地址是FF-FF-FF-FF-FFFF，而ARP 首部目标MAC 地址  00-00-00-00-00-00，这里千万不要混淆。


发送ARP 请求包:
实际执行的函数 etharp_raw()

static err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;
 
  LWIP_ASSERT("netif != NULL", netif != NULL);
 
  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));
 
  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));
 
  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 
  /* send ARP query */
#if LWIP_AUTOIP
  /* If we are using Link-Local, all ARP packets that contain a Link-Local
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  }
 
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  p = NULL;
  /* could not allocate pbuf for ARP request */
 
  return result;
}

数据包接收流程:
(1)以太网之数据包接收
以太网是有自己独立的寻址方式（MAC 地址），而对于TCP/IP 的上层协议（如TCP协议、IP 协议），它们是以IP 地址作为网络的标识，如果没有IP 地址则无法进行收发数据。
当数据通过网卡中接收回来的时候，LwIP 内核就需要将数据进行分解，如果是IP 数据报则递交给IP 协议去处理，如果是ARP 数据包则交由ARP 协议去处理。
LwIP 中数据包从网卡接收的函数是ethernetif_input()。真正让LwIP 内核去处理接收到的数据包是ethernet_input()函数。

err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */
 
  LWIP_ASSERT_CORE_LOCKED();
 
  // 长度有效性检查
  if (p->len <= SIZEOF_ETH_HDR) {
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }
 
  if (p->if_idx == NETIF_NO_INDEX) {
    p->if_idx = netif_get_index(netif);
  }
 
  /* points to packet payload, which starts with an Ethernet header */
  /* ethhdr 指针指向以太网帧头部，并且强制转换成eth_hdr 结构 */
  ethhdr = (struct eth_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_input: dest:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", src:%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F":%"X8_F", type:%"X16_F"\n",
               (unsigned char)ethhdr->dest.addr[0], (unsigned char)ethhdr->dest.addr[1], (unsigned char)ethhdr->dest.addr[2],
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));
 
  type = ethhdr->type;
#if ETHARP_SUPPORT_VLAN
  if (type == PP_HTONS(ETHTYPE_VLAN)) {
    struct eth_vlan_hdr *vlan = (struct eth_vlan_hdr *)(((char *)ethhdr) + SIZEOF_ETH_HDR);
    next_hdr_offset = SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR;
    if (p->len <= SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR) {
      /* a packet with only an ethernet/vlan header (or less) is not valid for us */
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinerrors);
      goto free_and_return;
    }
#if defined(LWIP_HOOK_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK_FN) /* if not, allow all VLANs */
#ifdef LWIP_HOOK_VLAN_CHECK
    if (!LWIP_HOOK_VLAN_CHECK(netif, ethhdr, vlan)) {
#elif defined(ETHARP_VLAN_CHECK_FN)
    if (!ETHARP_VLAN_CHECK_FN(ethhdr, vlan)) {
#elif defined(ETHARP_VLAN_CHECK)
    if (VLAN_ID(vlan) != ETHARP_VLAN_CHECK) {
#endif
      /* silently ignore this packet: not for our VLAN */
      pbuf_free(p);
      return ERR_OK;
    }
#endif /* defined(LWIP_HOOK_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK) || defined(ETHARP_VLAN_CHECK_FN) */
    type = vlan->tpid;
  }
#endif /* ETHARP_SUPPORT_VLAN */
 
#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/
 
  if (ethhdr->dest.addr[0] & 1) {
    /* 可能是多播或广播数据包 */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* /* 将pbuf 标记为链路层多播 */ */
        p->flags |= PBUF_FLAG_LLMCAST;
      }
#endif /* LWIP_IPV4 */
    }
#if LWIP_IPV6
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* 将pbuf 标记为链路层广播 */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
    }
  }
 
  switch (type) {
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* 跳过以太网首部 (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* 传递到IP 协议去处理 */
        ip4_input(p, netif);
      }
      break;
 
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
        ETHARP_STATS_INC(etharp.drop);
        goto free_and_return;
      } else {
        /* 传递到ARP 协议处理 */
        etharp_input(p, netif);
      }
      break;
#endif /* LWIP_IPV4 && LWIP_ARP */
#if PPPOE_SUPPORT
    case PP_HTONS(ETHTYPE_PPPOEDISC): /* PPP Over Ethernet Discovery Stage */
      pppoe_disc_input(netif, p);
      break;
 
    case PP_HTONS(ETHTYPE_PPPOE): /* PPP Over Ethernet Session Stage */
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */
 
#if LWIP_IPV6
    case PP_HTONS(ETHTYPE_IPV6): /* IPv6 */
      /* skip Ethernet header */
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: IPv6 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        goto free_and_return;
      } else {
        /* pass to IPv6 layer */
        ip6_input(p, netif);
      }
      break;
#endif /* LWIP_IPV6 */
 
    default:
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
  }
 
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 
free_and_return:
  pbuf_free(p);
  return ERR_OK;
}

(2)ARP数据包处理
ARP 数据包的处理函数为etharp _input()，在这里它完成两个任务：
1. 如果收到的是ARP 应答包，说明本机之前发出的ARP 请求包有了回应，就根据应答包更新自身的ARP 缓存表；
2. 如果收到的是ARP 请求包，如果包中的目标IP 地址与主机IP 地址匹配，除了记录原主机的IP 与MAC 地址，更新自身的ARP 表外，还要向源主机发送一个ARP 应答包。但是如果包中目标IP 地址与主机IP 地址不匹配，则尽可能记录源主机的IP 与MAC 地址，更新自身的ARP 表，并丢弃该请求包，为什么说是尽可能呢，因为主机的ARP 缓存表是有限的，不可能记录太多的ARP 表项，所以在有空闲的表项时才记录，如果没有空闲的表项，ARP 觉得它自己已经尽力了，也记不住那么多表项。
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;
 
  LWIP_ASSERT_CORE_LOCKED();
 
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 
  hdr = (struct etharp_hdr *)p->payload;
 
  /* RFC 826 "Packet Reception": ARP包合法性检查 */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETH_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip4_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
    return;
  }
  ETHARP_STATS_INC(etharp.recv);
 
#if LWIP_AUTOIP
  /* We have to check if a host already has configured our random
   * created link local address and continuously check if there is
   * a host with this IP-address so we can detect collisions */
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */
 
  /* 拷贝源IP 地址与目标IP 地址 */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 
  /* 看看主机网卡是否配置了IP 地址 */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
    for_us = 0;
  } else {
    /* 判断目标IP 地址与主机IP 地址是否一样 */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  }
 
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  /* 更新ARP 缓存表 */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
 
  /* now act on the message itself */
  switch (hdr->opcode) {
    /* ARP request? */
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */
      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
        /* send ARP response 做出回应*/
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
                   &hdr->shwaddr, &sipaddr,
                   ARP_REPLY);
        /* we are not configured? */
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
        /* { for_us == 0 and netif->ip_addr.addr == 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
    case PP_HTONS(ARP_REPLY):
      /* 对于ARP 应答包. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
  }
  /* free ARP packet */
  pbuf_free(p);
}

(3)更新ARP 缓存表
etharp_update_arp_entry()函数是用于更新ARP 缓存表的，它会在收到一个ARP 数据包的时候被调用，它会先查找一个ARP 表项，如果没有找到这个ARP 表项的记录，就会去新建一个ARP 表项，然后重置ARP 表项的参数（状态、网卡。IP 地址与对应的MAC 地址以及生存时间等），然后检测ARP 表项中是否挂载数据包，如果有就将这些数据包发送出去.
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
      ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* 查找或者创建ARP 表项，并且返回索引值 */
  i = etharp_find_entry(ipaddr, flags, netif);
  /* 如果索引值不合法，更新ARP 表项失败 */
  if (i < 0) {
    return (err_t)i;
  }
 
#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* 设置表项状态为ETHARP_STATE_STABLE */
    arp_table[i].state = ETHARP_STATE_STABLE;
  }
 
  /* record network interface */
  arp_table[i].netif = netif;
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);
 
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
  /* 重置生存时间 */
  arp_table[i].ctime = 0;
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
    /* pop first item off the queue */
    arp_table[i].q = q->next;
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
    /* free the queued IP packet */
    pbuf_free(p);
  }
  return ERR_OK;
}


数据包发送流程:
上层协议想要发送数据，也肯定需要经过ARP 协议将IP 地址映射为MAC 地址才能完成发送操作
IP 数据报通过ip4_output()函数将上层数据包传递到ARP 协议处理，
那么ARP 通过etharp_output()函数接收到IP 数据报后，就会进行发送，ARP 会先从数据包中进行分析，
看看这个IP 数据报是单播数据包还是多播或者是广播数据包，然后进行不同的处理:
- 对于多播或者是广播数据包，直接将数据包丢给网卡就行（调用ethernet_output()函数 )
- 对于单播包的处理稍微麻烦一点，ARP 协议需要根据IP 地址找到对应的MAC 地址，然后才能正确发送，如果找不到MAC 地址的话，还要延迟发送数据包，ARP 协议首先会创建一个ARP 表项，然后将数据包挂到ARP 表项对应的缓存队列上，与此同时会发出一个ARP 请求包，等待目标主机的回应后再发送IP 数据报。

注意: 对于PBUFF_ERF、PBUF_POOL、PBUF_RAM类型的数据包是不允许直接挂到ARP 表项对应的缓存队列上的，因为此时内核需要等待目标主机的ARP应答，而这段时间里，这些数据有可能会被上层改动，这是不允许的，所以LwIP 需要将这些pbuf 数据包拷贝到新的空间，等待发送。
(1)etharp_output()函数
etharp_output()函数被IP 层的ip4_output()函数调用，IP 层传递一个数据包到ARP 中，etharp_output()会根据数据包的目标IP 地址选择不同的处理.
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 
  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */
 
  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
        !ip4_addr_islinklocal(ipaddr)) {
#if LWIP_AUTOIP
      struct ip_hdr *iphdr = LWIP_ALIGNMENT_CAST(struct ip_hdr *, q->payload);
      /* According to RFC 3297, chapter 2.6.2 (Forwarding Rules), a packet with
         a link-local source address must always be "directly to its destination
         on the same physical link. The host MUST NOT send the packet to any
         router for forwarding". */
      if (!ip4_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
#ifdef LWIP_HOOK_ETHARP_GET_GW
        /* For advanced routing, a single default gateway might not be enough, so get
           the IP address of the gateway to handle the current destination address. */
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
          }
        }
      }
    }
#if LWIP_NETIF_HWADDRHINT
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
        }
#if LWIP_NETIF_HWADDRHINT
      }
    }
#endif /* LWIP_NETIF_HWADDRHINT */
 
    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  }
 
  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
}

(2)etharp_output_to_arp_index()函数
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }
 
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
}

(3)etharp_query()函数
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s16_t i_err;
  netif_addr_idx_t i;
 
  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr) ||
      ip4_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
 
  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 
  /* could not find or create entry? */
  if (i_err < 0) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 
  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    is_new_entry = 1;
    arp_table[i].state = ETHARP_STATE_PENDING;
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  }
 
  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));
 
  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
    if (result != ERR_OK) {
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
      return result;
    }
  }
 
  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
    while (p) {
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (PBUF_NEEDS_COPY(p)) {
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if (copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
    }
    /* packet could be taken over? */
    if (p != NULL) {
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
      if (new_entry != NULL) {
        unsigned int qlen = 0;
        new_entry->next = 0;
        new_entry->p = p;
        if (arp_table[i].q != NULL) {
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
          qlen++;
          while (r->next != NULL) {
            r = r->next;
            qlen++;
          }
          r->next = new_entry;
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
          struct etharp_q_entry *old;
          old = arp_table[i].q;
          arp_table[i].q = arp_table[i].q->next;
          pbuf_free(old->p);
          memp_free(MEMP_ARP_QUEUE, old);
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
      }
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
