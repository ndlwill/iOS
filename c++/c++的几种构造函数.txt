1.默认构造函数
默认构造函数是没有参数的构造函数，用于在创建对象时初始化对象的成员变量。
如果没有为类定义构造函数，编译器会自动生成默认构造函数。如果类中定义了一个或多个构造函数，则编译器不会生成默认构造函数。

对于类中数据成员有自己构造函数的，默认构造函数是要依次调用这些成员的构造函数的。
未提供显式初始值时，用来创建对象的构造函数。
Student();//没有参数
Student(int num = 0; int age = 0);//所有参数均有默认值

2.普通构造函数
Student(int num，int age）;//有参数

3.拷贝构造函数
拷贝构造函数用于通过已有对象创建新对象，并将原对象的值复制到新对象中。拷贝构造函数的形参为同类型的引用，通常为 const 类型，表示禁止在构造函数内修改原对象。

拷贝构造函数调用的时机:
(1)当用一个对象去初始化同类的另一个对象时，会引发复制构造函数被调用。例如，下面的两条语句都会引发复制构造函数的调用，用以初始化 c2
Complex c2(c1);
Complex c2 = c1;
这两条语句是等价的。

第二条语句是初始化语句，不是赋值语句。赋值语句的等号左边是一个早已有定义的变量，赋值语句不会引发复制构造函数的调用。例如:
Complex c1, c2;
c1=c2;
这条语句不会引发复制构造函数的调用，因为 c1 早已生成，已经初始化过了。

(2)
如果函数 F 的参数是类 A 的对象，那么当 F 被调用时，类 A 的复制构造函数将被调用。
作为形参的类A的对象，是用复制构造函数初始化的，而且调用复制构造函数时的参数，就是调用函数时所给的实参。
#include<iostream>
using namespace std;
class A{
public:
    A(){};
    A(A & a){
        cout<<"Copy constructor called"<<endl;
    }
};
void Func(A a){ }
int main(){
    A a;
    Func(a);
    return 0;
}
这是因为 Func 函数的形参 a 在初始化时调用了复制构造函数。
函数的形参的值等于函数调用时对应的实参，现在可以知道这不一定是正确的。如果形参是一个对象，那么形参的值是否等于实参，取决于该对象所属的类的复制构造函数是如何实现的。

以对象作为函数的形参，在函数被调用时，生成的形参要用复制构造函数初始化，这会带来时间上的开销。如果用对象的引用而不是对象作为形参，就没有这个问题了。
但是以引用作为形参有一定的风险，因为这种情况下如果形参的值发生改变，实参的值也会跟着改变。

如果要确保实参的值不会改变，又希望避免复制构造函数带来的开销，解决办法就是将形参声明为对象的 const 引用。
void Function(const Complex & c)
{
    ...
}

(3)如果函数的返冋值是类 A 的对象，则函数返冋时，类 A 的复制构造函数被调用。换言之，作为函数返回值的对象是用复制构造函数初始化 的，而调用复制构造函数时的实参，就是 return 语句所返回的对象。
#include<iostream>
using namespace std;
class A {
public:
    int v;
    A(int n) { v = n; };
    A(const A & a) {
        v = a.v;
        cout << "Copy constructor called" << endl;
    }
};
A Func() {
    A a(4);
    return a;
}
int main() {
    cout << Func().v << endl;
    return 0;
}

4.移动构造函数
移动构造函数是 C++11 引入的新特性，用于将一个临时对象的资源所有权转移给新对象，从而避免拷贝大型对象的开销。
移动构造函数的形参为同类型的右值引用，通常为非 const 类型。

所谓移动语义，指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。
移动语义指的就是将其他对象（通常是临时对象）拥有的内存资源“移为已用”。

事实上，对于程序执行过程中产生的临时对象，往往只用于传递数据（没有其它的用处），并且会很快会被销毁。
因此在使用临时对象初始化新对象时，我们可以将其包含的指针成员指向的内存资源直接移给新对象所有，无需再新拷贝一份，这大大提高了初始化的执行效率。

class Str{
    public:
        char *str;
        Str(Str &&s)//移动构造函数
        {
        }
        ~Str()
        {
        }
};

5.继承构造函数，即使用 using Base::Base; 语句直接继承基类构造函数
struct Base 
{
	int x;
	int y;
	
	Base(int x, int y) : x(x), y(y)
	{
	}
};

struct Derived: Base
{
	using Base::Base;
};

int main()
{
	Derived d(3, 4);
}

在 C++11 以前，你就必须在 Derived 里再写一份同参数列表的构造函数，将参数转发给基类。struct Base 
{
	int x;
	int y;
	
	Base(int x, int y) : x(x), y(y)
	{
	}
};

struct Derived: Base
{
	Derived(int x, int y) : Base(x, y)
	{
	}
};

int main()
{
	Derived d(3, 4);
}
如果基类有很多重载的构造函数的话，每个重载版本都要在子类重写一下，这是违反代码复用原则的

struct Base 
{
	int x;
	int y;
	
	Base(int x, double y) : x(x), y(y) // 基类 api 改了
	{
	}
};

struct Derived: Base
{
	Derived(int x, int y) : Base(x, y) // 子类这里忘改了
	{
	}
};

int main()
{
	Derived d(3, 4.5); // bug
}
using Base::基类方法名的这个语法是 C++98 就有的，不是 C++11 里才加的全新玩意。

#include <iostream>

class Base
{
	protected:
		void print() const
		{
			std::cout << 2333 << std::endl;
		}
};

class Derived: public Base
{
	public:
		using Base::print;
		// 如果不加这句声明，
		// 则 print 方法在 Derived 类中就仍是 protected 的
		// main 中无法调用
};

int main()
{
	Derived d;
	d.print();
}
这种语法可以改变方法的访问控制域，比如将基类的保护方法公开出来，当然也可以将基类的公开方法在子类中变更为私有。
这个是 C++98 中就有的语法。只不过 98 里不能 using 父类::构造函数（构造函数在某种意义上也是类的方法对吧，所以 11 补上了）

6.委托构造函数
C++11 的委托构造函数
class Base
{
	public:
		int x;
		int y;

		Base(int x, int y) : x(x), y(y)
		{
		}

		Base() : Base(0, 0)
		{
		}
};