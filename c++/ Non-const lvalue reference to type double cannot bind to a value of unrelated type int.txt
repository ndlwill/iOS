int val1 = 10;
const double &val2 = val1;
可以正常编译

但
int val1 = 10;
double &val2 = val1;
会报错Non-const lvalue reference to type 'double' cannot bind to a value of unrelated type 'int'

因为C++中引用类型必须与被引用的变量类型兼容
在第一个示例中，const double &val2 = val1; 是一个常量引用，它可以绑定到一个不同类型的常量值，因为这是允许的，尽管类型不同，但是引用是常量，无法修改值。

在第二个示例中，double &val2 = val1; 是一个非常量引用，它试图将一个 int 类型的变量 val1 绑定到一个 double 类型的引用上。
在C++中，非常量引用必须与被引用的变量类型完全匹配，否则会导致类型不兼容的错误。
因为 int 和 double 是不同的数据类型，它们之间没有隐式的类型转换，所以编译器会报错。


如果你想使第二个示例能够编译，你可以使用类型转换来将 int 转换为 double
int val1 = 10;
double val2 = static_cast<double>(val1); // 进行类型转换

子类对象转换为父类对象:
class Parent {
    // 父类的定义
};

class Child : public Parent {
    // 子类的定义
};

Child childObject;
Parent parentObject = childObject; // 子类对象转换为父类对象

父类对象不能隐式转换为子类对象: 因为父类对象可能不包含子类特有的成员或属性。
如果你需要将父类对象转换为子类对象，通常需要使用显式类型转换，例如 dynamic_cast，来确保安全的类型转换。
这通常用于在运行时检查对象的实际类型并进行类型转换。
Parent parentObject;
Child *childPtr = dynamic_cast<Child*>(&parentObject); // 显式类型转换
if (childPtr) {
    // 转换成功，可以使用子类对象
} else {
    // 转换失败，父类对象不是子类对象
}