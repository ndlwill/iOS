堆是一种类似于完全二叉树的结构

完全二叉树:
一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，
如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树

一棵深度为k且有2^k - 1 个结点的二叉树称为满二叉树
满二叉树每一层的结点个数都达到了最大值
即满二叉树的第i层上有2^(i-1) 个结点 (i≥1) 

满二叉树是完全二叉树的特殊形态, 即如果一棵二叉树是满二叉树, 则它必定是完全二叉树

堆排序:
排序的方法主要分为两种：大顶堆排序和小顶堆排序，其中大顶堆用于排升序，小顶堆用于排降序

大顶堆的性质是：每一个子堆中（包含一个结点及其左右子结点（若有）），结点值是最大值；
小顶堆的性质是：每一个子堆中（包含一个结点及其左右子结点（若有）），结点值是最小值；

不管是大顶堆还是小顶堆，都不用明确左右子结点间的大小关系
假设结点索引为i(i=0,1,2...)，那么其左右结点索引分别为2*i+1和2*i+2
对于大顶堆a[i]≥a[2*i+1]&&a[i]≥a[2*i+2]；对于小顶堆有a[i]≥a[2*i+1]&&a[i]≤a[2*i+2]

堆排序并非是真正的在树中进行排序，它只是利用了树的性质，将数组中的各元素看做是按序分布在树上的结点，实际上还是在数组内部进行排序的。

        4
    6       8
5       9
以升序为例，堆排序的步骤分为以下几步:
①构造初始堆，将无序数组构造成大顶堆形式
需要注意的是，叶子结点是没有子结点的，不用对其进行调整，因此就从最后一个非叶子结点开始从下往上调整。
那么最后一个非叶子结点怎么找呢？很简单，知道了数组的长度为len，那么最后一个非叶子结点的索引必定就是[len/2]-1（其中[len/2]表示对[len/2]向下取整）
结点6（索引为1,索引从0开始）开始，此时发现结点6比其右子结点9小，因此就将结点6与结点9交换
        4
    9       8
5       6

然后就继续遍历从下往上，从右往左遍历下一个结点4，发现此时结点4比其左子结点9小，那么就需要对其进行调整
这个时候堆顶元素所在堆没有问题了，说明堆顶元素已经是最大了
        9
    4       8
5       6

但是这并没有结束，因为此时交换后的结点4比其左右子结点都小，不符合大顶堆性质，因此还需要再调整结点4
而对于结点4，其左右子结点均比它大，因此将其与二者之间较大值进行交换
        9
    6       8
5       4
此时就满足了大顶堆的性质，构造初始堆也就完成了，接下来进行排序

②排序，将堆顶结点与末尾结点交换，并将其抛出
        4
    6       8
5       9(抛出)
交换后的堆中，堆顶不满足最大堆，因此对其进行调整，调整可能会影响到其他子堆，那么就依次进行调整直到最终满足大顶堆性质。此时堆顶结点又是堆中最大值，继续执行②
        8
    6       4
5       9(抛出)
调整后的堆满足最大堆的性质，因此将堆顶结点8与末尾结点5进行交换
        5
    6       4
8(抛出) 9(抛出)

然后重复上述操作，直到堆中的元素只剩一个

整个堆排序的过程主要由构建初始大顶堆+堆顶元素“沉底”后堆调整两部分组成，而这两部分中都会包含多个结点的调整
在每次调整结点后，对于被交换的子结点也应当进行调整，才能确保最终满足大顶堆要求
如果不对子结点进行调整，那么虽然能够找到最大值，但是此时其他子堆是不满足大顶堆的，这样在堆顶与末尾元素交换后，就还需要对去掉最大元素后的数组进行重新建堆，效率低下。

总结可得算法步骤如下:
①初始化建堆。建堆过程中需进行结点调整，从最后一个非叶子结点开始（len/2-1），且每次调整需要对调整后的结点再调整；
②将堆顶元素与末尾元素交换，堆大小减一，再调整堆顶。


#include <iostream>
#include <vector>
 
using namespace std;
 
void adjustHeap(vector<int>& nums,int root,int len)
{
    int lch=2*root+1;  //左子结点
    int rch=lch+1;   //右子结点
    int index=root;  //较大结点
 
    if(rch<len&&nums[rch]>nums[index])index=rch;  //index保存根结点与右子结点中的较大结点的索引
 
    if(lch<len&&nums[lch]>nums[index])index=lch;  //将根节点与右子结点中较大结点再与左子结点做比较，最终的index就是三个结点中最大值的索引
 
    if(index!=root) //当前结点非最大结点
    {
        swap(nums[index],nums[root]);  //将最大节点与根结点交换
        adjustHeap(nums,index,len);  //继续调整交换后的结点
    }
    return;
}
void heapSort(vector<int>& nums,int len)
{
    if(!len)return;
    for(int i=len/2-1;i>=0;i--)  //初始化堆，从最后一个非叶子结点开始调整
    {
        adjustHeap(nums,i,len);
    }
//初始化堆后堆顶肯定是整个数组中的最大值，就将堆顶与数组最后一个元素交换，
//然后不考虑交换后的最后一个元素，调整堆，调整后堆顶肯定就是数组中第二大的数，
//就放到倒数第二个位置...一直到整个数组每个元素都与堆顶交换过了，就得到了升序数组
    for(int i=len-1;i>0;i--)  //堆排序
    {
        swap(nums[i],nums[0]);
        adjustHeap(nums,0,i);   //交换后调整堆顶
    }
 
    return;
 
}
 
int main()
{
    cin.clear();
    vector<int>nums;
 
    int num;
    while(cin>>num)nums.push_back(num);
 
    int left=0;
    int len=nums.size();
 
    heapSort(nums,len);
 
    for(int i=0;i<len;i++)cout<<nums[i]<<" ";
 
    return 0;
}