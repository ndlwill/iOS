数据缓冲区buffer是libevent中网络IO操作中最先接触数据的容器。

1. 缓冲区evbuffer结构
struct evbuffer {
    //存放数据起始位置
    u_char *buffer;

    //buffer起始地址
    u_char *orig_buffer;

    //buffer起始地址与数据存放地址的偏移
    size_t misalign;

    //总共buffer的长度
    size_t totallen;

    //缓冲区数据长度
    size_t off;

    //回调函数
    void (*cb)(struct evbuffer *, size_t, size_t, void *);

    //回调需要的参数
    void *cbarg;
};

重要的几个函数注释:
1.evbuffer_add
//从data地址开始datlen个字节数据到evbuffer中
int
evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)
{
    //                           整个buffer
    //|                           totallen                            |
    //|--------------|-----------|---------------------------|--------|
    //|misalign(偏移) |off(数据区) |datlen(需要加入的数据长度)    |剩余空间  |
    //
    size_t need = buf->misalign + buf->off + datlen;
    size_t oldoff = buf->off;

    //如果need大于了总长度，需要调整扩大
    if (buf->totallen < need) {
        //evbuffer调整扩大
        if (evbuffer_expand(buf, datlen) == -1)
            return (-1);
    }
    //将datlen长度的data数据复制到buffer中。
    memcpy(buf->buffer + buf->off, data, datlen);
    //复制成功，数据长度增加
    buf->off += datlen;
    //datlen不为0且buf有回调函数，调用回调函数，告知缓存变化
    if (datlen && buf->cb != NULL)
        (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

    return (0);
}

2.evbuffer_drain
//drain：使流出;排掉水
//从缓冲区中读出len长度数据。
void
evbuffer_drain(struct evbuffer *buf, size_t len)
{
    //记录当前缓冲区中的数据长度
    size_t oldoff = buf->off;

    //如果要读出的长度大于数据长度，就读出全部数据
    if (len >= buf->off) {

        //                           整个buffer
        //|                           totallen                            |
        //|||-------------------------------------------------------------|
        //|||剩余空间                                                       |
        //

        //元素个数清零
        buf->off = 0;
        //数据缓冲地址前移到最前面的buf起始位置
        buf->buffer = buf->orig_buffer;
        //数据偏移置0
        buf->misalign = 0;
        goto done;
    }
    //如果读出数据不是全部数据

    //                           整个buffer
    //|                           totallen                            |
    //|--------------|-----------|------------------------------------|
    //|  misalign    |off(数据区) |         剩余空间                     |
    //                          | |
    //                          \ /

    //                           整个buffer
    //|                           totallen                            |
    //|-----------------|--------|------------------------------------|
    //|  misalign       |off     |         剩余空间                     |
    //

    //buffer地址前移len
    buf->buffer += len;
    //misalign偏移加len
    buf->misalign += len;
    //由于读出数据，off减少len个数据
    buf->off -= len;

done:
    //缓冲区数据长度改变，调用回调函数
    /* Tell someone about changes in this buffer */
    if (buf->off != oldoff && buf->cb != NULL)
        (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

}

3.evbuffer_align
//buf进行重新排列
static void
evbuffer_align(struct evbuffer *buf)
{
    //                           整个buffer
    //|                           totallen                                   |
    //|--------------|-----------|-------------------------------------------|
    //|misalign(偏移)|off(数据区)|datlen(需要加入的数据长度)，大于totallen         |
    //                          | |
    //                          \ /
    //                           整个buffer
    //|                           totallen                                  |
    //|-----------|---------------------------------------------------------|
    //|off(数据区) |datlen(需要加入的数据长度)，大于totallen                      |


    //缓冲区数据前移
    //从buf->buffer拷贝off个字节到buf的orig_buffer
    memmove(buf->orig_buffer, buf->buffer, buf->off);

    //缓冲区数据起始位置变为buf起始位置
    buf->buffer = buf->orig_buffer;

    //偏移置为0
    buf->misalign = 0;
}

4.evbuffer_expand
/* Expands the available space in the event buffer to at least datlen */
//内存扩展
int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
    //                           整个buffer
    //|                           totallen                                   |
    //|--------------|-----------|-------------------------------------------|
    //|misalign(偏移) |off(数据区) |datlen(需要加入的数据长度)，大于totallen       |
    //

    //首先判断是否需要扩展
    size_t need = buf->misalign + buf->off + datlen;

    //如果need小于totallen，无需扩展
    /* If we can fit all the data, then we don't have to do anything */
    if (buf->totallen >= need)
        return (0);

    /*
     * If the misalignment fulfills our data needs, we just force an
     * alignment to happen.  Afterwards, we have enough space.
     */
    //如果偏移大于datlen，
    if (buf->misalign >= datlen) {
        //buf进行重新排列
        evbuffer_align(buf);
    } else {
        //偏移小于datlen，数据元素大于totallen，需要重新分配内存
        void *newbuf;
        size_t length = buf->totallen;

        //如果length小于256，length设置256
        if (length < 256)
            length = 256;
        //如果length还是小于need，length扩大2倍直到不小于need
        while (length < need)
            length <<= 1;

        //如果有偏移，先重新排列
        if (buf->orig_buffer != buf->buffer)
            evbuffer_align(buf);
        //重新分配内存
        if ((newbuf = realloc(buf->buffer, length)) == NULL)
            return (-1);
        //orig_buffer，buffer都赋值为新地址newbuf
        buf->orig_buffer = buf->buffer = newbuf;
        //总长度totallen为length
        buf->totallen = length;
    }

    return (0);
}

5.所有代码注释
/*
 * Copyright (c) 2002, 2003 Niels Provos <provos@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef WIN32
#include <winsock2.h>
#include <windows.h>
#endif

#ifdef HAVE_VASPRINTF
/* If we have vasprintf, we need to define this before we include stdio.h. */
#define _GNU_SOURCE
#endif

#include <sys/types.h>

#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif

#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef HAVE_STDARG_H
#include <stdarg.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "event.h"
#include "config.h"
#include "evutil.h"
#include "./log.h"

//创建evbuffer
struct evbuffer *
evbuffer_new(void)
{
    struct evbuffer *buffer;

    buffer = calloc(1, sizeof(struct evbuffer));

    return (buffer);
}

//释放evbuffer
void
evbuffer_free(struct evbuffer *buffer)
{
    if (buffer->orig_buffer != NULL)
        free(buffer->orig_buffer);
    free(buffer);
}

/*
 * This is a destructive add.  The data from one buffer moves into
 * the other buffer.
 */

//交换evbuffer
#define SWAP(x,y) do { \
    (x)->buffer = (y)->buffer; \
    (x)->orig_buffer = (y)->orig_buffer; \
    (x)->misalign = (y)->misalign; \
    (x)->totallen = (y)->totallen; \
    (x)->off = (y)->off; \
} while (0)

//evbuffer数据交换，outhuf与inbuf
int
evbuffer_add_buffer(struct evbuffer *outbuf, struct evbuffer *inbuf)
{
    int res;

    //如果outbuf没有数据元素
    /* Short cut for better performance */
    if (outbuf->off == 0) {
        struct evbuffer tmp;
        size_t oldoff = inbuf->off;

        //交换缓冲区
        /* Swap them directly */
        SWAP(&tmp, outbuf);
        SWAP(outbuf, inbuf);
        SWAP(inbuf, &tmp);

        /*
         * Optimization comes with a price; we need to notify the
         * buffer if necessary of the changes. oldoff is the amount
         * of data that we transfered from inbuf to outbuf
         */
        //如果现在的数据元素长度不等于以前inbuf中的数据元素长度，并且有回调函数的话，
        //交换后inbuf调用回调函数，告诉现在数据元素长度已经改变等信息
        if (inbuf->off != oldoff && inbuf->cb != NULL)
            (*inbuf->cb)(inbuf, oldoff, inbuf->off, inbuf->cbarg);
        //原来inbuf数据元素个数不为0，且有回调函数。交换后的outbuf调用回调。
        if (oldoff && outbuf->cb != NULL)
            (*outbuf->cb)(outbuf, 0, oldoff, outbuf->cbarg);

        return (0);
    }
    //如果原来的outbuf中有数据元素，把inbuf中的数据元素加入进来
    res = evbuffer_add(outbuf, inbuf->buffer, inbuf->off);
    if (res == 0) {
        //res为零，成功将inbuf的数据元素加入到outbuf中来，所以可以将inbuf中的数据全部排出清空。
        /* We drain the input buffer on success */
        evbuffer_drain(inbuf, inbuf->off);
    }

    return (res);
}

//将数据格式化后添加到buf中
int
evbuffer_add_vprintf(struct evbuffer *buf, const char *fmt, va_list ap)
{
    char *buffer;
    size_t space;
    size_t oldoff = buf->off;
    int sz;
    va_list aq;

    /* make sure that at least some space is available */
    //确保至少有一些空间,这里看看有没有64字节容量。
    evbuffer_expand(buf, 64);
    for (;;) {
        size_t used = buf->misalign + buf->off;
        buffer = (char *)buf->buffer + buf->off;
        assert(buf->totallen >= used);
        space = buf->totallen - used;

#ifndef va_copy
#define    va_copy(dst, src)    memcpy(&(dst), &(src), sizeof(va_list))
#endif
        va_copy(aq, ap);
        //返回写入buffer后面的字节数
        sz = evutil_vsnprintf(buffer, space, fmt, aq);

        va_end(aq);

        if (sz < 0)
            return (-1);
        //如果格式化的数据字节数小于剩余的容量
        if ((size_t)sz < space) {
            buf->off += sz;
            if (buf->cb != NULL)
                (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
            return (sz);
        }
        //到这边说明容量不够，需要调整
        if (evbuffer_expand(buf, sz + 1) == -1)
            return (-1);

    }
    /* NOTREACHED */
}

//将数据格式化后添加到buf中
int
evbuffer_add_printf(struct evbuffer *buf, const char *fmt, ...)
{
    int res = -1;
    va_list ap;

    va_start(ap, fmt);
    res = evbuffer_add_vprintf(buf, fmt, ap);
    va_end(ap);

    return (res);
}

/* Reads data from an event buffer and drains the bytes read */
//从buf中读出datlen个字节存到data开始地址中
int
evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)
{
    size_t nread = datlen;
    //最多只能读出缓冲区中所有数据
    if (nread >= buf->off)
        nread = buf->off;
    //从buf->buffer地址的起始位置拷贝nread个字节到data开始的地址
    memcpy(data, buf->buffer, nread);
    //将nread个字节的数据排出缓冲区
    evbuffer_drain(buf, nread);

    return (nread);
}

/*
 * Reads a line terminated by either '\r\n', '\n\r' or '\r' or '\n'.
 * The returned buffer needs to be freed by the called.
 */

//从缓冲区中读出一行
char *
evbuffer_readline(struct evbuffer *buffer)
{
    //缓冲数据区的起始地址
    u_char *data = EVBUFFER_DATA(buffer);
    //缓冲区数据长度
    size_t len = EVBUFFER_LENGTH(buffer);
    char *line;
    unsigned int i;

    //读到\r或者\n
    for (i = 0; i < len; i++) {
        if (data[i] == '\r' || data[i] == '\n')
            break;
    }
    //没读到回车或者换行，退出
    if (i == len)
        return (NULL);
    //分配i+1字节内存，最后\0结尾
    if ((line = malloc(i + 1)) == NULL) {
        fprintf(stderr, "%s: out of memory\n", __func__);
        return (NULL);
    }
    //从data起始地址开始复制i个字节到line中
    memcpy(line, data, i);
    line[i] = '\0';

    /*
     * Some protocols terminate a line with '\r\n', so check for
     * that, too.
     */
    //如果i不是最后一个元素检查是否有\n或者\r。情况有可能有\r\n,\n\r,其中\r\r或者\n\n的情况排除，因为没用。
    if ( i < len - 1 ) {
        char fch = data[i], sch = data[i+1];

        //情况有可能有\r\n,\n\r,其中\r\r或者\n\n的情况排除，因为没用
        /* Drain one more character if needed */
        if ( (sch == '\r' || sch == '\n') && sch != fch )
            i += 1;
    }

    //将读取到的数据清除出缓冲区，i是序号从0开始，所以长度为i+1
    evbuffer_drain(buffer, i + 1);

    return (line);
}

//从缓冲区中读出一行,结束方式有4种
//EVBUFFER_EOL_ANY                任意数量的\r和\n
//EVBUFFER_EOL_CRLF                \n或者\r\n
//EVBUFFER_EOL_CRLF_STRICT        \r\n
//EVBUFFER_EOL_LF                \n
char *
evbuffer_readln(struct evbuffer *buffer, size_t *n_read_out,
        enum evbuffer_eol_style eol_style)
{
    u_char *data = EVBUFFER_DATA(buffer);
    u_char *start_of_eol, *end_of_eol;
    size_t len = EVBUFFER_LENGTH(buffer);
    char *line;
    unsigned int i, n_to_copy, n_to_drain;

    //如果n_read_out不为NULL，初始化为0
    if (n_read_out)
        *n_read_out = 0;

    /* depending on eol_style, set start_of_eol to the first character
     * in the newline, and end_of_eol to one after the last character. */
    switch (eol_style) {
    //任意数量的\r和\n
    case EVBUFFER_EOL_ANY:
        for (i = 0; i < len; i++) {
            if (data[i] == '\r' || data[i] == '\n')
                break;
        }
        if (i == len)
            return (NULL);
        //\r或者\n开始地址
        start_of_eol = data+i;
        ++i;
        for ( ; i < len; i++) {
            if (data[i] != '\r' && data[i] != '\n')
                break;
        }
        //\r或者\n结束地址
        end_of_eol = data+i;
        break;
    //\n或者\r\n
    case EVBUFFER_EOL_CRLF:
        //从data起始地址开始前len个字节查找\n字符
        end_of_eol = memchr(data, '\n', len);
        //没找到返回NULL
        if (!end_of_eol)
            return (NULL);
        //前一个字符是\r
        if (end_of_eol > data && *(end_of_eol-1) == '\r')
            start_of_eol = end_of_eol - 1;
        else
            start_of_eol = end_of_eol;
        //指向\n的下一个字节
        end_of_eol++; /*point to one after the LF. */
        break;
    //\r\n
    case EVBUFFER_EOL_CRLF_STRICT: {
        u_char *cp = data;
        //一直向前移动找到 "\r\n"的连续字符。
        //如果\r后面不是\n,++cp,此时cp前面的数据就不用比较了
        while ((cp = memchr(cp, '\r', len-(cp-data)))) {
            if (cp < data+len-1 && *(cp+1) == '\n')
                break;
            if (++cp >= data+len) {
                cp = NULL;
                break;
            }
        }
        if (!cp)
            return (NULL);
        start_of_eol = cp;
        end_of_eol = cp+2;
        break;
    }
    //\n
    case EVBUFFER_EOL_LF:
        start_of_eol = memchr(data, '\n', len);
        if (!start_of_eol)
            return (NULL);
        end_of_eol = start_of_eol + 1;
        break;
    default:
        return (NULL);
    }
    //数据区有多少个元素
    n_to_copy = start_of_eol - data;
    //数据缓冲区一共要排出的元素
    n_to_drain = end_of_eol - data;

    //n_to_copy+1带个结束字符 \0
    if ((line = malloc(n_to_copy+1)) == NULL) {
        event_warn("%s: out of memory\n", __func__);
        return (NULL);
    }
    //数据复制到line中
    memcpy(line, data, n_to_copy);
    line[n_to_copy] = '\0';

    //缓冲区清空读出的数据和末尾的结束符号
    evbuffer_drain(buffer, n_to_drain);
    //如果n_read_out不为NULL，返回读出的字符串字节数
    if (n_read_out)
        *n_read_out = (size_t)n_to_copy;

    return (line);
}

/* Adds data to an event buffer */

//buf进行重新排列
static void
evbuffer_align(struct evbuffer *buf)
{
    //                           整个buffer
    //|                           totallen                                   |
    //|--------------|-----------|-------------------------------------------|
    //|misalign(偏移) |off(数据区) |datlen(需要加入的数据长度)，大于totallen       |
    //                          | |
    //                          \ /
    //                           整个buffer
    //|                           totallen                                  |
    //|-----------|---------------------------------------------------------|
    //|off(数据区) |datlen(需要加入的数据长度)，大于totallen                      |


    //缓冲区数据前移
    //从buf->buffer拷贝off个字节到buf的orig_buffer
    memmove(buf->orig_buffer, buf->buffer, buf->off);

    //缓冲区数据起始位置变为buf起始位置
    buf->buffer = buf->orig_buffer;

    //偏移置为0
    buf->misalign = 0;
}

/* Expands the available space in the event buffer to at least datlen */
//内存扩展
int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
    //                           整个buffer
    //|                           totallen                                   |
    //|--------------|-----------|-------------------------------------------|
    //|misalign(偏移) |off(数据区) |datlen(需要加入的数据长度)，大于totallen       |
    //

    //首先判断是否需要扩展
    size_t need = buf->misalign + buf->off + datlen;

    //如果need小于totallen，无需扩展
    /* If we can fit all the data, then we don't have to do anything */
    if (buf->totallen >= need)
        return (0);

    /*
     * If the misalignment fulfills our data needs, we just force an
     * alignment to happen.  Afterwards, we have enough space.
     */
    //如果偏移大于datlen，
    if (buf->misalign >= datlen) {
        //buf进行重新排列
        evbuffer_align(buf);
    } else {
        //偏移小于datlen，数据元素大于totallen，需要重新分配内存
        void *newbuf;
        size_t length = buf->totallen;

        //如果length小于256，length设置256
        if (length < 256)
            length = 256;
        //如果length还是小于need，length扩大2倍直到不小于need
        while (length < need)
            length <<= 1;

        //如果有偏移，先重新排列
        if (buf->orig_buffer != buf->buffer)
            evbuffer_align(buf);
        //重新分配内存
        if ((newbuf = realloc(buf->buffer, length)) == NULL)
            return (-1);
        //orig_buffer，buffer都赋值为新地址newbuf
        buf->orig_buffer = buf->buffer = newbuf;
        //总长度totallen为length
        buf->totallen = length;
    }

    return (0);
}

//从data地址开始datlen个字节数据到evbuffer中
int
evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)
{
    //                           整个buffer
    //|                           totallen                            |
    //|--------------|-----------|---------------------------|--------|
    //|misalign(偏移) |off(数据区) |datlen(需要加入的数据长度)    |剩余空间  |
    //
    size_t need = buf->misalign + buf->off + datlen;
    size_t oldoff = buf->off;

    //如果need大于了总长度，需要调整扩大
    if (buf->totallen < need) {
        //evbuffer调整扩大
        if (evbuffer_expand(buf, datlen) == -1)
            return (-1);
    }
    //将datlen长度的data数据复制到buffer中。
    memcpy(buf->buffer + buf->off, data, datlen);
    //复制成功，数据长度增加
    buf->off += datlen;
    //datlen不为0且buf有回调函数，调用回调函数，告知缓存变化
    if (datlen && buf->cb != NULL)
        (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

    return (0);
}

//drain：使流出;排掉水
//从缓冲区中读出len长度数据。
void
evbuffer_drain(struct evbuffer *buf, size_t len)
{
    //记录当前缓冲区中的数据长度
    size_t oldoff = buf->off;

    //如果要读出的长度大于数据长度，就读出全部数据
    if (len >= buf->off) {

        //                           整个buffer
        //|                           totallen                            |
        //|||-------------------------------------------------------------|
        //|||剩余空间                                                       |
        //

        //元素个数清零
        buf->off = 0;
        //数据缓冲地址前移到最前面的buf起始位置
        buf->buffer = buf->orig_buffer;
        //数据偏移置0
        buf->misalign = 0;
        goto done;
    }
    //如果读出数据不是全部数据

    //                           整个buffer
    //|                           totallen                            |
    //|--------------|-----------|------------------------------------|
    //|  misalign    |off(数据区) |         剩余空间                     |
    //                          | |
    //                          \ /

    //                           整个buffer
    //|                           totallen                            |
    //|-----------------|--------|------------------------------------|
    //|  misalign       |off     |         剩余空间                     |
    //

    //buffer地址前移len
    buf->buffer += len;
    //misalign偏移加len
    buf->misalign += len;
    //由于读出数据，off减少len个数据
    buf->off -= len;

done:
    //缓冲区数据长度改变，调用回调函数
    /* Tell someone about changes in this buffer */
    if (buf->off != oldoff && buf->cb != NULL)
        (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

}

/*
 * Reads data from a file descriptor into a buffer.
 */

#define EVBUFFER_MAX_READ    4096
//从文件描述符中读取数据到buffer中
int
evbuffer_read(struct evbuffer *buf, int fd, int howmuch)
{
    u_char *p;
    size_t oldoff = buf->off;
    int n = EVBUFFER_MAX_READ;

#if defined(FIONREAD)
#ifdef WIN32
    long lng = n;
    if (ioctlsocket(fd, FIONREAD, &lng) == -1 || (n=lng) <= 0) {
#else
    if (ioctl(fd, FIONREAD, &n) == -1 || n <= 0) {
#endif
        n = EVBUFFER_MAX_READ;
    } else if (n > EVBUFFER_MAX_READ && n > howmuch) {
        /*
         * It's possible that a lot of data is available for
         * reading.  We do not want to exhaust resources
         * before the reader has a chance to do something
         * about it.  If the reader does not tell us how much
         * data we should read, we artifically limit it.
         */
        if ((size_t)n > buf->totallen << 2)
            n = buf->totallen << 2;
        if (n < EVBUFFER_MAX_READ)
            n = EVBUFFER_MAX_READ;
    }
#endif
    //buffer最多读EVBUFFER_MAX_READ个字节
    if (howmuch < 0 || howmuch > n)
        howmuch = n;

    /* If we don't have FIONREAD, we might waste some space here */
    //如果需要读的howmuch个字节数据，首先扩展buffer。因为我们没有FIONREAD参数，有可能howmuch很大，所以可能
    //会浪费内存
    if (evbuffer_expand(buf, howmuch) == -1)
        return (-1);

    /* We can append new data at this point */
    //读入数据的起始位置
    p = buf->buffer + buf->off;

    //读数据
#ifndef WIN32
    n = read(fd, p, howmuch);
#else
    n = recv(fd, p, howmuch, 0);
#endif
    if (n == -1)
        return (-1);
    if (n == 0)
        return (0);

    //缓冲区数据长度+n
    buf->off += n;

    //缓冲区数据改变，有回调，调用回调
    /* Tell someone about changes in this buffer */
    if (buf->off != oldoff && buf->cb != NULL)
        (*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

    return (n);
}

//将缓冲区数据读出，写入到fd文件描述符对应的文件中
int
evbuffer_write(struct evbuffer *buffer, int fd)
{
    int n;
    //从buffer开始，将off个字节写入fd
#ifndef WIN32
    n = write(fd, buffer->buffer, buffer->off);
#else
    n = send(fd, buffer->buffer, buffer->off, 0);
#endif
    //发生错误
    if (n == -1)
        return (-1);
    //关闭写
    if (n == 0)
        return (0);
    //写入fd成功，将缓冲区中排出已经写入的n个字节
    evbuffer_drain(buffer, n);

    return (n);
}
//从buffer中查找从what地址开始的长度为len的字符串
u_char *
evbuffer_find(struct evbuffer *buffer, const u_char *what, size_t len)
{
    u_char *search = buffer->buffer, *end = search + buffer->off;
    u_char *p;
    //从search所指内存区域的前end - search个字节查找字符*what（首字符）
    while (search < end &&
        (p = memchr(search, *what, end - search)) != NULL) {
        //当前位置p+len大于end，已经不可能找到从what地址开始的长度为len的字符串,跳出
        if (p + len > end)
            break;
        //比较p开始的内存和what开始的内存区域的前len个字节
        if (memcmp(p, what, len) == 0)
            return (p);
        //p开始的内存和what开始的内存区域的前len个字节不匹配，地址p+1，继续查找
        search = p + 1;
    }

    return (NULL);
}

//设置回调函数和回调参数
void evbuffer_setcb(struct evbuffer *buffer,
    void (*cb)(struct evbuffer *, size_t, size_t, void *),
    void *cbarg)
{
    //设置回调函数
    buffer->cb = cb;

    //设置回调参数
    buffer->cbarg = cbarg;
}