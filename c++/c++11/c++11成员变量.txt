==================================================C++98中的成员变量初始化
在声明类的时候，对于静态类型并且是常量类型，同时是枚举或者是整型的变量可以使用=在声明时初始化。
对于不符合上述要求的静态变量可以在类外使用=进行初始化
对于非静态类型可以说个初始化列表进行初始化
使用（）对自定义类型进行初始化
使用{}对元素集合统一初始化

#include <iostream>
#include <string>
using namespace std;
class A{
public:
	int a;
	string s;
};
A a;
int main() {
	//A a;
	cout<<a.a<<endl;// 0
	cout<<a.s<<endl;// 空字符串
}
类A的成员变量将进行默认初始化

==================================================c++11成员变量初始化
在C++11中可以使用=或者{}就地初始化
struct init{
    int a  = 1;
    double b{1.2};
};

class A{
public:
	int a=1;
	string s;
};

class A{
public:
	int a=1;
	string s;
	A(int val=5):a(val){}
};

class A{
public:
	const int a=0;
	const int & b = a;
	int c = 1;
	A(int val=5):a(val),b(c){
	}
};
a和b都被提供了类内初始值并且在构造函数初始化列表进行了初始化，最终输出a.a=5，a.b=1说明a和b都被构造函数进行了初始化而不是类内初始值
有构造函数初始化就按照构造函数，没有就默认初始化

非const的static成员变量不允许提供类内初始值
class A{
public:
	static int a=2; //声明并初始化 出错
};
int A::a;  //定义

为const static成员变量提供类内初始值，如果提供类内初始值，就不允许再在定义的时候初始化。
class A{
public:
	const static int a=5; //声明和初始化
};
const int A::a;   //定义 如果在此处再次初始化，则会出错
int main() {
	A a;
	cout<<A::a<<endl;
}

const static成员变量如果只声明不定义，并且声明时也进行了初始化，则此变量相当于一个立即数，可以通过变量名访问其值，不可以取它的地址
using namespace std;

class A{
public:
	const static int a=5; //声明和初始化
};
//const int A::a;   //不定义
int main() {
	A a;
	const int *p = &A::a;   //会导致连接出错
	cout<<A::a<<endl;
}


const static成员变量如果只声明不定义，并且声明时没有进行初始化，也就没法当一个立即数使用，自然也就无法输出A::a
class A{
public:
	const static int a; //声明不初始化
};
//const int A::a;   //不定义 
int main() {
	A a;
	cout<<A::a<<endl;  //链接出错，无法找到符号A::a
}

vector<int> c{1, 3, 5};
map<int, float> d = {{1, 1.0f}, {2, 2.0f}, {3, 3.0f}};