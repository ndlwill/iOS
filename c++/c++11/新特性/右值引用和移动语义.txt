使用范围for遍历容器的每个元素，需要使用auto& it引用元素的同一块内存空间，不要使用auto it因为范围for的原型就是容器的迭代器遍历元素，将迭代器所指向的元素值然后拷贝给it，所以it又是栈上的一块内存空间了。
建议使用引用类型，若不需要修改则写成const auto &it，需要修改写出auto &it。

关于array的swap的两个数组的相同类型是指容器所装的元素类型一致，还要元素的个数相同。

swap操作交换两个相同类型的容器的内容，一般的容器（除array外），交换两个容器内容的操作会保证非常快，因为并没有交换元素本身，而只是交换了两个容器的内部数据结构。

注：这里交换两个容器的内部数据结构是指交换容器中各元素的内存地址，并不是交换各个元素变量所存储的值。除string外，swap使用之后指向容器的指针、引用和迭代器均有效（即开始指向那个元素，在swap之后这个指针、引用和迭代器依然指向该元素）。
void test1()
{
 vector<int> v1 = { 1,2,3 };
 vector<int> v2 = { 4,5,6,7,8,9 };
 auto it1 = v1.begin();
 auto it2 = v2.begin();
 cout << "交换前迭代器it1指向的元素为：" << *it1 << endl;
 cout << "交换前迭代器it2指向的元素为：" << *it2 << endl;
 cout << "交换前v1每个元素的地址和值为：";
 for (const auto &it : v1)
 {
  cout << &it << " " << it << " ";
 }
 cout << "\n交换前v2每个元素的地址和值为：";
 for (const auto &it : v2)
 {
  cout << &it << " " << it << " ";
 }
 swap(v1, v2);
 cout << endl << endl;
 cout << "交换后迭代器it1指向的元素为：" << *it1 << endl;
 cout << "交换后迭代器it2指向的元素为：" << *it2 << endl;
 cout << "交换后v1每个元素的地址和值为：";
 for (const auto &it : v1)
 {
  cout << &it << " " << it << " ";
 }
 cout << "\n交换后v2每个元素的地址和值为：";
 for (const auto &it : v2)
 {
  cout << &it << " " << it << " ";
 }
 cout << endl;
 auto it3=v1.begin();
 cout<<"swap后的v1.begin()的值:";
 cout<<*it3;
 return 0;
}
可以看到，交换的是整个的内部数据结构，各元素原来所存储的值并没有发生改变，只是这些元素已经属于不用的容器了。
所以容器中所存储的元素的内存地址也发生了改变。所以swap操作后，指向容器内部的迭代器、引用和指针都任然有效，原来绑定的是哪个元素现在绑定的还是哪个元素。

而swap两个array则真正交换了各个元素的值:
void test2()
{
 
    array<int,5> v1 = { 1,2,3,4,5 };
    array<int,5> v2 = { 4,5,6,7,8 };
    auto it1 = v1.begin();
    auto it2 = v2.begin();
    cout << "交换前迭代器it1指向的元素为：" << *it1 << endl;
    cout << "交换前迭代器it2指向的元素为：" << *it2 << endl;
    cout << "交换前v1每个元素的地址和值为：";
    for (const auto &it : v1)
    {
        cout << &it << " " << it << " ";
    }
    cout << "\n交换前v2每个元素的地址和值为：";
    for (const auto &it : v2)
    {
        cout << &it << " " << it << " ";
    }
    swap(v1, v2);
    cout << endl << endl;
    cout << "交换后迭代器it1指向的元素为：" << *it1 << endl;
    cout << "交换后迭代器it2指向的元素为：" << *it2 << endl;
    cout << "交换后v1每个元素的地址和值为：";
    for (const auto &it : v1)
    {
        cout << &it << " " << it << " ";
    }
    cout << "\n交换后v2每个元素的地址和值为：";
    for (const auto &it : v2)
    {
        cout << &it << " " << it << " ";
    }
    cout << endl;
    auto it3=v1.begin();
    cout<<"swap后的v1.begin()的值:";
    cout<<*it3;
    return 0;
 }
交换后，两个array交换了各个元素的值，即容器中所存的各个元素的内存地址并没有交换，只是交换了相应位置的元素的值，
所以说swap两个array所需的时间和array中元素的数目成正比，同时，swap操作后，指向容器内部的迭代器、引用和指针都任然有效，原来绑定的是哪个元素现在绑定的还是哪个元素，只不过对应的元素值已经进行了交换。


和其它容器不同的是，对string调用swap会导致迭代器、引用和指针失效。因为string存储的是字符串，在string变量中真正存储字符串的是一个叫_Ptr的指针，
它指向string所存储的字符串首地址，而字符串并没有固定地址，而是存储在一个临时内存区域中，所以当字符串发生改变时，会发生内存的重新分配，所以会导致迭代器、引用和指针失效。

==============================

1.左值引用和右值引用
传统的C++语法中就有引用的语法，而C++11中新增了的右值引用语法特性。无论左值引用还是右值引用，都是给对象取别名。

什么是左值？什么是左值引用？
左值是一个表示数据的表达式(如变量名或解引用的指针)，我们可以获取它的地址，可以对它赋值，左值可以在赋值符号的左边，也可以在赋值符号的右边。
定义时const修饰符后的左值，不能给他赋值，但是可以取它的地址。左值引用就是给左值的引用，给左值取别名

int main()
{
	// 以下的p、b、c、*p都是左值，都能被取地址
	int* p = new int(0);
	int b = 1;
	const int c = 2;
	// 以下几个是对上面左值的左值引用
	int*& rp = p;
	int& rb = b;
	const int& rc = c;
	int& pvalue = *p;
	return 0;
}


什么是右值？什么是右值引用？
右值也是一个表示数据的表达式，如：字面常量、表达式返回值，传值返回函数的返回值(这个不能是左值引用返回)等等。
右值可以出现在赋值符号的右边，但是不能出现在赋值符号的左边，右值不能取地址。
右值引用就是对右值的引用，给右值取别名
int main()
{
	double x = 1.1, y = 2.2;
	// 以下几个都是常见的右值
	10; 
	x + y;
	fmin(x, y);
	// 以下几个都是对右值的右值引用
	int&& rr1 = 10;
	double&& rr2 = x + y;
	double&& rr3 = fmin(x, y);
	// 以下编译会报错：error C2106: “=”: 左操作数必须为左值
	//10 = 1; 
	//x + y = 1;
	//fmin(x, y) = 1;
	return 0;
}

##
总的来说，可以取地址的对象就是左值，不取地址的对象就是右值
##

注意：给右值取别名后，会导致右值被存储到特定位置，且可以取到该位置的地址(可以理解为对右值取别名之后，这个别名就变为了左值)
也就是说例如：不能取字面量10的地址，但是rr1引用后，可以对rr1取地址，也可以修改rr1。如果不想rr1被修改，可以用const int&& rr1 去引用

左值引用能否引用右值？
答案：不能直接引用，但const左值引用可以引用右值
int main()
{
	double x = 1.1, y = 2.2;
	10; 
	x + y;
	fmin(x, y);
	
	//引用前必须加上const， 否则会报错
	const int& r = 10;
	const double& r1 = x + y;
	const double& r2 = fmin(x, y);
	return 0;
}

右值引用能否引用左值？
答案：不能直接引用，但是右值引用可以引用move以后的左值
int main()
{
	// 以下的p、b、c、*p都是左值
	int* p = new int(0);
	int b = 1;
	const int c = 2;
	
	//右值引用引用左值
	int* && rr1 = move(p);
	int && rr2 = move(*p);
	int && rr3 = move(b);
	const int && rr4 = move(c);
	return 0;
}

2.总结:
左值引用:
左值引用只能引用左值，不能引用右值。
但是const左值引用既可引用左值，也可引用右值

右值引用:
右值引用只能右值，不能引用左值。
但是右值引用可以move以后的左值。

3.右值引用使用场景和意义
来看看左值引用的短板
//拷贝构造
string(const string& s)
	:_str(nullptr)
{
	cout<<"string(const string& s)--深拷贝"<<endl;
	string tmp(s._str)
	swap(tmp);
}

string operator+(char ch)
{
	string tmp(*this);
	push_back(ch);

	return tmp;
}

s = str + '!'

当str调用operator+()时，会拷贝一份临时对象tmp，当函数返回时，又会将临时对象tmp进行拷贝，然后将tmp进行销毁。但是我们发现，在返回时，没有必要用tmp再构造一份对象，然后又将tmp销毁，这样大大耗费了资源。
有没有一种方法，在你销毁的时候将你的资源进行转移。所以，可以通过右值引用来完成移动构造，就能很好的解决这个问题。

string(string&& s)
	:_str(nullptr)
{
	this->swap(s);
	cout<<"string(string&& s)--资源转移"<<endl;
}

C++11将右值分为了两种:
第一种叫纯右值：比如10， x+y
第二种叫将亡值：比如返回自定义类型的值，如临时对象tmp，因为出了作用域，它就将被销毁
当返回tmp时，编译器会认为它是右值中的将亡值，就会实行最佳匹配原则，去调用移动构造，转移资源，而不会调用拷贝构造，提高了效率

除了移动构造之外，还有移动赋值，也是用来解决资源浪费的问题
string& operator=(string&& s)
{
	cout << "string& operator=(string&& s) -- 移动赋值" << endl;
	swap(s);
	return *this;
}

除了移动构造之外，还有移动赋值，也是用来解决资源浪费的问题
string& operator=(string&& s)
{
	cout << "string& operator=(string&& s) -- 移动赋值" << endl;
	swap(s);
	return *this;
}
C++11中STL中的容器都是增加了移动构造和移动赋值以提高性能

虽然移动赋值和移动构造大大提升了性能，但是有时也是"非常危险"的
string s = "11111";
string s1 = move(s);
将s通过move转为右值后，移动赋值给s1，s的ptr竟然变为nullptr，为什么会这样呢？
其实原因很简单：移动赋值的本质其实就是资源转移，将s的资源转移到了s1，所以s的ptr自然而然的变为nullptr。
所以在使用移动语义时需要这些细节，否则可能会给程序带来严重的后果。

右值引用匹配上移动构造或者移动赋值，只是将资源从将亡值上转移到了非将亡值，并没有延长将亡值的生命周期。

4.完美转发
模板中的&&不代表右值引用，而是万能引用，其既能接收左值又能接收右值。
模板的万能引用只是提供了能够接收同时接收左值引用和右值引用的能力，但是引用类型的唯一作用就是限制了接收的类型，后续使用中都退化成了左值
我们希望能够在传递过程中保持它的左值或者右值的属性, 就需要用到的完美转发。
void Fun(int &x)
{ 
	cout << "左值引用" << endl; 
}
void Fun(const int &x)
{ 
	cout << "const 左值引用" << endl; 
}
void Fun(int &&x)
{ 
	cout << "右值引用" << endl;
}
void Fun(const int &&x)
{ 
	cout << "const 右值引用" << endl;

}
template<typename T>
void PerfectForward(T&& t) 
{
	Fun(t);
}
int main()
{
	PerfectForward(10);           // 右值
	int a;
	PerfectForward(a);            // 左值
	PerfectForward(std::move(a)); // 右值
	const int b = 8;
	PerfectForward(b);            // const 左值
	PerfectForward(std::move(b)); // const 右值
	return 0;
}
这段代码的本意是通过万能引用，左值去调用左值引用，右值去调用右值引用。
但实际上无论是左值还是右值都调用了左值引用，这是为什么呢？其实前面也已经说到过，因为在对一个数据进行右值引用后，也会变为左值。
对此，C++11提供了完美转发来保证右值引用后的属性保持不变。
只需要Fun(t) 改为 Fun(std::forward(t)) 即可。