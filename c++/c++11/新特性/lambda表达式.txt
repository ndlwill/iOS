lambda表达式语法格式：[capture-list] (parameters) mutable -> return-type { statement }

lambda表达式各部分说明:
[capture-list] : 捕捉列表，该列表总是出现在lambda函数的开始位置，编译器根据[]来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用
(parameters)：参数列表。与普通函数的参数列表一致，如果不需要参数传递，则可以连同()一起省略
mutable：默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性。使用该修饰符时，参数列表不可省略(即使参数为空)
->returntype：返回值类型。用追踪返回类型形式声明函数的返回值类型，没有返回值时此部分可省略。返回值类型明确情况下，也可省略，由编译器对返回类型进行推导
{statement}：函数体。在该函数体内，除了可以使用其参数外，还可以使用所有捕获到的变量

注意： 在lambda函数定义中，参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空。因此C++11中最简单的lambda函数为：[]{}; 该lambda函数不能做任何事情

实现两个数相加求和：
int main()
{
	auto add = [](int a, int b)->int{return a + b; };	
	//[](int a, int b){return a + b;};
	cout << add(1, 2) << endl;
	return 0;
}

int main()
{
	Goods gds[] = { { "苹果", 2.1 }, { "香蕉", 3 }, { "橙子", 2.2 }, { "菠萝", 1.5 }, { "哈密瓜", 4 } };
	sort(gds, gds + sizeof(gds) / sizeof(gds[0]), 
	[](const Goods& left, const Goods& right)->bool{return left._price < right._price; });
	//[](const Goods& left, const Goods& right){return left._price < right._price;}
	for (auto& item : gds)
	{
		cout << item._name << ":" << item._price << endl;
	}
	return 0;
}

int main()
{
	int a = 10, b = 20;
	auto swap = [&a, &b]()mutable
	{
		int c = a;
		a = b;
		b = c;
	};
	swap();
	cout << "a:" << a << " " << "b:" << b << endl;
	return 0;
}

lambda表达式实际上可以理解为无名函数，该函数无法直接调用，如果想要直接调用，可借助auto将其赋值给一个变量。
捕捉列表描述了上下文中那些数据可以被lambda使用，以及使用的方式是传值还是传引用
[var]：表示值传递方式捕捉变量var
[=]：表示值传递方式捕获所有父作用域中的变量(成员函数中包括this)
[&var]：表示引用传递捕捉变量var
[&]：表示引用传递捕捉所有父作用域中的变量(成员函数中包括this)

注意：
父作用域指包含lambda函数的语句块
语法上捕捉列表可由多个捕捉项组成，并以逗号分割。比如：[=, &a, &b]：以引用传递的方式捕捉变量a和b，值传递方式捕捉其他所有变量 [&，a,this]：值传递方式捕捉变量a和this，引用方式捕捉其他变量
捕捉列表不允许变量重复传递，否则就会导致编译错误。 比如：[=, a]：=已经以值传递方式捕捉了所有变量，捕捉a重复
在块作用域以外的lambda函数捕捉列表必须为空
在块作用域中的lambda函数仅能捕捉父作用域中局部变量，捕捉任何非此作用域或者非局部变量都会导致编译报错
lambda表达式之间不能相互赋值，即使看起来类型相同

lambda表达式就是一个仿函数，底层被处理成为一个lambda_uuid的一个仿函数类