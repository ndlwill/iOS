http://c.biancheng.net/sitemap/
http://c.biancheng.net/cplus/11/


C++11中最重要的特性之一就是支持了线程，使得C++在并行编程时不需要依赖第三方库，而且在原子操作中还引入了原子类的概念。
要使用标准库中的线程，必须包含< thread >头文件

函数名	功能
thread()	构造一个线程对象，没有关联任何线程函数，即没有启动任何线程
thread(fn,args1, args2,…)	构造一个线程对象，并关联线程函数fn，args1，args2，…为线程函数的线程
get_id()	获取线程id
jionable()	线程是否还在执行，joinable代表的是一个正在执行中的线程
jion()	该函数调用后会阻塞住线程，当该线程结束后，主线程继续执行
detach()	在创建线程对象后马上调用，用于把被创建线程与线程对象分离开，分离的线程变为后台线程，创建的线程的"死活"就与主线程无关

注意：
1.线程是操作系统中的一个概念，线程对象可以关联一个线程，用来控制线程以及获取线程的状态
2.当创建一个线程对象后，没有提供线程函数，该对象实际没有对应任何线程
3.当创建一个线程对象后，并且给线程关联线程函数，该线程就被启动，与主线程一起运行。线程函数一般情况下可按照三种方式提供：函数指针、lambda表达式、函数对象
4.thread类是防拷贝的，不允许拷贝构造以及赋值，但是可以移动构造和移动赋值，即将一个线程对象关联线程的状态转移给其他线程对象，转移期间不影响线程的执行
5.可以通过jionable()函数判断线程是否是有效的，如果是以下任意情况，则线程无效：①采用无参构造函数构造的线程对象。②线程对象的状态已经转移给其他线程对象。③程已经调用jion或者detach结束
6.如果是类成员函数作为线程参数时，必须将this作为线程函数参数。


1.线程函数参数
线程函数的参数是以值拷贝的方式拷贝到线程栈空间中的，因此：即使线程参数为引用类型，在线程中修改后也不能修改外部实参，因为其实际引用的是线程栈中的拷贝，而不是外部实参
void ThreadFunc1(int& x) 
{
	x += 10;
}
void ThreadFunc2(int* x) 
{
	*x += 10;
}
int main()
{
	int a = 10;
	// 在线程函数中对a修改，不会影响外部实参，因为：线程函数参数虽然是引用方式，但其实际
	//引用的是线程栈中的拷贝
	thread t1(ThreadFunc1, a);
	t1.join();
	cout << a << endl;

	// 如果想要通过形参改变外部实参时，必须借助std::ref()函数
	thread t2(ThreadFunc1, std::ref(a));
	t2.join();
	cout << a << endl;

	// 地址的拷贝
	thread t3(ThreadFunc2, &a);
	t3.join();
	cout << a << endl;
	return 0;
}
注意：如果是类成员函数作为线程参数时，必须将this作为线程函数参数

2.原子性操作库
多线程最主要的问题是共享数据带来的问题(即线程安全)。
如果共享数据都是只读的，那么没问题，因为只读操作不会影响到数据，更不会涉及对数据的修改，所以所有线程都会获得同样的数据。
但是，当一个或多个线程要修改共享数据时，就会产生很多潜在的麻烦。比如：

#include <iostream>
#include <thread>
using namespace std;
int main()
{
	int sum = 0;
	cout << "Before joining,sum = " << sum << std::endl;
	thread t1([&]{
		for (int i = 0; i < 100000; ++i)
		{
			++sum;
		}
	});
	thread t2([&]{
		for (int i = 0; i < 100000; ++i)
		{
			++sum;
		}
	});

	t1.join();
	t2.join();
	cout << "After joining,sum = " << sum << std::endl;
	return 0;
}

C++98中传统的解决方式：可以对共享修改的数据可以加锁保护
#include <iostream>
#include <thread>
#include <mutex>
using namespace std;
int main()
{
	int sum = 0;
	mutex mtx;
	cout << "Before joining,sum = " << sum << std::endl;
	thread t1([&]{
		for (int i = 0; i < 100000; ++i)
		{
			//通过加锁来保证原子性
			mtx.lock();
			++sum;
			mtx.unlock();
		}
	});
	thread t2([&]{
		for (int i = 0; i < 100000; ++i)
		{
			mtx.lock();
			++sum;
			mtx.unlock();
		}
	});

	t1.join();
	t2.join();
	cout << "After joining,sum = " << sum << std::endl;
	return 0;
}
虽然加锁可以解决，但是加锁有一个缺陷就是：只要一个线程在对sum++时，其他线程就会被阻塞，会影响程序运行的效率，而且锁如果控制不好，还容易造成死锁。
因此C++11中引入了原子操作。所谓原子操作：即不可被中断的一个或一系列操作，C++11引入的原子操作类型，使得线程间数据的同步变得非常高效。

#include <iostream>
#include <thread>
#include<atomic>
using namespace std;
int main()
{
	atomic<int> sum = 0;
	cout << "Before joining,sum = " << sum << std::endl;
	thread t1([&]{
		for (int i = 0; i < 100000; ++i)
		{
			++sum;
		}
	});
	thread t2([&]{
		for (int i = 0; i < 100000; ++i)
		{
			++sum;
		}
	});

	t1.join();
	t2.join();
	cout << "After joining,sum = " << sum << std::endl;
	return 0;
}
在C++11中，程序员不需要对原子类型变量进行加锁解锁操作，线程能够对原子类型变量互斥的访问
更为普遍的，程序员可以使用atomic类模板，定义出需要的任意原子类型
atmoic t; // 声明一个类型为T的原子类型变量t

注意：原子类型通常属于"资源型"数据，多个线程只能访问单个原子类型的拷贝，因此在C++11中，原子类型只能从其模板参数中进行构造，不允许原子类型进行拷贝构造、移动构造以及operator=等，为了防止意外，标准库已经将atmoic模板类中的拷贝构造、移动构造、赋值运算符重载默认删除掉了。

#include <atomic>
int main()
{
	atomic<int> a1(0);
	atomic<int> a2(a1);   // 编译失败
	atomic<int> a2(0);
	a2 = a1;               // 编译失败
	return 0;
}
除此之外，由于锁控制不好时，可能会造成死锁，最常见的比如在锁中间代码返回，或者在锁的范围内抛异常。因此：C++11采用RAII的方式对锁进行了封装，即lock_guard和unique_lock

3.mutex的种类
（1）std::mutex
C++11提供的最基本的互斥量，该类的对象之间不能拷贝，也不能进行移动。mutex最常用的三个函数：

函数名	函数功能
lock()	上锁：锁住互斥量
unlock()	解锁：释放对互斥量的所有权
try_lock()	尝试锁住互斥量，如果互斥量被其他线程占有，则当前线程也不会被阻塞

注意，线程函数调用lock()时，可能会发生以下三种情况：
如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁
如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住
如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)

线程函数调用try_lock()时，可能会发生以下三种情况：
如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock释放互斥量
如果当前互斥量被其他线程锁住，则当前调用线程返回 false，而并不会被阻塞掉
如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)

（2）std::recursive_mutex
其允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同

（3）std::timed_mutex
比 std::mutex 多了两个成员函数，try_lock_for()，try_lock_until()
try_lock_for()
接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false。

try_lock_until()
接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false

（4）std::recursive_timed_mutex

4.lock_guard
std::lock_gurad 是 C++11 中定义的模板类
template<class _Mutex>
class lock_guard
{
public:
	// 在构造lock_gard时，_Mtx还没有被上锁
	explicit lock_guard(_Mutex& _Mtx)
		: _MyMutex(_Mtx)
	{
		_MyMutex.lock();
	}
	// 在构造lock_gard时，_Mtx已经被上锁，此处不需要再上锁
	lock_guard(_Mutex& _Mtx, adopt_lock_t)
		: _MyMutex(_Mtx)
	{}
	~lock_guard() _NOEXCEPT
	{
		_MyMutex.unlock();
	}
	lock_guard(const lock_guard&) = delete;
	lock_guard& operator=(const lock_guard&) = delete;
private:
	_Mutex& _MyMutex;
};

lock_guard类模板主要是通过RAII的方式，对其管理的互斥量进行了封装，在需要加锁的地方，只需要用上述介绍的任意互斥体实例化一个lock_guard，调用构造函数成功上锁，出作用域前，lock_guard对象要被销毁，调用析构函数自动解锁，可以有效避免死锁问题。
lock_guard的缺陷：太单一，用户没有办法对该锁进行控制，因此C++11又提供了
unique_lock

RAII，也称为“资源获取就是初始化”
它保证在任何情况下，使用对象时先构造对象，最后析构对象。

5.unique_lock
与lock_gard类似，**unique_lock类模板也是采用RAII的方式对锁进行了封装，并且也是以独占所有权的方式管理mutex对象的上锁和解锁操作，即其对象之间不能发生拷贝。
**在构造(或移动(move)赋值)时，unique_lock 对象需要传递一个 Mutex 对象作为它的参数，新创建的unique_lock 对象负责传入的 Mutex 对象的上锁和解锁操作。
使用以上类型互斥量实例化unique_lock的对象时，自动调用构造函数上锁，unique_lock对象销毁时自动调用析构函数解锁，可以很方便的防止死锁问题

与lock_guard不同的是，unique_lock更加的灵活，提供了更多的成员函数：
上锁/解锁操作：lock、try_lock、try_lock_for、try_lock_until和unlock
修改操作：移动赋值、交换(swap：与另一个unique_lock对象互换所管理的互斥量所有权)、释放(release：返回它所管理的互斥量对象的指针，并释放所有权)
获取属性：owns_lock(返回当前对象是否上了锁)、operator bool()(与owns_lock()的功能相同)、mutex(返回当前unique_lock所管理的互斥量的指针)。


6.互斥锁加条件变量实现交替打印数据
#include<iostream>
#include<mutex>
#include<condition_variable>
#include<thread>
using namespace std;


//用互斥锁和条件变量实现交替打印数据
int main()
{
	int n = 100;
	int i = 0;
	condition_variable cv;
	mutex mtx;
	bool flag = false;

	//打印奇数
	thread t1([&]{
		while (i < n)
		{
			//加锁
			unique_lock<mutex> lock(mtx);

			//flag是false时会一直处于阻塞状态，直到flag变为true
			cv.wait(lock, [&]{return !flag; });

			cout << std::this_thread::get_id() << "->" << i << endl;
			++i;

			//防止该线程在自己的时间片内多次成功竞争锁，多次打印
			flag = true;
			//唤醒其他线程(一个)
			cv.notify_one();
		}
	});

	//打印偶数
	thread t2([&]{
		while (i < n)
		{
			unique_lock<mutex> lock(mtx);
			cv.wait(lock, [&]{return flag; });
			cout << std::this_thread::get_id() << "->" << i << endl;
			++i;
			flag = false;
			cv.notify_one();
		}
	});

	t1.join();
	t2.join();

	return 0;
}