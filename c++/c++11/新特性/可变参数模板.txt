C++11的新特性可变参数模板能够创建可以接受可变参数的函数模板和类模板

下面就是一个基本可变参数的函数模板：
// Args是一个模板参数包，args是一个函数形参参数包
// 声明一个参数包Args...args，这个参数包中可以包含0到任意个模板参数。
template <class ...Args>
void ShowList(Args... args)
{}

//获取参数包中参数的个数
void ShowList(Args... args)
{
	cout << sizeof...(args) << endl;
	cout << sizeof...(Args) << endl;
}

上面的参数args前面有省略号，所以它就是一个可变模版参数，我们把带省略号的参数称为“参数包”，它里面包含了0到N（N>=0）个模版参数。
我们无法直接获取参数包args中的每个参数的，只能通过展开参数包的方式来获取参数包中的每个参数，这是使用可变模版参数的一个主要特点，也是最大的难点，即如何展开可变模版参数。
由于语法不支持使用args[i]这样方式获取可变参数，所以我们可以通过以下方式来获取参数包的值。

1.递归函数方式展开参数包
void showlist()
{
	cout << "end" << endl;
}

//解析并打印参数包中每个参数的类型及值
//传三个参数,val获取一个，剩下的在参数包args中，递归下去，知道参数为0为止，最后将调用showlist()
template<class T, class ...Args>
void showlist(T val, Args... args)
{
	cout << typeid(val).name() << ":" << val << endl;
	showlist(args...);
}

int main()
{
	showlist("fl", 2, string("hehe"));
	return 0;
}

2.逗号表达式展开参数包
template <class T>
void PrintArg(T val) 
{
	cout << typeid(T).name() << ":" << val;
}
//展开函数
//这种展开参数包的方式，不需要通过递归终止函数，是直接在expand函数体中展开的, printarg
//不是一个递归终止函数，只是一个处理参数包中每一个参数的函数。这种就地展开参数包的方式
//实现的关键是逗号表达式。我们知道逗号表达式会按顺序执行逗号前面的表达式，
//expand函数中的逗号表达式：(printarg(args), 0)，也是按照这个执行顺序，先执行
//printarg(args)，再得到逗号表达式的结果0
template <class ...Args>
void ShowList(Args... args) 
{
	int arr[] = { (PrintArg(args), 0)... };
	cout << endl;
}
int main()
{
	ShowList(1);
	ShowList(1, 'A');
	ShowList(1, 'A', string("fl"));
	return 0;
}

//也可以写成这样
template <class T>
int PrintArg(T val)
{
	cout << typeid(T).name() << ":" << val;
	return 0;
}
//展开函数
template <class ...Args>
void ShowList(Args... args)
{
	int arr[] = { PrintArg(args)... };
	cout << endl;
}

int main()
{
	ShowList(1);
	ShowList(1, 'A');
	ShowList(1, 'A', string("fl"));
	return 0;
}