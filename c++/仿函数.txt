函数调用需要使用"()"，这个“()”叫做 函数调用运算符
那么这个可调用的函数名，被称为 可调用对象。
在C++中除了函数可以调用之外，重载了operator()的类，也是可以调用的，也可成为可调用对象

C++中的可调用对象有以下几种:
​ – 函数（function）
​ – 函数指针（function pointer）
​ – 仿函数（Functor）
​ – lambda表达式
​ – bind 函数封装的函数对象

仿函数（函数对象）: 这通常用于创建可调用的对象，也被称为函数对象（functor）或函数符
仿函数又称为函数对象是一个能行使函数功能的类，仿函数是定义了一个含有operator()成员函数的对象，可以视为一个一般的函数，只不过这个函数功能是在一个类中的运算符operator()中实现，是一个函数对象，它将函数作为参数传递的方式来使用。

#include <iostream>
// 定义一个函数对象类
class MyFunctor {
public:
    // 重载 () 运算符，使对象可以像函数一样被调用
    int operator()(int x, int y) {
        return x + y;
    }
};

int main() {
    MyFunctor add;
    
    // 使用函数对象
    int result = add(3, 4);
    
    std::cout << "Result: " << result << std::endl;

    return 0;
}

==================================================

struct Foo
{
	void operator()()
	{
		cout << __FUNCTION__ << endl;
	}
};

int main()
{
	Foo a;
	//定义对象调用
	a.operator()();
	//直接通过对象调用
	a();
	//通过临时对象调用
	Foo()();
}

我们在一个结构体（或者说在类）中，重载了一个括号运算符，那么我们有几种方法可以调用这个函数呢？

第一种方法：定义一个结构体对象，然后显式访问这个函数：operator() ，注意函数调用，后面再加上一个括号。
第二种方法：通过结构体对象直接访问函数。
第三种方法：通过结构体匿名对象，访问并调用函数。


分别统计一个vector 中每个元素等于数字3，大于数字3，小于数字3的次数:

普通写法:
int equal_count(const vector<int>::iterator& a, const vector<int>::iterator& b,
	const int& val)
{
	int count_num = 0;
	for (auto it = a; it != b; it++)
	{
		if (*it == val)
		{
			count_num++;
		}
	}
	return count_num;
}

int greater_count(const vector<int>::iterator& a, const vector<int>::iterator& b,
	const int& val)
{
	int count_num = 0;
	for (auto it = a; it != b; it++)
	{
		if (*it > val)
		{
			count_num++;
		}
	}
	return count_num;
}

int less_count(const vector<int>::iterator& a, const vector<int>::iterator& b,
	const int& val)
{
	int count_num = 0;
	for (auto it = a; it != b; it++)
	{
		if (*it < val)
		{
			count_num++;
		}
	}
	return count_num;
}
int main()
{
	vector<int> a{ 1,2,3,4,4,5,6,8,7};
	int num1 = equal_count(a.begin(), a.end(), 3);
	cout << "等于3:" << num1 << "个" << endl;
	int num2 = greater_count(a.begin(), a.end(), 3);
	cout << "大于3:" << num2 << "个" << endl;
	int num3 = less_count(a.begin(), a.end(), 3);
	cout << "小于3:" << num3 << "个" << endl;
}

这样的函数会不会过于长了，他们不仅长，而且他们的功能都是类似的，我们为何要单独在写三个函数呢？
我们能否用一个函数的主体，然后写三个子函数，来传入主体函数？
可以的，这就是函数的可调用对象写法

进阶写法（可调用对象）:
/*
可调用对象
*/
template <class FUN>
int count_if(const vector<int>::iterator& a, const vector<int>::iterator& b,FUN func)
{
	int count_num = 0;
	for (auto it = a; it != b; it++)
	{
		if (func(*it))
		{//传进去的是值
			count_num++;
		}
	}
	return count_num;
}
bool _equal(int a)
{
	return a == 3;
}
bool _greater(int a)
{
	return a > 3;
}
bool _less(int a)
{
	return a < 3;
}
int main()
{
	vector<int> a{ 1,2,3,4,4,5,6,8,7};
	int num1 = count_if(a.begin(), a.end(), _equal);
	cout << num1 << endl;
	int num2 = count_if(a.begin(), a.end(), _greater);
	cout << num2 << endl;
	int num3 = count_if(a.begin(), a.end(), _less);
	cout << num3 << endl;
}
我们使用了一个模板参数用作函数指针，再写三个简单的子函数，在主体函数中调用三个简单的子函数，当条件为true时，便可以起到统计次数的作用。而且在可调用函数的版本中，我们还可以使用lamdba表达式的形式
int num1 = count_if(a.begin(), a.end(), [](const int& data) {return data == 3; });
cout << num1 << endl;
int num2 = count_if(a.begin(), a.end(), [](const int& data) {return data > 3; });
cout << num2 << endl;
int num3 = count_if(a.begin(), a.end(), [](const int& data) {return data < 3; });
cout << num3 << endl;

高阶写法（仿函数）:
template <class FUN>
int count_if(const vector<int>::iterator& a, const vector<int>::iterator& b,FUN func)
{
	int count_num = 0;
	for (auto it = a; it != b; it++)
	{
		if (func(*it))
		{//传进去的是值
			count_num++;
		}
	}
	return count_num;
}

/*
仿函数
*/
struct Equal
{
	int val;
	Equal(const int& val) :val(val) {}
	bool operator()(const int& a)
	{
		return a == val;
	}
};

struct Greater
{
	int val;
	Greater(const int& val) :val(val) {}
	bool operator()(const int& a)
	{
		return a > val;
	}

};

struct Less
{
	int val;
	Less(const int& val) :val(val) {}
	bool operator()(const int& a)
	{
		return a < val;
	}
};
int main()
{
	vector<int> a{ 1,2,3,4,4,5,6,8,7};
	/*
	仿函数 传递数值的方式
	*/
	Less less(10）;	//可以创建对象来调用
	int num1 = count_if(a.begin(), a.end(), Equal(4));	//匿名对象
	cout << num1 << endl;
	int num2 = count_if(a.begin(), a.end(), Greater(3));	//匿名对象
	cout << num2 << endl;
	int num3 = count_if(a.begin(), a.end(), less);		//临时对象
	cout << num3 << endl;
}

你有没有发现第二种方式，有一个很麻烦的缺点：我们每次修改数值，比如我们想让他统计大于5，大于10，等于10，小于20. …等等等等，这些不同的数值会怎么办。
我们在一个函数中就已经把数值写死了，或者说我们在函数调用时，只会看到调用的函数名称（可调用对象，传递给函数形参的是函数名称），并不会看到实际比较的数值。

可以看到仿函数：我们可以任意指定是大于，小于，还是等于任意数值，并且我们重载了括号运算符，我们可以看到数值
我们可以使用像上述示例中，类名+数值，指的是创建一个匿名对象；我们也可以创建一个类对象来进行调用。

仿函数的优点
如果可以用仿函数实现，那么你应该用仿函数，而不要用CallBack。原因在于:
仿函数可以不带痕迹地传递上下文参数。而CallBack技术通常使用一个额外的void*参数传递。这也是多数人认为CallBack技术丑陋的原因。
仿函数技术可以获得更好的性能，这点直观来讲比较难以理解。


仿函数通常有下面四个作用:
作为排序规则，在一些特殊情况下排序是不能直接使用运算符<或者>时，可以使用仿函数。
作为判别式使用，即返回值为bool类型。
同时拥有多种内部状态，比如返回一个值得同时并累加。
作为算法for_each的返回值使用。


仿函数可以不带痕迹地传递上下文参数。而CallBack技术通常使用一个额外的void*参数传递:
#include <iostream>
#include <vector>
#include <algorithm>

// 定义一个仿函数，它可以将元素乘以指定的因子
class Multiplier {
public:
    Multiplier(int factor) : factor_(factor) {}

    int operator()(int value) {
        return value * factor_;
    }

private:
    int factor_;
};

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int factor = 2;

    Multiplier multiplier(factor);

    // 使用仿函数，无需显式传递上下文参数
    std::transform(numbers.begin(), numbers.end(), numbers.begin(), multiplier);

    // 打印结果
    for (int num : numbers) {
        std::cout << num << " ";
    }

    return 0;
}
Multiplier 类是一个仿函数，它可以乘以指定的因子。
我们创建了一个 Multiplier 对象，该对象封装了上下文参数 factor，而不需要显式传递 void* 参数。
通过 std::transform 函数，我们将该仿函数应用于容器中的每个元素，实现了对元素的乘法操作。