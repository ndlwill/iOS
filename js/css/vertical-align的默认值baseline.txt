veritical-align的范围，就是在哪里进行对齐呢，是在linebox里。
veritical-align的对象，就是谁要进行垂直方向上进行对齐，对象主要有inline元素、inline-block元素和普通文本框等。

linebox主要存在于block元素和inline-block元素中。
linebox中可以含有普通文本框、inline-block元素、inline元素。
vertical-align被用于垂直对齐inline元素，也就是display值为inline和inline-block的元素

inline-block元素就像它的名字一样，同时具备inline元素和block元素的特点，
这样的元素有padding,margin,border,width,height。其中高度有可能是由元素的内容决定的。

linebox的宽度取决于内部元素的宽度，最大为父元素的宽度。
如果没有设置line-height，linebox的高度取决于linebox元素一起决定，一般由最高的元素决定linebox的高度。

vertical的默认属性baseline

baseline是小写字母x下面的一条线


==========inline-level elements（内联级元素）盒子的baseline位置
1.普通文本框的baseline
普通文本框的baseline，为里面文本的基线，基线的位置取决font-size和line-height。

2.inline元素的baseline
inline元素的baseline，为内容盒content-box里面文本框的基线。

3.inline-block元素的baseline
(1)在有处于正常流内容的情况下，inline-block元素的baseline就是最后一个作为内容存在的元素的baseline，这个元素的baseline的确定就要根据他自身来确定了。
(2)在overflow属性不为visible的情况下，baseline就是margin-box的下边界了。
(3)在没有内容但是内容区还有高度 的情况下，baseline还是margin-box的下边界。
其baseline也是margin-box，这种元素是内联替换元素，例如img标签

==========确定父元素（行盒子）的baseline位置
###
linebox的baseline:
linebox的baseline以各个元素中最下面的baseline为基准，就是说谁的baseline在最下面，就以谁的baseline为基准进行对齐。

父元素（行盒子）的baseline位置: 父元素里最后一个没有设置任何对齐方式的inline-level box（内联级盒子元素）的baseline
###


==========
vertical-align: middle
让子元素盒子垂直中点与行盒子的baseline+字母‘x'高度的一半对齐

vertical-align: top
子元素盒子的顶部相对行盒子的顶部对齐

vertical-align: bottom
子元素盒子的底部和行盒子的底部对齐


==========
vertical-align常见的案例:

(1)未设置任何值
html
    <div class="line-box">
        <span class="label">颜色xx</span>
        <span class="icon"></span>
    </div>
css
    .line-box {
        padding-left: 100px;
        border: 1px solid black;
    }
    .icon {
        display: inline-block;
        width: 20px;
        height: 20px;
        background: blue;
    }
    .label {
    }

可以看见，是文字的baseline(字母x的下边缘)和蓝色盒子的底部边界值(baseline)对齐

(2)设置文字和图标的vertical-align：middle
css
.icon, .label {
   vertical-align: middle;
}

现在文字和图标已经水平对齐了
发现文字(span标签)的上方(注意是上方)与行盒子（父元素）之间有条缝隙。

现在理论上(实际上)文字和图标的垂直中点已经和行盒子的基线+字母x高度的一半对齐。我们给行盒子加个伪元素看下行盒子基线的位置
.line-box::after {
  content: 'x'
}

其实行盒子最后，会存在一个我们看不见的文本盒（w3c称作struct），
这里我们通过添加一个伪元素，添加一个字母‘x’,直观的模拟下，该文本盒也会有默认大小(除非font-size设为0)的。
所以该缝隙，就是由于文本盒本身空间所占据的。

我们试一下将图标高度变大
.icon {
    height: 100px
}
可以看见，图标高度变大，图标撑高行盒子，缝隙就不存在了。
我们也可以设置行盒子的font-size:0，文字和图标的字体大小单独设置，也会把缝隙消除。

.line-box {
   font-size: 0;
}
.label {
   font-size: 14px;
}

如果文字的font-size设置的比较大，也会把行盒子撑开

.label {
  font-size: 20px;
}