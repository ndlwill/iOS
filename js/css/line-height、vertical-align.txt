font-size 相同，font-family 不同，得到的 span 元素的高度也不同

==========line-height
继承性: 有
line-height行高是指文本行基线之间的距离。
而匿名文本是有行高的，继承父级元素设置的行高，默认为normal(即font-size的1.2倍)

###
内容区
对于行内非替换元素或匿名文本某一部分，font-size确定了内容区的高度
###
行内框
内容区加上行间距等于行内框。如果一个行内非替换元素的font-size为15px，line-height为21px，则相差6px。
用户代理将这6像素一分为二，将其一半分别应用到内容区的顶部和底部，这就得到了行内框
行框
行框定义为行中最高行内框的顶端到最低行内框底端之间的距离，而且各行框的顶端挨着上一行行框的底端

行内元素的边框边界由font-size而不是line-height控制

content-area，它的高度是由字体度量决定的，而line-box 的高度是根据子元素的高度计算出来的。

对于一个内联元素，它有两个高度：content-area（内容区高度）和vitual-area（实际高度），实际高度就是 line-height，这个高度用于计算 line-box 的高度
line-height 并非表示两个 baseline 之间的距离。

virtual-area 和 content-area 高度的差异叫做 leading。leading 的一半会被加到 content-area 顶部，另一半会被加到底部。因此 content-area 总是处于 virtual-area 的中间。

行内替换元素需要使用line-height值，从而在垂直对齐时能正确地定位元素。
对于垂直对齐来说，图像本身的高度无关紧要，关键是line-height的值
默认地，行内替换元素位于基线上。如果向替换元素增加下内边距、外边距或边框，内容区会上移。

==========vertical-align
继承性: 无
vertical-align 属性，它也是计算 line-box 高度的重要因素之一。
它的默认值是 baseline。

#####
line-box 的高度的受其子元素的 line-height 和 vertical-align 的影响
#####


vertical-align: top / bottom，表示与 line-box 的顶部或底部对齐
vertical-align: text-top / text-bottom，表示与 content-area 的顶部或底部对齐


替换元素是浏览器根据元素的标签和属性，来决定元素的具体显示内容。
img标签，只写这一个标签，不添加属性，页面上是显示不出来你要的图片的，但是我们往img标签里面添加src，这时候页面上就能显示出你要的图片，src不同，页面上显示出来的内容也就不同。
块级元素与行内替换元素是可以设置宽高的，行内非替换元素无法设置宽高


==================================================
zxx文字的高度是由行高决定的

<div style="background-color:#e5edff;"><img src="mm1.jpg"></div>
底部空白解决
1.让vertical-align失效
img { display: block; }

2.使用其他vertical-align值
告别baseline, 取用其他属性值，比方说bottom/middle/top都是可以的。

3.直接修改line-height值
下面的空隙高度，实际上是文字计算后的行高值和字母x下边缘的距离。
只要行高足够小，实际文字占据的高度的底部就会在x的上面，下面没有了高度区域支撑，自然，图片就会有容器底边贴合在一起了。
div { line-height: 5px; }

4.line-height为相对单位，font-size间接控制
本质上还是改变line-height值.
div { font-size: 0; }


垂直居中：
div { line-height: 240px; }
img { vertical-align: middle; }

效果并不是完全的垂直居中，只是近似
其垂直中心是字符content area的中心，而对于字符x而言，都是比绝对中心位置要下沉的（不同字体下沉幅度不一样），
换句更易懂的描述就是x的中心位置都是在字符内容区域高度中心点的下方，而这上下的偏差就是这里图片上下间距的偏差。
换句更简单的话说就是：middle中线位置(字符x的中心)并不是字符内容的绝对居中位置。


要想完全垂直居中，最先想到的方法就是让后面的“幽灵字符”也是vertical-align:middle，然而，呵呵，既然称之为“幽灵”就表示不会受非继承特性的属性影响，
所以，根本没法设置vertical-align:middle，除非你自己创建一个显示的内联元素。
“幽灵字符”可以受具有继承特性的CSS属性影响
让字符的中线和字符内容中心线在一起，或者说在一个位置上就可以了
font-size:0, 因此此时content area高度是0，各种乱七八糟的线都在高度为0的这条线上
div { line-height: 240px; font-size: 0; }
img { vertical-align: middle; }



<style>
	
	div{
	    font-size: 0;
	}
	
	img{
	    vertical-align: middle;
	}
	
	span{
		font-size: 20px;
		line-height: 50px;
		vertical-align: middle;
	}

</style>

<div style="background-color:#e5edff;">
	<img style="background-color: red;" width="50px;" height="50px;">
	<span style="background-color: green;">11zxx</span>
</div>

==================================================
两个同尺寸的inline-block水平元素，唯一区别就是一个空的，一个里面有字符

.dib-baseline {
  display: inline-block; width: 150px; height: 150px;
  border: 1px solid #cad5eb; background-color: #f0f3f9;
}
<span class="dib-baseline"></span>
<span class="dib-baseline">x-baseline</span>

第一个框框里面没有内联元素，因此，基线就是容器的margin下边缘，也就是下边框下面的位置；
而第二个框框里面有字符，纯正的内联元素，因此，第二个框框就是这些字符的基线，也就是字母x的下边缘了。

设置框框2的line-height值为0

框框2为何又下沉了一点吗？

因为字符实际占据的高度是由行高决定的，当行高变成0的时候，字符占据的高度也是0，
此时，高度的起始位置就变成了字符content area的垂直中心位置，于是，文字就一半落在框框2的外面了。