虽然 JavaScript 是 单线程 的，这意味着它只能在同一时间执行一个任务，但 异步编程 允许 JavaScript 在等待某些任务（如网络请求、定时器等）完成时，继续执行其他代码，最终实现多个任务“并发”执行的效果。

这个看似“并发”的执行是通过以下原理实现的：

1. 事件循环（Event Loop）
JavaScript 的异步行为背后最核心的机制是 事件循环（Event Loop）。事件循环使得 JavaScript 能够处理异步操作，即使它是单线程的。事件循环的基本流程如下：

执行栈（Call Stack）：执行当前任务的代码。每当 JavaScript 运行某段同步代码时，这段代码会被推入执行栈，等执行完毕后才会从栈中移除。
消息队列（Message Queue）：当异步操作（如 setTimeout、事件监听器等）完成时，它们的回调函数会被推入消息队列中，等待执行栈空闲时再执行。
事件循环（Event Loop）：事件循环不断检查执行栈是否为空。如果为空，它会将消息队列中的回调函数推入执行栈执行，从而继续执行异步任务。


2. 异步代码的执行过程
console.log("Start");

setTimeout(() => {
  console.log("Inside Timeout");
}, 0);

console.log("End");
执行顺序：

JavaScript 执行到 console.log("Start")，打印 "Start".
然后遇到 setTimeout，虽然指定了 0 毫秒，但它的回调函数（console.log("Inside Timeout")）被放入了消息队列中。
console.log("End") 被立即执行，打印 "End".
执行栈为空时，事件循环将消息队列中的回调函数（setTimeout）推入执行栈，执行它，打印 "Inside Timeout".
执行顺序：Start → End → Inside Timeout。

注意：即使 setTimeout 设置为 0 毫秒，回调函数仍然会被放入消息队列，等待执行栈空闲后再执行。这是因为 JavaScript 引擎需要完成当前的同步代码执行。