同源策略是什么？
如果两个 URL 的协议、端口和域名都完全一致的话，则这两个 URL 是同源的

同源：
http://www.baidu.com/s
http://www.baidu.com:80/ssss

同源：
https://www.baidu.com/s
https://www.baidu.com:443/ssss

http如果不写端口号默认是 80，https如果不写端口号默认是 443，并且不比较 / 后面的路径

只要在浏览器里打开页面，就默认遵守同源策略
优点：保证用户的隐私安全和数据安全
缺点：很多时候，前端需要访问另一个域名的后端接口，会被浏览器阻止其获取响应
比如 A 站点通过 AJAX 访问 B 站点的 /money 查询余额接口，请求会发出，但是响应会被浏览器屏蔽


怎么解决缺点？使用跨域
1.JSONP

A 站点利用 script 标签可以跨域的特性，向 B 站点发送 get 请求
B 站点后端改造 JS 文件的内容，将数据传进回调函数
A 站点通过回调函数拿到 B 站点的数据

在跨域的时候由于当前浏览器不支持 CORS或由于某些条件不支持 CORS，必须使用另外一种方式来跨域，于是我们就请求一个 JS 文件，这个 JS 文件会执行一个回调，回调里就有我们的数据。回调的名字是什么？回调名字是可以随机生成的一个随机数，然后把这个名字以 callback 的参数传给后台，后台会把这个函数再次返回给我们并执行
优点：

a. 改动比较小，只需要后端修改 JS 内容
b. 兼容 IE
c. 可以跨域，即使请求的 JSONP 不是当前的域名是另一个域名，也可以成功的跨域
缺点：

a. 没有认证，后端改了之后所有人都可以访问
b. 由于它是 script 标签，读不到 AJAX 那样精确的状态，不知道状态码是什么，也不知道响应头是什么，只知道成功和失败
c. 由于是 script 标签，它只能发 get 请求，JSONP 不支持 POST
JSONP如何定向分享？使用 request.headers["referer"]

2.CORS（Cross - Origin Resource Sharing 跨域名资源分享方案）
a. 对于简单请求（POST ｜Content-Type 是 form-data），B 站点在响应头里添加 Acess-Control-Allow-Origin:http://A站点 即可
b. 对于复杂请求（如Patch、POST ｜Content-Type是 JSON），B 站点需要：
i. 响应 OPTIONS 请求，在响应头中添加如下的响应头

Acess-Control-Allow-Origin:https://A站点
Acess-Control-Allow-Methods:POST,GET,OPTIONS,PATCH
Acess-Control-Allow-Header:Content-Type

ii. 响应 POST 请求，在响应中添加 Acess-Control-Allow-Origin 头
c. 如果需要附带身份信息，JS 中需要在 AJAX 里设置 xhr.withCredentials = true

3.Nginx 代理 / Node.js 代理