箭头（Arrow）
([param] [, param]) => { statements }
param => expression

类（class）
class Animal {
    // 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.
    constructor(name,color) {
      this.name = name;
      this.color = color;
    }
    // toString 是原型对象上的属性
    toString() {
      console.log('name:' + this.name + ',color:' + this.color);

    }
  }

 var animal = new Animal('dog','white');
 animal.toString();

 console.log(animal.hasOwnProperty('name')); //true
 console.log(animal.hasOwnProperty('toString')); // false
 console.log(animal.__proto__.hasOwnProperty('toString')); // true

 class Cat extends Animal {
  constructor(action) {
    // 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.
    // 如果没有置顶consructor,默认带super方法的constructor将会被添加、
    super('cat','white');
    this.action = action;
  }
  toString() {
    console.log(super.toString());
  }
 }

 var cat = new Cat('catch')
 cat.toString();

 // 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。
 console.log(cat instanceof Cat); // true
 console.log(cat instanceof Animal); // true


类的 prototype 属性和 __proto__ 属性:
一个实例化对象会有一个 __proto__ 指向构造函数的 prototype 属性。在 class 中。同时具有 __proto__ 和 prototype 两个属性，存在两条继承链。
1.子类的 __proto__ 属性，表示构造函数的继承，总是指向父类。
2.子类的 prototype 的 __proto__ 属性表示方法的继承，总是指向父类的 prototype 属性。
class Cat extends Animal {}
console.log(Cat.__proto__ === Animal); // true
console.log(Cat.prototype.__proto__ === Animal.prototype); // true

函数是一种特殊的对象，所有函数都是 Function 的实例
class Cat {}
console.log(Cat.__proto__ === Function.prototype); //true
console.log(Cat.prototype.__proto__ === Object.prototype); //true
由于Cat不存在任何继承，就相当于一个普通函数，由于函数都是Function 的实例，所以 Cat.\__proto__指向 Function.prototype. 第二条继承链指向父类（Function.prototype） 的prototype属性，所以 Cat.prototype.\__proto__ === Object.prototype. Cat调用后会返回Object实例，所以 A.prototype.\__proto__ 指向构造函数（Object）的prototype。


Module：
模块的功能主要由 export 和 import 组成.每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。

export var name = 'Rainbow'

//test.js
 var name = 'Rainbow';
 var age = '24';
 export {name, age};

//test.js
  export function getName() {
    return name;
  }
  export function getAge(){
   return age;
  } 
import * as test form './test.js';
通过指令 module 也可以达到整体的输入。
module test from 'test.js';

es6的一些特性，现有的浏览器是不支持的。如：import，export不支持，let，const支持。不支持的属性需用balbel或typescript将es6转换成es5，再在.html中引用转换后的文件即可。