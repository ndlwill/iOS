冒泡（由下到上）
假如用户单击了一个元素,该元素拥有一个click事件,那么同样的事件也将会被它的祖先触发,这个事件从该元素开始一直冒泡到DOM树的最上层,这一过程称为事件冒泡

捕获（由上到下）
事件捕获和事件冒泡是相反的,也就是说,当用户触发了一个事件的时候,这个事件是从DOM树的最上层开始触发一直到捕获到事件源.

事件机制分为冒泡和捕获,如果为false表示事件冒泡,为true表示事件捕获

Event对象的一些兼容写法:
阻止浏览器默认行为兼容性写法 
event.preventDefault ? event.preventDefault() : (event.returnValue = false);
阻止冒泡写法 
event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>bubble event</title>
    <style type="text/css">
        body{margin:0;}
        #one{
               width:500px;
               height:500px;
            background:rgb(255,0,0);
               border: 1px solid transparent;
        }
        #two{
            width:400px;
            height:400px;
            margin: 0 auto;
            margin-top: 50px;
            background:rgb(0,255,0);
            border: 1px solid transparent;
        }
        #three{
            width:300px;
               height:300px;
            margin: 0 auto;
            margin-top: 50px;
               background:rgb(0,0,255);
            border: 1px solid transparent;
        }
        #four{
            width:200px;
               height:200px;
               margin: 0 auto;
            margin-top: 50px;
            background:rgb(255,150,150);
        }
    </style>
</head>
<body>
    <div id='one'>
      <div id='two'>
        <div id='three'>
         <div id='four'>
          </div>
        </div>
      </div>
    </div>

    <script>
        var one = document.getElementById('one');
        var two = document.getElementById('two');
        var three = document.getElementById('three');
        var four = document.getElementById('four');

       var useCapture = true; //false为冒泡获取【目标元素先触发】    true为捕获获取【父级元素先触发】
        one.addEventListener('click', function(event) {
            event || (event = window.event);
            console.log(event);
           console.log('one');
        }, useCapture);
        two.addEventListener('click', function() {
            console.log('two');
        }, useCapture);
        three.addEventListener('click', function() {
            console.log('three');
        }, useCapture);
        four.addEventListener('click', function() {
            console.log('four');
        }, useCapture);     

        /*
        false
            冒泡
            点击four div
            输出结果：four three two one        

        true
        捕获
            点击four div
            输出结果： one two three four
       */
   </script>
</body>
</html>


如果我们未通过addEventListener()函数来绑定事件的话，若要禁止默认事件，用的就是return false; 但如果要用addEventListener()或者attachEvent()来绑定，就要用preventDefault()方法或者设置事件对象的returnValue属性。
我们需要尽量避免使用return false

在jQuery中:
例如鼠标被按下后，mousedown事件被触发。
事件先从document->ancestor element->...->parent->event.target(在此元素上按下的鼠标)->parent->...->ancestor element->document.
事件走了一个循环，从documet到event.target再回到document，从event.target到document的过程叫做冒泡。
event.stopPropagation(); // 事件停止冒泡到，即不让事件再向上传递到document，但是此事件的默认行为仍然被执行，如点击一个链接，调用了event.stopPropagation()，链接仍然会被打开。
event.preventDefault(); // 取消了事件的默认行为，如点击一个链接，链接不会被打开，但是此事件仍然会传递给更上一层的先辈元素。
在事件处理函数中使用 return false; 相当于同时调用了event.stopPropagation()和event.preventDefault()，事件的默认行为不会被执行，事件也不会冒泡向上传递。

event.preventDefault()方法并不被ie支持，在ie下需要用window.event.returnValue = false; 来实现。

function stopDefault( e ) { 
   if ( e && e.preventDefault ){ 
    e.preventDefault();  //支持DOM标准的浏览器

   } else { 
    window.event.returnValue = false;  //IE

   } 
}