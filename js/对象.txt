对象构造器
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
用大写首字母对构造器函数命名是个好习惯。

通过 new 关键词调用构造器函数可以创建相同类型的对象：
var myFather = new Person("Bill", "Gates", 62, "blue");

为对象添加方法
myFather.name = function () {
    return this.firstName + " " + this.lastName;
};


请使用对象字面量 {} 代替 new Object()。

请使用字符串字面量 "" 代替 new String()。

请使用数值字面量代替 Number()。

请使用布尔字面量代替 new Boolean()。

请使用数组字面量 [] 代替 new Array()。

请使用模式字面量代替 new RexExp()。

请使用函数表达式 () {} 代替 new Function()。

var x1 = {};            // 新对象
var x2 = "";            // 新的原始字符串
var x3 = 0;             // 新的原始数值
var x4 = false;         // 新的原始逻辑值
var x5 = [];            // 新的数组对象
var x6 = /()/           // 新的正则表达式对象
var x7 = function(){};  // 新的函数对象


JavaScript 对象原型:
您无法为已有的对象构造器添加新属性
如需向构造器添加一个新属性，则必须把它添加到构造器函数

原型继承
所有 JavaScript 对象都从原型继承属性和方法。
日期对象继承自 Date.prototype。数组对象继承自 Array.prototype。Person 对象继承自 Person.prototype。
Object.prototype 位于原型继承链的顶端：
日期对象、数组对象和 Person 对象都继承自 Object.prototype。

使用 prototype 属性
JavaScript prototype 属性允许您为对象构造器添加新属性：
function Person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";
JavaScript prototype 属性也允许您为对象构造器添加新方法：
Person.prototype.name = function() {
    return this.firstName + " " + this.lastName;
};
请只修改您自己的原型。绝不要修改标准 JavaScript 对象的原型。