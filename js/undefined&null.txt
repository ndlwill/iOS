var a = undefined;
// 或者
var a = null;
上面代码中，变量a分别被赋值为undefined和null，这两种写法的效果几乎等价。
在if语句中，它们都会被自动转为false，相等运算符（==）甚至直接报告两者相等。


Number(null) // 0
5 + null // 5
上面代码中，null转为数字时，自动变成0。


区别是这样的：null是一个表示“空”的对象，转为数值时为0；undefined是一个表示"此处无定义"的原始值，转为数值时为NaN。
Number(undefined) // NaN
5 + undefined // NaN


// 函数没有返回值时，默认返回 undefined
function f() {}
f() // undefined


除了下面六个值被转为false，其他值都视为true。
undefined
null
false
0
NaN
""或''（空字符串）


Undefined类型只有一个值，即undefined。当声明的变量还未被初始化时，变量的默认值为undefined。
Null类型也只有一个值，即null。null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。

var oValue;  
alert(oValue == undefined); //output "true"  

alert(null == document.getElementById('notExistElement'));// "true"

alert(typeof undefined); //output "undefined"  
alert(typeof null); //output "object"  

alert(null == undefined); //output "true"  
ECMAScript认为undefined是从null派生出来的，所以把它们定义为相等的。但是，如果在一些情况下，我们一定要区分这两个值
alert(null === undefined); //output "false"  
alert(typeof null == typeof undefined); //output "false"  