# Uncomment the next line to define a global platform for your project
# pod -v: 1.8.4

# Command-line Reference
# https://guides.cocoapods.org/terminal/commands.html

# The URL of a specs repository.
# source: String
# The official CocoaPods source is implicit. Once you specify another source, then it will need to be included.
source 'https://github.com/CocoaPods/Specs.git'
source 'https://github.com/ndlwill/Specs.git'

# out-of-date source repos which you can update with `pod repo update` or with `pod install --repo-update`

# Specifies the platform for which a static library should be built.
platform :ios, ‘8.0’

# Specifies the plugins that should be used during installation
# name: String options: Hash
# plugin 'cocoapods-keys', :key1 => 'Eidolon'
# plugin 'slather'


# Specifies the Xcode workspace that should contain all the projects.
# If no explicit Xcode workspace is specified and only one project exists in the same directory as the Podfile, then the name of that project is used as the workspace’s name.
# path: String
# workspace 'MyWorkspace'


# supports_swift_versions
# These requirements are inherited from the parent, if specified and if none are specified at the root level then all versions are considered to be supported.
# supports_swift_versions '>= 5.0'


target 'NDL_Category' do
  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks
  # use_frameworks!

  # xcodeproj is deprecated in 1.0 and has been renamed to project
  # Specifies the Xcode project that contains the target that the Pods library should be linked with.
  # If none of the target definitions specify an explicit project and there is only one project in the same directory as the Podfile then that project will be used.
  # project 'NDL_Category'

  # Pods for NDL_Category
pod 'SDWebImage'
pod 'YYKit'
#pod 'YYText'
#pod 'YYWebImage'
#pod 'AFNetworking'
pod 'YTKNetwork'
pod 'LKDBHelper'
pod 'PinYin4Objc', '~> 1.1.1'
pod 'AMapLocation'
pod 'SSZipArchive'
pod 'GCDWebServer'
pod 'MBProgressHUD'
pod 'DateTools'
pod 'CTMediator'
pod 'MQTTClient'

pod 'AMap3DMap'

pod 'CocoaAsyncSocket', '~> 7.6.3'

# facebook
pod 'FBMemoryProfiler'
pod 'fishhook'

pod 'FLEX', '~> 2.0', :configurations => ['Debug']
#pod 'Reveal-SDK', :configurations => ['Debug']

pod 'ReactiveObjC'
pod 'CocoaLumberjack'
pod 'FDFullscreenPopGesture'
pod 'WCDB'
pod 'PLCrashReporter'

# Subspecs
# When installing a Pod via its name, it will install all of the default subspecs defined in the podspec.
# pod 'MyKit/Sub1'
# pod 'MyKit', :subspecs => ['Sub1', 'Sub2']

# If you would like to use develop a Pod in tandem with its client project you can use the path option.
# Using the files from a local path.
# pod 'MyKit', :path => '~/Documents/MyKit'

# realm
# pod 'Realm'

# pod 'DrawLib', '~> 1.0.1'
# pod 'DrawLib', '~> 1.0.0'
pod 'DrawLib'

# =====添加本地lib develop=====
# DrawLib是DrawLib.podspec的名字  path是DrawLib.podspec相对于的路径，相对于Podfile文件的路径
#pod 'DrawLib', :path => '../../DrawLib'
end

# This hook allows you to make any changes to the Pods after they have been downloaded but before they are installed.
pre_install do |installer|
  puts "===pre_install==="
end

# This hook allows you to make any last changes to the generated Xcode project before it is written to disk, or any other tasks you might want to perform.
# https://www.rubydoc.info/gems/cocoapods
# do ~ end 部分就是所谓的块. 除 do ~ end 这一形式外, 我们也可以使用 { ~ } 这种形式
post_install do |installer|
  # show_installer installer
  
  puts "==#{installer}==" # Pod::Installer
  puts "==#{installer.pods_project}==" # Pod::Project

  project_path = 'NDL_Category.xcodeproj'    # 工程的全路径

  # pods_project -> `Pods/Pods.xcodeproj`
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      puts "config.build_settings = #{config.build_settings}"
    end
    puts "pods_project: target:#{target} target.name:#{target.name}"
  end

  puts "=============================="

=begin
Xcodeproj:
https://www.rubydoc.info/gems/xcodeproj/Xcodeproj
CocoaPods 官方提供的用于修改 xcode 工程文件的 ruby 类库

gem install xcodeproj
=end
  project = Xcodeproj::Project.open(project_path)
  puts "==#{project}==" # Xcodeproj::Project  path:`/Users/ndl/Desktop/iOS/NDL_Category/NDL_Category.xcodeproj`

  project.targets.each do |target|
    puts "project: target:#{target} target.name:#{target.name}"
    # build_phases
    if !exist_run_swiftlint_script target
      
    end


    # build_settings
    # target.build_configurations.each do |configuration|
    #   puts "==#{configuration}==" # ==Debug==, ==Release==
    #   if configuration.name == 'Debug'
    #     puts "==#{configuration.build_settings}=="
    #     # configuration.build_settings["HEADER_SEARCH_PATHS"] = "XXX"
    #   end
    # end
    
  end
  
  project.save()
end

# 判断是否已经添加了"Run SwiftLint Script"
def exist_run_swiftlint_script(target)
  target.build_phases.each do |build_phase|
    puts "build_phase: #{build_phase}"
    puts "build_phase.class: #{build_phase.class}"
    # puts "build_phase.methods: #{build_phase.methods}"
    # puts "build_phase.instance_variables: #{build_phase.instance_variables}"

    if String(build_phase) == 'Run SwiftLint Script'
      return true
    end
  end
  
  return false
end

def show_installer(installer)
  puts "##### show_installer start #####"
  
  # 为了打印的日志方便查看，使用╟符号修饰
  puts "╟ installer"
  puts "  ======== installer.instance_variables ========"
  # 获取属性名称列表，并遍历
  installer.instance_variables.each do |variableName|
    # 打印属性名称
    puts "  ╟ #{variableName}"
  end
  
  puts "  ======== installer.public_methods ========"
  # 获取方法名称列表，并遍历
  installer.public_methods.each do |method|
    # 打印方法名称
    puts "  ╟ #{method}"
  end
  puts "##### show_installer end #####"
end