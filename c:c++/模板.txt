模板是C++支持参数化多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成员函数的参数、返回值取得任意类型。
通常有两种形式：函数模板和类模板；

函数模板针对仅参数类型不同的函数；
类模板针对仅数据成员和成员函数类型不同的类。

在c++Template中非常多地方都用到了typename与class这两个关键字
class用于定义类，在模板引入c++后，最初定义模板的方法为：template，这里class关键字表明T是一个类型。
后来为了避免class在这两个地方的使用可能给人带来混淆，所以引入了typename这个关键字。它的作用同class一样表明后面的符号为一个类型。这样在定义模板的时候就能够使用以下的方式了： template.在模板定义语法中关键字class与typename的作用全然一样。

类模板的使用实际上是将类模板实例化成一个详细的类。它的格式为：类名<实际的类型>。
模板类是类模板实例化后的一个产物。

1、函数模板的格式：
函数模板能够用来创建一个通用的函数。以支持多种不同的形參。避免重载函数的函数体反复设计。
函数模板仅仅是声明了一个函数的描写叙述即模板。不是一个能够直接运行的函数，仅仅有依据实际情况用实參的数据类型取代类型參数标识符之后，才干产生真正的函数。

template <class 形参名，class 形参名，......> 返回类型 函数名(参数列表)
{
    函数体
}

函数模板的声明形式为：
template<typename（或class) T>
<返回类型><函数名>(參数表)
{
    函数体
}

<>括号中的参数叫模板形参

template <class T> void swap(T& a, T& b){}

模板函数：
模板函数的生成就是将函数模板的类型形參实例化的过程。

1、类模板的格式为：
template<class  形参名，class 形参名，…>   class 类名
{ ... };

template<class T> class A{public: T a; T b; T hy(T c, T &d);};
在类A中声明了两个类型为T的成员变量a和b，还声明了一个返回类型为T带两个参数类型为T的函数hy。
要把类模板形参调置为int 型必须这样指定A<int> m

在类模板外部定义成员函数的方法为：
template<模板形参列表> 函数返回类型 类名<模板形参名>::函数名(参数列表){函数体}，
比如有两个模板形参T1，T2的类A中含有一个void h()函数，则定义该函数的语法为：
template<class T1,class T2> void A<T1,T2>::h(){}。
注意：当在类外面定义类的成员时template后面的模板形参应与要定义的类的模板形参一致。
再次提醒注意：模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中声明或定义一个模板。

###模板的形参###
有三种类型的模板形参：类型形参，非类型形参和模板形参。

1、类型形参
类型模板形参：类型形参由关见字class或typename后接说明符构成，如template<class T> void h(T a){};其中T就是一个类型形参，类型形参的名字由用户自已确定。
模板形参表示的是一个未知的类型。模板类型形参可作为类型说明符用在模板中的任何地方，与内置类型说明符或类类型说明符的使用方式完全相同，即可以用于指定返回类型，变量声明等。

template<class T> class A{
    public:
        T g(T a,T b);
        A();
};
 
#endif
 
TemplateDemo.cpp
 
#include<iostream.h>
#include "TemplateDemo.h"
 
template<class T> A<T>::A(){}
 
template<class T> T A<T>::g(T a,T b){
    return a+b;
}
 
void main(){
    A<int> a;
    cout<<a.g(2,3.2)<<endl;
}

2、非类型形参
非类型模板形参：模板的非类型形参也就是内置类型形参，如template<class T, int a> class B{};其中int a就是非类型的模板形参。
非类型形参在模板定义的内部是常量值，也就是说非类型形参在模板的内部是常量。
非类型模板的形参只能是整型，指针和引用，像double，String, String **这样的类型是不允许的。但是double &，double *，对象的引用或指针是正确的。
调用非类型模板形参的实参必须是一个常量表达式，即他必须能在编译时计算出结果。
注意：任何局部对象，局部变量，局部对象的地址，局部变量的地址都不是一个常量表达式，都不能用作非类型模板形参的实参。全局指针类型，全局变量，全局对象也不是一个常量表达式，不能用作非类型模板形参的实参。
全局变量的地址或引用，全局对象的地址或引用const类型变量是常量表达式，可以用作非类型模板形参的实参。
当模板的形参是整型时调用该模板时的实参必须是整型的，且在编译期间是常量，比如template <class T, int a> class A{};如果有int b，这时A<int, b> m;将出错，因为b不是常量，如果const int b，这时A<int, b> m;就是正确的，因为这时b是常量。
非类型形参一般不应用于函数模板中，比如有函数模板template<class T, int a> void h(T b){}，若使用h(2)调用会出现无法为非类型形参a推演出参数的错误，对这种模板函数可以用显示模板实参来解决，如用h<int, 3>(2)这样就把非类型形参a设置为整数
非类型模板形参的形参和实参间所允许的转换
1、允许从数组到指针，从函数到指针的转换。如：template <int *a> class A{}; int b[1]; A<b> m;即数组到指针的转换
2、const修饰符的转换。如：template<const int *a> class A{}; int b; A<&b> m;   即从int *到const int *的转换。
3、提升转换。如：template<int a> class A{}; const short b=2; A<b> m; 即从short到int 的提升转换
4、整值转换。如：template<unsigned int a> class A{};   A<3> m; 即从int 到unsigned int的转换。
5、常规转换。

由用户自己亲自指定栈的大小，并实现栈的相关操作。
#ifndef TEMPLATE_DEMO_HXX
#define TEMPLATE_DEMO_HXX
 
template<class T,int MAXSIZE> class Stack{//MAXSIZE由用户创建对象时自行设置
    private:
        T elems[MAXSIZE];    // 包含元素的数组
        int numElems;    // 元素的当前总个数
    public:
        Stack();    //构造函数
        void push(T const&);    //压入元素
        void pop();        //弹出元素
        T top() const;    //返回栈顶元素
        bool empty() const{     // 返回栈是否为空
            return numElems == 0;
        }
        bool full() const{    // 返回栈是否已满
            return numElems == MAXSIZE;
        }
};
 
template <class T,int MAXSIZE> 
Stack<T,MAXSIZE>::Stack():numElems(0){     // 初始时栈不含元素
    // 不做任何事情
}
 
template <class T,int MAXSIZE>
void Stack<T, MAXSIZE>::push(T const& elem){
    if(numElems == MAXSIZE){
        throw std::out_of_range("Stack<>::push(): stack is full");
    }
    elems[numElems] = elem;   // 附加元素
    ++numElems;               // 增加元素的个数
}
 
template<class T,int MAXSIZE>
void Stack<T,MAXSIZE>::pop(){
    if (numElems <= 0) {
        throw std::out_of_range("Stack<>::pop(): empty stack");
    }
    --numElems;               // 减少元素的个数
}
 
template <class T,int MAXSIZE>
T Stack<T,MAXSIZE>::top()const{
    if (numElems <= 0) {
        throw std::out_of_range("Stack<>::top(): empty stack");
    }
    return elems[numElems-1];  // 返回最后一个元素
}
 
#endif

#include<iostream.h>
#include <iostream>
#include <string>
#include <cstdlib>
#include "TemplateDemo.h"
 
int main(){
    try {
        Stack<int,20>  int20Stack;  // 可以存储20个int元素的栈
        Stack<int,40>  int40Stack;  // 可以存储40个int元素的栈
        Stack<std::string,40> stringStack; // 可存储40个string元素的栈
 
        // 使用可存储20个int元素的栈
        int20Stack.push(7);
        std::cout << int20Stack.top() << std::endl;    //7
        int20Stack.pop();
 
        // 使用可存储40个string的栈
        stringStack.push("hello");
        std::cout << stringStack.top() << std::endl;    //hello
        stringStack.pop();    
        stringStack.pop();    //Exception: Stack<>::pop<>: empty stack
        return 0;
    }
    catch (std::exception const& ex) {
        std::cerr << "Exception: " << ex.what() << std::endl;
        return EXIT_FAILURE;  // 退出程序且有ERROR标记
    }
}

----------
#ifndef TEMPLATE_DEMO_O1
#define TEMPLATE_DEMO_01
 
template<typename T> class CompareDemo{
    public:
        int compare(const T&, const T&);
};
 
template<typename T> 
int CompareDemo<T>::compare(const T& a,const T& b){
    if((a-b)>0)
        return 1;
    else if((a-b)<0)
        return -1;
    else
        return 0;
}
 
#endif

#include<iostream.h>
#include "TemplateDemo01.h"
 
void main(){
    CompareDemo<int> cd;
    cout<<cd.compare(2,3)<<endl;
}

----------
#include<iostream.h>
 
template<typename T>
const T& max(const T& a,const T& b){
    return a>b ? a:b;
}
 
void main(){
    cout<<max(2.1,2.2)<<endl;//模板实参被隐式推演成double
    cout<<max<double>(2.1,2.2)<<endl;//显示指定模板参数。
    cout<<max<int>(2.1,2.2)<<endl;//显示指定的模板参数，会将函数函数直接转换为int。
}

###类模板的默认模板类型形参###
1、可以为类模板的类型形参提供默认值，但不能为函数模板的类型形参提供默认值。函数模板和类模板都可以为模板的非类型形参提供默认值。
2、类模板的类型形参默认值形式为：template<class T1, class T2=int> class A{};为第二个模板类型形参T2提供int型的默认值。
3、类模板类型形参默认值和函数的默认参数一样，如果有多个类型形参则从第一个形参设定了默认值之后的所有模板形参都要设定默认值，比如template<class T1=int, class T2>class A{};就是错误的，因为T1给出了默认值，而T2没有设定。
4、在类模板的外部定义类中的成员时template 后的形参表应省略默认的形参类型。比如template<class  T1, class T2=int> class A{public: void h();}; 定义方法为template<class T1,class T2> void A<T1,T2>::h(){}。

我们可以总结如下：类模板如果有多个类型形参，如果使用类型形参默认值则尽量放在参数列表的末尾，而且默认的参数类型必须相同。如果从第一个形参设定了默认值之后的所有模板形参都要设定和第一个形参同类型的默认值。