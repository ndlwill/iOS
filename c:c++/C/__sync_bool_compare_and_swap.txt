__sync_bool_compare_and_swap（原子操作）,实现无锁编程

CAS是compare and swap
在写入新值之前， 读出旧值， 当且仅当旧值与存储中的当前值一致时，才把新值写入存储
写入新值成功返回1，写入失败返回0（即旧值与存储中当前的值一致时写入成功，返回1）

#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
 
int sum = 0;
 
void* adder(void *p)
{
    for(int i = 0; i < 1000000; i++)  // 百万次
    {
        sum++;
    }
 
    return NULL;
}
 
int main()
{
    pthread_t threads[10];
 
    for(int i = 0; i < 10; i++)
    {
        pthread_create(&threads[i], NULL, adder, NULL);
    }
	
    for(int i = 0; i < 10; i++)
    {
        pthread_join(threads[i],NULL);
    }
 
	printf("sum is %d\n", sum);
}
运行了一下， 发现每次结果不一样， 并不是10000000， 原因很简单， 多线程没有同步。 结果也说明，++不是原子操作。

怎么办？ 加锁
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
 
int sum = 0;
pthread_mutex_t mutex;
 
void* adder(void *p)
{
    for(int i = 0; i < 1000000; i++)  // 百万次
    {
    	pthread_mutex_lock(&mutex);
        sum++;
		pthread_mutex_unlock(&mutex);
    }
 
    return NULL;
}
 
int main()
{
    pthread_t threads[10];
    pthread_mutex_init(&mutex, NULL);
 
    for(int i = 0; i < 10; i++)
    {
        pthread_create(&threads[i], NULL, adder, NULL);
    }
	
    for(int i = 0; i < 10; i++)
    {
        pthread_join(threads[i],NULL);
    }
 
	printf("sum is %d\n", sum);
}
多次运行发现， 结果总是10000000， 加锁了， 安全。

但是， 问题来了， 加锁效率如何， 多进程，多机器修改怎么办？  比如典型的银行卡扣款场景。 且看CAS机制
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
 
int sum = 0;
 
void* adder(void *p)
{
    int old = sum;
    for(int i = 0; i < 1000000; i++)  // 百万次
    {
        while(!__sync_bool_compare_and_swap(&sum, old, old + 1))  // 如果old等于sum, 就把old+1写入sum
        {
           old = sum; // 更新old
        }
    }
 
    return NULL;
}
 
int main()
{
    pthread_t threads[10];
    for(int i = 0;i < 10; i++)
    {
        pthread_create(&threads[i], NULL, adder, NULL);
    }
	
    for(int i = 0; i < 10; i++)
    {
        pthread_join(threads[i], NULL);
    }
 
    printf("sum is %d\n",sum);
}

结果是10000000