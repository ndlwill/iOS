美国字符集（ASCII）
如果在程序开发过程中，源代码含有 ASCII 里所没有的字符，这是比较麻烦的，许多语言（例如中文、丹麦文、法文、冰岛文、日文）无法用 ASCII 中的字符正常写出来
即使扩充到 16 位字符集，也无法将人类所知的所有字符放在同一字符集中。


C++ 的字符串模板实例化类 basic_string 中，还集合了大量的字符串处理函数，与标准容器类似。该类模板的声明如下：
template <class Ch, class Tr = char_traits <Ch>, class A=allocator <Ch>> class std::basic_string
{
    public:
    ...
}
第一个参数（class Ch）是说明单个字符（Ch）所属型别（class）
第二个参数（class Tr = char_traits <Ch>）是特性类别，用以提供字符串类别中的所有字符核心操作。
该特性类别规定了“复制字符”或“比较字符”的做法；如果不指定该特性类别，系统会根据现有的字符型别采用默认的特性类别。
第三个参数带有默认值（class A = allocator<Ch>），用以定义字符串类别所采用的内存模式，通常设定为“默认内存模型 allocator”。

该模板及其相关功能都定义在名称空间 std 中，由头文件 <string> 给出，其中包含了两个定义类型，可以为最常用的串类型提供便于使用的名称，即 C++ STL 提供了两个 basic_string<> 实例化版本：
typedef basic_string <char> string;
typedef basic_string <wchar> wstring;
其中，wstring 类是为了便于使用宽字符集，例如 Unicode 或某些欧洲字符集。

basic_string 和 vector 类似，而 basic_string 还提供典型的字符串操作，例如子串检索。

basic_string 除支持最简单的 basic_string <char> 之外，还支持许多不同种类的字符串，例如：
typedef basic_string <unsigned char> Ustring;
tyepdef basic_string <Jchar> Jstring; //日文字符串