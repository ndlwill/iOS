C语言中的函数就是面向对象中的"方法"

C++语言在C语言的基础上添加了面向对象编程和泛型编程的支持
C++是以C语言为基础的，并且完全兼容C语言的特性。

#include<iostream>
C++头文件为什么没有.h
有些C语言的头文件被转换为C++的头文件，这些文件被重新命名，丢掉了扩展名.h(使之成为C++风格头文件)，并在文件名称前面加上前缀C(表明来自C语言)。例如C++版本的math.h为cmath.


面向对象三大特性：
封装
把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。
类将成员变量和成员函数封装在类的内部，根据需要设置访问权限，通过成员函数管理内部状态。

继承
继承所表达的是类之间相关的关系，这种关系使得对象可以继承另外一类对象的特征和能力
继承的作用：避免公用代码的重复开发，减少代码和数据冗余。

多态
多态性可以简单地概括为“一个接口，多种方法”，字面意思为多种形态。程序在运行时才决定调用的函数，它是面向对象编程领域的核心概念。



如果 C++ 文件中包含了 C 的头文件，需要使用 extern "C" 声明，以便正确处理 C 和 C++ 的函数命名规则
#ifdef __cplusplus
extern "C" {
#endif

// C 函数声明

#ifdef __cplusplus
}
#endif


C 和 C++ 在函数命名规则上有一些不同之处。主要的区别在于 C++ 支持函数重载和命名空间，因此编译器需要生成能够区分不同函数的唯一名称。
C 的函数命名规则:
基本形式： C 函数的名称是由字母、数字和下划线组成的标识符，且必须以字母或下划线开头。
不支持函数重载： C 不支持函数重载，即相同名称的函数在同一作用域内只能定义一次。

C++ 的函数命名规则:
基本形式： C++ 函数的名称也是由字母、数字和下划线组成的标识符，且必须以字母或下划线开头。
支持函数重载： C++ 支持函数重载，允许定义多个同名函数，只要它们的参数列表不同。编译器根据函数的参数类型和个数生成唯一的函数名。
支持命名空间： C++ 引入了命名空间的概念，允许将函数、类等放置在命名空间中，以防止命名冲突。

// C++ 函数重载示例
int add(int a, int b) {
    return a + b;
}

double add(double a, double b) {
    return a + b;
}


在 C++ 中，extern "C" 用于指定函数以 C 语言的方式进行链接，这对于与 C 语言代码进行交互非常有用，因为 C++ 和 C 语言有一些链接规则的不同。
#include <iostream>

// 声明一个 C++ 函数
void cppFunction() {
    std::cout << "This is a C++ function." << std::endl;
}

// 使用 extern "C" 包裹，告诉编译器按 C 语言的规则进行链接
extern "C" {
    // 声明一个函数，使用 C 语言的命名规则
    void cFunction() {
        std::cout << "This is a C function." << std::endl;
    }
}

int main() {
    cppFunction(); // 调用 C++ 函数
    cFunction();   // 调用 C 函数

    return 0;
}

这样，即使在 C++ 中定义，cFunction 可以在 C 代码中调用，而不会受到 C++ 的函数签名和名字修饰的影响。这对于实现 C++ 和 C 之间的接口非常有用。