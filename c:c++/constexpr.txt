if constexpr（C++17）
用于编译期条件判断，减少模板特化的需求。

std::is_integral_v 是 C++17 引入的。
它是 std::is_integral<T>::value 的简写，属于 C++17 的变量模板（variable template），目的是让 type_traits 使用更加简洁。
C++17 之前（传统写法）
在 C++11 或 C++14 中，你必须使用 ::value
#include <type_traits>
#include <iostream>
int main() {
    std::cout << std::boolalpha;
    std::cout << std::is_integral<int>::value << std::endl;  // 输出 true
    std::cout << std::is_integral<float>::value << std::endl; // 输出 false
}


template <typename T>
void printType(T val) {
    if constexpr (std::is_integral_v<T>) {
        std::cout << "Integer: " << val << std::endl;
    } else {
        std::cout << "Other type: " << val << std::endl;
    }
}

int main() {
    printType(42);      // 输出: Integer: 42
    printType(3.14);    // 输出: Other type: 3.14
}

代替模板特化，提高代码可读性
编译时分支优化



C++11
引入了 constexpr 关键字，允许定义 编译期常量 的函数和变量。
但 限制非常严格，constexpr 函数只能包含单一的 return 语句，不能使用 if、for、while 等控制语句。
constexpr int square(int x) { return x * x; } // 仅能包含单一 return 语句
constexpr int y = square(4); // 编译期计算


C++14
放宽了 constexpr 函数的限制，允许使用 局部变量、循环和条件判断。
constexpr 变量可以是 constexpr 结构体的成员。
constexpr int factorial(int n) {
    int result = 1;
    for (int i = 2; i <= n; ++i) {
        result *= i;
    }
    return result;
}


C++17
constexpr 变量默认是 内联（inline） 的，不需要再写 inline constexpr。
允许 constexpr 变量在类内部声明并初始化。
struct Config {
    static constexpr int value = 42; // 允许 constexpr 成员变量
};