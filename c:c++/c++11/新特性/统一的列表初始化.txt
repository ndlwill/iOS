1.{}初始化
在C++98中，标准允许使用大括号{}对数组或者结构体元素进行统一的列表初始值设定

struct Point
{
 	int _x;
 	int _y;
};
int main()
{
 	int array1[] = { 1, 2, 3, 4, 5 };
 	int array2[5] = { 0 };
 	Point p = { 1, 2 };
	return 0; 
}

C++11扩大了用大括号括起的列表(初始化列表)的使用范围，使其可用于所有的内置类型和用户自定义的类型，使用初始化列表时，可添加等号(=)，也可不添加
struct Point
{
 	int _x;
 	int _y;
};
int main()
{
 	int x1 = 1;
	int x2{ 2 };
 	int array1[]{ 1, 2, 3, 4, 5 };
 	int array2[5]{ 0 };
 	Point p{ 1, 2 };
 	// C++11中列表初始化也可以适用于new表达式中
 	int* pa = new int[4]{ 0 };
 	return 0; 
}

创建对象时也可以使用列表初始化方式调用构造函数初始化
class Date
{
public:
 	Date(int year, int month, int day)
 	:_year(year)
 	,_month(month)
 	,_day(day)
 	{
 		cout << "Date(int year, int month, int day)" << endl;
 	}
private:
 	int _year;
 	int _month;
 	int _day;
 };
 
 int main()
{
 	// C++11支持的列表初始化，这里会调用构造函数初始化
 	Date d2{ 2022, 1, 2 };
 	Date d3 = { 2022, 1, 3 };
 	return 0; 
}

2.std::initializer_list
对于在容器中插入一些值，例如在vector中插入值时，用到了push_back，但是要插入多个值时，需要用多个push_back
所以C++11中，就可以对vector等容器一次性赋值，就类似于数组的初始化，比如：vector< int > a = {1,2,3,4,5}
这就跟initializer_list有关
initializer_list在C++里面是一个容器，是原生支持的一个容器

将{10, 20, 30}就认为它的类型是initializer_list
initializer_list还支持迭代器等功能
int main()
{
	initializer_list<string> lt = { "hello", "feng", "lei" };
	for (auto item : lt)
	{
		cout << item << " ";
	}
	cout << endl;
}

不仅vector支持用{ }初始化，其他STL容器也支持，就是因为它们都提供了支持initializer_list的构造函数
initializer_list也可以作为operator=的参数，这样就可以用大括号赋值