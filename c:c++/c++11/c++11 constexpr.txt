它用于声明常量表达式，意味着该变量或函数的值在编译时可以被计算出来，而不是在运行时计算。
这不仅有助于提高程序的性能，还能增加代码的可读性和可维护性。

constexpr 的作用:
常量表达式：用于声明编译时就能求值的常量。
编译时计算：如果一个变量或函数被声明为 constexpr，编译器可以在编译阶段计算其值，减少运行时开销。
优化性能：可以将计算提前到编译时进行，减少运行时计算负担。
函数限制：constexpr 函数只能包含一个 return 语句，且只能调用其它 constexpr 函数或者常量。


1. constexpr 变量
constexpr 变量必须在编译时能确定其值，因此不能被修改。

#include <iostream>

constexpr int square(int x) {
    return x * x;  // 编译时计算
}

int main() {
    constexpr int num = 5;
    constexpr int result = square(num);  // 编译时求值
    std::cout << "Square of " << num << " is " << result << std::endl;
    return 0;
}
num 和 result 都是常量，因此编译器在编译阶段就能计算出 result 的值，而不是在运行时计算。


2. constexpr 函数
#include <iostream>

constexpr int factorial(int n) {
    return (n == 0) ? 1 : n * factorial(n - 1);
}

int main() {
    constexpr int result = factorial(5);  // 编译时求值
    std::cout << "Factorial of 5 is " << result << std::endl;
    return 0;
}


3. constexpr 与 const 的区别
const：声明的是常量，但它的值可以在运行时确定。const 变量通常是在运行时初始化。
constexpr：要求变量或函数的值在编译时就能确定，通常用于编译时常量。

const int x = 5;       // 运行时常量
constexpr int y = 5;   // 编译时常量


4. C++14 中的改进
constexpr 进行了扩展，允许 constexpr 函数中使用更复杂的控制流，如 if 语句和 for 循环等

#include <iostream>

constexpr int power(int base, int exponent) {
    int result = 1;
    for (int i = 0; i < exponent; ++i) {
        result *= base;
    }
    return result;
}

int main() {
    constexpr int value = power(2, 10);  // 编译时计算
    std::cout << "2 raised to power 10 is " << value << std::endl;
    return 0;
}
