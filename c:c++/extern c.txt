#ifdef __cplusplus
extern "C" {
#endif
 
/*...*/
 
#ifdef __cplusplus
}
#endif

因为C语言中不支持extern "C"的声明，所以如果在.c文件中包含了extern "C"时，编译出错，所以我们需要用条件编译来避免。

#ifndef xdx 
#define xdx 
/*……………………………*/ 
#endif /* xdx */

=====extern 关键字:
项目中必须保证函数，变量，枚举等在所有源文件中保持一致，除非你指定定义为局部的。

//file1.c:
    int x=1;
    int f(){do something here}
//file2.c:
    extern int x;
    int f();
    void g(){x=f();}

复制代码在file2.c中g()使用的x和f()是定义在file1.c中的。
extern关键字表明file2.c中x，仅仅是一个变量的声明，其并不是在定义变量x，并未为x分配内存空间。
变量x在所有模块中作为一种全局变量只能被定义一次，否则会出现连接错误。但是可以声明多次，且声明必须保证类型一致
该关键字告诉编译器，其声明的函数和变量可以在本模块或其它模块中使用。
通常，在模块的头文件中对本模块提供给其它模块引用的函数和全局变量以关键字extern声明。

与extern对应的关键字是 static，被它修饰的全局变量和函数只能在本模块中使用。

====="C"
使用extern指定一个编译和连接规约。例如，声明C和C++标准库函数strcyp()，并指定它应该根据C的编译和连接规约来链接：

extern "C" char* strcpy(char*,const char*);
注意它与下面的声明的不同之处：
extern char* strcpy(char*,const char*);
下面的这个声明仅表示在连接的时候调用strcpy()。

注意：extern "C"指令中的C，表示的一种编译和连接规约，而不是一种语言。C表示符合C语言的编译和连接规约的任何语言，如Fortran、assembler等。

extern "C"的真实目的是实现类C和C++的混合编程
在C++ 源文件中的语句前面加上extern "C"，表明它按照类C的编译和连接规约来编译和连接，而不是C++ 的编译的连接规约。

C++的编译和连接:
C++ 是一个面向对象语言（虽不是纯粹的面向对象语言），它支持函数的重载，重载这个特性给我们带来了很大的便利。为了支持函数重载的这个特性，C++ 编译器实际上将下面这些重载函数：
void print(int i);
void print(char c);
void print(float f);
void print(char* s);
编译为：
_print_int
_print_char
_print_float
_pirnt_string
这样的函数名，来唯一标识每个函数。
注：不同的编译器实现可能不一样，但是都是利用这种机制。所以当连接是调用print(3)时，它会去查找_print_int(3)这样的函数。
正是因为这点，重载被认为不是多态，多态是运行时动态绑定（“一种接口多种实现”），如果硬要认为重载是多态，它顶多是编译时“多态”。
C++ 中的变量，编译也类似，如全局变量可能编译g_xx，类变量编译为c_xx等。连接是也是按照这种机制去查找相应的变量。

C的编译和连接:
C语言中并没有重载和类这些特性，故并不像C++ 那样print(int i)，会被编译为 _print_int，而是直接编译为_print等。因此如果直接在C++中调用C的函数会失败，因为连接是调用C中的print(3)时，它会去找_print_int(3)。因此extern "C"的作用就体现出来

C++中调用C的代码:
假设一个C的头文件cHeader.h中包含一个函数print(int i)，为了在C++中能够调用它，必须要加上extern关键字
#ifndef C_HEADER
#define C_HEADER
extern void print(int i);
#endif C_HEADER

相对应的实现文件为cHeader.c的代码为：
#include <stdio.h>
#include "cHeader.h"
void print(int i)
{
    printf("cHeader %d\n",i);
}

现在C++ 的代码文件C++.cpp中引用C中的print(int i)函数：
extern "C"{
#include "cHeader.h"
}
 
int main(int argc,char** argv)
{
    print(3);
    return 0;
}

C中调用C++的代码:
如下在cppHeader.h头文件中定义了下面的代码：
#ifndef CPP_HEADER
#define CPP_HEADER
extern "C" void print(int i);
#endif CPP_HEADER

相应的实现文件cppHeader.cpp文件中代码如下：
#include "cppHeader.h"
 
#include <iostream>
using namespace std;
void print(int i)
{
    cout<<"cppHeader "<<i<<endl;
}

在C的代码文件c.c中调用print函数：
extern void print(int i);
int main(int argc,char** argv)
{
    print(3);
    return 0;
}
注意在C的代码文件中直接#include "cppHeader.h"头文件，编译出错。而且如果不加extern int print(int i)编译也会出错。