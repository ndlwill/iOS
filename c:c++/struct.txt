document.designMode = "on" 解决免登陆复制代码 


C++中的struct对C中的struct进行了扩充

struct能包含成员函数
struct能继承
struct能实现多态
它和class还能有什么区别？
最本质的一个区别就是默认的访问控制，体现在两个方面：
1）默认的继承访问权限。struct是public的，class是private的。

struct A{
	char a;
}；

struct B : A{
	char b;
}；
这个时候B是public继承A的。如果都将上面的struct改成class，那么B是private继承A的。
这就是默认的继承访问权限。所以我们在平时写类继承的时候，通常会这样写：

struct B : public A
到底默认是public继承还是private继承，取决于子类而不是基类。

struct可以继承class，同样class也可以继承struct
struct A{}；

class B : A{}; //private继承

struct C : B{}； //public继承


2）struct作为数据结构的实现体，它默认的数据访问控制是public的，而class作为对象的实现体，它默认的成员变量访问控制是private的。
依旧强调struct是一种数据结构的实现体，虽然它是可以像class一样的用
我依旧将struct里的变量叫数据，class内的变量叫成员，虽然它们并无区别。
当你觉得你要做的更像是一种数据结构的话，那么用struct，如果你要做的更像是一种对象的话，那么用class。


struct A //定义一个struct
{
	char c1;
	int n2;
	double db3;
};
A a={'p',7,3.1415926}; //定义时直接赋值
也就是说struct可以在定义的时候用{}赋初值。

向上面的struct中加入一个构造函数（或虚函数）
struct也不能用{}赋初值了。
以{}的方式来赋初值，只是用一个初始化列表来对数据进行按顺序的初始化，如上面如果写成
A a={'p',7};
则c1,n2被初始化，而db3没有。
加入一个构造函数或是一个虚函数会使struct更体现出一种对象的特性，而使此{}操作不再有效。
事实上，是因为加入这样的函数，使得类的内部结构发生了变化。

而加入一个普通的成员函数呢？你会发现{}依旧可用。
其实你可以将普通的函数理解成对数据结构的一种算法，这并不打破它数据结构的特性。

那为什么我们在上面仅仅将struct改成class，{}就不能用了呢？其实问题恰巧是我们之前所讲的——访问控制
将struct改成class的时候，访问控制由public变为private了，那当然就不能用{}来赋初值了。加上一个public，你会发现，class也是能用{}的
class A{ //定义一个class
public:
	char c1;
	int n2;
	double db3;
};

A a={'p',7,3.1415926}; //定义时直接赋值