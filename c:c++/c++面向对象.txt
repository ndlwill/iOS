==================================================
友元
内部类与局部类
运算符重载
仿函数（函数对象）
智能指针（Smart Pointer）
模板（template）
类型转换

==================================================
继承
多态
静态成员（static）
const成员
引用类型成员

==================================================

变量名规范参考:
全局变量：g_
成员变量：m_
静态变量：s_
常量：c_

C语言struct只有变量
C++语言struct 既有变量，也有函数

public：公共的，任何地方都可以访问（struct默认）
protected：子类内部、当前类内部可以访问
private：私有的，只有当前类内部可以访问（class默认）

开发中用的最多的继承方式是public，这样能保留父类原来的成员访问权限

子类内部访问父类成员的权限，是以下2项中权限最小的那个:
成员本身的访问权限
上一级父类的继承方式

构造函数 和 析构函数
这两个函数将会被编译器自动调用，完成对象初始化和对象清理工作


构造函数的分类及调用
按参数类型:
分为无参构造函数 和 有参构造函数
按类型分类:
普通构造函数 和 拷贝构造函数(复制构造函数)
class Person{
 public:
     Person(){
         cout<< "no param constructor!" << endl;
         mAge= 0;
     }
     //有参构造函数
     Person(int age){
         cout<< "1 param constructor!" << endl;
         mAge= age;
     }
     //拷贝构造函数(复制构造函数) 使用另一个对象初始化本对象
     Person(const Person& person){
         cout<< "copy constructor!" << endl;
         mAge= person.mAge;
     }
     //打印年龄
     void PrintPerson(){
         cout<< "Age:" << mAge << endl;
     }
     private:
         int mAge;
 };

//调用无参构造函数
Person person1; // Person p(); 这样是错的，是函数声明，它被解析为声明一个返回类型为 Person、参数为空的函数 p

//调用有参构造函数 第一种 括号法
Person person01(100);
//第二种 匿名对象(显示调用构造函数)
Person(200);
//第三种 =号法 隐式转换
Person person04 = 100; //Person person04 =  Person(100)
//调用拷贝构造函数
Person person02(person01);
//调用拷贝构造
Person person05 = person04; //Person person05 =  Person(person04)


注意: 不能调用拷贝构造函数去初始化匿名对象,也就是说以下代码不正确
class Teacher{
    public:
        Teacher(){
            cout<< "默认构造函数!" << endl;
        }

        Teacher(const Teacher& teacher) {
            cout<< "拷贝构造函数!" << endl;
        }
    public:
        int mAge;
 };

 void test(){
     Teacher t1;
     //error C2086:“Teacher t1”: 重定义
     Teacher(t1);  //此时等价于 Teacher t1;// 当没有变量来接的时候，编译器认为你A(b) 等价于 A b，这边的b是个##对象##的情况
 }


在 C++ 中，class 声明的对象既可以是值类型，也可以是引用类型，具体取决于你是怎么声明的。
当你声明一个 Person 类型的对象时（例如 Person p;），它是一个值类型对象。
这意味着它会在栈上分配内存，并且生命周期与其作用域绑定。此对象会通过拷贝构造函数来复制。

如果你声明的是一个指针（例如 Person *p1;），那么你实际上是在声明一个指向 Person 类对象的引用。
你需要通过动态内存分配（如 new）来创建实际的对象，而指针本身则位于栈上。
在 Swift 和 Objective-C 中，所有的类对象都是引用类型，即使是你直接声明一个变量，它其实是一个指向对象的引用。


构造函数和其他函数不同，除了有名字，参数列表，函数体之外还有初始化列表。
//初始化列表方式初始化
Person(int a, int b, int c):mA(a),mB(b),mC(c){}
注意：初始化成员列表(参数列表)只能在构造函数使用。


匿名对象：
Car(10);// Car(int price);


==================================================拷贝构造函数（Copy Constructor）的调用时机:
拷贝构造函数的格式是固定的，接收一个const引用作为参数

对象以值传递的方式传给函数参数
函数局部对象以值传递的方式从函数返回
用一个对象初始化另一个对象


==================================================构造函数调用规则
默认情况下，C++编译器至少为我们写的类增加3个函数
1．默认构造函数(无参，函数体为空)
2．默认析构函数(无参，函数体为空)
3．默认拷贝构造函数，对类中非静态成员属性简单值拷贝

如果用户定义拷贝构造函数，C++不会再提供任何默认构造函数
如果用户定义了普通构造(非拷贝)，C++不再提供默认无参构造，但是会提供默认拷贝构造


==================================================深拷贝和浅拷贝
编译器默认的提供的拷贝是浅拷贝（shallow copy）
将一个对象中所有成员变量的值拷贝到另一个对象
如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间（两个指针变量将指向同一块内存。）
可能会导致堆空间多次free的问题

如果需要实现深拷贝（deep copy），就需要自定义拷贝构造函数
将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间

==================================================explicit关键字
声明为explicit的构造函数不能在隐式转换中使用
explicit用于修饰构造函数,防止隐式转化
是针对单参数的构造函数(或者除了第一个参数外其余参数都有默认值的多参构造)而言

class MyClass {
public:
    MyClass(int x) { }
};
MyClass obj = 5;  // 隐式调用 MyClass(int)，隐式构造的现象

如果你不希望这样发生，可以使用 explicit 来标记构造函数，避免它在隐式类型转换时被调用：
class MyClass {
public:
    explicit MyClass(int x) { }
};


==================================================对象相关
C 提供了动态内存分配（dynamic memory allocation）
函数 malloc 和 free 可以 在运行时从堆中分配存储单元
然而这些函数在 C++ 中不能很好的运行，因为它不能帮我们完成对象的初始化工作。

堆空间的申请\释放
malloc \ free
new \ delete
new [] \ delete []

申请堆空间成功后，会返回那一段内存空间的地址
申请和释放必须是1对1的关系，不然可能会存在内存泄露


memset函数是将较大的数据结构（比如对象、数组等）内存清零的比较快的方法


如果函数声明和实现是分离的：
初始化列表只能写在函数的实现中
默认参数只能写在函数的声明中


构造、析构顺序：
构造 先父后子
析构 先子后父


==================================================委托构造函数
在C++中，构造函数是可以相互调用的，通常这通过 委托构造函数（constructor delegation）来实现。
从C++11开始，C++支持构造函数之间的委托，即一个构造函数可以调用另一个构造函数。

一个构造函数可以调用同一类中的其他构造函数。

#include <iostream>
using namespace std;

class MyClass {
public:
    MyClass(int x) {
        cout << "MyClass(int) called with x = " << x << endl;
    }
    
    // 委托构造函数
    MyClass() : MyClass(10) {  // 调用 MyClass(int)
        cout << "MyClass() called" << endl;
    }
};

int main() {
    MyClass obj1;  // 会调用 MyClass(), 然后 MyClass(10)
    return 0;
}


MyClass(int) called with x = 10
MyClass() called

规则：
委托只能发生在构造函数的初始化列表中，你不能在构造函数体内调用另一个构造函数。
构造函数可以通过委托调用多个不同的构造函数
每个构造函数最终必须有一个实际的实现，即便它通过委托调用了其他构造函数。


==================================================父类的构造函数
子类的构造函数默认会调用父类的无参构造函数
如果子类的构造函数显式地调用了父类的有参构造函数，就不会再去默认调用父类的无参构造函数
如果父类缺少无参构造函数，子类的构造函数必须显式调用父类的有参构造函数

#include <iostream>
using namespace std;

class Base {
public:
    Base() {
        cout << "Base class constructor" << endl;
    }
};

class Derived : public Base {
public:
    Derived() {
        cout << "Derived class constructor" << endl;
    }
};

int main() {
    Derived obj;  // 调用 Derived()，并自动调用 Base() 的无参构造函数
    return 0;
}

Base class constructor
Derived class constructor



#include <iostream>
using namespace std;

class Base {
public:
    Base(int x) {
        cout << "Base class constructor with argument: " << x << endl;
    }
};

class Derived : public Base {
public:
    Derived() : Base(10) {  // 显式调用父类的构造函数
        cout << "Derived class constructor" << endl;
    }
};

int main() {
    Derived obj;  // 会调用 Base(10)
    return 0;
}

Base class constructor with argument: 10
Derived class constructor


==================================================调用父类的拷贝构造函数

#include <iostream>
using namespace std;

class Base {
public:
    int value;
    Base(int v) : value(v) {
        cout << "Base class constructor, value: " << value << endl;
    }

    // 父类的拷贝构造函数
    Base(const Base &b) : value(b.value) {
        cout << "Base class copy constructor, value: " << value << endl;
    }
};

class Derived : public Base {
public:
    int derivedValue;

    // 子类的构造函数
    Derived(int v1, int v2) : Base(v1), derivedValue(v2) {
        cout << "Derived class constructor, derivedValue: " << derivedValue << endl;
    }

    // 子类的拷贝构造函数
    Derived(const Derived &d) : Base(d), derivedValue(d.derivedValue) {  // 显式调用父类的拷贝构造函数
        cout << "Derived class copy constructor, derivedValue: " << derivedValue << endl;
    }
};

int main() {
    Derived d1(10, 20);  // 创建一个 Derived 对象
    Derived d2 = d1;      // 使用拷贝构造函数

    return 0;
}

Base class constructor, value: 10
Derived class constructor, derivedValue: 20
Base class copy constructor, value: 10
Derived class copy constructor, derivedValue: 20

调用父类的拷贝构造函数是必须的：如果子类没有显式调用父类的拷贝构造函数，编译器会自动调用父类的拷贝构造函数
如果没有需要特殊处理的父类数据成员，编译器通常会为你生成一个默认的拷贝构造函数，这个函数会简单地拷贝父类的成员数据。


==================================================拷贝赋值操作符
Car car(10);// 调用 Car(int) 构造函数
Car car1 = car;// 调用拷贝构造函数
Car car3(car);   // 调用拷贝构造函数
Car car2;// 调用 Car() 默认构造函数
car2 = car;// 调用拷贝赋值操作符 - 拷贝赋值操作符（copy assignment operator）,这种赋值操作并不会调用拷贝构造函数

拷贝构造函数只在对象被初始化时调用，而拷贝赋值操作符是在已有对象赋值时调用。


#include <iostream>
using namespace std;

class Car {
public:
    int speed;

    Car(int s) : speed(s) {
        cout << "Car(int) constructor called with speed = " << speed << endl;
    }

    Car() : speed(0) {
        cout << "Car() default constructor called" << endl;
    }

    // 拷贝构造函数
    Car(const Car& other) : speed(other.speed) {
        cout << "Car copy constructor called, speed = " << speed << endl;
    }

    // 拷贝赋值操作符
    Car& operator=(const Car& other) {
        if (this != &other) {  // 防止自赋值
            speed = other.speed;
            cout << "Car copy assignment operator called, speed = " << speed << endl;
        }
        return *this;
    }
};

int main() {
    Car car(10);      // 调用 Car(int) 构造函数
    Car car1;         // 调用 Car() 默认构造函数
    car1 = car;       // 调用拷贝赋值操作符

    return 0;
}


car1 = car; 如果你没有定义自定义的拷贝赋值操作符，它会使用默认的浅拷贝行为。

在默认情况下，编译器会生成一个 浅拷贝赋值操作符，它会逐个成员地将源对象的成员值拷贝到目标对象中。
当一个类中包含指针成员时，默认的浅拷贝行为会导致源对象和目标对象共享同一个内存区域，而不会创建新的内存副本。

浅拷贝赋值操作符
#include <iostream>
using namespace std;

class Car {
public:
    int *speed;  // 动态分配内存

    Car(int s) {
        speed = new int(s);  // 动态分配内存
        cout << "Car constructor, speed = " << *speed << endl;
    }

    // 默认拷贝赋值操作符：浅拷贝
    Car& operator=(const Car& other) {
        if (this != &other) {// 避免自赋值
            speed = other.speed;  // 只是复制了指针，指向同一块内存
        }
        return *this;
    }

    ~Car() {
        delete speed;  // 释放内存
    }
};

int main() {
    Car car(10);    // 创建 car 对象
    Car car1(20);   // 创建 car1 对象
    car1 = car;     // 浅拷贝赋值

    cout << "car1.speed = " << *car1.speed << endl;  // 输出 car1 的 speed
    cout << "car.speed = " << *car.speed << endl;    // 输出 car 的 speed

    return 0;
}

car1 = car; 赋值操作并没有创建新的内存副本，而是 直接将 car 对象的 speed 指针复制给了 car1。
这样，car1 和 car 共享同一块内存区域（指向同一地址），即它们指向同一块内存。因此修改其中一个对象的 speed，另一个对象也会受到影响。
由于拷贝赋值操作符只进行了浅拷贝，car1 和 car 共享同一个 speed 指针。如果 car 和 car1 中的任何一个对象被销毁，它们的 speed 指针都会被删除，从而导致双重删除错误。
浅拷贝的问题：
悬空指针：如果在析构函数中删除指针并且多个对象共享这个指针，可能会导致悬空指针问题。因为另一个对象的指针依然指向已经删除的内存区域。
双重删除（Double delete）：如果两个对象共享同一块内存，且它们都尝试删除该内存，就会发生“双重删除”错误。


解决办法：深拷贝
为了避免浅拷贝带来的问题，通常会重载拷贝赋值操作符，手动实现深拷贝。深拷贝会确保每个对象有独立的内存副本，而不是共享内存。

#include <iostream>
using namespace std;

class Car {
public:
    int *speed;

    Car(int s) {
        speed = new int(s);
        cout << "Car constructor, speed = " << *speed << endl;
    }

    // 深拷贝赋值操作符
    Car& operator=(const Car& other) {
        if (this != &other) {
            delete speed;  // 释放原来占用的内存
            speed = new int(*other.speed);  // 为新的对象分配独立的内存，并复制数据
        }
        return *this;
    }

    ~Car() {
        delete speed;  // 释放内存
    }
};

int main() {
    Car car(10);    // 创建 car 对象
    Car car1(20);   // 创建 car1 对象
    car1 = car;     // 使用深拷贝赋值

    cout << "car1.speed = " << *car1.speed << endl;  // 输出 car1 的 speed
    cout << "car.speed = " << *car.speed << endl;    // 输出 car 的 speed

    return 0;
}


深拷贝与浅拷贝的区别：
浅拷贝：源对象和目标对象共享同一内存（如指针成员）。
深拷贝：每个对象都拥有自己独立的内存，避免了共享内存所带来的问题。


如果int speed
浅拷贝赋值操作符也没问题


==================================================将对象传递给函数或者从函数返回一个对象
当你将对象传递给函数或者从函数返回一个对象时，通常会涉及对象的 拷贝构造函数 或 拷贝赋值操作符，取决于是传值（pass-by-value）还是传引用（pass-by-reference）

1. 将对象传递给函数（按值传递）
#include <iostream>
using namespace std;

class Car {
public:
    int speed;

    Car(int s) : speed(s) {
        cout << "Car constructor, speed = " << speed << endl;
    }

    // 拷贝构造函数
    Car(const Car& other) : speed(other.speed) {
        cout << "Car copy constructor, speed = " << speed << endl;
    }

    ~Car() {
        cout << "Car destructor, speed = " << speed << endl;
    }
};

// 函数按值传递对象
void processCar(Car car) {
    cout << "Inside processCar, speed = " << car.speed << endl;
}

int main() {
    Car car(10);   // 创建 car 对象
    processCar(car);  // 将 car 对象按值传递给函数
    return 0;
}

Car constructor, speed = 10
Car copy constructor, speed = 10
Inside processCar, speed = 10
Car destructor, speed = 10
Car destructor, speed = 10


2. 从函数返回对象（按值返回）
#include <iostream>
using namespace std;

class Car {
public:
    int speed;

    Car(int s) : speed(s) {
        cout << "Car constructor, speed = " << speed << endl;
    }

    // 拷贝构造函数
    Car(const Car& other) : speed(other.speed) {
        cout << "Car copy constructor, speed = " << speed << endl;
    }

    ~Car() {
        cout << "Car destructor, speed = " << speed << endl;
    }
};

// 函数返回对象
Car createCar() {
    Car car(10);
    cout << "Returning car from createCar" << endl;
    return car;  // 返回一个对象，触发拷贝构造函数
}

int main() {
    Car car = createCar();  // 从函数返回对象
    return 0;
}

Car constructor, speed = 10
Returning car from createCar
Car copy constructor, speed = 10
Car destructor, speed = 10
Car destructor, speed = 10

按值传递和返回对象时，通常会调用拷贝构造函数来创建对象的副本。


按引用传递：
void processCar(const Car& car) {  // 传递引用，不会进行拷贝构造
    cout << "Inside processCar, speed = " << car.speed << endl;
}
按引用传递对象不会触发拷贝构造函数，从而避免了不必要的拷贝。


==================================================自动生成的构造函数
编译器自动生成的构造函数

C++的编译器在某些特定的情况下，会给类自动生成无参的构造函数，比如
没有构造函数时自动生成无参构造函数
显式定义构造函数时，自动生成的无参构造函数失效
成员没有默认构造函数时，编译器不生成无参构造函数


==================================================面向对象模型
C++类对象中的变量和函数是分开存储：
静态数据成员并不保存在类对象中
非静态成员函数不保存在类对象中
静态成员函数也不保存在类对象中

1. 成员变量的存储位置
成员变量的存储位置取决于对象的 实例化 方式。
实例化对象时（对象的内存空间）：成员变量存储在类的每个对象的内存空间中。每个对象有一份自己的成员变量，它们存储在栈或堆中，具体取决于对象是 栈分配 还是 堆分配。
栈分配：如果对象是局部对象（如在函数内部创建），则成员变量存储在栈中。
堆分配：如果对象是动态分配的（如使用 new 创建的对象），则成员变量存储在堆内存中。

静态成员变量：如果成员变量是 static 的，那么它不存储在每个对象的内存中，而是存储在 全局数据区 或 静态存储区。
所有对象共享这个静态成员变量，因此只有一份静态成员变量。

2. 成员函数的存储位置
成员函数是类的 共享 成员，即所有对象都共享同一份成员函数。因此，成员函数 并不为每个对象单独分配内存，而是 存储在代码段（text segment） 中。
无论创建多少个类的对象，成员函数的存储只有一份，它们不会随着每个对象的创建而重复分配。

静态成员函数也存储在 代码段，它与普通成员函数类似，但它不依赖于类的对象，因此可以通过类本身来调用。



this指针工作原理：
这一块代码（成员函数的存储）是如何区分那个对象调用自己的呢？
C++通过提供特殊的对象指针，this指针
this指针指向被调用的成员函数所属的对象。

C++规定，this指针是隐含在对象成员函数内的一种指针

当一个对象被创建后，它的每一个成员函数都含有一个系统自动生成的隐含指针this，用以保存这个对象的地址，也就是说虽然我们没有写上this指针，编译器在编译的时候也是会加上的。
因此this也称为“指向本对象的指针”，this指针并不是对象的一部分，不会影响sizeof(对象)的结果。

this指针是C++实现封装的一种机制，它将对象和该对象调用的成员函数连接在一起，在外部看来，每一个对象都拥有自己的函数成员。
一般情况下，并不写this，而是让系统进行默认设置
成员函数通过this指针即可知道操作的是那个对象的数据。this指针是一种隐含指针，它隐含于每个类的非静态成员函数中。this指针无需定义，直接使用即可
注意: 静态成员函数内部没有this指针，静态成员函数不能操作非静态成员变量

this是指向当前对象的指针
对象在调用成员函数的时候，会自动传入当前对象的内存地址


==================================================const修饰
const修饰成员函数：
用const修饰的成员函数时，const修饰this指针指向的内存区域，成员函数体内不可以修改本类中的任何普通成员变量
当成员变量类型符前用mutable修饰时例外


const修饰对象(常对象)：
常对象只能调用const的成员函数
常对象可访问 const 或非 const 数据成员，不能修改，除非成员用mutable修饰

class Person{
    public:
        Person(){
            this->mAge = 0;
            this->mID = 0;
        }
        void ChangePerson() const{
            mAge = 100;
            mID= 100;
        }
        void ShowPerson(){
            this->mAge = 1000;
            cout<< "ID:" << this->mID << " Age:" << this->mAge << endl;
        }
    public:
        int mAge;
        mutable int mID;
};
void test(){ 
    const Person person;
    //1. 可访问数据成员
    cout<< "Age:" << person.mAge << endl;
    //person.mAge = 300; //不可修改
    person.mID = 1001; //但是可以修改mutable修饰的成员变量
    //2. 只能访问const修饰的函数
    //person.ShowPerson();
    person.ChangePerson();
}


==================================================友元
类的主要特点之一是 数据隐藏，即类的私有成员无法在类的外部(作用域之外)访问

但是，有时候 需要在类的外部访问类的私有成员，怎么办？
解决方法是使用友元函数，友元函数是一种特权函数，C++允许这个特权函数访问私有成员
可以把一个 全局函数、某个类中的成员函数、甚至整个类 声明为友元

友元语法：
friend关键字只出现在声明处
其他类、类成员函数、全局函数都可声明为友元
友元函数 不是 类的成员，不带this指针
友元函数 可访问对象 任意成员属性，包括私有属性

class Building;
//友元类
class MyFriend {
     public:
         //友元成员函数
         void LookAtBedRoom(Building& building);
         void PlayInBedRoom(Building& building);
};

class Building {
     //全局函数做友元函数
     friend void CleanBedRoom(Building& building);
     #if 0
         //成员函数做友元函数
         friend void MyFriend::LookAtBedRoom(Building& building);
         friend void MyFriend::PlayInBedRoom(Building& building);
     #else   
         //友元类
         friend class MyFriend;
     #endif
     
     public:
         Building();
     public:
         string mSittingRoom;
     private:
         string mBedroom;
};

 void MyFriend::LookAtBedRoom(Building& building){
     cout<< "我的朋友参观" << building.mBedroom << endl;
 }
 
 void MyFriend::PlayInBedRoom(Building& building){
     cout<< "我的朋友玩耍在" << building.mBedroom << endl;
 }
 
 //友元全局函数
 void CleanBedRoom(Building& building){
     cout<< "友元全局函数访问" << building.mBedroom << endl;
 }
 
 Building::Building(){
     this->mSittingRoom = "客厅";
     this->mBedroom = "卧室";
 }
 
int main(){
     Building building;
     MyFriend myfriend;
     CleanBedRoom(building);
     myfriend.LookAtBedRoom(building);
     myfriend.PlayInBedRoom(building);
     system("pause");
     
     return EXIT_SUCCESS;
}

友元类注意:
友元关系不能被继承。
友元关系是单向的，类A是类B的朋友，但类B不一定是类A的朋友。
友元关系不具有传递性。类B是类A的朋友，类C是类B的朋友，但类C不一定是类A的朋友

友元包括 友元函数 和 友元类
如果将函数A（非成员函数）声明为类C的友元函数，那么函数A就能直接访问类C对象的所有成员
如果将类A声明为类C的友元类，那么类A的所有成员函数都能直接访问类C对象的所有成员
友元破坏了面向对象的封装性，但在某些频繁访问成员变量的地方可以提高性能


==================================================内部类与局部类
内部类:
如果将类A定义在类C的内部，那么类A就是一个内部类（嵌套类）
内部类的特点：
支持public、protected、private权限
成员函数可以直接访问其外部类对象的所有成员（反过来则不行）
成员函数可以直接不带类名、对象名访问其外部类的static成员
不会影响外部类的内存布局
可以在外部类内部声明，在外部类外面进行定义


局部类:
在一个函数内部定义的类，称为局部类
局部类的特点:
作用域仅限于所在的函数内部
其所有的成员必须定义在类内部，不允许定义static成员变量
成员函数不能直接访问函数的局部变量（static变量除外）


==================================================运算符重载
运算符重载，就是 对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型
运算符重载(operator overloading)只是一种”语法上的方便”,也就是它只是另一种函数调用的方式
运算符重载（操作符重载）：可以为运算符增加一些新的功能
这种定义很像一个普通的函数定义，只是函数的名字由关键字operator及其紧跟的运算符组成


语法:
定义重载的运算符就像定义函数，只是该函数的名字是operator@,这里的@代表了被重载的运算符。函数的参数中参数个数取决于两个因素
运算符是一元(一个参数)的还是二元(两个参数)；
运算符被定义为全局函数(对于一元是一个参数，对于二元是两个参数)还是成员函数(对于一元没有参数，对于二元是一个参数-此时该类的对象用作左耳参数)


运算符重载碰上友元函数：
重载左移操作符(<<),使得cout可以输出对象
 class Person{
     friend ostream& operator<<(ostream& os, Person& person);
     public:
         Person(int id,int age){
             mID= id;
             mAge= age;
     }
     private:
         int mID;
         int mAge;
 };

 ostream& operator<<(ostream& os, Person& person){
     os<< "ID:" << person.mID << " Age:" << person.mAge;
     return os;
 }

 int main(){
     Person person(1001, 30);
     //cout << person;//cout.operator+(person)
     cout<< person << " | " << endl;
     return EXIT_SUCCESS;
 }


前置 ++ 不带参数，而 后置 ++ 带一个 int 伪参数。
ClassName& operator++(); // 前置++
前置 ++ 直接修改对象本身，并返回对自身的引用（*this）。
后置 ++ 需要有一个 int 作为参数：
ClassName operator++(int); // 后置++
int 参数 没有实际用途，仅用于区分前置和后置版本。
后置 ++ 先返回当前值，再递增，所以通常返回一个 旧值的拷贝。


赋值(=)运算符重载:
因为’=’在编程中是最基本的运算符，可以进行赋值操作，也能引起拷贝构造函数的调用
class Person{
    friend ostream& operator<<(ostream& os,const Person& person){
        os<< "ID:" << person.mID << " Age:" << person.mAge << endl;
        return os;
    }
public:
    Person(int id,int age){
        this->mID = id;
        this->mAge = age;
    }
    //重载赋值运算符
    Person& operator=(const Person& person){
        this->mID = person.mID;
        this->mAge = person.mAge;
        return *this;
    }
private:
    int mID;
    int mAge;
};

//1. =号混淆的地方
void test01(){
    Personperson1(10, 20);
    Personperson2 = person1; //调用拷贝构造
    //如果一个对象还没有被创建，则必须初始化，也就是调用构造函数
    //上述例子由于person2还没有初始化，所以会调用构造函数
    //由于person2是从已有的person1来创建的，所以只有一个选择
    //就是调用拷贝构造函数
    person2= person1; //调用operator=函数
    //由于person2已经创建，不需要再调用构造函数，这时候调用的是重载的赋值运算符
}

如果没有重载赋值运算符，编译器会自动创建默认的赋值运算符重载函数。
行为类似默认拷贝构造，进行简单值拷贝。


调用父类的运算符重载函数：
显式调用父类的运算符重载函数
BaseClass::operator=(other);


符号重载总结：
=, [], () 和 -> 操作符只能通过成员函数进行重载
<< 和 >> 只能通过全局函数配合友元函数进行重载
不要重载 && 和 || 操作符，因为无法实现短路规则


==================================================仿函数（函数对象）
将一个对象当作一个函数一样来使用


==================================================智能指针（Smart Pointer）
传统指针存在的问题：
需要手动管理内存
容易发生内存泄露（忘记释放、出现异常等）
释放之后产生野指针

智能指针就是为了解决传统指针存在的问题
auto_ptr：属于C++98标准，在C++11中已经不推荐使用（有缺陷，比如不能用于数组）
shared_ptr：属于C++11标准
unique_ptr：属于C++11标准


shared_ptr:
多个shared_ptr可以指向同一个对象，当最后一个shared_ptr在作用域范围内结束时，对象才会被自动释放
可以通过一个已存在的智能指针初始化一个新的智能指针

shared_ptr的原理:
一个shared_ptr会对一个对象产生强引用（strong reference）
每个对象都有个与之对应的强引用计数，记录着当前对象被多少个shared_ptr强引用着 可以通过shared_ptr的use_count函数获得强引用计数
当有一个新的shared_ptr指向对象时，对象的强引用计数就会+1
当有一个shared_ptr销毁时（比如作用域结束），对象的强引用计数就会-1
当一个对象的强引用计数为0时（没有任何shared_ptr指向对象时），对象就会自动销毁（析构）


weak_ptr:
weak_ptr会对一个对象产生弱引用
weak_ptr可以指向对象解决shared_ptr的循环引用问题


unique_ptr:
unique_ptr也会对一个对象产生强引用，它可以确保同一时间只有1个指针指向对象
当unique_ptr销毁时（作用域结束时），其指向的对象也就自动销毁了
可以使用std::move函数转移unique_ptr的所有权


==================================================模板（template）
泛型，是一种将类型参数化以达到代码复用的技术，C++中使用模板来实现泛型

模板的使用格式如下:
template <typename\class T>
typename和class是等价的

模板没有被使用时，是不会被实例化出来的
模板的声明和实现如果分离到.h和.cpp中，会导致链接错误
一般将模板的声明和实现统一放到一个.hpp文件中


1. 函数模板
2. 多参数模板
3. 类模板


==================================================类型转换
C语言风格的类型转换符:
(type)expression
type(expression)


C++中有4个类型转换符:
static_cast
dynamic_cast
reinterpret_cast
const_cast

使用格式:xx_cast<type>(expression)


1. const_cast
一般用于去除const属性，将const转换成非const

2. dynamic_cast
一般用于多态类型的转换，有运行时安全检测

dynamic_cast 是 C++ 中用于进行 运行时类型识别 (RTTI) 的一种类型转换操作。
它通常用于多态类型之间的转换，并且具有 运行时安全检测，这个“运行时安全检测”指的是在转换过程中，编译器会检查目标类型是否与源类型兼容，从而避免不安全的类型转换。

#include <iostream>
using namespace std;

class Base {
public:
    virtual ~Base() {}  // 确保有虚函数，以支持RTTI
};

class Derived : public Base {
public:
    void show() { cout << "Derived class" << endl; }
};

class AnotherClass : public Base {};

int main() {
    Base* basePtr = new Derived();

    // 安全的动态类型转换：如果basePtr指向Derived类型，转换成功
    Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);
    if (derivedPtr) {
        derivedPtr->show();  // 输出: Derived class
    } else {
        cout << "Conversion failed!" << endl;
    }

    // 安全的动态类型转换：如果basePtr指向AnotherClass类型，转换失败
    AnotherClass* anotherPtr = dynamic_cast<AnotherClass*>(basePtr);
    if (anotherPtr) {
        cout << "Conversion successful!" << endl;
    } else {
        cout << "Conversion failed!" << endl;  // 输出: Conversion failed!
    }

    delete basePtr;
    return 0;
}

3. static_cast
它在编译时进行检查，通常用于两种类型之间有一定关系的转换，如基本数据类型之间的转换、类之间的转换等。
对比 dynamic_cast ，缺乏运行时安全检测
不能交叉转换（不是同一继承体系的，无法转换）
常用于基本数据类型的转换、非const转成const
使用范围较广
它适用于基本数据类型之间的转换（如 int 和 double）、类继承关系中的向上或向下转换，以及指针或引用类型的转换。
如果你需要运行时检查类型是否兼容，可以使用 dynamic_cast，它提供了额外的安全检查，特别是对于多态类型的转换。

4. reinterpret_cast
属于比较底层的强制转换，没有任何类型检查和格式转换，仅仅是简单的二进制数据拷贝
可以交叉转换
可以将指针和整数互相转换

==================================================继承
通过继承机制可以利用 已有的数据类型来定义新的数据类型，新的类不仅拥有旧类的成员，还拥有新定义的成员
一个B类继承于A类，或称从类A派生类B。这样的话，类A成为基类（父类）， 类B成为派生类（子类）。

派生类中的成员，包含两大部分:
一类是从基类继承过来的，一类是自己增加的成员。

派生类定义：
Class 派生类名 :  继承方式 基类名{
    //派生类新增的数据成员和成员函数
}
三种继承方式:
public 公有继承
private 私有继承
protected 保护继承


派生类访问控制:
派生类拥有基类中全部成员变量和成员方法（除了构造和析构之外的成员方法）
但是在派生类中，继承的成员并不一定能直接访问，不同的继承方式会导致不同的访问权限


继承中的构造和析构:
在C++编译器的内部可以理解为结构体，子类是由父类成员叠加子类新成员而成

子类对象在创建时会首先调用父类的构造函数
父类构造函数执行完毕后，才会调用子类的构造函数
当父类构造函数有参数时，需要在子类初始化列表(参数列表)中显示调用父类构造函数
析构函数调用顺序和构造函数相反


###
派生类的方法可以隐藏（hiding）基类的同名方法，除非基类的方法被声明为 virtual，否则不会进行真正的覆盖（override）。

class Base{
    public:
        void func1(){
            cout<< "Base::void func1()" << endl;
        };
        void func1(int param){
            cout<< "Base::void func1(int param)" << endl;
        }
        void myfunc(){// 不是 virtual
            cout<< "Base::void myfunc()" << endl;
        }
};

class Derived1 : public Base{
    public:
        void myfunc(){// 只是隐藏，并没有覆盖
            cout<< "Derived1::void myfunc()" << endl;
        }
};

你的 Base::myfunc() 不是 virtual，因此在 Derived1 里 void myfunc() 只是隐藏了基类的同名方法，而不是覆盖它。
这意味着：
Derived1 里的 myfunc() 只是定义了一个新的方法，与基类的 myfunc() 没有多态关系。

Base* basePtr = new Derived1();
basePtr->myfunc();  // 调用的是 Base::myfunc()，因为 myfunc() 不是 virtual

Derived1* ptr = new Derived1();
ptr->myfunc();  // 调用的是 Derived1::myfunc()

非 virtual 方法不会被真正覆盖，而是隐藏（hiding）
基类指针调用非 virtual 方法，调用的是基类的版本。
基类指针调用 virtual 方法，会根据对象的实际类型调用派生类的版本（多态）。
###


继承中同名成员的处理方法:
当子类成员和父类成员同名时，子类依然从父类继承同名成员
如果子类有成员和父类同名，子类访问其成员默认访问子类的成员(本作用域，就近原则)
在子类通过作用域::进行同名成员区分(在派生类中使用基类的同名成员，显示使用类名限定符)


非自动继承的函数:
构造函数和析构函数不能被继承，必须为每一个特定的派生类分别创建
另外operator=也不能被继承，因为它完成类似构造函数的行为。


继承中的静态成员特性:
他们都可以被继承到派生类中
如果重新定义一个静态成员函数，所有在基类中的其他重载函数会被隐藏
如果我们改变基类中一个函数的特征，所有使用该函数名的基类版本都会被隐藏。
静态成员函数不能是虚函数（virtual function）


多继承:
可以从一个类继承，我们也可以能同时从多个类继承，这就是多继承。

多继承会带来一些二义性的问题， 如果两个基类中有同名的函数或者变量，那么通过派生类对象去访问这个函数或变量时就不能明确到底调用从基类1继承的版本还是从基类2继承的版本？
解决方法就是显示指定调用那个基类的版本。


两个派生类继承同一个基类而又有某个类同时继承者两个派生类，这种继承被称为菱形继承，或者钻石
这种继承所带来的问题:
羊继承了动物的数据和函数，鸵同样继承了动物的数据和函数，当草泥马调用函数或者数据时，就会产生二义性。
草泥马继承自动物的函数和数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以
对于这种菱形继承所带来的两个问题，c++为我们提供了一种方式，采用虚基类。


普通继承 和 虚继承 的对象内存图:
BigBase 菱形最顶层的类，内存布局图没有发生改变。
Base1和Base2通过虚继承的方式派生自BigBase:
这两个对象的布局图中可以看出编译器为我们的对象中增加了一个vbptr (virtual base pointer)
vbptr指向了一张表，这张表保存了当前的虚指针相对于虚基类的首地址的偏移量。
Derived派生于Base1和Base2,继承了两个基类的vbptr指针，并调整了vbptr与虚基类的首地址的偏移量
现在模型就变成了Base1和Base2 Derived三个类对象共享了一份BigBase数据
当使用 虚继承 时，虚基类 是被共享的
即使共享 虚基类 ，但是 必须要有一个类来完成基类的初始化

父类指针可以指向子类对象，是安全的，开发中经常用到（继承方式必须是public）
子类指针指向父类对象是不安全的


==================================================多态
virtual 关键字表示该函数是虚函数，也就是说，它支持多态性，允许在运行时根据实际对象的类型来调用正确的析构函数。

示例：没有虚析构函数

#include <iostream>
using namespace std;

class Base {
public:
    // 非虚析构函数
    ~Base() {
        cout << "Base destructor" << endl;
    }
};

class Derived : public Base {
public:
    ~Derived() {
        cout << "Derived destructor" << endl;
    }
};

int main() {
    Base* basePtr = new Derived();
    
    // 使用基类指针删除派生类对象
    delete basePtr;  // 只会调用基类的析构函数

    return 0;
}

Base destructor
不写 virtual：如果通过基类指针删除派生类对象时，只有基类的析构函数会被调用，派生类的析构函数不会被调用，可能导致资源泄漏。


示例：虚析构函数
#include <iostream>
using namespace std;

class Base {
public:
    // 虚析构函数
    virtual ~Base() {
        cout << "Base destructor" << endl;
    }
};

class Derived : public Base {
public:
    ~Derived() {
        cout << "Derived destructor" << endl;
    }
};

int main() {
    Base* basePtr = new Derived();
    
    // 使用基类指针删除派生类对象
    delete basePtr;  // 会调用派生类和基类的析构函数

    return 0;
}

Derived destructor
Base destructor

当我们通过基类指针 basePtr 删除 Derived 对象时，程序会正确地调用 Derived 类的析构函数，然后再调用 Base 类的析构函数。


1. 多态基本概念
默认情况下，编译器只会根据指针类型调用对应的函数，不存在多态

多态是面向对象程序设计语言中数据抽象和继承之外的第三个基本特征:
同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果
在运行时，可以识别出真正的对象类型，调用对应子类中的函数

多态的要素:
子类重写父类的成员函数（override）
父类指针指向子类对象
利用父类指针调用重写的成员函数

C++支持编译时多态(静态多态)和运行时多态(动态多态):
运算符重载和函数重载就是编译时多态
派生类和虚函数实现运行时多态

静态多态和动态多态的区别:
静态多态和动态多态的区别就是函数地址是早绑定(静态联编)还是晚绑定(动态联编)。
如果函数的调用，在编译阶段就可以确定函数的调用地址，并产生代码，就是静态多态(编译时多态)，就是说地址是早绑定的
而如果函数的调用地址不能编译不能在编译期间确定，而需要在运行时才能决定，这这就属于晚绑定(动态多态,运行时多态)


2. 向上类型转换
对象可以作为自己的类或者作为它的基类的对象来使用。
取一个对象的地址(指针或引用)，并将其作为基类的地址来处理，这种称为向上类型转换。
也就是说：父类引用或指针可以指向子类对象，通过父类指针或引用来操作子类对象。

当绑定在程序运行之前(由编译器和连接器)完成时，称为早绑定(early binding).C语言中只有一种函数调用方式，就是早绑定。
迟绑定(迟捆绑,动态绑定,运行时绑定，latebinding),意味着绑定要根据对象的实际类型，发生在运行。问题解决方案(虚函数,vitual function)

虚函数:
C++中的多态通过虚函数（virtual function）来实现
虚函数：被virtual修饰的成员函数
只要在父类中声明为虚函数，子类中重写的函数也自动变成虚函数（也就是说子类中可以省略virtual关键字）
虚函数允许子类（派生类）重新定义父类（基类）成员函数
而子类（派生类）重新定义父类（基类）虚函数的做法称为覆盖(override)，或者称为重写

对于特定的函数进行动态绑定，C++要求在基类中声明这个函数的时候使用virtual关键字,动态绑定也就对virtual函数起作用:
为创建一个需要动态绑定的虚成员函数，可以简单在这个函数声明前面加上virtual关键字，定义时候不需要.
如果一个函数在基类中被声明为virtual，那么在所有派生类中它都是virtual的.
在派生类中virtual函数的重定义称为重写(override).
Virtual关键字只能修饰成员函数.
构造函数不能为虚函数


3. C++如何实现动态绑定
当我们告诉通过创建一个virtual函数来告诉编译器要进行动态绑定，那么编译器就会根据动态绑定机制来实现我们的要求， 不会再执行早绑定

C++ 规定每个对象必须在内存中有唯一的地址，以确保对象的存在性和可区分性。因此，即使一个类不包含任何数据成员，编译器也会给它分配至少 1 字节，以确保它在内存中的地址是唯一的。
如果类有虚函数，即使它没有其他成员变量，C++ 需要存储虚表指针（通常是 8 字节，具体取决于系统架构）
64 位架构（x86-64, ARM64）:
指针大小通常是 8 字节
虚表指针（vptr） 也是一个指针，指向虚表（vtable），所以 vptr 大小通常为 8 字节

虚表:
虚函数的实现原理是虚表，这个虚表里面存储着最终需要调用的虚函数地址，这个虚表也叫虚函数表

当编译器发现我们的类中有虚函数的时候，编译器会创建一张虚函数表，把虚函数的函数入口地址放到虚函数表中，并且在类中秘密增加一个指针，这个指针就是vpointer(缩写vptr)，这个指针是指向对象的虚函数表
在多态调用的时候，根据vptr指针，找到虚函数表来实现动态绑定

起初，子类继承基类，子类继承了基类的vptr指针，这个vptr指针是指向基类虚函数表，当子类调用构造函数，使得子类的vptr指针指向了子类的 虚函数表

子类无重写基类虚函数时:
Animal*animal = new Dog;
animal->fun1();
当程序执行到这里，会去animal指向的空间中寻找vptr指针，通过vptr指针找到func1函数，
此时由于子类并没有重写也就是覆盖基类的func1函数，所以调用func1时，仍然调用的是基类的func1

多态的成立条件：
有继承


4. 抽象基类和纯虚函数(purevirtual function)
在设计时，常常希望基类仅仅作为其派生类的一个接口
这就是说，仅想对基类进行向上类型转换，使用它的接口，而不希望用户实际的创建一个基类的对象
在基类中加入至少一个纯虚函数(pure virtualfunction),使得基类称为抽象类(abstract class).
纯虚函数使用关键字virtual，并在其后面加上=0。如果试图去实例化一个抽象类，编译器则会阻止这种操作。
当继承一个抽象类的时候，必须实现所有的纯虚函数，否则由抽象类派生的类也是一个抽象类。
Virtual void fun() =0;告诉编译器在vtable中为函数保留一个位置，但在这个特定位置不放地址

纯虚函数|抽象类
纯虚函数：没有函数体且初始化为0的虚函数，用来定义接口规范
抽象类（Abstract Class）:
含有纯虚函数的类，不可以实例化（不可以创建对象）
抽象类也可以包含非纯虚函数、成员变量
如果父类是抽象类，子类没有完全重写纯虚函数，那么这个子类依然是抽象类


5. 纯虚函数和多继承
多继承带来了一些争议，但是接口继承可以说一种毫无争议的运用了
绝大数面向对象语言都不支持多继承，但是绝大数面向对象对象语言都支持接口的概念，C++中没有接口的概念，但是可以通过纯虚函数实现接口
多重继承接口不会带来二义性和复杂性问题。接口类只是一个功能声明，并不是功能实现，子类需要根据功能说明定义功能实现
注意:除了析构函数外，其他声明都是纯虚函数
如果子类继承的多个父类都有虚函数，那么子类对象就会产生对应的多张虚表


6. 虚析构函数
虚析构函数是为了解决基类的指针指向派生类对象，并用基类的指针删除派生类对象

如果存在父类指针指向子类对象的情况，应该将析构函数声明为虚函数（虚析构函数）
delete父类指针时，才会调用子类的析构函数，保证析构的完整性

纯虚析构函数:
纯虚析构函数在c++中是合法的，但是在使用的时候有一个额外的限制：必须为纯虚析构函数提供一个函数体。

纯虚析构函数和非纯析构函数之间唯一的不同之处在于纯虚析构函数使得基类是抽象类，不能创建基类的对象


7. 重写 重载 重定义
重载，同一作用域的同名函数:
同一个作用域
参数个数，参数顺序，参数类型不同
和函数返回值，没有关系
const也可以作为重载条件 //do(const Teacher&t){} do(Teacher& t)

重定义（隐藏）:
有继承
子类（派生类）重新定义父类（基类）的同名成员（非virtual函数）

重写（覆盖）:
有继承
子类（派生类）重写父类（基类）的virtual函数
函数返回值，函数名字，函数参数，必须和基类中的虚函数一致


8. 指向类成员的指针
(1)指向成员变量的指针
(2)指向成员函数的指针
(3)指向静态成员的指针
指向类静态数据成员的指针:
指向静态数据成员的指针的定义和使用与普通指针相同，在定义时无须和类相关联，在使用时也无须和具体的对象相关联
指向类静态成员函数的指针:
指向静态成员函数的指针和普通指针相同，在定义时无须和类相关联，在使用时也无须和具体的对象相关联
(4)调用父类的成员函数实现

class Base {
public:
    virtual void show() {
        std::cout << "Base::show()" << std::endl;
    }
};

class Derived : public Base {
public:
    void show() override {
        std::cout << "Derived::show() before calling Base" << std::endl;
        Base::show();  // 显示调用，调用父类的 `show()`
    }
};


9. 同名函数
10. 同名成员变量
都可以通过父类名 Base::XXX 显示调用
SubCls cls;
cls.age
cls.Base::age


==================================================静态成员（static）
静态成员：被static修饰的成员变量\函数
可以通过对象（对象.静态成员）、对象指针（对象指针->静态成员）、类访问（类名::静态成员）

静态成员变量:
存储在数据段（全局区，类似于全局变量），整个程序运行过程中只有一份内存
对比全局变量，它可以设定访问权限（public、protected、private），达到局部共享的目的
必须初始化，必须在类外面初始化，初始化时不能带static，如果类的声明和实现分离（在实现.cpp中初始化）

静态成员函数:
内部不能使用this指针（this指针只能用在非静态成员函数内部）
不能是虚函数（虚函数只能是非静态成员函数）
内部不能访问非静态成员变量\函数，只能访问静态成员变量\函数
非静态成员函数内部可以访问静态成员变量\函数
构造函数、析构函数不能是静态
当声明和实现分离时，实现部分不能带static


==================================================const成员
const成员：被const修饰的成员变量、非静态成员函数】

const成员变量:
必须初始化（类内部初始化），可以在声明的时候直接初始化赋值
非static的const成员变量还可以在初始化列表中初始化

const成员函数（非静态）:
const 成员函数表示 不会修改类的成员变量，适用于只读操作 int getValue() const {}
const关键字写在参数列表后面，函数的声明和实现都必须带const
内部不能修改非static成员变量
内部只能调用const成员函数、static成员函数
非const成员函数可以调用const成员函数
const成员函数和非const成员函数构成重载
非const对象（指针）优先调用非const成员函数
const对象（指针）只能调用const成员函数、static成员函数


==================================================引用类型成员
引用类型成员变量必须初始化（不考虑static情况）:
在声明的时候直接初始化
通过初始化列表初始化