https://www.jianshu.com/u/41dea164b20a


OpenGL （Open Graphics Library） Graphics: [ˈɡræfɪks]
是一个跨平台的编程图形程序接口

OpenGL ES （OpenGL for Embedded Systems）
是OpenGL图形API的子集，针对手机、Pad和游戏主机等嵌入式设备而设计，去除了许多不必要和性能较低的API接口。

Metal
Apple为游戏开发者推出了新的平台技术Metail，该技术能够为3D图像提高10倍的渲染性能
Metal 是Apple 为了解决3D渲染而推出的框架。

OpenGL / OpenGL ES/ Metal 在任何项目中解决问题的本质
就是利用GPU芯片来高效渲染图形图像；图形API是iOS开发者唯一接近GPU的方式。

OpenGL 上下文【context】
在应用程序调用任何OpenGL的指令之前，需要安排首先创建一个OpenGL的上下文。
这个上下文是一个非常庞大的状态机，保存了OpenGL中的各种状态，这也是OpenGL指令执行的基础。
OpenGL的函数不管是在那个语言中，都是类似C语言一样的面向过程的函数，本质上都是对OpenGL上下文这个庞大的状态机中的某个状态或者对象进行操作，当然你得首先把这个对象设置为当前对象。
因此，通过对OpenGL指令的封装，是可以将OpenGL的相关调用封装成为一个面向对象的图形API的。
由于OpenGL上下文是一个巨大的状态机，切换上下文往往会产生较大的开销，但是不同的绘制模块，可能需要使用完全独立的状态管理。
因此，可以在应用程序中分别创建多个不同的上下文，在不同线程中使用不同的上下文，上下文之间共享纹理、缓冲区等资源。
这样的方案，会比反复切换上下文，或者大量修改渲染状态，更加合理高效。

OpenGL 状态机
状态机描述了一个对象在其⽣命周期内所经历的各种状态，状态间的转变，发生转变的动因，条件及转变中所执行的活动。
或者说，状态机是 一种⾏为，说明对象在其⽣命周期中响应事件所经历的状态序列以及对那些状态事件的响应。因此具有以下特点:
有记忆功能，能记住其当前的状态
可以接收输⼊，根据输入的内容和⾃己的原先状态，修改⾃己当前状态，并且可以有对应输出
当进⼊特殊状态(停机状态)的时候，便不再接收输入，停⽌工作
可以这么理解: 
OpenGL可以记录自己的状态（如当前使用的颜色、是否开启了混合功能等）
OpenGL可以接收输入（当调用OpenGL函数等时候，实际上可以看成OpenGL在接收我们的输入）
如我们调用过lColorf，则OpenGL接收到这个输入后会修改自己的“当前颜色”这个状态
OpenGL可以进入停止状态；不再接收输入。在程序退出前，OpenGL总会先停止工作的。

渲染 （Rendering）
将图形/图像数据转换成2D空间图像操作叫做渲染。

顶点数组【VertexArray】和顶点缓冲区【VertexBuffer】
画图一般是先画好图像的骨架，然后再往骨架里面填充颜色，这对于OpenGL也是一样的。
顶点数据就是要画的图像的骨架，和现实中不同的是，OpenGL中的图像都是由图元组成。
在OpenGL ES中，有三种类型的图源：点、线、三角形。
那这些顶点数据最终是存储在哪里的呢？开发者可以选择设定函数指针，在调用绘制方法的时候，直接由内存传入顶点数据，也就是说这部分数据之前是存储在内存当中的，被称为顶点数组。
而性能更高的做法是，提前分配一块显存，将顶点数据预先传入到显存当中。这部分的显存，就被称为顶点缓冲区。
顶点指的是我们在绘制一个图形时，他的顶点位置数据。而这个数据可以直接存储在数组中或者将其缓存到GPU内存中。

着色器程序 Shader
将固定渲染管线架构变为了可编程渲染管线
OpenGL 在实际调用绘制函数之前，还需要制定一个由shader编译成的着色器程序。
常见的着色器主要有顶点着色器（VertexShader），片段着色器（FragmentShader）/像素着色器（PixelShader），几何着色器（GeometryShader），曲面细分着色器（TessellationShader）。
片段着色器和像素着色器只是在OpenGL和DX中的不同叫法而已。可惜的是，知道OpenGL ES 3.0，依然只支持了顶点着色器和片段着色器这两个最基础的着色器。
OpenGL在处理shader时，和其他编译器一样。通过编译、链接等步骤，生成了着色器程序（glProgram），着色器程序同时包含了顶点着色器和片段着色器等运算逻辑。
在OpenGL进行绘制的时候，首先由顶点着色器对传入的顶点数据进行运算。
在通过图元装配，将顶点转换为图元。
然后进行光栅化，将图元这种矢量图形，转换为栅格化数据。
最后，将栅格化数据传入片段着色器中进行运算。
片段着色器会对栅格化数据中的每一个像素进行运算，并决定像素的颜色。

管线
在OpenGL 下渲染图形,就会有经历一个一个节点而这样的操作可以理解管线,
可以想象成流水线,每个任务类似流水线般执行,任务之间有先后顺序.
管线是一个抽象的概念，之所以称之为管线是因为显卡在处理数据的时候是按照一个固定的顺序来的，而且严格按照这个顺序。
就像水从一根管子的一端流到另一端，这个顺序是不能打破的。

固定管线/存储着色器
在早期的OpenGL 版本,它封装了很多种着色器程序块内置的一段包含了光照、坐标变换、裁剪等等诸多功能的固定shader程序来完成,来帮助开发者来完成图形的渲染
而开发者只需要传入相应的参数,就能快速完成图形的渲染
类似于i0S开发会封装很多APl,而我们只需要调用,就可以实现功能.不需要关注底层实现原理。
由于OpenGL 的使用场景非常丰富,固定管线或存储着色器无法完成每一个业务.这时将相关部分开放成可编程。

顶点着色器 VertexShader
一般用来处理图形每个顶点变换【旋转/平移/投影等】
顶点着色器是OpenGL中用于计算顶点属性的程序。
顶点着色器是逐顶点运算的程序，也就是说每个顶点数据都会执行一次顶点着色器，当然这是井行的，并且顶点着色器运算过程中无法访问其他顶点的数据。
一般来说典型的需要计算的顶点属性主要包括顶点坐标变换、逐顶点光照运算等等。
顶点坐标由自身坐标系转换到归一化坐标系的运算，就是在这里发生的。

片元着色器程序 Fragmentshader
一般用来处理图形中每个像素点颜色计算和填充。
片段着色器是OpenGl中用于计算片段（像素）颜色的程序。片段着色器是逐像素运算的程序，也就是说每个像素都会执行一次片段着色器，当然也是并行的。

GLSL (OpenGL Shading Language)
OpenGL着色语言 (OpenGL Shadingg Langurage）是用来在OpenGL中着色编程的语言，也即开发人员写的短小的自定义程序，他们是在图形卡的GPU(Graphic Processor Uni图形处理单元） 上执行的
代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性。
比如：视图转换、投影转换等。GLSL (GL Shading Langurage） 的着色器代码分成2个部分：Vertex Shader （顶点着色器） 和Fragment（片元着色器）。

光栅化Rasterization
是把顶点数据转换为片元的过程，具有将图转化为一个个栅格组成的图象的作用，特点是每个元素对应帧缓冲区中的一像素。
光栅化就是把顶点数据转换为片元的过程。片元中的每一个元素对应于帧缓冲区中的一个像素。
光栅化其实是一种将几何图元变为二维图像的过程。该过程包含了两部分的工作。第一部分工作：决定窗口坐标中的哪些整型栅格区域被基本图元占用；第二部分工作：分配一个颜色值和一个深度值到各个区域。光栅化过程产生的是片元。
把物体的数学描述以及与物体相关的颜色信息转换为屏幕上用于对应位置的像素及用于填充像素的颜色，这个过程称为光栅化，这是一个将模拟信号转化为离散信号的过程。

纹理
纹理可以理解为图片，大家在渲染图形时需要在其编码填充图片，为了使得场景更加逼真。而这里使用的图片，就是常说的纹理。但是在OpenGL，我们更加习惯叫纹理，而不是图片。

混合 [Blending]
在测试阶段之后，如果像素依然没有被剔除，那么像素的颜色将会和帧缓沖区中颜色附着上的颜色进行混合，混合的算法可以通过OpenGL的函数进行指定。
但是OpenGL提供的混合算法是有限的，如果需要更加复杂的混合算法，一般可以通过像素着色器进行实现，当然性能会比原生的混合算法差些。

变换矩阵Transformation
例如图形想发生平移、缩放、旋转变换，就需要使用变换矩阵。

投影矩阵Projectiom
用于将3D坐标转换为二维屏幕坐标，实际线条也将在二维坐标下进行绘制。

交换缓冲区【SwapBuffer】
渲染缓冲区一般映射的是系统的资源比如窗口。如果将图像直接渲染到窗口对应的渲染缓冲区，则可以将图像显示到屏幕上。
但是，值得注意的是，如果每个窗口只有一个缓冲区，那么在绘制过程中屏幕进行了刷新，窗口可能显示出不完整的图像。
为了解决这个问题，常规的OpenGL程序至少都会有两个缓冲区。显示在屏幕上的称为屏幕缓冲区，没有显示的称为离屏缓冲区。在一个缓冲区渲染完成之后，通过将屏幕缓冲区和离屏缓冲区交换，实现图像在屏幕上的显示。
由于显示器的刷新一般是逐行进行的，因此为了防止交换缓冲区的时候屏幕上下区域的图像分属于两个不同的帧，因此交换一般会等待显示器刷新完成的信号，在显示器两次刷新的问隔中进行交换，这个信号就被称为垂直同步信号，这个技术被称为垂直同步。
使用了双缓冲区和垂直同步技术之后，由于总是要等待缓冲区交换之后再进行下一帧的渲染，使得帧率无法完全达到硬件允许的最高水平。
为了解决这个问题，引入了三缓冲区技术，在等待垂直同步时，来回交替渲染两个离屏的缓冲区，而垂直同步发生时，屏幕缓冲区和最近渲染完成的离屏缓冲区交换，实现充分利用硬件性能的目的。

