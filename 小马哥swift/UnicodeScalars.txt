https://www.cnswift.org/strings-and-characters#UTF-16

当一个 Unicode 字符串写入文本文档或者其他储存里边的时候，这个字符串的 Unicode 标量会被编码为一个或者一系列 Unicode 定义的编码格式。
每一种格式都把字符串编码成所谓码元的小块。这些包括 UTF-8 编码格式（它把字符串以8 码元编码），UTF-16 编码格式（它把字符串按照 16位 码元 编码），以及 UTF-32 编码格式（它把字符串以32位码元编码）。

你也可以用以下三者之一的其他 Unicode 兼容表示法来访问 String值：
UTF-8 码元的集合（关联于字符串的 utf8  属性）
UTF-16 码元的集合（关联于字符串的 utf16  属性）
21位 Unicode 标量值的集合，等同于字符串的 UTF-32 编码格式（关联于字符串的 unicodeScalars 属性）

这个字符串由字符 D ， o ， g ， ‼  ( DOUBLE EXCLAMATION MARK, 或者说 Unicode 标量 U+203C)以及 🐶 字符( DOG FACE , 或者说 Unicode 标量 U+1F436)组成：
let dogString = "Dog‼🐶"

UTF-8 表示法:
你可以通过遍历 utf8属性来访问一个 String的 UTF-8 表示法。这个属性的类型是 String.UTF8View，它是非负8位（ UInt8）值，在字符串的 UTF-8 表示法中每一个字节的内容：
前三个十进制 codeUnit值 ( 68, 111, 103)表示了字符 D , o , 和 g ，它们的 UTF-8 表示法与它们的 ASCII 表示法相同。
接下来的三个十进制 codeUnit值 ( 226, 128, 188)是 DOUBLE EXCLAMATION MARK字符的三字节 UTF-8 表示法。最后四个 codeUnit值 ( 240, 159, 144, 182)是 DOG FACE字符的四字节 UTF-8 表示法。

UTF-16 表示法:
你可以通过遍历 utf16属性来访问 String的 UTF-16 表示法。这个属性的类型是String.UTF16View，它是非负 16位（ UInt16）值，在字符串 UTF-16 表示法中每一个 16位 的内容：

前三个 codeUnit值 ( 68, 111, 103)表示了字符 D , o , 和 g，它们的 UTF-16 码元与字符串 UTF-8 表示法中的值相同（因为这些 Unicode 标量表示 ASCII 字符）。
第四个 codeUnit值( 8252)是与十六进制值 203C相等的十进制数字，它表示了 DOUBLE EXCLAMATION MARK字符的 Unicode 标量 U+203C。这个字符可以在 UTF-16 中表示为单个码元了。
第五和第六个 codeUnit值 ( 55357和 56374)是 UTF-16 16位码元对表示的 DOG FACE字符。这些值是高16位码元值 U+D83D（十进制值为 55357）和低16位码元值 U+DC36（十进制值为 56374）。

Unicode 标量表示法:
你可以通过遍历 unicodeScalars属性来访问 String值的 Unicode 标量表示法。这个属性的类型是 UnicodeScalarView，它是 UnicodeScalar类型值的合集。
每一个 UnicodeScalar都有值属性可以返回一个标量的21位值，用 UInt32值表示：

前三个 UnicodeScalar值的 value属性 ( 68, 111, 103) 还是表示了字符 D, o, 和 g。
第四个 codeUnit值 ( 8252)还是等于十六进制值 203C的十进制值，它表示了 DOUBLE EXCLAMATION MARK字符的 Unicode 标量 U+203C。
第五个和最后一个 UnicodeScalar的 value属性， 128054，是一个等于十六进制值 1F436的十进制数字，它表示了 DOG FACE字符的 Unicode 标量 U+1F436。

作为查询它们 value属性的替代方法，每一个 UnicodeScalar值同样可以用来构造新的 String值，比如说使用字符串插值：
for scalar in dogString.unicodeScalars {
    print("\(scalar) ")
}

==================================================
UnicodeScalars: Unicode标量

Swift 的 String 和 Character 类型是完全 Unicode 兼容的，也就是说我们可以用 Unicode 去表示 Swift 中的任何字符。

let flag1 = "wzy！🇵🇷"// 中文的感叹号
for v in flag1.unicodeScalars {
    print(v.value)
}
119
122
121
65281
127477
127479
print("=====")
for codeUnit in flag1.utf8 {
    print(codeUnit)
}
119
122
121
239
188
129
240
159
135
181
240
159
135
183
print("=====")
for codeUnit in flag1.utf16 {
    print(codeUnit)
}
119
122
121
65281
55356
56821
55356
56823

codeUnit，翻译过来就是 “编码单元”
bit 是编码过程中的最小单元，而 utf-8、utf-16 可以认为是编码过程中的 “次小编码单元”。同样的 unicodeScalars 也可以同等认为是编码过程中的 “次小编码单元”。

前三个十进制数字（119，122，121）表示了（w，z，y）,其在 utf-8、utf-16、unicodeScalars 表示法则与它们的 ASCII 表示法相同，故三次打印一致。
而字符 “！” 在三种表示法则下分别为（65281）、（239，188，129）、（65281）
而字符🇵🇷在三种表示法则下分别为：上面的打印

任意的 Unicode 标量，写作 \u{n}，里边的 n 是一个 1-8 个与合法 Unicode 码位相等的 16 进制数字。
8198 即为 16 进制数  用2006 的 10 进制表示
8198: "\u{2006}"


// A view of a string’s contents as a collection of Unicode scalar values.
UnicodeScalarView 是一个结构体

// 官方文档
public typealias UTF8 = Unicode.UTF8
public typealias UTF16 = Unicode.UTF16
public typealias UTF32 = Unicode.UTF32
public typealias UnicodeScalar = Unicode.Scalar