适配器模式（Adapter Pattern）是一种结构型设计模式，其主要目的是通过将一个类的接口转换成客户端所期望的另一种接口，使得原本由于接口不兼容而无法一起工作的类可以协同工作。
它充当了客户端与目标类之间的桥梁。

适配器模式的核心概念
目标接口（Target Interface）
客户端期望的接口，它定义了客户端与系统交互的方式。
适配者（Adaptee）
需要被适配的类，它实现了与目标接口不兼容的接口或方法。
适配器（Adapter）
实现了目标接口，并将其转发给适配者中的相应方法。它可以包装或继承适配者，并提供一个与客户端接口兼容的接口。

适配器模式的作用
接口兼容：使得不兼容的接口能够协同工作。
代码复用：通过适配器重用现有的代码库或类。
灵活性：允许系统通过适配器支持未来可能出现的新接口。

适配器模式的类型
类适配器（Class Adapter）
通过继承来实现适配。适配器继承了适配者，并实现了目标接口。
对象适配器（Object Adapter）
通过组合来实现适配。适配器包含了适配者的实例，并实现了目标接口。
接口适配器（Interface Adapter）
用于解决接口中有多个方法的情况。它可以定义一个抽象的适配器类，客户端只需要实现感兴趣的方法。


通过定义协议和实现适配器类来实现:
示例场景
假设我们有一个旧的接口 OldPrinter，它有一个 printText 方法，我们现在需要将其适配到一个新的接口 Printer，新接口有一个 print 方法。

目标接口（Target Interface）
protocol Printer {
    func print()
}


适配者（Adaptee）
定义适配者类 OldPrinter，它不符合目标接口，但需要被适配
class OldPrinter {
    func printText() {
        print("Printing text using OldPrinter")
    }
}


适配器（Adapter）
创建适配器类 PrinterAdapter，它实现了目标接口 Printer，并将请求转发给适配者 OldPrinter
class PrinterAdapter: Printer {
    private let oldPrinter: OldPrinter

    init(oldPrinter: OldPrinter) {
        self.oldPrinter = oldPrinter
    }

    func print() {
        oldPrinter.printText()
    }
}


客户端代码（Client）
在客户端代码中使用适配器
class Client {
    func execute() {
        let oldPrinter = OldPrinter()
        let printer: Printer = PrinterAdapter(oldPrinter: oldPrinter)
        
        printer.print() // Output: Printing text using OldPrinter
    }
}

// Example usage
let client = Client()
client.execute()


目标接口（Printer）：定义了客户端期望的接口。
适配者（OldPrinter）：现有的类，它不符合目标接口。
适配器（PrinterAdapter）：实现目标接口，并将方法调用转发到适配者。
客户端（Client）：通过适配器与适配者交互，隐藏了接口不兼容的问题。

使用这种方式，你可以将不同的接口适配到统一的目标接口，从而使得不同系统或模块能够无缝协作。