原型模式（Prototype Pattern） 
用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象

是用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。

OC中提供了对象的copy和mutableCopy方法，只需要实力类实现NSCopying和NSMutableCopying协议即可实现复制


原型模式包含以下主要角色：
抽象原型类（Prototype）：规定了具体原型对象支持复制必须实现的接口（在Object-C中指的是NSCopying或NSMutableCopying协议）
具体原型类(ConcretePrototype)：实现抽象原型类的支持复制必须实现的接口（在Object-C中指的是实现 - (id)copyWithZone:(nullable NSZone *)zone 或 - (id)mutableCopyWithZone:(nullable NSZone *)zone 方法）
访问类（Client）：使用具体原型类中的复制方法来复制新的对象。（在Object-C中指的是copy或者mutableCopy ）


我们以画圆（Circle）为例，假设我们需要在一张图画三个一模一样的图，除了圆心位置不同。
抽象原型类我们不用自己建立了，在Object-C中已经有了，我们选取 NSCopying协议作为原型模式的抽象原型类

创建和定义具体原型类 Circle, 并实现NSCopyong协议
//Circle
#import <Foundation/Foundation.h>

@interface Circle : NSObject<NSCopying>
@property (nonatomic, assign) CGFloat radius;
@property (nonatomic, assign) CGFloat lineWidth;
@property (nonatomic, assign) CGFloat centerX;
@property (nonatomic, assign) CGFloat centerY;
@end


// Circle.m
#import "Circle.h"

@implementation Circle

- (id)copyWithZone:(NSZone *)zone {
    Circle *ret = [[self class] allocWithZone:zone];
    ret.radius = self.radius;
    ret.lineWidth = self.lineWidth;
    ret.centerX = self.centerX;
    ret.centerY = self.centerY;
    return ret;
}

- (NSString *)description {
    return [NSString stringWithFormat:@"address = %p, radius = %lf, lineWidth = %lf, centerX = %lf, centerY = %lf", self, self.radius, self.lineWidth, self.centerX, self.centerY];
}

@end


+ (void)test {
    Circle *c1 = [[Circle alloc] init];
    c1.radius = 10.f;
    c1.lineWidth = 5.f;
    c1.centerX = 10.f;
    c1.centerY = 10.f;
    NSLog(@"c1: %@",c1);
    Circle *c2 = [c1 copy];
    c2.centerX = 40.f;
    c2.centerY = 40.f;
    NSLog(@"c2: %@",c2);
    
    Circle *c3 = [c1 copy];
    c3.centerX = 60.f;
    c3.centerY = 60.f;
    NSLog(@"c3: %@",c3);
}

可以看到每个Circle实例，地址是不同的，且内容里面除了位置信息，其他信息都是相同的

分析
复制的过程封闭到被复制对象的内部完成，修改复制的过程而不影响外部的使用者，满足迪米特原则。
对于只有部分属性变化的实例，不需要重新去创建进行并对每个属性进行重新赋值。
但是子类进行拓展属性时，需要重新实现复制相关协议接口，否则会出现复制不完全的问题
克隆包含循环引用的复杂对象可能会非常麻烦


适用场景
对象之间相同或相似，即只是个别的几个属性不同的时候。
对象的创建过程比较麻烦，但复制比较简单的时候。
在实际项目中，可以和工厂方法模式一起出现，通过copy的方法创建一个对象，然后由工厂方法提供给调用者
