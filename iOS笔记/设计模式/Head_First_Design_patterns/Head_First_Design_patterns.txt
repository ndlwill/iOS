oo设计原则:
多用组合，少用继承
针对接口编程，不针对实现编程
要依赖抽象，不要依赖具体类。

关系可以是IS-A（是一个），HAS—A（有一个）或IMPLEMENTS（实现）
实线+空白箭头，实线+实箭头，虚线+空白箭头

oo模式:
1.策略模式（Strategy Pattern）:
定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

2.观察者（Observer）模式
定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

3.装饰（decorate）者模式
动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

开放-关闭原则：允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。

4.工厂模式
工厂方法模式（Factory Method Pattern）通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。
正式定义：工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。

抽象工厂模式：这个模式可以创建产品的家族。提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。

在抽象工厂中利用工厂方法实现生产方法是相当自然的做法。

工厂方法使用继承，抽象工厂使用对象组合。

5.单例模式（Singleton Pattern）
确保一个类只有一个实例，并提供一个全局访问点。

6.命令模式
将“请求”封装成对象，以便使用