Instrument->Core Animation工具. 这个调试必须使用真机
1.记录了实时的fps数值，有些地方是0是因为屏幕没有滑动
2.Debug Options



================================优化
第一个调试选项"Color Blended Layers"正是用于检测哪里发生了图层混合，并用红色标记出来
因此我们需要尽可能减少看到的红色区域
1.图层混合 
上层是蓝色(RGB=0,0,1),透明度为50%，下层是红色(RGB=1,0,0)。
那么最终的显示效果是紫色(RGB=0.5,0,0.5)。这种颜色的混合(blending)需要消耗一定的GPU资源
如果只想显示最上层的蓝色，可以把它的透明度设置为100%，这样GPU会忽略下面所有的layer，从而节约了很多不必要的运算

把控件设置为opaque = true
UIView的opaque属性默认值就是true

backgroundColor属性，如果不设置这个属性，控件依然被认为是透明的
label.backgroundColor = UIColor.whiteColor()

对于UIImageView来说，不仅它自身需要是不透明的，它的图片也不能含有alpha通道


第二个调试选项是“Color Hits Green and Misses Red”
它表示如果命中缓存则显示为绿色，否则显示为红色，显然绿色越多越好，红色越少越好
这是因为layer进行光栅化后渲染成位图放在缓存中。
当屏幕出现滑动时，我们直接从缓存中读取而不必渲染，所以会看到绿色。
当新的label出现时，缓存中没有个这个label的位图，所以会变成红色。
第三点比较关键，缓存中的对象有效期只有100ms，即如果在0.1s内没有被使用就会自动从缓存中清理出去。这就是为什么停留一会儿再滑动就会看到红色。
2.光栅化
光栅化是将一个layer预先渲染成位图(bitmap)然后加入缓存中。如果对于阴影效果这样比较消耗资源的静态内容进行缓存，可以得到一定幅度的性能提升

将label的layer光栅化
//label.layer.shouldRasterize = true
光栅化会导致离屏渲染


把图片从PNG或JPEG等格式中解压出来，得到像素数据
如果GPU不支持这种颜色各式，CPU需要进行格式转换
3.第三个选项“Color Copied Images”就用来检测这种实时的格式转化，如果有则会将图片标记为蓝色。
当我们打开JPEG格式的图片时，CPU会进行一系列运算，将JPEG图片解压成像素数据。
显然这个工作会消耗不少时间，所以不应该在滑动时进行，我们应该预先处理好图片

4.第五个选项“Color Misaligned Images”
它表示如果图片需要缩放则标记为黄色，如果没有像素对齐则标记为紫色
图片的缩放需要占用时间,因此我们要尽可能保证无论是本地图片还是从网络或取得图片的大小，都与其frame保持一致


5.第六个选项“Color Offscreen-Rendered Yellow”会把需要离屏渲染的地方标记为黄色
OpenGL提交一个命令到Command Buffer，随后GPU开始渲染，渲染结果放到Render Buffer中，这是正常的渲染流程。
但是有一些复杂的效果无法直接渲染出结果，它需要分步渲染最后再组合起来，比如添加一个蒙版(mask)：
在前两个渲染通道中，GPU分别得到了纹理(texture，也就是那个相机图标)和layer(蓝色的蒙版)的渲染结果。但这两个渲染结果没有直接放入Render Buffer中，也就表示这是离屏渲染。直到第三个渲染通道，才把两者组合起来放入Render Buffer中。离屏渲染意味着把渲染结果临时保存，等用到时再取出，因此相对于普通渲染更占用资源
大部分情况下我们需要尽可能避免黄色的出现

以下情况可能会导致触发离屏渲染：
1.重写drawRect方法
2.有mask或者是阴影(layer.masksToBounds, layer.shadow*)，模糊效果也是一种mask
3.layer.shouldRasterize = true
前两者会自动触发离屏渲染，第三种方法是手动开启离屏渲染

可以看到tabbar和statusBar也是黄色，这是因为它们使用了模糊效果


图片使用了阴影，在设置阴影效果的四行代码下面添加一行：
imgView.layer.shadowPath = UIBezierPath(rect: imgView.bounds).CGPath
如果没有手动指定，Core Animation会去自动计算，这就会触发离屏渲染。
如果人为指定了阴影路径，就可以免去计算，从而避免产生离屏渲染
================================
cornerRadius：这个属性只会影响视图的背景颜色和 border
离屏渲染并非由设置圆角导致的

UIView
view.layer.cornerRadius = 5就直接能看到圆角

UILabel
对于 UILabel 这样内部还有子视图的控件就无能为力了 所以
label.layer.cornerRadius = 5
label.layer.masksToBounds = true