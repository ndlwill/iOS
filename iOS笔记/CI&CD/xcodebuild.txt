创建 ExportOptions.plist 文件。该文件包含有开发者账号与项目关联相关的配置，很重要。如果不想自己创建，使用 Xcode build 一次包之后就有了。
iOS 打包过程分为两步.第一部分，构建 xcarchive 文件。第二部分，导出 ipa 包
# 构建 xcarchive.  xcpretty -s 这部分是使用了 xcpretty 解析了 build 过程中的信息使之易读
xcodebuild archive -archivePath ".build/Test.xcarchive" -workspace XXX.xcworkspace -scheme XXX -configuration Release -sdk iphoneos | xcpretty -s
# 导出 ipa 包
xcodebuild -exportArchive -archivePath ".build/Test.xcarchive" -exportPath ".build/Test" -exportOptionsPlist ".option.plist" | xcpretty -s


可以对错误，警告给予高亮显示。使用方式：xcodebuild | xcpretty


xcodebuild命令:
从终端进入到projectname .xcodeproj 目录下。
有workspace时，参数中要带-workspace和-scheme。
只有project时，则参数中要带 -project和-scheme选项。

单写一个xcodebuild，工程编译使用默认的scheme和编译配置。
scheme、targets、配置、目标设备、SDK和导出数据位置可以在后面自定义配置

archive打包操作:
xcodebuild archive  -workspace PROJECT_NAME.xcworkspace   
-scheme SCHEME_NAME -configuration release -archivePath  
EXPORT_ARCHIVE_PATH 
-archivePath：设置项目的归档路径

导出ipa文件:
xcodebuild -exportArchive -archivePath EXPORT_ARCHIVE_PATH    
-exportPath EXPORT_IPA_PATH -exportOptionsPlist ExportOptionsPlistPath
-allowProvisioningUpdates

-exportArchive：导出ipa
-exportPath：导出ipa文件的路径
-exportOptionsPlist：文件导出时的配置信息
-allowProvisioningUpdates：允许xcodebuild与苹果网站通讯，进行自动签名，证书自动更新，生成。

单元测试:
xcodebuild test -project PROJECT_NAME.xcodeproj -scheme SCHEME_NAME 
-destination 'platform=iOS Simulator,name=iPhone 6s,OS=11.2' -
configuration Debug -derivedDataPath output

-derivedDataPath：产生的缓存文件放在./output目录下
 configuration：编译环境，选择Debug/Release
 -destination :选择test时的目标设备和系统版本号


UI测试/单元测试，针对某个方法进行测试:
xcodebuild test -project PROJECT_NAME.xcodeproj -scheme SCHEME_NAME 
-destination 'platform=iOS Simulator,name=iPhone 6s,OS=11.2' 
-only-testing:TARGET_NAME/CLASS_NAME/FUNC_NAME -quiet

-only-testing: 只测试某一个方法，target名/类名/方法名
-quiet : 除了错误和警告不打印任何信息