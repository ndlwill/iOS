https://scm-lab.joy25.com/help/ci/yaml/README.md

==================================================GitLab Runner
https://docs.gitlab.com/runner/

Advanced configuration:
https://docs.gitlab.com/runner/configuration/advanced-configuration.html

==================================================GitLab CI/CD pipeline configuration reference
https://scm-lab.joy25.com/help/ci/yaml/README.md

GitLab CI/CD pipelines are configured using a YAML file called .gitlab-ci.yml within each project.

The .gitlab-ci.yml file defines the structure and order of the pipelines and determines:
1.What to execute using GitLab Runner.
2.What decisions to make when specific conditions are encountered. For example, when a process succeeds or fails.

This topic covers CI/CD pipeline configuration. For other CI/CD configuration information, see:
1.GitLab CI/CD Variables, for configuring the environment the pipelines run in.
2.GitLab Runner advanced configuration, for configuring GitLab Runner.

We have complete examples of configuring pipelines:
1.For a quick introduction to GitLab CI/CD, follow our quick start guide.
2.For a collection of examples, see GitLab CI/CD Examples.
3.To see a large .gitlab-ci.yml file used in an enterprise, see the .gitlab-ci.yml file for gitlab.

Note:
If you have a mirrored repository that GitLab pulls from, you may need to enable pipeline triggering. Go to your project's
Settings > Repository > Pull from a remote repository > Trigger pipelines for mirror updates.

#####
Pipeline configuration begins with jobs. Jobs are the most fundamental element of a .gitlab-ci.yml file.
Jobs are:
Defined with constraints stating under what conditions they should be executed.
Top-level elements with an arbitrary name and must contain at least the script clause.
Not limited in how many can be defined.
#####

For example:
job1:
  script: "execute-script-for-job1"
job2:
  script: "execute-script-for-job2"
The above example is the simplest possible CI/CD configuration with two separate jobs, where each of the jobs executes a different command.
Of course a command can execute code directly (./configure;make;make install) or run a script (test.sh) in the repository.

Jobs are picked up by runners and executed within the environment of the runner. 
What is important is that each job is run independently from each other.

Validate the .gitlab-ci.yml:
Each instance of GitLab CI/CD has an embedded debug tool called Lint, which validates the content of your .gitlab-ci.yml files. 
You can find the Lint under the page ci/lint of your project namespace. For example, https://gitlab.example.com/gitlab-org/project-123/-/ci/lint.

Unavailable names for jobs:
Each job must have a unique name, but there are a few reserved keywords that can't be used as job names:
image
services
stages
types
before_script
after_script
variables
cache
include

Using reserved keywords:
If you get validation error when using specific values (for example, true or false), try to:
1.Quote them.
2.Change them to a different form. For example, /bin/true

Configuration parameters:
A job is defined as a list of parameters that define the job's behavior.
The following table lists available parameters for jobs:

Keyword Description

script  Shell script that is executed by a runner.

after_script    Override a set of commands that are executed after job.

allow_failure   Allow job to fail. Failed job does not contribute to commit status.

artifacts   List of files and directories to attach to a job on success. Also available: artifacts:paths, artifacts:exclude, artifacts:expose_as, artifacts:name, artifacts:untracked, artifacts:when, artifacts:expire_in, artifacts:reports.

before_script   Override a set of commands that are executed before job.

cache   List of files that should be cached between subsequent runs. Also available: cache:paths, cache:key, cache:untracked, and cache:policy.

coverage    Code coverage settings for a given job.

dependencies    Restrict which artifacts are passed to a specific job by providing a list of jobs to fetch artifacts from.

environment     Name of an environment to which the job deploys. Also available: environment:name, environment:url, environment:on_stop, environment:auto_stop_in and environment:action.

except      Limit when jobs are not created. Also available: except:refs, except:kubernetes, except:variables, and except:changes.

extends     Configuration entries that this job inherits from.

image   Use Docker images. Also available: image:name and image:entrypoint.

include     Allows this job to include external YAML files. Also available: include:local, include:file, include:template, and include:remote.

interruptible   Defines if a job can be canceled when made redundant by a newer run.

only    Limit when jobs are created. Also available: only:refs, only:kubernetes, only:variables, and only:changes.

pages   Upload the result of a job to use with GitLab Pages.

parallel    How many instances of a job should be run in parallel.

release     Instructs the runner to generate a Release object.

resource_group      Limit job concurrency.

retry   When and how many times a job can be auto-retried in case of a failure.

rules   List of conditions to evaluate and determine selected attributes of a job, and whether or not it's created. May not be used alongside only/except.

services    Use Docker services images. Also available: services:name, services:alias, services:entrypoint, and services:command.

stage   Defines a job stage (default: test).

tags    List of tags that are used to select a runner.

timeout     Define a custom job-level timeout that takes precedence over the project-wide setting.

trigger     Defines a downstream pipeline trigger.

variables   Define job variables on a job level.

when    When to run job. Also available: when:manual and when:delayed.

Global parameters:
Some parameters must be defined at a global level, affecting all jobs in the pipeline.

Global defaults:
Some parameters can be set globally as the default for all jobs using the default: keyword. Default parameters can then be overridden by job-specific configuration.
The following job parameters can be defined inside a default: block:
image
services
before_script
after_script
tags
cache
artifacts
retry
timeout
interruptible

In the following example, the ruby:2.5 image is set as the default for all jobs except the rspec 2.6 job, which uses the ruby:2.6 image:
default:
  image: ruby:2.5

rspec:
  script: bundle exec rspec

rspec 2.6:
  image: ruby:2.6
  script: bundle exec rspec

inherit:
https://gitlab.com/gitlab-org/gitlab/-/issues/207484

You can disable inheritance of globally defined defaults and variables with the inherit: parameter.
To enable or disable the inheritance of all variables: or default: parameters, use the following format:
default: true or default: false
variables: true or variables: false

To inherit only a subset of default: parameters or variables:, specify what you wish to inherit, and any not listed will not be inherited.
Use one of the following formats:
inherit:
  default: [parameter1, parameter2]
  variables: [VARIABLE1, VARIABLE2]
Or:
inherit:
  default:
    - parameter1
    - parameter2
  variables:
    - VARIABLE1
    - VARIABLE2

In the example below:
rubocop:
will inherit: Nothing.

rspec:
will inherit: the default image and the WEBHOOK_URL variable.
will not inherit: the default before_script and the DOMAIN variable.

capybara:
will inherit: the default before_script and image.
will not inherit: the DOMAIN and WEBHOOK_URL variables.

karma:
will inherit: the default image and before_script, and the DOMAIN variable.
will not inherit: WEBHOOK_URL variable.

default:
  image: 'ruby:2.4'
  before_script:
    - echo Hello World

variables:
  DOMAIN: example.com
  WEBHOOK_URL: https://my-webhook.example.com

rubocop:
  inherit:
    default: false
    variables: false
  script: bundle exec rubocop

rspec:
  inherit:
    default: [image]
    variables: [WEBHOOK_URL]
  script: bundle exec rspec

capybara:
  inherit:
    variables: false
  script: bundle exec capybara

karma:
  inherit:
    default: true
    variables: [DOMAIN]
  script: karma

==================================================GitLab CI/CD environment variables
https://scm-lab.joy25.com/help/ci/variables/README.md

GitLab CI/CD Variables, for configuring the environment the pipelines run in.

==================================================#####Getting started with GitLab CI/CD#####
https://scm-lab.joy25.com/help/ci/quick_start/README.md

==================================================#####GitLab CI/CD Examples#####
https://scm-lab.joy25.com/help/ci/examples/README.md

==================================================a large .gitlab-ci.yml file used in an enterprise
https://gitlab.com/gitlab-org/gitlab/blob/master/.gitlab-ci.yml
