https://github.com/kudoleh/iOS-Clean-Architecture-MVVM

https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3

// Modular Architecture
https://medium.com/olx-engineering/modular-architecture-in-ios-c1a1e3bff8e9


Infrastructure: 基础设施
    Network


==================================================The Clean Architecture:
https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html

Clean Architecture 强调依赖方向应从外层指向内层
Domain 是核心，它不应该知道 Data 层的任何细节。

#####
Domain 层依赖的是 “抽象”（例如 Repository 协议）
Data 层依赖的是 “具体”（实现 Repository 协议的具体类）
这就是所谓的“反向依赖”：
→ 虽然业务逻辑需要访问数据，但代码层面是由 Data 层依赖 Domain 层的协议接口，而不是反过来。

Domain 层（业务逻辑，只定义协议）
// Domain
protocol MovieRepository {
    func fetchPopularMovies() async throws -> [Movie]
}

struct FetchPopularMoviesUseCase {
    let repository: MovieRepository

    func execute() async throws -> [Movie] {
        try await repository.fetchPopularMovies()
    }
}


Data 层（具体实现，依赖 Domain 的协议）
// Data
final class MovieRepositoryImpl: MovieRepository {
    private let apiClient: APIClient

    init(apiClient: APIClient) {
        self.apiClient = apiClient
    }

    func fetchPopularMovies() async throws -> [Movie] {
        return try await apiClient.get("/movies/popular")
    }
}

MovieRepositoryImpl 实现了 MovieRepository（协议在 Domain 中）
所以 Data 层 依赖 Domain 层
UseCase 只依赖抽象（MovieRepository），并不关心谁实现它

那为什么要这么做？
原因 1：业务核心稳定、可复用
业务逻辑（Domain）比数据来源更“稳定”。比如你未来从 REST API 换成 GraphQL 或本地缓存，Domain 层完全不需要动。
原因 2：可测试性高
你可以给 MovieRepository 提供一个 Mock 实现，完全不依赖 Data 层，进行单元测试。
原因 3：解耦架构，演化灵活
可以非常方便地切换、组合、替换底层实现而不影响上层业务逻辑。

Clean Architecture 中的 反向依赖 是通过“定义协议在 Domain 层、实现放在 Data 层”的方式实现的，这样可以确保业务逻辑与实现细节解耦，符合“依赖倒置原则”。
#####


#####重要
Clean Architecture works really good with (Test Driven Development) TDD. 
This architecture makes the project testable and layers can be replaced easily (UI and Data).
#####


Clean Architecture（“干净架构”）是一种高度分层、可测试、可维护、可演化的软件架构思想
为了实现这个原则，常常使用：
依赖注入
协议抽象（protocol）
反向依赖（例如用 interface 让外层调用内层）

architectures 思想:
Independent of Frameworks.
The architecture does not depend on the existence of some library of feature laden software. 
This allows you to use such frameworks as tools, rather than having to cram your system into their limited constraints.

Testable. The business rules can be tested without the UI, Database, Web Server, or any other external element.

Independent of UI. The UI can change easily, without changing the rest of the system. 
A Web UI could be replaced with a console UI, for example, without changing the business rules.

Independent of Database. 
You can swap out Oracle or SQL Server, for Mongo, BigTable, CouchDB, or something else. 
Your business rules are not bound to the database.

Independent of any external agency. In fact your business rules simply don’t know anything at all about the outside world.


The Dependency Rule:
The concentric circles represent different areas of software. In general, the further in you go, the higher level the software becomes.
This rule says that source code dependencies can only point inwards.
Nothing in an inner circle can know anything at all about something in an outer circle.
In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle.
That includes, functions, classes. variables, or any other named software entity.

By the same token, data formats used in an outer circle should not be used by an inner circle, 
especially if those formats are generate by a framework in an outer circle. 
We don’t want anything in an outer circle to impact the inner circles.


Entities:
Entities encapsulate Enterprise wide business rules. An entity can be an object with methods, 
or it can be a set of data structures and functions. 
It doesn’t matter so long as the entities could be used by many different applications in the enterprise.

If you don’t have an enterprise, and are just writing a single application, 
then these entities are the business objects of the application. They encapsulate the most general and high-level rules. 
They are the least likely to change when something external changes. 
For example, you would not expect these objects to be affected by a change to page navigation, or security. 
No operational change to any particular application should affect the entity layer.


Use Cases:
The software in this layer contains application specific business rules. 
It encapsulates and implements all of the use cases of the system. These use cases orchestrate the flow of data to and from the entities, 
and direct those entities to use their enterprise wide business rules to achieve the goals of the use case.

We do not expect changes in this layer to affect the entities. 
We also do not expect this layer to be affected by changes to externalities such as the database, 
the UI, or any of the common frameworks. This layer is isolated from such concerns.

We do, however, expect that changes to the operation of the application will affect the use-cases and therefore the software in this layer. 
If the details of a use-case change, then some code in this layer will certainly be affected.


Interface Adapters:
The software in this layer is a set of adapters that convert data from the format most convenient for the use cases and entities, to the format most convenient for some external agency such as the Database or the Web.
It is this layer, for example, that will wholly contain the MVC architecture of a GUI.
The Presenters, Views, and Controllers all belong in here.
The models are likely just data structures that are passed from the controllers to the use cases, and then back from the use cases to the presenters and views.

Similarly, data is converted, in this layer, from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used. i.e. The Database.
No code inward of this circle should know anything at all about the database.
If the database is a SQL database, then all the SQL should be restricted to this layer, and in particular to the parts of this layer that have to do with the database.

Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.


Frameworks and Drivers:
The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. 
Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.

This layer is where all the details go. The Web is a detail. The database is a detail. 
We keep these things on the outside where they can do little harm.



Source code dependencies always point inwards. 
As you move inwards the level of abstraction increases. The outermost circle is low level concrete detail. 
As you move inwards the software grows more abstract, and encapsulates higher level policies. The inner most circle is the most general.


#####
Crossing boundaries:
the Controllers and Presenters communicating with the Use Cases in the next layer. 
Note the flow of control. It begins in the controller, moves through the use case, and then winds up executing in the presenter. 
Note also the source code dependencies. Each one of them points inwards towards the use cases.

We usually resolve this apparent contradiction by using the Dependency Inversion Principle.
For example, consider that the use case needs to call the presenter. 
However, this call must not be direct because that would violate The Dependency Rule: No name in an outer circle can be mentioned by an inner circle. 
So we have the use case call an interface (Shown here as Use Case Output Port) in the inner circle, and have the presenter in the outer circle implement it.

The same technique is used to cross all the boundaries in the architectures.
We take advantage of dynamic polymorphism to create source code dependencies that oppose the flow of control so that we can conform to The Dependency Rule no matter what direction the flow of control is going in.
#####

What data crosses the boundaries:
Typically the data that crosses the boundaries is simple data structures
You can use basic structs or simple Data Transfer objects if you like.
Or the data can simply be arguments in function calls.
Or you can pack it into a hashmap, or construct it into an object.
The important thing is that isolated, simple, data structures are passed across the boundaries.
We don’t want to cheat and pass Entities or Database rows.
We don’t want the data structures to have any kind of dependency that violates The Dependency Rule.

For example, many database frameworks return a convenient data format in response to a query. 
We might call this a RowStructure. We don’t want to pass that row structure inwards across a boundary. 
That would violate The Dependency Rule because it would force an inner circle to know something about an outer circle.


Conclusion
Conforming to these simple rules is not hard, and will save you a lot of headaches going forward. 
By separating the software into layers, and conforming to The Dependency Rule, 
you will create a system that is intrinsically testable, with all the benefits that implies. 
When any of the external parts of the system become obsolete, like the database, or the web framework, 
you can replace those obsolete elements with a minimum of fuss.


Clean Architecture（清洁架构）
一种软件架构模式，旨在创建可维护、可扩展、测试友好的应用程序
它通过将应用程序的不同责任分离到不同的层来实现这些目标。

核心思想:
Clean Architecture 的核心思想是将应用程序的各个组件分成不同的层级，每一层只与其相邻的层交互，从而形成一个松耦合的系统结构。
每一层都具有特定的职责，依赖于内层的内容，而不是外层。

架构层次:
Entities（实体层）：这一层包含系统的业务规则和核心实体。实体通常是业务模型的核心，比如用户、订单等。它们不依赖于任何其他层。

Use Cases（用例层）：这一层包含应用程序的业务逻辑和用例。它们使用实体来实现具体的应用程序逻辑，但不直接依赖于数据访问或用户界面。

Interface Adapters（接口适配器层）：这一层负责将用例和实体的数据转换为外部系统（如数据库、网络服务）所需的格式，并将这些外部系统的数据转换为用例和实体所需的格式。它包含控制器、视图模型、数据传输对象（DTO）等。

Frameworks and Drivers（框架和驱动层）：这是最外层，包含具体的实现和框架（如数据库、网络库、UI框架）。它实现了具体的技术细节和第三方库的集成。

数据层（Data Layer）的位置
数据层（或称为数据访问层）通常位于架构的外层（Interface Adapters 或 Frameworks and Drivers），其主要作用是提供数据的存取功能，包括数据库操作、网络请求等。
它直接与数据库、文件系统或网络服务交互，但它不包含业务逻辑或用例逻辑。这样做的目的是确保：
业务逻辑的独立性：业务逻辑层（Use Cases 和 Entities）不依赖于具体的数据存取实现，而是通过接口与数据层交互。
易于测试：业务逻辑可以独立于数据存取逻辑进行单元测试。
灵活性：可以在不影响业务逻辑的情况下更换数据存取实现（例如，从 SQL 数据库切换到 NoSQL 数据库）。

Entities Layer：
struct User {
    let id: Int
    let name: String
}

Use Cases Layer：
protocol UserRepository {
    func getUser(id: Int) -> User
}

class GetUserUseCase {
    private let repository: UserRepository

    init(repository: UserRepository) {
        self.repository = repository
    }

    func execute(id: Int) -> User {
        return repository.getUser(id: id)
    }
}

Interface Adapters Layer：
class UserRepositoryImpl: UserRepository {
    func getUser(id: Int) -> User {
        // Convert data from database to User entity
    }
}

Frameworks and Drivers Layer：
class Database {
    func fetchUser(id: Int) -> [String: Any] {
        // Fetch user data from the database
    }
}

在这个设计中，UserRepositoryImpl 是数据层的实现，它与数据库交互。GetUserUseCase 只依赖于 UserRepository 协议，因此它不关心 UserRepositoryImpl 的具体实现。
这样，如果我们将数据源从数据库切换到网络服务，只需更改 UserRepositoryImpl 实现，而不会影响 GetUserUseCase。

==================================================iOS-Clean-Architecture-MVVM:
When we develop software it is important to not only use design patterns, but also architectural patterns.
In mobile software engineering, the most widely used are MVVM, Clean Architecture and Redux patterns.
how architectural patterns MVVM and Clean Architecture can be applied in an iOS app.

###
The main rule is not to have dependencies from inner layers to outers layers. 
The arrows pointing from outside to inside is the Dependency rule. 
There can only be dependencies from outer layer inward.
###



After grouping all layers we have: Presentation, Domain and Data layers.

==================================================Domain Layer
Domain Layer (Business logic) is the inner-most part of the onion (without dependencies to other layers, it is totally isolated).
It contains Entities(Business Models), Use Cases, and Repository Interfaces.
This layer could be potentially reused within different projects.
Such separation allows for not using the host app within the test target because no dependencies (also 3rd party) are needed — this makes the Domain Use Cases tests take just a few seconds.
Note: Domain Layer should not include anything from other layers(e.g Presentation — UIKit or SwiftUI or Data Layer — Mapping Codable)

Domain Layer它负责什么？
处理业务逻辑（Business Logic）
定义Use Cases（用例）/ Services
声明抽象接口（protocols / interfaces），让 Data 层去实现
不依赖 UI 层、不依赖具体的数据实现（如数据库、网络）

The reason that good architecture is centered around Use Cases is so that architects can safely describe the structures that support those Use cases without committing to frameworks, tools, and environment. 
It is called Screaming Architecture.
https://blog.cleancoder.com/uncle-bob/2011/09/30/Screaming-Architecture.html

你应该首先问：
“这个系统要做什么事情？它的核心业务用例是什么？”
而不是：
“我要用 SwiftUI / CoreData / Firebase / Alamofire 怎么做这个 app？”

业务用例：AddTaskUseCase（添加一个任务）
protocol TaskRepository {
    func save(task: Task) throws
}

struct AddTaskUseCase {
    let repository: TaskRepository
    
    func execute(title: String, dueDate: Date) throws {
        let task = Task(title: title, dueDate: dueDate)
        try repository.save(task: task)
    }
}

这个用例不关心你是用 SQLite、CoreData、Realm、CloudKit 还是文件保存。
它也不关心你是用 UIKit 还是 SwiftUI 来展示 UI。
它只是定义了“添加任务”的业务逻辑。

这种做法的好处是：
未来你可以用不同的 UI 框架（SwiftUI → UIKit）而不动 UseCase。
可以把 CoreData 替换成 SQLite、Realm，而不动 UseCase。
可以在单元测试中 mock TaskRepository，测试 UseCase 不依赖数据库或 UI。


Note: Another way to create Use Cases is to use UseCase protocol with start() function and all use cases implementations will conform to this protocol.
Use Cases are also called Interactors

protocol SearchMoviesUseCase {
    func start()
}

final class DefaultSearchMoviesUseCase: SearchMoviesUseCase {

    private let moviesRepository: MoviesRepository
    private let moviesQueriesRepository: MoviesQueriesRepository
}

Note: A UseCase can depend on other UseCases


==================================================Presentation Layer
Presentation Layer contains UI (UIViewControllers or SwiftUI Views). 
Views are coordinated by ViewModels (Presenters) which execute one or many Use Cases. Presentation Layer depends only on the Domain Layer.

Because keeping the ViewModel clean from any UI frameworks like UIKit, SwiftUI or WatchKit will allow for easy reuse and refactor.
For example in future the Views refactor from UIKit to SwiftUI will be much easier, because the ViewModel will not need to change.

protocol MoviesListViewModelInput {
    func viewDidLoad()
    func viewWillAppear()
    func didSelectItem(at index: Int)
}

protocol MoviesListViewModelOutput {
    var items: Observable<[MoviesListItemViewModel]> { get }
    var errorTitle: String { get }
}

typealias MoviesListViewModel = MoviesListViewModelInput & MoviesListViewModelOutput

// protocol MoviesListViewModel: MoviesListViewModelInput, MoviesListViewModelOutput { }


struct MoviesListViewModelActions {
    /// Note: if you would need to edit movie inside Details screen and update this Movies List screen with updated movie then you would need this closure:
    /// showMovieDetails: (Movie, @escaping (_ updated: Movie) -> Void) -> Void
    let showMovieDetails: (Movie) -> Void
}

final class DefaultMoviesListViewModel: MoviesListViewModel {

    private let searchMoviesUseCase: SearchMoviesUseCase
    private let actions: MoviesListViewModelActions?
    
    init(
        searchMoviesUseCase: SearchMoviesUseCase,
        actions: MoviesListViewModelActions? = nil,
        mainQueue: DispatchQueueType = DispatchQueue.main
    ) {
        self.searchMoviesUseCase = searchMoviesUseCase
        self.actions = actions
        self.mainQueue = mainQueue
    }
}


Note: We use interfaces MoviesListViewModelInput and MoviesListViewModelOutput to make MoviesListViewController testable, 
by mocking ViewModel easily(example).
we have MoviesListViewModelActions closures, which tells to MoviesSearchFlowCoordinator when to present another views.
When action closure is called coordinator will present movie details screen. 
We use a struct to group actions because we can add later easily more actions if needed.


Presentation Layer also contains MoviesListViewController which is bound to data(items) of MoviesListViewModel.


UI cannot have access to business logic or application logic (Business Models and UseCases), only ViewModels can do it.
This is the separation of concerns. We cannot pass business models directly to the View (UI).
This why we are mapping Business Models into ViewModel inside ViewModel and pass them to the View.


final class MoviesListViewController: UIViewControlle, StoryboardInstantiable {
    
    private var viewModel: MoviesListViewModel!
    
    final class func create(with viewModel: MoviesListViewModel) -> MoviesListViewController {
        let vc = MoviesListViewController.instantiateViewController()
        vc.viewModel = viewModel
        return vc
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        bind(to: viewModel)
    }
    
    private func bind(to viewModel: MoviesListViewModel) {
        viewModel.items.observe(on: self) { [weak self] items in
            self?.moviesTableViewController?.items = items
        }
        viewModel.error.observe(on: self) { [weak self] error in
            self?.showError(error)
        }
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let searchText = searchBar.text, !searchText.isEmpty else { return }
        viewModel.didSearch(query: searchText)
    }
}

final class Observable<Value> {
    
    struct Observer {
        weak var observer: AnyObject?
        let block: (Value) -> Void
    }
    
    private var observers = [Observer]()
    
    var value: Value {
        didSet { notifyObservers() }
    }
    
    init(_ value: Value) {
        self.value = value
    }
    
    func observe(on observer: AnyObject, observerBlock: @escaping (Value) -> Void) {
        observers.append(Observer(observer: observer, block: observerBlock))
        observerBlock(self.value)
    }
    
    func remove(observer: AnyObject) {
        observers = observers.filter { $0.observer !== observer }
    }
    
    private func notifyObservers() {
        for observer in observers {
            observer.block(self.value)
        }
    }
}


We also assign function showMovieDetails(movie:) to Actions of MoviesListViewModel inside MoviesSearchFlowCoordinator, 
to present movie details screens from flow coordinator:

protocol MoviesSearchFlowCoordinatorDependencies  {
    func makeMoviesListViewController(
        actions: MoviesListViewModelActions
    ) -> MoviesListViewController
    func makeMoviesDetailsViewController(movie: Movie) -> UIViewController
    func makeMoviesQueriesSuggestionsListViewController(
        didSelect: @escaping MoviesQueryListViewModelDidSelectAction
    ) -> UIViewController
}

final class MoviesSearchFlowCoordinator {
    
    private weak var navigationController: UINavigationController? // ###
    private let dependencies: MoviesSearchFlowCoordinatorDependencies// ###

    private weak var moviesListVC: MoviesListViewController?
    private weak var moviesQueriesSuggestionsVC: UIViewController?

    init(navigationController: UINavigationController,
         dependencies: MoviesSearchFlowCoordinatorDependencies) {
        self.navigationController = navigationController
        self.dependencies = dependencies
    }
    
    func start() {
        // Note: here we keep strong reference with actions, this way this flow do not need to be strong referenced
        let actions = MoviesListViewModelActions(showMovieDetails: showMovieDetails,
                                                 showMovieQueriesSuggestions: showMovieQueriesSuggestions,
                                                 closeMovieQueriesSuggestions: closeMovieQueriesSuggestions)
        let vc = dependencies.makeMoviesListViewController(actions: actions)

        navigationController?.pushViewController(vc, animated: false)
        moviesListVC = vc
    }

    private func showMovieDetails(movie: Movie) {
        let vc = dependencies.makeMoviesDetailsViewController(movie: movie)
        navigationController?.pushViewController(vc, animated: true)
    }

    private func showMovieQueriesSuggestions(didSelect: @escaping (MovieQuery) -> Void) {}

    private func closeMovieQueriesSuggestions() {}
}

Note: We use Flow Coordinator for presentation logic, to reduce View Controllers’ size and responsibility. 
We have strong reference to Flow (with action closures, self functions) to keep Flow not deallocated while is needed.



==================================================Data Layer
Data Layer contains Repository Implementations and one or many Data Sources. 
Repositories are responsible for coordinating data from different Data Sources. 
Data Source can be Remote or Local (for example persistent database). 
Data Layer depends only on the Domain Layer. 
In this layer, we can also add mapping of Network JSON Data (e.g. Decodable conformance) to Domain Models.


Data Layer contains DefaultMoviesRepository. It conforms to interfaces defined inside Domain Layer (Dependency Inversion).

final class DefaultMoviesRepository {

    private let dataTransferService: DataTransferService// API Data Service
    private let cache: MoviesResponseStorage// Persistent Data Storage
    private let backgroundQueue: DataTransferDispatchQueue

    init(
        dataTransferService: DataTransferService,
        cache: MoviesResponseStorage,
        backgroundQueue: DataTransferDispatchQueue = DispatchQueue.global(qos: .userInitiated)
    ) {
        self.dataTransferService = dataTransferService
        self.cache = cache
        self.backgroundQueue = backgroundQueue
    }
}

Data Transfer Object (DTO)
Note: Data Transfer Objects DTO is used as intermediate object for mapping from JSON response into Domain.
Also if we want to cache endpoint response we would store Data Transfer Objects in persistent storage by mapping them into Persistent objects(e.g. DTO -> NSManagedObject).

In general Data Repositories can be injected with API Data Service and with Persistent Data Storage.
The storage and API can be replaced by totally different implementations (from CoreData to Realm for example).



==================================================Data Flow
1. View(UI) calls method from ViewModel (Presenter).
2. ViewModel executes Use Case.
3. Use Case combines data from User and Repositories.
4. Each Repository returns data from a Remote Data (Network), Persistent DB Storage Source or In-memory Data (Remote or Cached).
5. Information flows back to the View(UI) where we display the list of items.


==================================================Infrastructure Layer (Network)
It is a wrapper around network framework, it can be Alamofire (or another framework). 
It can be configured with network parameters (for example base URL). 
It also supports defining endpoints and contains data mapping methods (using Decodable).


==================================================MVVM
Different view implementations can be used with the same ViewModel. 
For example, you can use CarsAroundListView and CarsAroundMapView and use CarsAroundViewModel for both.

Data Binding between View and ViewModel can be done for example with closures, delegates or observables (e.g. RxSwift).

// data binding from ViewController:
private func bind(to viewModel: MoviesListViewModel) {
    viewModel.items.observe(on: self) { [weak self] _ in self?.updateItems() }
    viewModel.loading.observe(on: self) { [weak self] in self?.updateLoading($0) }
    viewModel.query.observe(on: self) { [weak self] in self?.updateSearchQuery($0) }
    viewModel.error.observe(on: self) { [weak self] in self?.showError($0) }
}

The View has a direct relationship to ViewModel and notifies it whenever an event inside View happens. 
From ViewModel, there is no direct reference to View (only Data Binding)



==================================================MVVMs Communication
1. Delegation
ViewModel of one MVVM(screen) communicates with another ViewModel of another MVVM(screen) using delegation pattern:

For example, we have ItemsListViewModel and ItemEditViewModel. 
Then we create a protocol ItemEditViewModelDelegate with method ItemEditViewModelDidEditItem(item). 
And we make it conform to this protocol: extension ListItemsViewModel: ItemEditViewModelDelegate

// Step 1: Define delegate and add it to first ViewModel as weak property
protocol MoviesQueryListViewModelDelegate: class {
    func moviesQueriesListDidSelect(movieQuery: MovieQuery)
}
...
final class DefaultMoviesQueryListViewModel: MoviesListViewModel {
    private weak var delegate: MoviesQueryListViewModelDelegate?
    
    func didSelect(item: MoviesQueryListViewItemModel) { 
        // Note: We have to map here from View Item Model to Domain Enity
        delegate?.moviesQueriesListDidSelect(movieQuery: MovieQuery(query: item.query))
    }
}

// Step 2:  Make second ViewModel to conform to this delegate
extension MoviesListViewModel: MoviesQueryListViewModelDelegate {
    func moviesQueriesListDidSelect(movieQuery: MovieQuery) {
        update(movieQuery: movieQuery)
    }
}

Note: We can also name Delegates in this case as Responders: ItemEditViewModelResponder


2. #####Closures#####
Another way to communicate is by using closures which are assigned or injected by FlowCoordinator.
In the example project we can see how MoviesListViewModel uses action closure showMovieQueriesSuggestions to show the MoviesQueriesSuggestionsView.
It also passes parameter (_ didSelect: MovieQuery) -> Void so it can be called back from that View.
The communication is connected inside MoviesSearchFlowCoordinator:

// MoviesQueryList.swift

// Step 1: Define action closure to communicate to another ViewModel, e.g. here we notify MovieList when query is selected
typealias MoviesQueryListViewModelDidSelectAction = (MovieQuery) -> Void

// Step 2: Call action closure when needed
class MoviesQueryListViewModel {
    init(didSelect: MoviesQueryListViewModelDidSelectAction? = nil) {
        self.didSelect = didSelect
    }
    func didSelect(item: MoviesQueryListItemViewModel) {
        didSelect?(MovieQuery(query: item.query))
    }
}

// MoviesQueryList.swift

// Step 3: When presenting MoviesQueryListView we need to pass this action closure as paramter (_ didSelect: MovieQuery) -> Void
struct MoviesListViewModelActions {
    let showMovieQueriesSuggestions: (@escaping (_ didSelect: MovieQuery) -> Void) -> Void
}

class MoviesListViewModel { 
    var actions: MoviesListViewModelActions?

    func showQueriesSuggestions() {
        actions?.showMovieQueriesSuggestions { self.update(movieQuery: $0) } 
        //or simpler actions?.showMovieQueriesSuggestions(update)
    }
}

// FlowCoordinator.swift

// Step 4: Inside FlowCoordinator we connect communication of two viewModels, by injecting actions closures as self function
class MoviesSearchFlowCoordinator {
    func start() {
        let actions = MoviesListViewModelActions(showMovieQueriesSuggestions: self.showMovieQueriesSuggestions)
        let vc = dependencies.makeMoviesListViewController(actions: actions)  
        present(vc)
    }

    private func showMovieQueriesSuggestions(didSelect: @escaping (MovieQuery) -> Void) {
        let vc = dependencies.makeMoviesQueriesSuggestionsListViewController(didSelect: didSelect)
        present(vc)
    }
}



==================================================Dependency Direction
Presentation Layer -> Domain Layer <- Data Repositories Layer

Presentation Layer (MVVM) = ViewModels(Presenters) + Views(UI)

Domain Layer = Entities + Use Cases + Repositories Interfaces

Data Repositories Layer = Repositories Implementations + API(Network) + Persistence DB


==================================================
Presentation 层依赖 Domain 层（调用 UseCase、实体等）
Data 层依赖 Domain 层（实现接口，比如 Repository）
Domain 层不应该依赖 Presentation 或 Data 层


==================================================Domain 层 + Data 层 实现 接口 + 注入：例子
例如你在 Domain 层这样写
protocol MovieRepository {
    func fetchPopularMovies() -> [Movie]
}

UseCase 用这个协议：
struct FetchPopularMoviesUseCase {
    let repository: MovieRepository

    func execute() -> [Movie] {
        return repository.fetchPopularMovies()
    }
}

具体实现是在 Data 层提供的，比如：
class MovieRepositoryImpl: MovieRepository {
    func fetchPopularMovies() -> [Movie] {
        // 实际访问 API 或数据库
    }
}

然后你在组装阶段（比如在 App 层）将 Data 层的实现注入给 Domain 层的 UseCase：
let repo = MovieRepositoryImpl()
let useCase = FetchPopularMoviesUseCase(repository: repo)
这叫依赖注入（Dependency Injection），你在外部将实现注入进去。

依赖倒置原则（DIP）：
高层模块（业务规则）不应该依赖低层模块（数据实现）；它们都应该依赖抽象。

依赖注入（Dependency Injection, 简称 DI）确实是实现“依赖倒置原则（Dependency Inversion Principle）”的一种方式。


==================================================让 Data 层负责 Codable，Domain 层用纯模型
UserDTO 是用于网络传输的 Data Transfer Object（DTO）

Data 层（带 Codable）：
// Data 层专用
struct UserDTO: Codable {
    let id: Int
    let name: String
}

Domain 层（不带 Codable）：
// 领域层纯模型
struct User {
    let id: Int
    let name: String
}

映射逻辑（Data 层中实现）：
extension UserDTO {
    func toDomainModel() -> User {
        return User(id: self.id, name: self.name)
    }
}

==================================================ViewModel（MVVM + Rx）
举个例子：登录功能（Login）

ViewModel（MVVM + Rx）
class LoginViewModel {
    // Input
    let username = BehaviorRelay<String>(value: "")
    let password = BehaviorRelay<String>(value: "")
    let loginTapped = PublishRelay<Void>()

    // Output
    let isLoading = BehaviorRelay<Bool>(value: false)
    let loginResult = PublishRelay<Result<User, Error>>()

    private let loginUseCase: LoginUseCase
    private let disposeBag = DisposeBag()

    init(loginUseCase: LoginUseCase) {
        self.loginUseCase = loginUseCase

        loginTapped
            .withLatestFrom(Observable.combineLatest(username, password))
            .flatMapLatest { username, password in
                self.isLoading.accept(true)
                return loginUseCase
                    .execute(username: username, password: password)
                    .asObservable()
                    .materialize()
            }
            .subscribe(onNext: { [weak self] event in
                self?.isLoading.accept(false)
                switch event {
                case .next(let user):
                    self?.loginResult.accept(.success(user))
                case .error(let error):
                    self?.loginResult.accept(.failure(error))
                default: break
                }
            })
            .disposed(by: disposeBag)
    }
}

UseCase（Domain 层）
struct LoginUseCase {
    let authRepository: AuthRepository

    func execute(username: String, password: String) -> Single<User> {
        return authRepository.login(username: username, password: password)
    }
}

Data 层实现（Repository）
class AuthRepositoryImpl: AuthRepository {
    func login(username: String, password: String) -> Single<User> {
        return networkProvider
            .request(.login(username, password))
            .map(UserDTO.self)
            .map { $0.toDomain() }
    }
}


###




==================================================AppDIContainer
AppDIContainer 是一种 依赖注入容器（Dependency Injection Container） 的实现，在 iOS 架构中常用于集中管理应用的依赖关系。

它的作用是提供应用程序中各种服务或模块的实例（如网络服务、数据库、ViewModel、UseCase、Repository 等），从而让其他部分（比如 AppFlowCoordinator）不需要自己去初始化这些依赖，而是 由容器统一创建和提供。


使用 AppDIContainer 有几个明显的好处：
解耦
各模块之间通过协议交互，不直接创建彼此，降低耦合度，方便测试和维护。
集中管理依赖
所有依赖的初始化都集中在容器中，结构清晰。
方便测试
可以在测试中替换容器中的依赖为 mock 实现，提高测试能力。
支持多模块架构
在大规模项目中，可以按模块组织多个 DI 容器，便于管理。


final class AppDIContainer {

    lazy var networkService: NetworkService = {
        DefaultNetworkService()
    }()

    lazy var coreDataStorage: CoreDataStorage = {
        CoreDataStorage.shared
    }()

    func makeHomeDIContainer() -> HomeDIContainer {
        return HomeDIContainer(dependencies: self)
    }
}

它可能会提供：
网络服务（如 NetworkService、APIClient）
本地存储服务（如 CoreDataStorage、UserDefaults 包装器）
模块 DI 容器生成器（比如 makeHomeDIContainer()）
Use Case 或 Repository 的构建方法


配合 FlowCoordinator 使用
appFlowCoordinator = AppFlowCoordinator(
    navigationController: navigationController,
    appDIContainer: appDIContainer
)
这表示 AppFlowCoordinator 会依赖 AppDIContainer 来构建它所需的模块和服务，比如进入首页、详情页等的初始化流程。


final class AppFlowCoordinator {

    var navigationController: UINavigationController
    private let appDIContainer: AppDIContainer // AppFlowCoordinator 依赖 AppDIContainer
    
    // 构造函数注入（Constructor Injection）方式
    /*
    构造函数注入是依赖注入的常见模式之一，它具有以下优点：
    明确声明依赖关系
    保证类构造时依赖已就绪
    有利于测试（可以注入 mock 版本）
    */
    init(
        navigationController: UINavigationController,
        appDIContainer: AppDIContainer
    ) {
        self.navigationController = navigationController
        self.appDIContainer = appDIContainer
    }

    func start() {
        // In App Flow we can check if user needs to login, if yes we would run login flow
        let moviesSceneDIContainer = appDIContainer.makeMoviesSceneDIContainer()
        let flow = moviesSceneDIContainer.makeMoviesSearchFlowCoordinator(navigationController: navigationController)
        flow.start()
    }
}

AppDelegate（持有 AppDIContainer）  
    ⬇️ 创建
AppFlowCoordinator（依赖 AppDIContainer）
    ⬇️ 调用
MoviesSceneDIContainer（通过 appDIContainer 提供）
    ⬇️ 创建
MoviesSearchFlowCoordinator
这是一条DI + Coordinator 架构链条：每一级依赖上一级容器/协调器提供服务或模块。


Dependency Injection 是一种 设计模式，用于将一个对象所依赖的组件（service、repository、use case 等）从外部传入，而不是在对象内部直接创建。


==================================================Dependency Injection Container
Dependency injection is a technique whereby one object supplies the dependencies of another object. 
#####
DIContainer in your application is the central unit of all injections.
#####

1. #####Using dependencies factory protocols#####
One of the options is to declare a dependencies protocol that delegates the creation of dependency to DIContainer. 
To do this we need to define MoviesSearchFlowCoordinatorDependencies protocol and make your MoviesSceneDIContainer to conform to this protocol, 
and then inject it into the MoviesSearchFlowCoordinator that needs this injection to create and present MoviesListViewController. Here are the steps:

// Define Dependencies protocol for class or struct that needs it
protocol MoviesSearchFlowCoordinatorDependencies  {
    func makeMoviesListViewController() -> MoviesListViewController
}

class MoviesSearchFlowCoordinator {
    
    private let dependencies: MoviesSearchFlowCoordinatorDependencies

    init(dependencies: MoviesSearchFlowCoordinatorDependencies) {
        self.dependencies = dependencies
    }
...
}

// Make the DIContainer to conform to this protocol
extension MoviesSceneDIContainer: MoviesSearchFlowCoordinatorDependencies {}

// And inject MoviesSceneDIContainer `self` into class that needs it
final class MoviesSceneDIContainer {
    ...
    // MARK: - Flow Coordinators
    func makeMoviesSearchFlowCoordinator(navigationController: UINavigationController) -> MoviesSearchFlowCoordinator {
        return MoviesSearchFlowCoordinator(navigationController: navigationController,
                                           dependencies: self)
    }
}


2. Using closures
Another option is to use closures. 
To do it we need to declare closure inside the class that needs an injection and then we inject this closure. For example:
// Define makeMoviesListViewController closure that returns MoviesListViewController
class MoviesSearchFlowCoordinator {
   
    private var makeMoviesListViewController: () -> MoviesListViewController

    init(navigationController: UINavigationController,
         makeMoviesListViewController: @escaping () -> MoviesListViewController) {
        ...
        self.makeMoviesListViewController = makeMoviesListViewController
    }
    ...
}

// And inject MoviesSceneDIContainer's `self`.makeMoviesListViewController function into class that needs it
final class MoviesSceneDIContainer {
    ...
    // MARK: - Flow Coordinators
    func makeMoviesSearchFlowCoordinator(navigationController: UINavigationController) -> MoviesSearchFlowCoordinator {
        return MoviesSearchFlowCoordinator(navigationController: navigationController,
                                           makeMoviesListViewController: self.makeMoviesListViewController)
    }
    
    // MARK: - Movies List
    func makeMoviesListViewController() -> MoviesListViewController {
        ...
    }
}



==================================================Layer Separation into frameworks (Modules)
Now each layer (Domain, Presentation, UI, Data, Infrastructure Network) of the example app can be easily separated into separate frameworks.

New Project -> Create Project… -> Cocoa Touch Framework

Then you can include these frameworks into your main app by using CocoaPods.


==================================================modularisation of the app
https://tech.olx.com/modular-architecture-in-ios-c1a1e3bff8e9



==================================================The 5 Patterns You Need to Know
https://dzone.com/articles/software-architecture-the-5-patterns-you-need-to-k