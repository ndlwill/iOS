MVP全称Model-View-Presenter

Model：与MVC中的model没有太大的区别。主要提供数据的存储功能，一般都是用来封装网络获取的json数据的集合。Presenter通过调用Model进行对象交互。

View：这里的View与MVC中的V又有一些小差别，这个View可以是viewcontroller、view等控件。Presenter通过向View传model数据进行交互。

Presenter：作为model和view的中间人，从model层获取数据之后传给view，使得View和model没有耦合
MVP的好处就是解除view与model的耦合

Presenter完全把Model和View进行了分离
在Presenter中根本没有和布局有关的代码

对每个模块的presenter都是为这个模块服务，我们可以把请求、储存数据的活动放在这里

MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller

==================================MVC
在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。
在MVC模型里，Model不依赖于View，但是View是依赖于Model的
因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。

虽然 MVC 中的 View 的确“可以”访问 Model，但是我们不建议在 View 中依赖 Model，而是要求尽可能把所有业务逻辑都放在 Controller 中处理，而 View 只和 Controller 交互
==================================MVVM
MVVM也将ViewController视作View
在View和Model之间没有耦合
它还有像Supervising版本的MVP那样的绑定功能，但这个绑定不是在View和Model之间而是在View和ViewModel之间
==================================MVP
##Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用##
在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model.View并不能直接对Model进行操作

应用程序的逻辑主要在Presenter里实现

##controller的UI逻辑抽象成View接口 视图逻辑的接口都放在这里##
视图逻辑和业务逻辑分别抽象到了View和Presenter的接口中去

##LoginVC 所有业务逻辑都是通过调用ILoginPresenter的具体接口来完成##

###我的理解###
M和V没有耦合
P持有M和weak的V（VC）
(1)P把M给V （V需要呈现数据，所以需要个VCProtocol来传递M，V（VC）遵守这个协议,P中V执行协议的方法来传递）P修改V
(2)P修改M （V变化改变数据，把事件传递给P，P改变M）

(1)相对应（1）
P:
- (void)requestData;(1)
- (void)refreshTopTextData:(id)data;(2)

VCProtocol：
- (void)bindingData:(id)data;(1)
- (id)TopTextData;(2)// 可以不用
