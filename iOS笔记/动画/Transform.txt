CGAffineTransformMakeScale实现以初始位置为基准,在x轴方向上缩放x倍,在y轴方向上缩放y倍
当sx为正值时,会在x轴方向上缩放x倍,反之,则在缩放的基础上沿着竖直线翻转;当sy为正值时,会在y轴方向上缩放y倍,反之,则在缩放的基础上沿着水平线翻转

CGAffineTransform transform  = CGAffineTransformMake(CGFloat a,CGFloat b,
CGFloat c,CGFloa td,CGFloat tx,CGFloat ty)

a  b  0
c  d  0
tx ty 1

				a  b  0
[x,y,1] *		c  d  0  = [x',y',1]
				tx ty 1

CGAffineTransformMake(0.2,0,0,1,0,0);
打印View的frame原来的{{100，100}，{100，100}}变成了{{140，100}，{20，100}}
根据变换的transform我们知道 a = 0.2 , b = 0 , c = 0 , d = 1 , t.x = 0 , t.y = 0;
                                                         x = 100 ,  y = 100
x` = ax + cy + t.x = 0.2 * 100 + 0 * 100 + 0 = 20
y` = bx + dy + t.y = 0 * 100 + 1 * 100 + 0 = 100



结合上面的图和下面的计算，瞬间明白了这是x按照a值进行了比例缩放，y按照d的值进行比列缩放，最重要的是缩放的过程中View的point（中心点）是不会改变的。
接着对b，c，t.x ，ty，进行深度研究发现：
x会跟着c的值进行拉伸(View的宽度是跟着改变)，y会跟着b的值进行拉伸（View的高度跟着改变），要注意到的是c和b的值改变不会影响到View的point（center中心点）的改变。这是个很有意思的两个参数。
x会跟着t.x进行x做表平移，y会跟着t.y进行平移。这里的point（center）是跟着变换的。


a表示x水平方向的缩放，tx表示x水平方向的偏移
d表示y垂直方向的缩放，ty表示y垂直方向的偏移
如果b和c不为零的话，那么视图肯定发生了旋转


其中tx用来控制在x轴方向上的平移,ty用来控制在y轴方向上的平移;a用来控制在x轴方向上的缩放,d用来控制在y轴方向上的缩放;abcd共同控制旋转
平移CGAffineTransformMakeTranslation原理
self.demoImageView.transform = CGAffineTransformMakeTranslation(100, 100);
self.demoImageView.transform = CGAffineTransformMake(1, 0, 0, 1, 100, 100);
缩放CGAffineTransformMakeScale原理
self.demoImageView.transform = CGAffineTransformMakeScale(2, 0.5);
self.demoImageView.transform = CGAffineTransformMake(2, 0, 0, 0.5, 0, 0);
旋转CGAffineTransformMakeRotation原理
self.demoImageView.transform = CGAffineTransformMakeRotation(M_PI*0.5);
self.demoImageView.transform = CGAffineTransformMake(cos(M_PI * 0.5), sin(M_PI * 0.5), -sin(M_PI * 0.5), cos(M_PI * 0.5), 0, 0);
初始状态CGAffineTransformIdentity原理
self.demoImageView.transform = CGAffineTransformIdentity;
self.demoImageView.transform = CGAffineTransformMake(1, 0, 0, 1, 0, 0);
