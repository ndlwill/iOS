有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信

接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？

也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做"端口"（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据

"端口"是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系

"传输层"的功能，就是建立"端口到端口"的通信

"网络层"的功能是建立"主机到主机"的通信。只要确定主机和端口，我们就能实现程序之间的交流

Unix系统就把主机+端口，叫做"套接字"（socket）。有了它，就可以进行网络应用程序开发了

==================
UDP协议:
现在，我们必须在数据包中加入端口信息，这就需要新的协议。
最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号
UDP数据包，也是由"标头"和"数据"两部分组成：
"标头"部分主要定义了发出端口和接收端口，"数据"部分就是具体的内容
然后，把整个UDP数据包放入IP数据包的"数据"部分
"标头"部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。


TCP协议:
UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。

TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。

TCP数据包和UDP数据包一样，都是内嵌在IP数据包的"数据"部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割