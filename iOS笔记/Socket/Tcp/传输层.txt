TCP/IP（传输控制协议/网间协议）是一种网络通信协议

它负责总体的数据传输和数据控制的一层
传输层提供端到端（应用会在网卡注册一个端口号）的交换数据的机制，检查分组编号与次序

传输层的核心协议是TCP和UDP

TCP提供一对一的、面向连接的可靠通信服务。TCP建立连接，对发送的数据包进行排序和确认，并恢复在传输过程中丢失的数据包。与TCP不同，UDP提供一对一或一对多的、无连接的不可靠通信服务。

面向连接的网络服务:
面向连接服务以电话系统为模式。要和某个人通话，首先拿起电话，拨号码，通话，然后挂断。同样在使用面向连接的服务时，用户首先要建立连接，使用连接，然后释放连接。连接本质上像个管道：发送者在管道的一端放入物体，接收者在另一端按同样的次序取出物体；其特点是收发的数据不仅顺序一致，而且内容也相同。--类似打电话

无连接的网络服务:
无连接网络服务的两实体之间的通信不需要事先建立好一个连接。无连接网络服务有3种类型：数据报（Datagram）、确认交付（Confirmed Delivery）与请求回答（Request reply）。
无连接服务以邮政系统为模式。每个报文（信件）带有完整的目的地址，并且每一个报文都独立于其他报文，由系统选定的路线传递。在正常情况下，当两个报文发往同一目的地时，先发的先到。但是，也有可能先发的报文在途中延误了，后发的报文反而先收到；而这种情况在面向连接的服务中是绝对不可能发生的。--类似发短信

即每一个应用都会在网卡上注册一个端口号用来区分同一台设备上应用的之间的通信

有“源端口”和“目标端口”段，主要用于显示发送和接收过程中的身份识别信息。IP 地址和端口号合在一起被称为“套接字”。

=====================传输控制协议（TCP）
TCP的连接建立过程又称为TCP三次握手：
首先发送方主机向接收方主机发起一个建立连接的同步（SYN）请求；
接收方主机在收到这个请求后向发送方主机回复一个同步/确认（SYN/ACK）应答；
发送方主机收到此包后再向接收方主机发送一个确认（ACK），此时TCP连接成功建立.

一旦初始的三次握手完成，在发送和接收主机之间将按顺序发送和确认段。关闭连接之前，TCP使用类似的握手过程验证两个主机是否都完成发送和接收全部数据



TCP工作过程比较复杂，包括的内容如下:
TCP连接关闭：发送方主机和目的主机建立TCP连接并完成数据传输后，会发送一个将结束标记置1的数据包，以关闭这个TCP连接，并同时释放该连接占用的缓冲区空间。
TCP重置：TCP允许在传输的过程中突然中断连接。
TCP数据排序和确认*：在传输的过程中使用序列号和确认号来跟踪数据的接收情况。
TCP重传：在TCP的传输过程中，如果在重传超时时间内没有收到接收方主机对某数据包的确认回复，发送方主机就认为此数据包丢失，并再次发送这个数据包给接收方。
TCP延迟确认：TCP并不总是在接收到数据后立即对其进行确认，它允许主机在接收数据的同时发送自己的确认信息给对方。
TCP数据保护（校验）：TCP是可靠传输的协议，它提供校验和计算来实现数据在传输过程中的完整性。

=====================用户数据报协议（UDP）
UDP全称是User Datagram Protocol，中文名为用户数据报协议。UDP 提供无连接的网络服务，该服务对消息中传输的数据提供不可靠的、最大努力传送。这意味着它不保证数据报的到达，也不保证所传送数据包的顺序是否正确。

UDP具有TCP所望尘莫及的速度优势:
UDP由于排除了信息可靠传递机制，将安全和排序等功能移交给上层应用来完成，极大地降低了执行时间，使速度得到了保证

=====================Socket
用 Socket 能够实现网络上的不同主机之间或同一主机的不同对象之间的数据通信。所以,现在 Socket 已经是一类通用通信接口的集合

大的类型可以分为网络 Socket 和本地 Socket 两种。

本地上的两个进程如何通信:
内存共享(munmap())；
消息和队列；
管道(匿名管道pipe()和命名管道mkfifo())；
信号量（P V操作）;
RPC remote protocol control
本地Socket;


网络上的两个进程确定彼此需要IP与端口号，通过传输层(TCP/UDP)协议进行通信

Socket通信就是一种确定了端口号的TCP/IP通信

端口的打开是双方的，在C/S（Client&&Server）结构的TCP连接中不仅仅要注意到S的端口(监听的)，实际上C也开了一个端口，而C端的端口是动态端口，TCP连接建立的时候，C端的端口会在三次握手结束后确定，动态打开一个,这个端口不受用户/程序员的控制

Socket C 端:
创建客户端Socket
创建服务器Socket
连接到服务器(Socket编程)
发送数据给服务器
接收服务器返回的数据
关闭Socket : close(socketNumber)


S端:
提供一些服务
将这个服务与自己的IP地址、端口绑定
监听任何到这个IP+端口的TCP请求
接受/拒绝建立这个TCP连接
读写
断开TCP连接


没有写服务端，怎么测试？
终端：nc -lk 端口号:始终监听本地计算机此端口的数据。
eg：nc -lk 6666