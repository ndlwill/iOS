在使用网络请求时,如果服务端返回的数据不够标准,就会出现value为null情况,为此我们需要添加很多判断!比如:
判断返回的这个类是不是NSNull类，即 isKindOfClass
if (![str isKindOfClass:[NSNull class]]) {
	NSLog(@"%d",(int)str.length);
}
如果不判断直接使用,就有可能出现运行时错误导致崩溃

###
创建NSNull的分类,让一些常见的NSString或NSNumber的方法给NSNull提供一份,这样在调用类似str.length的方法时,就不会因为NSNull没有length方法而照成崩溃了.
.h
#import <Foundation/Foundation.h>
@interface NSNull (JSON)
@end

.m
#import "NSNull+JSON.h"
@implementation NSNull (JSON)

- (NSUInteger)length { return 0; }

- (NSInteger)integerValue { return 0; };

- (float)floatValue { return 0; };

- (NSString *)description { return @"0(NSNull)"; }

- (NSArray *)componentsSeparatedByString:(NSString *)separator {return @[]; }

- (id)objectForKey:(id)key { return nil; }

- (BOOL)boolValue { return NO; }

- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet{
    NSRange nullRange = {NSNotFound, 0};
    return nullRange;
}
@end

nil -> Null-pointer to objective- c object
NIL -> Null-pointer to objective- c class
null-> null pointer to primitive type or absence of data.
看一下用法
NSURL *url = nil；
Class  class = Nil；
int *pointerInt = NULL；
nil是一个对象指针为空，Nil是一个类指针为空，NULL是基本数据类型为空。这些可以理解为nil，Nil， NULL的区别吧。


在Objective-c中，对于像NSArray这样的类型，nil或NULL不能做为加到其中的Object,可以用[NSNULL null返回的对对象来初始化NSArray中的内容

nil说白了就是计数器为0
当真正release一个对象的时候，NSLog是打印不了它指向的内存空间的，而当nil的时候，是可以打印出来指向的一个内存空间

当向nil发送消息时，返回NO，不会有异常，程序将继续执行下去；
而向NSNull的对象发送消息时会收到异常

[NSNull null]是一个对象

#define NULL ((void *)0)

因为在NSArray和NSDictionary中nil中有特殊的含义（表示列表结束），所以不能在集合中放入nil值。如要确实需要存储一个表示“什么都没有”的值，可以使用NSNull类。NSNull只有一个方法：
+ (NSNull *) null;

----------------------------------------------------------------
nil:  Defines the id of a null instance，指向一个（实例）对象的空指针 
例如：
NSString *msg = nil;
NSDate *date =nil;
Nil: Defines the id of a null class，指向一个类的空指针
例如：
Class class = Nil;
NULL：定义其他类型（基本类型、C类型）的空指针
char *p = NULL;
NSNull:数组中元素的占位符，数据中的元素不能为nil（可以为空，也就是NSNull），
原因：nil 是数组的结束标志
如果用nil，就会变成
NSArray *array = [NSArray arrayWithObjects:
[[NSObject alloc] init], 
nil,
[[NSObject alloc] init], 
[[NSObject alloc] init], 
nil];，
那么数组到第二个位置就会结束。打印[array count]的话会显示1而不是5
kCFNull: NSNull的单例
CoreFoundation 中有一段对 kCFNull的定义，实际上就是 NSNull 的单例
typedef const struct CF_BRIDGED_TYPE(NSNull) __CFNull * CFNullRef;

CF_EXPORT
CFTypeID CFNullGetTypeID(void);

CF_EXPORT
const CFNullRef kCFNull; // the singleton null instance

NSNull *null1 = (id)kCFNull;
NSNull *null2 = [NSNull null];

nil ： 作为对象的空指针和数组的结束标志
NSNull:作为数组中的空值占位符