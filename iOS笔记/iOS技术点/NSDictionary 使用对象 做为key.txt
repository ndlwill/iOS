1.NSDictionary,只要不为Nil的对象作为key;必须遵守<NSCoping>协议；并实现其方法：

- (id)copyWithZone:(NSZone *)zone{

    return self;
}

2.NSObject对象不可以做为字典的key,因为NSobject遵守<NSCoping>协议；要想使用必须实现该协议；

3.在copyWithZone实现中，字典是哈希表结构查找。对象做为key。会以对象的地址为key，查找value；

只要是不为nil的OC对象类型都可以作为NSDictionary<KeyType, ObjectType>的KeyType。
比如NSNumber,NSArray,NSMutableArray,NSDictionary等等。但是自定义对象作为key的时候必须遵守<NSCopying>协议并实现其协议方法- (id)copyWithZone:(NSZone *)zone
首先任意对象可以作为NSDictionary的Value

OC对象作为字典的Key需要遵守NSCopying协议并且实现hash和isEqual两个方法。


对于基本类型, ==运算符比较的是值; 对于对象类型, ==运算符比较的是对象的地址(即是否为同一对象)
UIColor *color1 = [UIColor colorWithRed:0.5 green:0.5 blue:0.5 alpha:1.0];
UIColor *color2 = [UIColor colorWithRed:0.5 green:0.5 blue:0.5 alpha:1.0];
NSLog(@"color1 == color2 = %@", color1 == color2 ? @"YES" : @"NO");
NSLog(@"[color1 isEqual:color2] = %@", [color1 isEqual:color2] ? @"YES" : @"NO");
打印结果如下
color1 == color2 = NO
[color1 isEqual:color2] = YES


hash方法什么时候被调用?
如果在 Person 类中重写- (NSUInteger)hash方法，该方法只在 Person 实例对象被添加至NSSet或将Person实例对象设置为NSDictionary的key 时会调用。

- (NSUInteger)hash {
    return [self.name hash] ^ [self.birthday hash];
}