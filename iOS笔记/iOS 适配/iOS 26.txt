https://developer.apple.com/documentation/TechnologyOverviews/liquid-glass

Design principles
https://developer.apple.com/design/human-interface-guidelines

https://juejin.cn/user/3051900006567000/posts


==================================================Applying Liquid Glass to custom views
https://developer.apple.com/documentation/SwiftUI/Applying-Liquid-Glass-to-custom-views

Apply and configure Liquid Glass effects:
Use the glassEffect(_:in:) modifier to add Liquid Glass effects to a view. 
By default, the modifier uses the regular variant of Glass and applies the given effect within a Capsule shape behind the view’s content.
Text("Hello, World!")
    .font(.title)
    .padding()
    .glassEffect()


Text("Hello, World!")
    .font(.title)
    .padding()
    .glassEffect(in: .rect(cornerRadius: 16.0))


Text("Hello, World!")
    .font(.title)
    .padding()
    .glassEffect(.regular.tint(.orange).interactive())


Combine multiple views with Liquid Glass containers:
Use GlassEffectContainer when applying Liquid Glass effects on multiple views to achieve the best rendering performance.
GlassEffectContainer(spacing: 40.0) {
    HStack(spacing: 40.0) {
        Image(systemName: "scribble.variable")
            .frame(width: 80.0, height: 80.0)
            .font(.system(size: 36))
            .glassEffect()


        Image(systemName: "eraser.fill")
            .frame(width: 80.0, height: 80.0)
            .font(.system(size: 36))
            .glassEffect()


            // An `offset` shows how Liquid Glass effects react to each other in a container.
            // Use animations and components appearing and disappearing to obtain effects that look purposeful.
            .offset(x: -40.0, y: 0.0)
    }
}


Use the glassEffectUnion(id:namespace:) modifier to specify that a view contributes to a united effect with a particular ID.
let symbolSet: [String] = ["cloud.bolt.rain.fill", "sun.rain.fill", "moon.stars.fill", "moon.fill"]

GlassEffectContainer(spacing: 20.0) {
    HStack(spacing: 20.0) {
        ForEach(symbolSet.indices, id: \.self) { item in
            Image(systemName: symbolSet[item])
                .frame(width: 80.0, height: 80.0)
                .font(.system(size: 36))
                .glassEffect()
                .glassEffectUnion(id: item < 2 ? "1" : "2", namespace: namespace)
        }
    }
}


Morph Liquid Glass effects during transitions:
Morphing effects occur during transitions between views with Liquid Glass effects. Add these transitions to views with effects in a container by using the glassEffectID(_:in:) modifier.
@State private var isExpanded: Bool = false
@Namespace private var namespace


var body: some View {
    GlassEffectContainer(spacing: 40.0) {
        HStack(spacing: 40.0) {
            Image(systemName: "scribble.variable")
                .frame(width: 80.0, height: 80.0)
                .font(.system(size: 36))
                .glassEffect()
                .glassEffectID("pencil", in: namespace)


            if isExpanded {
                Image(systemName: "eraser.fill")
                    .frame(width: 80.0, height: 80.0)
                    .font(.system(size: 36))
                    .glassEffect()
                    .glassEffectID("eraser", in: namespace)
            }
        }
    }


    Button("Toggle") {
        withAnimation {
            isExpanded.toggle()
        }
    }
    .buttonStyle(.glass)
}


==================================================Adopting Liquid Glass
https://developer.apple.com/documentation/technologyoverviews/adopting-liquid-glass


----------Visual refresh
Interfaces across Apple platforms feature a new dynamic material called Liquid Glass, which combines the optical properties of glass with a sense of fluidity.
It affects how the interface looks, feels, and moves, adapting in response to a variety of factors to help bring focus to the underlying content.

Leverage system frameworks to adopt Liquid Glass automatically.
In system frameworks, standard components like bars, sheets, popovers, and controls automatically adopt this material. 
System frameworks also dynamically adapt these components in response to factors like element overlap and focus state. 
Take advantage of this material with minimal code by using standard components from SwiftUI, UIKit, and AppKit.

Reduce your use of custom backgrounds in controls and navigation elements.
Any custom backgrounds and appearances you use in these elements might overlay or interfere with Liquid Glass or other effects that the system provides, 
such as the scroll edge effect. Make sure to check any custom backgrounds in elements like split views, tab bars, and toolbars. 
Prefer to remove custom effects and let the system determine the background appearance, especially for the following elements:
UINavigationBar
UITabBar
UIToolbar
UISplitViewController

Test your interface with accessibility settings.
Translucency and fluid morphing animations contribute to the look and feel of Liquid Glass, but can adapt to people’s needs. 
For example, people might turn on accessibility settings that reduce transparency or motion in the interface, 
which can remove or modify certain effects. If you use standard components from system frameworks, 
this experience adapts automatically. Ensure your custom elements and animations provide a good fallback experience when these settings are on as well.

Avoid overusing Liquid Glass effects.
If you apply Liquid Glass effects to a custom control, do so sparingly.
Liquid Glass seeks to bring attention to the underlying content, and overusing this material in multiple custom controls can provide a subpar user experience by distracting from that content.
Limit these effects to the most important functional elements in your app.
To learn more, read Applying Liquid Glass to custom views.
https://developer.apple.com/documentation/SwiftUI/Applying-Liquid-Glass-to-custom-views

UIGlassEffect


----------App icons
https://developer.apple.com/design/human-interface-guidelines/app-icons

App icons now contain layers, which dynamically respond to lighting and other visual effects the system provides. 
iOS, iPadOS, and macOS all now offer default (light), dark, clear, and tinted appearance variants（彩色外观变体）, 
empowering people to personalize the look and feel of their Home Screen.

**tinted color（着色颜色）**是指：
用来为控件（如按钮、图标、控件背景）染色或渲染主要视觉颜色的颜色。

Reimagine your app icon for Liquid Glass. Apply key design principles to help your app icon shine:
Provide a visually consistent, optically balanced design across the platforms your app supports.
Consider a simplified design comprised of solid, filled, overlapping semi-transparent shapes.
Let the system handle applying masking, blurring, and other visual effects, rather than factoring them into your design.

Design using layers.
The system automatically applies effects like reflection, refraction, shadow, blur, and highlights to your icon layers.
Determine which elements of your design make sense as foreground, middle, and background elements, 
then define separate layers for them. You can perform this task in the design app of your choice.

Compose and preview in Icon Composer.
Drag and drop app icon layers that you export from your design app directly into the Icon Composer app. 
Icon Composer lets you add a background, create layer groupings, adjust layer attributes like opacity, and preview your design with system effects and appearances. 
Icon Composer is available in the latest version of Xcode and for download from Apple Design Resources. 
To learn more, read Creating your app icon using Icon Composer.
https://developer.apple.com/design/resources/
https://developer.apple.com/documentation/Xcode/creating-your-app-icon-using-icon-composer

Preview against the updated grids. 
The system applies masking to produce your final icon shape — rounded rectangle for iOS, iPadOS, and macOS, and circular for watchOS. 
Keep elements centered to avoid clipping. 
Irregularly shaped icons receive a system-provided background. 
See how your app icon looks with the updated grids to determine whether you need to make adjustments. Download these grids from Apple Design Resources.


----------Controls
Controls have a refreshed look across platforms, and come to life when a person interacts with them.
For controls like sliders and toggles, the knob transforms into Liquid Glass during interaction, and buttons fluidly morph into menus and popovers.
The shape of the hardware informs the curvature of controls, so many controls adopt rounder forms to elegantly nestle into the corners of windows and displays. 
Controls also feature an option for an extra-large size, allowing more space for labels and accents.

Review updates to control appearance and dimensions. 
If you use standard controls from system frameworks, your app adopts changes to shapes and sizes automatically when you rebuild your app with the latest version of Xcode. 
Review changes to the following controls and any others and make sure they continue to look at home with the rest of your interface:
UIButton
UISwitch
UISlider
UIStepper
UISegmentedControl
UITextField

Review your use of color in controls. 
Be judicious with your use of color in controls and navigation so they stay legible and keep the focus on your content. 
If you do apply color to these elements, leverage system colors to automatically adapt to light and dark contexts.

Check for crowding or overlapping of controls. 
Allow Liquid Glass room to move and breathe, and avoid overcrowding or layering elements on top of each other.


----------Navigation
Liquid Glass applies to the topmost layer of the interface, where you define your navigation. 
Key navigation elements like tab bars and sidebars float in this Liquid Glass layer to help people focus on the underlying content.

Establish a clear navigation hierarchy. 
It’s more important than ever for your app to have a clear and consistent navigation structure that’s distinct from the content you provide. 
Ensure that you clearly separate your content from navigation elements, like tab bars and sidebars, to establish a distinct functional layer above the content layer.

Consider adapting your tab bar into a sidebar automatically. 
If your app uses a tab-based navigation, you can allow the tab bar to adapt into a sidebar depending on the context by using the following APIs:
UITabBarController.Mode.tabSidebar


Consider using split views to build sidebar layouts with an inspector panel.
You can use the following standard system APIs for split views to build these types of layouts with minimal code:
UISplitViewController
UISplitViewController.Column.inspector

Check content safe areas for sidebars and inspectors.

Extend content beneath sidebars and inspectors.
UIBackgroundExtensionView


Choose whether to automatically minimize your tab bar in iOS.
tabBarMinimizeBehavior = .onScrollDown


----------Menus and toolbars


----------Windows and modals


----------Organization and layout


----------Search


----------Platform considerations
Liquid Glass can have a distinct appearance and behavior across different platforms, contexts, and input methods. 
Test your app across devices to understand how the material looks and feels across platforms.

Combine custom Liquid Glass effects to improve rendering performance. 
If you apply these effects to custom elements, make sure to combine them using a GlassEffectContainer, 
which helps optimize performance while fluidly morphing Liquid Glass shapes into each other.
https://developer.apple.com/documentation/SwiftUI/GlassEffectContainer


Performance test your app across platforms.
It’s a good idea to regularly assess and improve your app’s performance, and building your app with the latest SDKs provides an opportunity to check in. 
Profile your app to gather information about its current performance and find any opportunities for improving the user experience. 
To learn more, read Improving your app’s performance.
https://developer.apple.com/documentation/Xcode/improving-your-app-s-performance


To update and ship your app with the latest SDKs while keeping your app as it looks when built against previous versions of the SDKs, 
you can add the UIDesignRequiresCompatibility key to your information property list.
Warning
Temporarily use this key while reviewing and refining your app’s UI for the design in the latest SDKs.


==================================================
==================================================
==================================================material
Materials help visually separate foreground elements, such as text and controls, from background elements, such as content and solid colors.

#####
Apple platforms feature two types of materials: Liquid Glass, and standard materials.
Liquid Glass is a dynamic material that unifies the design language across Apple platforms, 
allowing you to present controls and navigation without obscuring underlying content.
In contrast to Liquid Glass, the standard materials help with visual differentiation within the content layer.
#####

Liquid Glass:
Don’t use Liquid Glass in the content layer.
Liquid Glass works best when it provides a clear distinction between interactive elements and content, 
and including it in the content layer can result in unnecessary complexity and a confusing visual hierarchy. 
Instead, use standard materials for elements in the content layer, such as app backgrounds. 
An exception to this is for controls in the content layer with a transient interactive element like sliders and toggles; 
in these cases, the element takes on a Liquid Glass appearance to emphasize its interactivity when a person activates it.

Use Liquid Glass effects sparingly.
Standard components from system frameworks pick up the appearance and behavior of this material automatically.


#####
Liquid Glass is a material that blurs content behind it, reflects color and light of surrounding content, and reacts to touch and pointer interactions in real time
#####


Standard materials:
Use standard materials and effects — such as blur, vibrancy, and blending modes — to convey a sense of structure in the content beneath Liquid Glass.

Choose materials and effects based on semantic meaning and recommended usage.

Help ensure legibility by using vibrant colors on top of materials.

Consider contrast and visual separation when choosing a material to combine with blur and vibrancy effects.
Thicker materials, which are more opaque, can provide better contrast for text and other elements with fine features.
Thinner materials, which are more translucent, can help people retain their context by providing a visible reminder of the content that’s in the background.


==================================================UIGlassEffect & UIGlassContainerEffect 例子
UIGlassEffect:
import UIKit

class ViewController: UIViewController {
    lazy var wwdcLabel: UILabel = {
        let label = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 50))
        label.text = "WWDC25"
        label.textAlignment = .center
        label.textColor = .white
        return label
    }()
    let visualEffectView = UIVisualEffectView()

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .systemTeal

        glassEffect()
    }

    // MARK: UIGlassEffect
    func glassEffect() {
        // iOS26新增
        let glassEffect = UIGlassEffect()
        glassEffect.isInteractive = true
        visualEffectView.effect = glassEffect
        visualEffectView.frame = CGRect(x: view.frame.midX - 50, y: view.frame.midY - 25, width: 100, height: 50)
        visualEffectView.layer.cornerRadius = 20
        visualEffectView.clipsToBounds = true
        visualEffectView.contentView.addSubview(wwdcLabel)
        view.addSubview(visualEffectView)
    }
}



UIGlassContainerEffect:
import UIKit

class ViewController: UIViewController {
    lazy var wwdcLabel: UILabel = {
        let label = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 50))
        label.text = "WWDC25"
        label.textAlignment = .center
        label.textColor = .white
        return label
    }()
    lazy var iOSLabel: UILabel = {
        let label = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 50))
        label.text = "iOS26"
        label.textAlignment = .center
        label.textColor = .white
        return label
    }()
    let visualEffectView = UIVisualEffectView()

    override func viewDidLoad() {
        super.viewDidLoad()

        view.backgroundColor = .systemTeal

        glassContainerEffect()
    }

    // MARK: UIGlassContainerEffect
    func glassContainerEffect() {
        // iOS26新增
        let glassContainerEffect = UIGlassContainerEffect()
        visualEffectView.effect = glassContainerEffect
        visualEffectView.frame = CGRect(x: 0, y: 0, width: 210, height: 50)
        visualEffectView.center = view.center
        let glassEffect = UIGlassEffect()
        let view1 = UIVisualEffectView(effect: glassEffect)
        view1.frame = CGRect(x: 10, y: 10, width: 100, height: 50)
        view1.contentView.addSubview(wwdcLabel)
        let view2 = UIVisualEffectView(effect: glassEffect)
        view2.frame = CGRect(x: 110, y: 10, width: 100, height: 50)
        view2.contentView.addSubview(iOSLabel)
        visualEffectView.contentView.addSubview(view1)
        visualEffectView.contentView.addSubview(view2)
        view.addSubview(visualEffectView)
    }
}

作者：YungFan
链接：https://juejin.cn/post/7536966677248245760
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。