1.UITableView：默认开启Self-Sizing

设置以下属性
self.tableView.rowHeight = UITableViewAutomaticDimension;
self.tableView.estimatedRowHeight = 200;
不再需要自己去计算cell的高度 包括Headers, footers

如果项目中没使用estimatedRowHeight属性，在IOS11下会有奇奇怪怪的现象，因为IOS11之前，estimatedRowHeight默认为0

滚动条高度跳动、上下拉刷新问题：  关闭估算行高
self.tableView.estimatedRowHeight = 0;
self.tableView.estimatedSectionHeaderHeight = 0;
self.tableView.estimatedSectionFooterHeight = 0;



2.
判断当前iOS系统是否满足需求
@available(iOS 11, *)  // >= 11


3.
UIScrollView.appearance.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;

IOS11 之前，不想让scrollView偏移64px，设置automaticallyAdjustsScrollViewInsets=NO就可以了。IOS11以后就废弃了，使用scrollView的属性contentInsetAdjustmentBehavior来防止偏移。

UIScrollViewContentInsetAdjustmentAutomatic 
UIScrollViewContentInsetAdjustmentScrollableAxes 
UIScrollViewContentInsetAdjustmentNever 
UIScrollViewContentInsetAdjustmentAlways

这里我们直接选Never就可以了

if (@available(iOS 11.0, *)) {
    self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
} else {
    self.automaticallyAdjustsScrollViewInsets = NO;
}

#define adjustsScrollViewInsets(scrollView)\
do {\
_Pragma("clang diagnostic push")\
_Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"")\
if ([scrollView respondsToSelector:NSSelectorFromString(@"setContentInsetAdjustmentBehavior:")]) {\
    NSMethodSignature *signature = [UIScrollView instanceMethodSignatureForSelector:@selector(setContentInsetAdjustmentBehavior:)];\
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];\
    NSInteger argument = 2;\
    invocation.target = scrollView;\
    invocation.selector = @selector(setContentInsetAdjustmentBehavior:);\
    [invocation setArgument:&argument atIndex:2];\
    [invocation retainArguments];\
    [invocation invoke];\
}\
_Pragma("clang diagnostic pop")\
} while (0)

4.
SearchBar in NavigationBar:
if #available(iOS 11.0, *) {
     navigationItem.searchController = searchController
} else {
     // Fallback on earlier versions
     navigationItem.titleView = searchController?.searchBar
}

-----
Navigation Bar 

1、导航栏新增了一种大标题样式，默认设置是不开启，所以不需要修改。
2、navigation bar 的titleView支持了autolayout，这要求titleView必须是能够自撑开的或实现了- intrinsicContentSize
intrinsicContentSize顾名思义，固定大小的意思，主要是解决一些模糊约束的问题。

titleView对应的View大小和预期不一致。 
titleView对应的View有点击事件会无法触发 

解决方法是直接重写titleView对应View的intrinsicContentSize方法 

- (CGSize)intrinsicContentSize { 
return UILayoutFittingExpandedSize; 
}


5.
加载webView的时候

if (@available(iOS 11.0, *)) {
webView.scrollView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
} else {
}

6.放在导航栏上面的searchBar消失不见：(searchBarH = 44)

之前的代码:
// 创建搜索框
UIView *titleView = [[UIView alloc] init];
titleView.py_x = PYSEARCH_MARGIN * 0.5;
titleView.py_y = 7;
titleView.py_width = self.view.py_width - 64 - titleView.py_x * 2;
titleView.py_height = 30;
UISearchBar *searchBar = [[UISearchBar alloc] initWithFrame:titleView.bounds];
[titleView addSubview:searchBar];
self.navigationItem.titleView = titleView;



新建一个TUIView类，在该类的.m里面实现以下方法：

#import "TUIView.h"

@implementation TUIView

-(CGSize)intrinsicContentSize
{
return UILayoutFittingExpandedSize;
}

@end

// 创建搜索框

UIView *titleView = [[TUIView alloc] init];

titleView.py_x = PYSEARCH_MARGIN * 0.5;

titleView.py_y = 7;

titleView.py_width = self.view.py_width - 64 - titleView.py_x * 2;

titleView.py_height = 30;

UISearchBar *searchBar = [[UISearchBar alloc] initWithFrame:titleView.bounds];

[titleView addSubview:searchBar];

self.navigationItem.titleView = titleView;

6.UINavigation bar
UINavigation bar中新增了一个BOOL属性prefersLargeTitles,将该属性设置为ture,navigation bar就会在整个APP中显示大标题
如果想要在控制不同页面大标题的显示，可以通过设置当前页面的navigationItem的largeTitleDisplayMode属性

UINavigaBar 做了新的自动布局扩展支持，自定义的bar button items、自定义的title都可以通过layout来表示尺寸
你的constraints需要在view内部设置，所以如果你有一个自定义的标题视图，你需要确保任何约束只依赖于标题视图及其任何子视图
开发者则必须提供视图的size，有三种方式：
对宽度和高度的约束；
实现 intrinsicContentSize；
通过约束关联你的子视图

7.UINavigationController
Navigation 集成 UISearchController
把你的UISearchController赋值给navigationItem
navigationItem.searchController  //iOS 11 新增属性
navigationItem.hidesSearchBarWhenScrolling //决定滑动的时候是否隐藏搜索框；iOS 11 新增属性

8.layout margins
margin指的是控件显示内容部分的边缘和控件边缘的距离。
可以用layoutMargins或者layoutMarginsGuide属性获得view的margin,margin是视图内部的一部分

在iOS11新增了一个属性：directional layout margins，该属性是NSDirectionalEdgeInsets结构体类型的属性：
typedef struct NSDirectionalEdgeInsets {  
    CGFloat top, leading, bottom, trailing;
} NSDirectionalEdgeInsets API_AVAILABLE(ios(11.0),tvos(11.0),watchos(4.0));

layoutMargins是UIEdgeInsets结构体类型的属性：
typedef struct UIEdgeInsets {  
CGFloat top, left, bottom, right;
} UIEdgeInsets;
从上面两种结构体的对比可以看出，NSDirectionalEdgeInsets 属性用leading 和 trailing 取代了之前的 left 和 right

当你设置了trailing = 30；当在一个right to left 语言下trailing的值会被设置在view的左边，可以通过layoutMargin的left属性读出该值

9.safeArea
iOS 7 开始，在 UIViewController中引入的 topLayoutGuide 和 bottomLayoutGuide 
在 iOS 11 中被废弃了！取而代之的就是safeArea的概念
它提供两种方式：safeAreaInsets或safeAreaLayoutGuide来提供给你safeArea的参照值，即 insets 或者 layout guide

增加safeAreaInsets的值，可以通过一个新的属性：addtionalSafeAreaInsets来改变safeAreaInsets的值，当你的viewController改变了它的safeAreaInsets值时，有两种方式获取到回调：
UIView.safeAreaInsetsDidChange()
UIViewController.viewSafeAreaInsetsDidChange()

新增的contentInsetAdjustmentBehavior属性用来配置adjustedContentInset的行为
typedef NS_ENUM(NSInteger, UIScrollViewContentInsetAdjustmentBehavior) {  
    UIScrollViewContentInsetAdjustmentAutomatic, 
    UIScrollViewContentInsetAdjustmentScrollableAxes,
    UIScrollViewContentInsetAdjustmentNever,
    UIScrollViewContentInsetAdjustmentAlways,
}

一般navigationContollers会传入一个contentInset给其最顶层的viewController的scrollView，在iOS11中进行了一个很大的改变，不再通过scrollView的contentInset属性了，而是新增了一个属性：adjustedContentInset
