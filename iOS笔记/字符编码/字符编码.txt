eg:
Unicode	   Bytes (UTF-8)			Description
U+1F601	   \xF0\x9F\x98\x81			GRINNING FACE WITH SMILING EYES

NSString查找字符，一定要带上option。因为NSString与Unicode还是有很多坑的

@":\u0489"
rangeOfString，默认不是按照码元来查找的，也就是不是按照literalSearch.虽然它里面包含":"，但是，这两个字符可以合成另一个与其等价的字符，所以就找不到了


NSString & Unicode

计算机没法直接处理文本，它只和数字打交道。
为了在计算机里用数字表示文本，我们指定了一个从字符到数字的映射。这个映射就叫做编码（encoding）。

ASCII 码是 7 位的，它将英文字母，数字 0-9 以及一些标点符号和控制字符映射为 0-127 这些整型

Unicode 标准为世界上几乎所有的书写系统里所使用的每一个字符或符号定义了一个唯一的数字。
这个数字叫做码点（code points），以 U+xxxx 这样的格式写成，格式里的 xxxx 代表四到六个十六进制的数。
比如，U+0041（十进制是 65）这个码点代表拉丁字母表（和 ASCII 一致）里的字母 A；
U+1F61B 代表名为“伸出舌头的脸”的 emoji

Unicode 编码扩展到了 21 位（从 U+0000 到 U+10FFFF） 它是21位的  这21位提供了 1,114,112 个码点


组合字符序列:
有重音符号的字母 é 可以直接表示成 U+00E9（「有尖音符号的小写拉丁字母 e」），或者也可以表示成由 U+0065（「小写拉丁字母 e」）再加 U+0301（「尖音符号」）组成的分解形式
在 Unicode 的语境下，两种形式并不相等（因为两种形式包含不同的码点），但是符合标准等价（canonically equivalent），也就是说，它们有着相同的外观和意义。

Unicode 标准为此定义了几种映射，叫做「Unicode 转换格式」（Unicode Transformation Formats，UTF）
如果是用 UTF 编码的，那么就要使用 Unicode

最清楚明了的一个 UTF 就是 UTF-32：它在每个码点上使用整 32 位。32 大于 21，因此每一个 UTF-32 值都可以直接表示对应的码点。尽管简单，UTF-32却几乎从来不在实际中使用，因为每个字符占用 4 字节太浪费空间了

UTF-16 以及「代理对」（Surrogate Pairs）的概念:
NSString 对 Unicode 的实现息息相关。它是根据有 16 位固定长度的「码元」（code units）定义的
UTF-16 本身是一种长度可变的编码。基本多文种平面（BMP）中的每一个码点都直接与一个码元相映射。鉴于 BMP 几乎囊括了所有常见字符，UTF-16 一般只需要 UTF-32 一半的空间。其它平面里很少使用的码点都是用两个 16 位的码元来编码的，这两个合起来表示一个码点的码元就叫做「代理对」。
UTF-16 下，U+10FFFF 是能编码的最高值
和所有多字节长度的编码系统一样，UTF-16（以及 UTF-32）还得解决字节顺序的问题。在内存里存储字符串时，大多数实现方式自然都采用自己运行平台的 CPU 的字节序（endianness）；而在硬盘里存储或者通过网络传输字符串时，UTF-16 允许在字符串的开头插入一个「字节顺序标记」（Byte Order Mask，BOM）。字节顺序标记是一个值为 U+FEFF 的码元，通过检查文件的头两个字节，解码器就可以识别出其字节顺序。字节顺序标记不是必须的，Unicode 标准把高字节顺序（big-endian byte order）定为默认情况。UTF-16 需要指明字节顺序，这也是为什么 UTF-16 在文件格式和网络传输方面不受欢迎的一个原因，不过微软和苹果都在自己的操作系统内部使用它

编码空间被分成 17 个平面，每个平面有 65,536 个字符。0 号平面叫做「基本多文种平面」（Basic Multilingual Plane, BMP），涵盖了几乎所有你能遇到的字符，除了 emoji。其它平面叫做补充平面，大多是空的


===================
一个字符串对象代表着一个 Unicode 字符组成的数组

typedef unsigned short unichar;

NSString 对象代表的其实是用 UTF-16 编码的码元组成的数组。相应地，length方法的返回值也是字符串包含的码元个数（而不是字符个数）###
NSString 代表的是用 UTF-16 编码的文本，长度、索引和范围都基于 UTF-16 的码元#####
每当文档提及「字符」（character）或者 unichar 时，它其实都说的是码元

只要你确保 Xcode 以 UTF-8 编码保存文件，你就可以直接用 Character View 插入任意字符

😄
眯着眼睛露齿而笑
Unicode: U+1F604，UTF-8: F0 9F 98 84


组合字符序列：如果字母 é 是以分解形式编码的，算作两个码元：
NSString *s = @"e\u0301"; // e + ´
NSLog(@"The length of %@ is %lu", s, [s length]);
这个字符串包含了两个 Unicode 字符


字符串可能会包含组合字符序列、代理对或变体序列。苹果把这些都叫做合成字符序列（composed character sequence）
注意不要把合成字符序列（苹果的术语）和组合字符序列（Unicode 术语）搞混。后者是前者的子集

可以用rangeOfComposedCharacterSequenceAtIndex:
来确定特定位置的 unichar 是不是代表单个字符（可能由多个码点组成）的码元序列的一部分


NSString 有更好地方式：
enumerateSubstringsInRange:options:usingBlock: 方法。这个方法把 Unicode 抽象的地方隐藏了，能让你轻松地循环字符串里的组合字符串、单词、行、句子或段落。你甚至可以加上 NSStringEnumerationLocalized 这个选项，这样可以在确定词语间和句子间的边界时把用户所在的区域考虑进去。要遍历单个字符，把参数指定为
NSStringEnumerationByComposedCharacterSequences


isEqual: 和 isEqualToString: 这两个方法都是一个字节一个字节地比较的。如果希望字符串的合成和分解的形式相吻合，得先自己正规化：
NSString *s = @"\u00E9"; // é
NSString *t = @"e\u0301"; // e + ´
BOOL isEqual = [s isEqualToString:t];
NSLog(@"%@ is %@ to %@", s, isEqual ? @"equal" : @"not equal", t);
// => é is not equal to é

// Normalizing to form C
NSString *sNorm = [s precomposedStringWithCanonicalMapping];
NSString *tNorm = [t precomposedStringWithCanonicalMapping];
BOOL isEqualNorm = [sNorm isEqualToString:tNorm];
NSLog(@"%@ is %@ to %@", sNorm, isEqualNorm ? @"equal" : @"not equal", tNorm);
// => é is equal to é


NSString *s = @"ff"; // ff
NSString *t = @"\uFB00"; // ﬀ ligature
NSComparisonResult result = [s localizedCompare:t];
NSLog(@"%@ is %@ to %@", s, result == NSOrderedSame ? @"equal" : @"not equal", t);
// => ff is equal to ﬀ