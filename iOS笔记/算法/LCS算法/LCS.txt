对比字符串，对比数组的情况，找出前后新旧数据的不同，可以称之为Diff

LCS:
Longest Common Subsequence的简称，最长公共子序列

=============传统的LCS算法
字符串对比为例，我们要从ADFGT变化到AFOXT找出LCS。从后向前进行对比，T相同表明T是LCS的一部分，所以能进一步简化为：

当某位置相同时，做缩减字符串处理:
LCS("ADFGT", "AFOXT") = 1 + LCS("ADFG", "AFOX")
继续向前对比ADFG和AFOX，发现G和X不同，这意味着G只可能是字符串ADFG和AFO的LCS，也意味着X只可能是字符串ADF和AFOX的LCS，那么问题简化为：
不同时，进行递归处理:
LCS("ADFG", "AFOX") = Max(LCS("ADF", "AFOX"), LCS("ADFG", "AFO"))
这种算法时间复杂度为O( 2^n )，当字符串或者数组很长时，会非常慢...

结合动态规划的改进LCS算法:
动态规划常常能用来解决一些递归问题，LCS问题也是，使用一个二维数组就可以避开递归。

仍旧以ADFGT和AFOXT为例，举例如下 A = "ADFGT" B = "AFOXT" m = A.length n = B.length
1.首先建立一个二维数组table[m+1][n+1]，默认在i=0行和j=0列填充0 图1
2.在其他位置，任一[i][j]，先计算max(table[i-1][j], table[i][j-1])，然后判断A[i-1]和B[j-1]，相同的话此处填max+1，否则填max 图2
此时，时间复杂度已经是O( n^2 )，但是我们已经算出两个字符串LCS的长度是3了，接下来需要利用table将LCS找出来

仍然选择从table右下角向左上角遍历，中间会遇到三种情况：
1.当i=m，j=n时，发现此时的A[i]=B[i]，那么这个元素肯定是LCS的一部分，向左上角走，直接将i-1,j-1
2.此时i=m-1，j=n-1时，发现A[i]!=B[i]，那么比较table[i][j]和table[i-1][j]，当两者相同时向上走i-1，否则向左走j-1
3.按照前两种策略一直向左上方走，直到遇到i=0，j=0，结束搜索过程，下图表明了整个线路，可以看到红圈内的就是LCS
得到正确的LCS为AFT
上面过程时间复杂度是O(n)，结合构造table的过程，整个过程时间复杂度是O( n^2 )，远小于第一种递归算法

继续看在上面ADFGT和AFOXT对比算出的table二维数组，会发现几个有趣的地方:
向左上走的单元，都是两个字符串重复的部分，即Reload/Move
向上走的单元，都是旧数据中需要删除的部分，即Delete
向左走的单元，都是新数据中需要插入的部分，即Insert

Reload：[0]A、[4]T
Insert：[2]O、[3]X
Delete：[1]D、[3]G
Move：[3]F > [2]F