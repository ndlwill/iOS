https://cloud.tencent.com/developer/user/2906102/articles



TIFF（Tag Image File Format）TIFF文件以.tif为扩展名

位图（Bitmap），又称栅格图（英语：Raster graphics）或点阵图，是使用像素阵列(Pixel-array/Dot-matrix点阵)来表示的图像。
位图的像素都分配有特定的位置和颜色值。每个像素的颜色信息由RGB组合或者灰度值表示。
根据位深度,可将位图分为1、4、8、16、24及32位图像等。每个像素使用的信息位数越多，可用的颜色就越多，颜色表现就越逼真，相应的数据量越大。
例如，位深度为 1 的像素位图只有两个可能的值（黑色和白色），所以又称为二值位图。位深度为 8 的图像有 2^8（即 256）个可能的值。位深度为 8 的灰度模式图像有 256 个可能的灰色值。
有时将带有 8 位/通道 (bpc) 的 RGB 图像称作 24 位图像（8 位 x 3 通道 = 24 位数据/像素）。通常将使用24位RGB组合数据位表示的的位图称为真彩色位图。

WebP（发音：weppy）是一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式，派生自影像编码格式VP8，被认为是WebM多媒体格式的姊妹项目
WebP支持的像素最大数量是16383x16383。有损压缩的WebP仅支持8-bit的YUV 4:2:0格式。而无损压缩（可逆压缩）的WebP支持VP8L编码与8-bit之ARGB色彩空间。

==================================================

NSImage对被其管理的实际图像数据几乎是一无所知的,这是因为NSImage并没有直接与实际图像数据打交道,而是间接的通过一个或多个由 NSImageRep 类派生的对象来维护管理图像数据.
NSImageRep 类(及其子类)是真正用来表示图像数据的.它主要从三个方面来描述一个图像:大小,颜色空间,图片格式

一个图片文件就只是一张图片,所以NSImage会创建一个NSImageRep对象来管理图像数据;
但一个图片文件内有多张图片时,NSImage就会创建多个NSImageRep对象,每个对象对应文件内每个独立的图片(例如TIFF格式的文件就支持在一个文件内同时存储高清图像和缩略图像)

多数情况下,我们从一个文件中加载图像时,NSImage会自动根据图像文件来创建合适的NSImageRep实例对象

图像缓存机制是图像显示过程中非常有效的一个环节.这是因为第一次加载图像数据时,它的格式可能并不适合直接渲染到屏幕上去.
比如说PDF格式的数据,加载后需要对数据进行栅格化处理,然后才能显示到屏幕上.
如果使用缓存机制,那么NSPDFImageRep对象就会保存被栅格化处理后的图像数据,提供图片使用效率
如果关闭缓存机制,那么在每次渲染图片的时候,都会反复执行栅格化数据的操作,会有潜在的性能问题.

对于位图来说,缓存机制与位图数据有关:如果位图的颜色空间/解析度/颜色位深度与显示设备都十分匹配,那么图片可能会直接显示的硬件设备上而不使用缓存;否则NSBitmapImagRep实例就会创建图像缓存数据.

Load Named Image
当我们调用NSImage的imageNamed:方法时,cocoa都做了什么?
1.首先, NSImage会根据图像的name查询缓存索引.如果没有找到,则执行第2步.
2.遍历应用App的共享资源(比如前面讲到的离屏窗口等)继续查找,如果依然没结果,则执行3
3.遍历应用App的Resources文件夹中的内容,查找是否有name指定的图片文件,如果还是没有,则继续执行4
4.遍历应用App的bundle, 如果找到对应的图像文件,NSImage就会加载从文件中加载图像数据,缓存以及添加到注册索引信息中.

若以上四步后都没找到,则返回一个空对象,结束查找.
需要注意的是, 对于NSImage对象,可以使用setName:这个方法将其添加到cocoa的注册索引中,这对那些动态创建的NSImage对象十分有用.
使用imageNamed: 重复加载时,都会获得同一个图片对象:

let img1 = NSImage(named: NSImage.Name.init("youwin"))!
let img2 = NSImage(named: NSImage.Name.init("youwin"))!        
print(img1)    // NSImage 0x60000007f7c0 Name=youwin Size={310, 105}
print(img2)    // NSImage 0x60000007f7c0 Name=youwin Size={310, 105}