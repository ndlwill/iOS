ip.dst==192.168.101.8
ip.src==192.168.101.8
ip.addr==192.168.101.8
// vpn client ip and weixin ip
ip.addr==10.186.36.6 and ip.addr==117.184.242.100

==================================================

tcp header 的最大长度为60字节，而必须要有的固定长度也就是前5层的20字节，每层占有32bit，也就是32/8=4字节，5层，5*4 = 20字节，
那么第六层的可选项和填充也就是Tcp Options字段最大为60-20=40字节。填充是为了使TCP首部为4字节（32bit）的整数倍。
Header Length = 1111，也就是15时，15*4 = 60字节，达到Header Length的最大长度
0101.......Header Length = 20字节（5），即5*4 = 20字节
// 1000为二进制，十进制为8
1000........Header Length = 32字节（8），即8*4 = 32

Tcp Options字段
Tcp Options字段的最大长度为40字节
Kind(1字节)     Length(1字节)       Info(n字节)

最大报文段长度（Max Segment Size，MSS）
TCP模块通常将MSS设置为（MTU-40）字节（减掉的这40字节包括20字节的TCP头部和20字节的IP头部）
这样携带TCP报文段的IP数据报的长度就不会超过MTU（假设TCP头部和IP头部都不包含选项字段，并且这也是一般情况），从而避免本机发生IP分片。对以太网而言，MSS值是1460（1500-40）字节
最大报文长度为1320字节，这当然也是可以的。


cwnd: 拥塞窗口（congestion window）的简写

Ack num=1,表示期望对端下次发送的Seq num=1

协议数据单元(Protocol Data Unit ) PDU
物理层的 PDU是数据位（bit）
数据链路层的 PDU是数据帧（frame）
网络层的PDU是数据包（packet）
传输层的PDU是数据段（segment）
其他更高层次的PDU是数据（data）

TCP segment of a reassembled PDU:
当我们基于TCP在传输消息时，对于上面的应用层如果出于某些原因（如超过MSS）TCP Segment不能一次包含全部的应用层PDU，
而要把一个完整消息分成多个段，就会将除了最后一个分段（segment）的所有其他分段都打上“TCP segment of a reassembled PDU”。

tcp dup ack:
dup即为duplicate。
一般来说是网络拥塞导致丢包，比如发送方的报文到达不了接收方，接受方收不到预期序列号的报文就会发送dup ack给发送方，发送方收到3个dup ack就会快速重传而不必等超时定时器。

需要注意:
如果除了最后一个分段的所有分段中wireshark能够识别出相应的消息类型，是不会标记“TCP segment of a reassembled PDU”
SSL的消息抓包，我们知道SSL中 Server Hello与Certificate是服务端一起发给客户端的
没有标记，因为wireshark识别出这是应用层的server hello消息。

==================================================



WS（window scaling）:
tcp有两个窗口，一个是滑动窗口，一个是拥塞窗口。WS与滑动窗口相关。通过增加一个因子来扩大默认滑动窗口的值。
滑动窗口的定义：收到ACK之前可以连续发送的字节数。
举个例子，某接收端的窗口值假设为10240字节，假设发送端发的包每次都是1024字节大小，那么发送端可以连续发送10个包，而不需要收到接收端的ACK确认。
窗口大小占TCP头部16位，也就是窗口值最大能有：2^16=65535bytes=64K





==================================================

三次握手：发送端发送一个SYN=1，ACK=0标志的数据包给接收端，请求进行连接，这是第一次握手
接收端收到请求并且允许连接的话，就会发送一个SYN=1，ACK=1标志的数据包给发送端，告诉它，可以通讯了，并且让发送端发送一个确认数据包，这是第二次握手
最后，发送端发送一个SYN=0，ACK=1的数据包给接收端，告诉它连接已被确认，这就是第三次握手。之后，一个TCP连接建立，开始通讯。

==================================================

SYN：同步标志
同步序列编号(Synchronize Sequence Numbers)栏有效。
该标志仅在三次握手建立TCP连接时有效。

ACK：确认标志
确认编号(Acknowledgement Number)栏有效。

RST：复位标志
复位标志有效。用于复位相应的TCP连接

URG：紧急标志
紧急(The urgent pointer) 标志有效

PSH：推标志
该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理。

FIN：结束标志
带有该标志置位的数据包用来结束一个TCP回话，但对应端口仍处于开放状态，准备接收后续数据

CWR：CWR 标志与后面的 ECE 标志都用于 IP 首部的 ECN 字段，ECE 标志为 1 时，则通知对方已将拥塞窗口缩小
ECE：若其值为 1 则会通知对方，从对方到这边的网络有阻塞。在收到数据包的 IP 首部中 ECN 为 1 时将 TCP 首部中的 ECE 设为 1

RST一般是在FIN之后才会出现为1的情况，表示的是连接重置
TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。

服务器发回rst位，同时win置为0，是告诉客户端不要发包
RST表示复位，用来异常的关闭连接
发送RST包关闭连接时，不必等缓冲区的包都发出去（不像上面的FIN包），直接就丢弃缓存区的包发送RST包。而接收端收到RST包后，也不必发送ACK包来确认。

TCP处理程序会在自己认为的异常时刻发送RST包。例如，A向B发起连接，但B之上并未监听相应的端口，这时B操作系统上的TCP处理程序会发RST包。
网通了后，B又开始发数据包，A收到后表示压力很大，不知道这野连接哪来的，就发了个RST包强制把连接关了，B收到后会出现connect reset by peer错误。

RST的攻击原理：
A和服务器B之间建立了TCP连接，此时C伪造了一个TCP包发给B，使B异常的断开了与A之间的TCP连接，就是RST攻击了。
假定C伪装成A发过去的包，这个包如果是RST包的话，毫无疑问，B将会丢弃与A的缓冲区上所有数据，强制关掉连接。

TCP 头部的长度通常为20字节，但在有些情况下，由于TCP头部中有一些可选字段，所以TCP头部的大小也有可能增至60字节。

针对文件传输，会建立多条信道

==================================================

TCP协议抓包:
SYN（同步）
ECN（显示反馈）：在传输层(TCP)，TCP端必须对对方表明自身是可以进行ECN操作的。
接收端必须能够通知发送端它收到了一个来自路由器的拥塞通告。发送端必须能够通知接收端它受到了来自接收端的通告并且已经降低了发送速率。
CWR（拥塞窗口减小）：发送方会使用这些数据包向接收方通告：由于传输导致缓冲区已经满或由于拥塞，通信各方都应该降低传输的速度，以避免网络中因些产生丢包。

==================================================

连接断开:
首先服务器向客户端发送断开请求，客户端会用下一个数据包进行确认。然后客户端会用相同的方式发关断开请求，而服务器收到这个消息后这进行了确认。
服务器发出断开请求。标记里有个FIN

==================================================

1.TCP慢启动:
TCP在连接过程的三次握手完成后，开始传数据，并不是一开始向网络通道中发送大量的数据包，这样很容易导致网络中路由器缓存空间耗尽，从而发生拥塞
而是根据初始的cwnd大小逐步增加发送的数据量，cwnd初始化为1个最大报文段(MSS)大小（这个值可配置不一定是1个MSS）；每当有一个报文段被确认，cwnd大小指数增长。 
开始 —> cwnd = 1 
1个RTT后 —> cwnd = 2*1 = 2 
2个RTT后 —> cwnd = 2*2= 4 
3个RTT后 —> cwnd = 4*2 = 8

2.拥塞避免:
cwnd不能一直这样无限增长下去，一定需要某个限制。
TCP使用了一个叫慢启动门限(ssthresh)的变量，一旦cwnd>=ssthresh（大多数TCP的实现，通常大小都是65536），慢启动过程结束，拥塞避免阶段开始；
拥塞避免：cwnd的值不再指数级往上升，开始加法增加。
此时当窗口中所有的报文段都被确认时，cwnd的大小加1，cwnd的值就随着RTT开始线性增加，这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。
非ECN环境下的拥塞判断，发送方RTO超时，重传了一个报文段
1，把ssthresh降低为cwnd值的一半
2，把cwnd重新设置为1
3，重新进入慢启动过程

3.快速重传: Fast Retrasmission
快速重传，TCP在收到重复的3次ACK时，会认为重传队列中的第一个报文段被网络丢弃，但由于收到的重复的3次ACK，则认为该报文段之后的三个报文已经被接收端收到，则不等待重传定时器超时，直接重发重传队列中的第一个报文段。
1，把ssthresh设置为cwnd的一半
2，把cwnd再设置为ssthresh的值(具体实现有些为ssthresh+3)
3，重新进入拥塞避免阶段

4.快速恢复:
快速恢复的数据包守恒原则，即同一个时刻在网络中的数据包数量恒定，“老”数据包离开后，才能向网络中发送“新”的数据包。
如果发送方收到一个重复的ACK，TCP的ACK机制就表明有一个数据包离开，此时cwnd加1。
1，当收到3个重复ACK时，把ssthresh设置为cwnd的一半，把cwnd设置为ssthresh的值加3，然后重传丢失的报文段，加3的原因是因为收到3个重复的ACK，表明有3个“老”的数据包离开了网络。
2，再收到重复的ACK时，拥塞窗口增加1。
3，当收到新的数据包的ACK时，把cwnd设置为第一步中的ssthresh的值。
原因是因为该ACK确认了新的数据，说明从重复ACK时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态。

5，ECN（Explicit Congestion Notification）
ECN的设计目标，是通过TCP发送端和接收端以及中间路由器的配合，感知中间路径的拥塞，并主动的减缓TCP的发送速率，从而从早期避免拥塞而导致的丢包，实现网络性能的最大利用。
1、所有TCP发送端能够早期感知中间路径拥塞，并主动放缓发送速率，预防拥塞发生。
2、在中间路由器上转发的队列上，对于超过平均队列长度的TCP报文进行ECN标记，并继续进行转发，不再丢弃报文。避免了报文的丢弃和TCP的重传。
3、由于减少了丢包，TCP不需要经过几秒货几十秒的重传定时器出发报文重传，提高了时延敏感应用的用户感受。
4、与没有部署ECN功能的网络相比，网络的利用率更好，不再在过载和轻载之前来回震荡。

