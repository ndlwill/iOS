Network protocols often need to transport large chunks of data which are complete in themselves, e.g., when transferring a file. 
The underlying protocol might not be able to handle that chunk size (e.g., limitation of the network packet size), or is stream-based like TCP, which doesn’t know data chunks at all.

In that case the network protocol has to handle the chunk boundaries itself and (if required) spread the data over multiple packets. 
It obviously also needs a mechanism to determine the chunk boundaries on the receiving side.

Wireshark calls this mechanism reassembly, although a specific protocol specification might use a different term for this (e.g., desegmentation, defragmentation, etc.).

Wireshark will try to find the corresponding packets of this chunk, and will show the combined data as additional tabs in the “Packet Bytes” pane

Note
You will find the reassembled data in the last packet of the chunk.


For example, in a HTTP GET response, the requested data (e.g., an HTML page) is returned. 
Wireshark will show the hex dump of the data in a new tab “Uncompressed entity body” in the “Packet Bytes” pane.


TCP Reassembly:
Protocols such as HTTP or TLS are likely to span multiple TCP segments. 
The TCP protocol preference “Allow subdissector to reassemble TCP streams” 
(enabled by default) makes it possible for Wireshark to collect a contiguous sequence of TCP segments and hand them over to the higher-level protocol 
(for example, to reconstruct a full HTTP message). All but the final segment will be marked with “[TCP segment of a reassembled PDU]” in the packet list.


==============================Hex dump:
https://en.wikipedia.org/wiki/Hex_dump
ASCII:
二进制  十进制  十六进制  图形
0011 0000	48	30	0

00000000  30 31 32 33 34 35 36 37  38 39 41 42 43 44 45 46  |0123456789ABCDEF|
00000010  0a 2f 2a 20 2a 2a 2a 2a  2a 2a 2a 2a 2a 2a 2a 2a  |./* ************|
00000020  2a 2a 2a 2a 2a 2a 2a 2a  2a 2a 2a 2a 2a 2a 2a 2a  |****************|