RSA 的数学原理:
1.选两个质数p和q相乘得出一个大整数n，例如 p=61，q=53，n=pq=3233
2.选 1-n 间的随便一个质数e，例如 e = 17
3.经过一系列数学公式，算出一个数字d，满足： 
a. 通过n和e这两个数据一组数据进行数学运算后，可以通过n和d去反解运算，反过来也可以。 
b. 如果只知道n和e，要推导出d，需要知道p和q，也就是要需要把 n 因数分解

上述的(n,e)这两个数据在一起就是公钥，(n,d)这两个数据就是私钥，满足用公钥加密，私钥解密，或反过来公钥加密，私钥解密，也满足在只暴露公钥（只知道n和e）的情况下，要推导出私钥(n,d)，需要把大整数n因数分解。目前因数分解只能靠暴力穷举，而n数字越大，越难以用穷举计算出因数p和q，也就越安全，当n大到二进制 1024 位或 2048 位时，以目前技术要破解几乎不可能，所以非常安全


数字签名:
1.首先用一种算法，算出原始数据的摘要。需满足 a.若原始数据有任何变化，计算出来的摘要值都会变化。 b.摘要要够短。这里最常用的算法是MD5
2.生成一份非对称加密的公钥和私钥，私钥我自己拿着，公钥公布出去。
3.对一份数据，算出摘要后，用私钥加密这个摘要，得到一份加密后的数据，称为原始数据的签名。把它跟原始数据一起发送给用户
4.用户收到数据和签名后，用公钥解密得到摘要。同时用户用同样的算法计算原始数据的摘要，对比这里计算出来的摘要和用公钥解密签名得到的摘要是否相等，若相等则表示这份数据中途没有被篡改过，因为如果篡改过，摘要会变化

之所以要有第一步计算摘要，是因为非对称加密的原理限制可加密的内容不能太大

iOS 设备安装 APP 从 AppStore 下载:
苹果官方生成一对公私钥，在 iOS 里内置一个公钥，私钥由苹果后台保存，我们传 App 上 AppStore 时，苹果后台用私钥对 APP 数据进行签名，iOS 系统下载这个 APP 后，用公钥验证这个签名，若签名正确，这个 APP 肯定是由苹果后台认证的，并且没有被修改过，也就达到了苹果的需求：保证安装的每一个 APP 都是经过苹果官方允许的


苹果这里给出的方案是使用了双层签名:
1.在你的 Mac 开发机器生成一对公私钥，这里称为公钥L，私钥L。L:Local
2.苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。这里称为公钥A，私钥A。A:Apple
3.把公钥 L 传到苹果后台，用苹果后台里的私钥 A 去签名公钥 L。得到一份数据包含了公钥 L 以及其签名，把这份数据称为证书。
4.在开发时，编译完一个 APP 后，用本地的私钥 L 对这个 APP 进行签名，同时把第三步得到的证书一起打包进 APP 里，安装到手机上。
5.在安装时，iOS 系统取得证书，通过系统内置的公钥 A，去验证证书的数字签名是否正确。
6.验证证书后确保了公钥 L 是苹果认证过的，再用公钥 L 去验证 APP 的签名，这里就间接验证了这个 APP 安装行为是否经过苹果官方允许。（这里只验证安装行为，不验证APP 是否被改动，因为开发阶段 APP 内容总是不断变化的，苹果不需要管。）
上述流程只解决了一个需求，也就是需要经过苹果允许才可以安装,还未解决第二个避免被滥用的问题
一是限制在苹果后台注册过的设备才可以安装，二是限制签名只能针对某一个具体的 APP
在上述第三步，苹果用私钥 A 签名我们本地公钥 L 时，实际上除了签名公钥 L，还可以加上无限多数据，这些数据都可以保证是经过苹果官方认证的，不会有被篡改的可能
可以想到把 允许安装的设备 ID 列表 和 App对应的 AppID 等数据，都在第三步这里跟公钥L一起组成证书，再用苹果私钥 A 对这个证书签名
在最后第 5 步验证时就可以拿到设备 ID 列表，判断当前设备是否符合要求。根据数字签名的原理，只要数字签名通过验证，第 5 步这里的设备 IDs / AppID / 公钥 L 就都是经过苹果认证的，无法被修改，苹果就可以限制可安装的设备和 APP，避免滥用
到这里这个证书已经变得很复杂了，有很多额外信息，实际上除了 设备 ID / AppID，还有其他信息也需要在这里用苹果签名，像这个 APP 里 iCloud / push / 后台运行 等权限苹果都想控制，苹果把这些权限开关统一称为 Entitlements，它也需要通过签名去授权

实际上一个“证书”本来就有规定的格式规范，上面我们把各种额外信息塞入证书里是不合适的，于是苹果另外搞了个东西，叫 Provisioning Profile，一个 Provisioning Profile 里就包含了证书以及上述提到的所有额外信息，以及所有信息的签名


最终整个流程：
1.在你的 Mac 开发机器生成一对公私钥，这里称为公钥L，私钥L。L:Local
2.苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。这里称为公钥A，私钥A。A:Apple
3.把公钥 L 传到苹果后台，用苹果后台里的私钥 A 去签名公钥 L。得到一份数据包含了公钥 L 以及其签名，把这份数据称为证书。
4.在苹果后台申请 AppID，配置好设备 ID 列表和 APP 可使用的权限，再加上第③步的证书，组成的数据用私钥 A 签名，把数据和签名一起组成一个 Provisioning Profile 文件，下载到本地 Mac 开发机。
5.在开发时，编译完一个 APP 后，用本地的私钥 L 对这个 APP 进行签名，同时把第④步得到的 Provisioning Profile 文件打包进 APP 里，文件名为 embedded.mobileprovision，把 APP 安装到手机上。
6.在安装时，iOS 系统取得证书，通过系统内置的公钥 A，去验证 embedded.mobileprovision 的数字签名是否正确，里面的证书签名也会再验一遍。
7.确保了 embedded.mobileprovision 里的数据都是苹果授权以后，就可以取出里面的数据，做各种验证，包括用公钥 L 验证APP签名，验证设备 ID 是否在 ID 列表上，AppID 是否对应得上，权限开关是否跟 APP 里的 Entitlements 对应等。


第 1 步对应的是 keychain 里的 “从证书颁发机构请求证书”，这里就本地生成了一堆公私钥，保存的 CertificateSigningRequest 就是公钥，私钥保存在本地电脑里
第 2 步苹果处理，不用管
第 3 步对应把 CertificateSigningRequest 传到苹果后台生成证书，并下载到本地。这时本地有两个证书，一个是第 1 步生成的，一个是这里下载回来的，keychain 会把这两个证书关联起来，因为他们公私钥是对应的，在XCode选择下载回来的证书时，实际上会找到 keychain 里对应的私钥去签名。这里私钥只有生成它的这台 Mac 有，如果别的 Mac 也要编译签名这个 App 怎么办？答案是把私钥导出给其他 Mac 用，在 keychain 里导出私钥，就会存成 .p12 文件，其他 Mac 打开后就导入了这个私钥
第 4 步都是在苹果网站上操作，配置 AppID / 权限 / 设备等，最后下载 Provisioning Profile 文件
第 5 步 XCode 会通过第 3 步下载回来的证书（存着公钥），在本地找到对应的私钥（第一步生成的），用本地私钥去签名 App，并把 Provisioning Profile 文件命名为 embedded.mobileprovision 一起打包进去。这里对 App 的签名数据保存分两部分，Mach-O 可执行文件会把签名直接写入这个文件里，其他资源文件则会保存在 _CodeSignature 目录下
第 6 - 7 步的打包和验证都是 Xcode 和 iOS 系统自动做的事


企业签名不限制安装的设备数，另外需要用户在 iOS 系统设置上手动点击信任这个企业才能通过验证

而 AppStore 的签名验证方式：苹果在后台直接用私钥签名 App 就可以了

=======================================================================================
配送密钥:
为了防止中间人截获密钥，安全的把密钥传递给通信对方。有以下 4 种方式:
1.事先共享密钥
2.密钥分配中心
3.Diffie-Hellman 密钥交换。在 Diffie-Hellman 密钥交换中，加密通信双方需要交换一些信息，而这些信息即便被窃听者窃听，也不会有任何问题。
根据交换的信息，双方各自生成相同的密钥。而窃听者无法生成相同的密钥。这种方式可行。不过这种方式不算是非对称加密
4.公钥密码。 非对称加密有一个公钥和一个私钥。公钥可以在网上传播

公钥密码解决了密钥配送的问题

非对称加密一般指的是具有公钥密钥(public-key cryptography)的加密算法。密钥分为加密密钥和解密密钥两种。发送者用加密密钥对信息进行加密，接收者用解密密钥对密文进行解密。可以公开出去的叫公钥(public key)，保存在自己手上不公开的叫私钥(private key)。
公钥和私钥是一一对应的。一对公钥和私钥统称为密钥对(key pair)。在数学的关系上，这两者不能单独生成

RSA 是一种公钥密码算法。RSA 可以被用于公钥密码和数字签名

RSA 加密:
密文 = 明文^E mod N
RSA 的密文是对代表明文的数字 E 次方求 mod N 的结果。E 和 N 是 RSA 加密的密钥，E 和 N 的组合就是公钥。E 是加密 Encryption 的首字母，N 是数字 Number 的首字母
RSA 解密:
明文 = 密文^D mod N
解密的过程是对密文的数字的 D 次方求 mod N 就可以得到明文。D 和 N 的组合就是私钥。D 是解密 Decryption 的首字母，N 是数字 Number 的首字母
RSA 奇妙的是加密和解密过程是一致的。加密是求明文的 E 次方对 N 的 mod 余数。解密是求密文的 D 次方对 N 的 mod 余数

----------------------
生成密钥对:
E 和 N 是公钥，D 和 N 是私钥，因此求 E、D 和 N 的这三个数是生成密钥对。具体流程主要分为 4 步：
求 N
求 L(L 是仅在生成密钥对的过程中使用的数)
求 E
求 D

先计算 N:
计算 N 需要准备 2 个很大的质数。质数太小容易被破译，太大导致计算时间很长。p 和 q 都是由伪随机数生成器生成的，且 p != q。N = p * q

再计算 L:
L 这个数只在生成密钥对的过程中会用到，加密和解密过程中都不出现。 L 是 p - 1 和 q - 1 的最小公倍数 (least common multiple, lcm)

再求数 E:
数 E 需要满足两个条件：
1 < E < L
gcd(E,L) = 1 ， E 和 L 的最大公约数为 1 (E 和 L 互质)

再求 D:
数 D 是由数 E 计算得到的。D、E、L 之间具有以下的关系：
1 < D < L
E * D mod L = 1

明文 = 密文^D mod N
	 = (明文^E)^D mod N
	 = 明文^(E * D) mod N
E * D mod L = 1 保证了最终的转换可以还原成明文


椭圆曲线密码(Elliptic Curve Cryptography, ECC)是近期备受关注的公钥密码算法。它的特点是比 RSA 所需的密钥长度短。椭圆曲线密码密钥短但强度高

DH 算法（Diffie-Hellman 密钥交换）在进行密钥协商的过程中，通信双方的任何一方无法独自计算出一个会话密钥，通信双方各自保留一部分关键信息，再将另外一部分信息告诉对方，双方有了全部信息才能共同计算出全部的会话密钥
