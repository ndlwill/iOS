https://developer.apple.com/documentation/technotes/tn3125-inside-code-signing-provisioning-profiles

Learn how provisioning profiles enable third-party code to run on Apple platforms.


Code signing is a foundational technology on all Apple platforms. 
The Inside Code Signing technote series is different: It peeks behind the code signing curtain, to give you a better understanding of how this technology works.


When signing code, use Xcode (all platforms) or the codesign tool (macOS only).
To get information or validate a code signature, use the codesign tool or the Code Signing Services API.
https://developer.apple.com/documentation/Security/code-signing-services
Apple updates these facilities to accommodate any changes to the code signature structure as they roll out.



==================================================Provisioning profile fundamentals
Apple platforms, except macOS, won’t run arbitrary third-party code. 
All execution of third-party code must be authorized by Apple. 
This authorization comes in the form of a provisioning profile, which ties together five criteria:

Who is allowed to sign code?
What apps are they allowed to sign?
Where can those apps run?
When can those apps run?
How can those apps be entitled?

Note
In this document the term app refers to a main executable packaged in a bundle structure. 
This encompasses apps, app extensions, App Clips, system extensions, and XPC Services.

You create provisioning profiles using the Apple Developer website, either directly using the website or indirectly using Xcode or the App Store Connect API.
https://developer.apple.com/documentation/AppStoreConnectAPI


#####
When the Apple Developer website creates a profile for you, it cryptographically signs it. 
When you run an app on a device, the device checks this signature to determine if the profile is valid and, if so, 
checks that the app meets the criteria in the profile.
#####


Note
Unlike Apple’s other platforms, macOS doesn’t require a provisioning profile to run third-party code. 
However, provisioning profiles are still relevant on macOS, as explained in Entitlements on macOS.


#####
There is one interesting edge case with provisioning profiles: When you submit your app to the App Store, 
the App Store re-signs the app as part of the distribution process. 
Before doing that, it checks that the app is signed and provisioned correctly. 
That check means that each individual device doesn’t need to perform further security checks, so the final app doesn’t have a provisioning profile. 
However, this third-party code was still authorized by a profile, albeit during the App Store distribution process.
#####



==================================================Unpack a profile
A provisioning profile is a property list wrapped within a Cryptographic Message Syntax (CMS) signature. 
To view the original property list, remove the CMS wrapper using the security tool:

// 这条命令是用 macOS 自带的 security 命令行工具中的 cms 子命令来解析一个 iOS 的描述文件（.mobileprovision），将其中的内容提取为可读的 plist 文件（.plist）格式。
% security cms -D -i Profile_Explainer_iOS_Dev.mobileprovision -o Profile_Explainer_iOS_Dev-payload.plist
% cat Profile_Explainer_iOS_Dev-payload.plist 
…
<dict>
  … lots of properties …
</dict>
</plist>


For more details on CMS, see RFC 5652.
https://datatracker.ietf.org/doc/html/rfc5652


#####
Important
The exact format of provisioning profiles isn’t documented and could change at any time. 
Use the techniques shown here for understanding and debugging purposes. 
Avoid building a product based on these details; if you do build such a product, be prepared to update it as the Apple development story evolves.
#####


To illustrate this point, the traditional property list view of a profile is no longer the source of truth on modern systems. 
Rather, each profile contains a DER-Encoded-Profile property which holds a binary form of the profile that’s the new source of truth. 
For more on this switch, see The Future is DER.


Reading UNIX Manual Pages
https://developer.apple.com/documentation/os/reading-unix-manual-pages


The who:
Every profile has a DeveloperCertificates property holding the certificates of each developer who can sign code covered by the profile. For example:
对上面这句话的理解：
每个 Apple 的 Provisioning Profile 里面，都包含了一些可以使用这个 Profile 进行代码签名的 开发者证书（Developer Certificates）。
举个具体例子：
你创建了一个 iOS App 的 开发用 Provisioning Profile（Development Profile），里面关联了：
App ID（例如：com.yourcompany.myapp）
一些 Devices（比如你测试的 iPhone）
多个开发者的证书（你和团队成员）
这个 profile 的 DeveloperCertificates 属性就包含了这些人的 公钥证书，也就是说：
只有这些人在自己的 Mac 上，用对应的 私钥 配合这个 profile，才能合法地对这个 App 签名并部署到设备上。

//  从解析出的 .plist 文件中提取出 DeveloperCertificates 字段内容，并以 XML 格式输出到终端。
plutil -extract DeveloperCertificates xml1 -o - Profile_Explainer_iOS_Dev-payload.plist

To extract a specific certificate, add its index to the key path:
// 从 provisioning profile 中提取第一个开发者证书（DeveloperCertificates[0]），解码并保存为 .cer 格式的二进制证书文件
plutil -extract DeveloperCertificates.0 raw -o - Profile_Explainer_iOS_Dev-payload.plist | base64 -D > cert0.cer
certtool d cert0.cer // 使用 macOS 自带的 certtool 工具，解码并“人类可读”地显示 cert0.cer 文件中的证书内容。


The what:
Most profiles apply to a single App ID, encoded in the Entitlements > application-identifier property:
plutil -extract Entitlements.application-identifier raw -o - Profile_Explainer_iOS_Dev-payload.plist

Note
On macOS the standard App ID entitlement is com.apple.application-identifier. 
A Mac Catalyst app uses both com.apple.application-identifier and application-identifier.

This property holds an App ID, composed of an App ID prefix and a bundle ID. 
In this example SKMME9E2Y8 is the App ID prefix and com.example.apple-samplecode.ProfileExplainer is the bundle ID.

A profile might refer to a wildcard App ID:
security cms -D -i Profile_Explainer_Wild_iOS_Dev.mobileprovision -o Profile_Explainer_Wild_iOS_Dev-payload.plist
plutil -extract Entitlements.application-identifier raw -o - Profile_Explainer_Wild_iOS_Dev-payload.plist
SKMME9E2Y8.com.example.apple-samplecode.*
This profile applies to any app whose App ID starts with SKMME9E2Y8.com.example.apple-samplecode.


The where:
Most profiles apply to a specific list of devices. This is encoded in the ProvisionedDevices property:

plutil -extract ProvisionedDevices xml1 -o - Profile_Explainer_iOS_Dev-payload.plist 

App Store distribution profiles have no ProvisionedDevices property because you can’t run an App Store distribution signed app locally.

Developer ID and In-House (Enterprise) distribution profiles have the ProvisionsAllDevices property, indicating that they apply to all devices. 
or more details about Developer ID provisioning profiles on the Mac, see Entitlements on macOS.

ProvisionedDevices 这个字段只出现在 开发用 或 Ad Hoc 分发 的 profile 中，用于列出可以安装 app 的设备 UDID。

分发方式	使用的 Profile 类型	是否包含设备列表 ProvisionedDevices	安装方式	目的和适用场景
Development	Development Profile	✅ 是	Xcode 直连安装	本地开发调试、真机测试
Ad Hoc	Distribution Profile（Ad Hoc）	✅ 是	手动安装 .ipa，或 MDM	内部小规模测试，最多 100 台设备
App Store	Distribution Profile（App Store）	❌ 否	App Store 下载	面向公众的正式发布
TestFlight	Distribution Profile（App Store）	❌ 否	TestFlight App 下载	beta 测试，最多 10,000 个测试用户
Enterprise（In-House）	Enterprise Profile	❌ 否	MDM 或网站/工具安装	企业内部大规模分发（需企业账号）


TestFlight 分发
它跟 App Store 分发技术上几乎一致，只是走了另一条测试路径。
可分发给最多 10,000 名测试用户（包括内部和外部）
TestFlight 是一个 预发布测试渠道，Apple 并不会修改或重新签名你上传的 app，系统依赖你所附带的 provisioning profile 来判断权限、安装条件，否则设备无法安装运行。


The when:
Every profile has an ExpirationDate property which limits how long the profile remains valid. For example:
plutil -extract ExpirationDate raw -o - Profile_Explainer_iOS_Dev-payload.plist

This validity period varies by profile type, but it’s typically not more than a year. The exception here is Developer ID profiles, which have an expiration date far in the future.


The how:
Every profile has an Entitlements property which authorizes the app to use specific entitlements. For example:
plutil -extract Entitlements xml1 -o - Profile_Explainer_iOS_Dev-payload.plist
…
<dict>
  <key>application-identifier</key>
  <string>SKMME9E2Y8.com.example.apple-samplecode.ProfileExplainer</string>
  <key>com.apple.developer.team-identifier</key>
  <string>SKMME9E2Y8</string>
  <key>get-task-allow</key>
  <true/>
  <key>keychain-access-groups</key>
  <array>
    <string>SKMME9E2Y8.*</string>
    <string>com.apple.token</string>
  </array>
</dict>
</plist>

The entitlements in the profile act as an allowlist. This isn’t the same as the entitlements claimed by the app. 
To actually claim an entitlement, include the entitlement in the app’s code signature.

Every entitlement claimed by the app must be in the profile’s allowlist but the reverse isn’t true. 
It’s fine for the allowlist to include entitlements that the app doesn’t claim.

Note
A macOS app can claim certain entitlements without them being authorized by a provisioning profile. 
For more on this, see Entitlements on macOS.

Some entitlements in the allowlist use wildcard syntax. 
In the above example, SKMME9E2Y8.* means that the app can claim any keychain access group with the SKMME9E2Y8. prefix. 
Wildcards don’t make sense in the app’s code signature.


To dump the entitlements claimed by the app, use codesign with the --entitlements argument:
查看已签名的 app（或可执行文件）中包含的 entitlements 权限声明，以 XML 格式输出。
codesign --display --entitlements - --xml ProfileExplainer.app | plutil -convert xml1 -o - -
…
<dict>
  <key>application-identifier</key>
  <string>SKMME9E2Y8.com.example.apple-samplecode.ProfileExplainer</string>
  <key>com.apple.developer.team-identifier</key>
  <string>SKMME9E2Y8</string>
  <key>get-task-allow</key>
  <true/>
  <key>keychain-access-groups</key>
  <array>
    <string>SKMME9E2Y8.com.example.apple-samplecode.ProfileExplainer</string>
    <string>SKMME9E2Y8.com.example.apple-samplecode.shared</string>
  </array>
</dict>
</plist>

Note

By default --entitlements dumps a human-readable representation of the DER-encoded entitlements. 
The above example uses --xml to force it to output XML. 
It runs the output through plutil to pretty print that XML. To learn more about DER in provisioning profiles, see The Future is DER.

Every entitlement claimed by this app is authorized by its profile, and thus iOS allows the app to run. 
Note that the keychain-access-groups value, SKMME9E2Y8.com.example.apple-samplecode.ProfileExplainer, 
starts with SKMME9E2Y8. and thus is allowed by the wildcard.


==================================================Entitlements on macOS
A macOS app can claim certain entitlements without them being authorized by a provisioning profile. These unrestricted entitlements include:
com.apple.security.get-task-allow
com.apple.security.application-groups
Those used to enable and configure the App Sandbox // https://developer.apple.com/documentation/Security/app-sandbox
Those used to configure the Hardened Runtime// https://developer.apple.com/documentation/Security/hardened-runtime

Note
On other Apple platforms the equivalent to com.apple.security.get-task-allow is get-task-allow and, as with all entitlements on those platforms, 
must be authorized by a profile. Also, App Groups work differently on macOS and other platforms. For details, see App Groups Entitlement.
https://developer.apple.com/documentation/BundleResources/Entitlements/com.apple.security.application-groups

In contrast, restricted entitlements must be authorized by a provisioning profile. 
This is an important security feature on macOS. 
For example, the fact that the keychain-access-groups entitlement must be authorized by a profile means that other developers can’t impersonate your app in order to steal its keychain items.

###
A Mac app that uses no restricted entitlements doesn’t need a provisioning profile. 
This is true even if the app is distributed on the App Store. 
The only exception to this rule is TestFlight, which always requires a profile.
###

macOS supports provisioning profiles for both App Store and Developer ID distribution. 
Some entitlements are not supported by Developer ID profiles.
For the details, see Supported capabilities (macOS) in Developer Account Help. 
https://developer.apple.com/help/account#/devadf555df9
For general information about Developer ID signing, see Signing Mac Software with Developer ID
https://developer.apple.com/developer-id/  // Signing your apps for Gatekeeper
Gatekeeper 是 macOS 上的一项安全机制，它的主要作用是 防止用户运行未经过认证的恶意软件。它是 Apple 用来保护用户系统免受恶意 App 侵害的一道“第一道防线”。


分发方式	Apple 是否重签名	是否需要开发者签名时附带 profile
App Store（正式发布）	✅ 是，由 Apple 重新签名	❌ 可以不附带（如果没特殊权限）// 这边指的是上传到 app store 时，需要包含 provisioning profile
TestFlight	❌ 否，保留你的签名	✅ 必须附带 provisioning profile

虽然 App Store 最终会重签名你的 App，但某些情况下你在上传 App 到 App Store 之前，依然需要使用一个有效的 Provisioning Profile 来完成构建和签名。
import CloudKit
import PushKit
这些功能都要求你开启相关 capability，比如：
iCloud
Push Notifications
这就意味着你必须在你的 Provisioning Profile 中声明这些 entitlements，否则你在 Xcode 打包时会失败，或者打包的 App 缺少所需权限，上传 App Store Connect 会报错。


iOS App 使用某些受限权限
如：
App Groups
Associated Domains（如 Universal Links）
HealthKit
Apple Pay
Sign in with Apple
Background Modes
CarPlay 等
这些都需要在 Apple Developer 中注册，并通过 Profile 签名时嵌入。


Code Signing:
对 .app 进行签名，并在此阶段：
👉 嵌入 embedded.mobileprovision（即描述文件） // 拷贝进你的 app bundle 的根目录下.签名命令（codesign）会根据它以及对应的 .entitlements 来生成完整的签名。codesign它的作用是：证明该程序来自可信开发者，并且未被篡改。
👉 注入 entitlements


codesign 的作用:
1. ✅ 完整性校验（Integrity）
codesign 会对你的可执行文件、资源等生成哈希摘要，并签名写入。
运行时系统会验证文件是否被改动，如果改了签名会失效，无法运行。
2. ✅ 身份认证（Identity）
签名使用你的开发/分发证书（private key）完成，证书链最终追溯到 Apple Root CA。
系统就知道这个 App 是由你（开发者账号）签名并构建的。
3. ✅ 权限声明（Entitlements）
codesign 会将 Entitlements.plist 内容（例如 iCloud、Push、App Groups 权限）写入签名结构。
安装和运行时，系统会验证这些权限是否合法，是否与你的 provisioning profile 匹配。


为什么 App Store 包也要带描述文件？
因为 Apple 会在审核和签名验证时：
确保你声明的 entitlements 符合你 App ID 的权限设置；
验证签名的 entitlements 与 embedded.mobileprovision 中的一致；
确保你没有伪造权限。


场景	是否有 embedded.mobileprovision	说明
App Store 下载的正式 App	❌ 没有	不需要描述文件，苹果统一验证签名 // 因为 App Store 在审核时已验证签名和权限
TestFlight 分发 App	✅ 有	TestFlight 仍依赖描述文件来控制设备和权限
Ad Hoc / Enterprise 安装 App	✅ 有	必须包含描述文件来允许安装到特定设备
开发或调试用包（Xcode 构建）	✅ 有	用于开发者签名和权限控制


==================================================Profile location
current best practice is to embed the profile within the app itself:

macOS expects to find the profile at MyApp.app/Contents/embedded.provisionprofile.
Other Apple platforms expect to find the profile at MyApp.app/embedded.mobileprovision.

Note that macOS also uses a different file name extension for provisioning profiles.


#####这边指的是从 app store 下载 ipa，不会包含 embedded provisioning profile
Apps that you download from the App Store don’t contain an embedded provisioning profile because the App Store checks that the app is signed and provisioned correctly as part of its distribution process.

已验证：app store 下载 ipa
ajs app & dingding app 都没有 embedded provisioning profile
#####

Some macOS products, like daemons and command-line tools, ship as a standalone executable. 
A standalone executable can’t claim a restricted entitlement because there’s no place to embed the provisioning profile that authorizes that claim. 
If your standalone executable needs to do this, wrap it in an app-like structure. 
For an example of this, see Signing a Daemon with a Restricted Entitlement.
https://developer.apple.com/documentation/Xcode/signing-a-daemon-with-a-restricted-entitlement


==================================================The future is DER
Modern systems no longer treat the profile’s property list as the source of truth. 
Rather, they use the binary form of the profile stored in the profile’s DER-Encoded-Profile property:
plutil -extract DER-Encoded-Profile raw -o - Profile_Explainer_iOS_Dev-payload.plist

This form of the profile is encoded as DER, a binary encoding of ASN.1 that’s common in cryptographic file formats. 
To extract it, first extract the property to a file:
plutil -extract DER-Encoded-Profile raw Profile_Explainer_iOS_Dev-payload.plist | base64 -D > Profile_Explainer_iOS_Dev.der 
This is a whole new copy of the profile, so undo the CMS wrapper again: // CMS: Cryptographic Message Syntax（加密消息语法）
security cms -D -i Profile_Explainer_iOS_Dev.der -o Profile_Explainer_iOS_Dev-payload.der 
Finally, dump the DER-encoded payload itself:
openssl asn1parse -in Profile_Explainer_iOS_Dev-payload.der -inform der -i | cut -c 30- 
This output contains mostly the same information as the property list, just encoded in DER form.

The one exception is the DeveloperCertificates property. 
This doesn’t contain a full copy of each certificate, but rather a SHA-256 checksum of the certificate. 
Assuming the certificate extracted from the property list earlier as cert0.cer, run shasum to confirm that checksum:
shasum -a 256 cert0.cer

This DER-encoded profile is required starting with iOS 15, iPadOS 15, tvOS 15, and watchOS 8. 
For more on that change, see Using the Latest Code Signature Format.
https://developer.apple.com/documentation/Xcode/using-the-latest-code-signature-format


==================================================获取App Store ipa
爱思助手

iMazing

Apple Configurator: 
手机已安装低版本app条件下
替换弹窗显示时不操作，进入
/Users/youdun-ndl/Library/Group\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/ 获取ipa