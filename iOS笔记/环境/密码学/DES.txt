DES 是一种把 64 位明文加密成 64 位密文的对称加密算法。它的密钥长度为 64 比特，但是除去每 7 个二进制位会设置一个用于错误检测的位以外，实际上密钥为 56 比特

DES 会以 64 个二进制为一个分组进行加密。以分组为单位进行处理的密码算法成为分组密码，DES 为分组密码的一种

DES 只能一次性加密 64 位明文，如果明文超过了 64 位，就要进行分组加密。反复迭代，迭代的方式成为模式

DES 加密的基本结构是 Feistel 网络、Feistel 结构、Feistel 密码，这个结构不仅仅用在 DES 中，还用在其他的加密算法中。
在 Feistel 网络中，加密的各个步骤称为轮(round)，整个加密过程就是若干次轮的循环。DES 是一种 16 轮循环的 Feistel 网络

每次加密所用的密钥都不同，由于它只在本轮使用，是一个局部密钥，所以也被称为子密钥。

每轮的操作步骤如下:
将输入的 64 位分为左右两个 32 位。
将输入右侧的 32 位直接向下落到输出的右侧 32 位。
将输入右侧作为轮函数的入参输入。
轮函数根据输入右侧的 32 位和 子密钥两个入参，生成一串看上去随机的比特序列输出。
将轮函数的输出和输入左侧 32 位进行异或运算，结果向下落到输出的左侧 32 位

n 轮 Feistel 网络只交换 n-1 次，最后一次不用交换

------------------3DES
三重 DES (triple-DES) 是为了增加 DES 强度，所以将 DES 重复 3 次得到的一种算法。也称为 TDEA (Triple Data Encryption Algorithm)，通常缩写为 3DES
3DES 加密就是进行 3 次 DES 加密。DES 密钥长度为 56 位，所以 3DES 密钥长度为 56 * 3 = 168 位
不过 3DES 有一个“奇怪”的地方，并不是用 DES 加密 3 次，而是加密-解密-加密，中间有一次解密的过程。
之所以这么设计，目的是为了让三重 DES 能兼容普通的 DES
如果三重加密中密钥都完全相同，那么就退化成了普通的 DES 了。(加密一次解密一次就抵消了)所以也就具备了向下兼容性

如果第一次和第三次用相同的密钥，第次用不同的密钥，这种三重 DES 称为 DES-EDE2 。
EDE 是加密(Encryption) -> 解密(Decryption) -> 加密(Encryption) 的缩写。
如果 3 次都用不同的密钥，则称 DES-EDE3
3DES 由于处理速度不高，除了兼容之前的 DES 以外，目前基本不再使用它了

------------------AES
Rijndael 算法，确定它为新的 AES

Rijndael 的分组长度和密钥长度可以分别以 32 位比特为单位在 128 比特到 256 比特的范围内进行选择。
不过在 AES 的规范中，分组长度被固定在 128 比特，密钥长度只有 128、192 和 256 比特三种

AES 的加密也是由多个轮组成的，分为 4 轮，SubBytes、ShiftRows、MixColumns、AddRoundKey 这 4 步，即 SPN 网络
1. SubBytes 字节变换
Rijndael 的输入分组默认为 128 比特，也就是 16 字节
第一步需要对每个字节进行 SubBytes 处理。以每个字节的值(0-255之间的任意值)为索引，从一张拥有 256 个值的替换表 S-Box 中查找出对应的值进行处理

2. ShiftRows 移行操作
这一步以 4 字节为单位的行 row 进行左移操作，且每一行平移的字节数不同

3. MixColumns 混行操作
这一步以 4 字节为单位的列 column 进行矩阵运算

4. AddRoundKey 异或运算
将上一步的输出与轮密钥进行 XOR，即进行 AddRoundKey 处理
左边 16 字节每个字节一次与轮密钥对应位置上的字节进行异或运算，计算完成以后得到最终的密文
到这里为止，是一轮 Rijndael 结束
一般整个算法要进行 10-14 轮计算


Rijndael 的解密过程为加密的逆过程。
在 Rijndael 加密过程中，每一轮处理的顺序为：
SubBytes -> ShiftRows -> MixColumns -> AddRoundKey
在 Rijndael 解密过程中，每一轮处理的顺序为：
AddRoundKey -> InvMixColumns -> InvShiftRows -> InvSubBytes
解密过程中除了第一步和加密完全一样，其他三步都为加密的逆过程。

SPN 网络和 Feistel 网络相比，加密效率更高，因为 SPN 一轮会加密所有位。所以加密所需轮数会更少
=======================分组模式
由于 DES 和 AES 一次加密都只能加密固定长度的明文，如果需要加密任意长度的明文，就需要对分组密码进行迭代，而分组密码的迭代方式就称为分组密码的“模式”

分组密码(block cipher) 是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”被称为分组。一个分组的比特数称为分组长度。例如 DES 和 3DES 的分组长度都是 64 位。AES 分组长度为 128 位。分组密码处理完一个分组以后就结束，不需要记录额外的状态
流密码(stream cipher) 是对数据流进行连续处理的一类密码算法。流密码中一般以 1 比特、8比特、32比特等单位进行加密和解密。例如一次性密码本就属于流密码。流密码处理完一串数据以后，还需要保持内部的状态


分组模式:
分组密码还存在一种模式叫 CTS 模式(Cipher Text Stealing 模式)。在分组密码中，当明文长度不能被分组长度整除的时候，最后一个分组就需要进行填充，CTS 模式是使用最后一个分组的前一个密文分组数据来进行填充的，它通常和 ECB 模式以及 CBC 模式配合使用

1.ECB 模式
ECB 模式是分组模式里面最简单的，也是最没有安全性的。所以使用的人很少
ECB 模式全称“Electronic CodeBook”模式，在 ECB 模式中，将明文分组加密之后的结果直接就是密文分组，中间不做任何的变换

2.CBC 模式
CBC 模式的全称是 Cipher Block Chaining 模式，密文分组链接模式
CBC 加密“链条”起始于一个初始化向量 IV，这个初始化向量 IV 是一个随机的比特序列
ECB 模式只进行了加密，CBC 模式则在加密之前进行了一次 XOR
比如密文分组 1 和密文分组 2相同，ECB 加密以后 2 个密文分组也是相同的，但是 CBC 加密以后就不存在 2 个密文相同的情况，因为有 XOR 这一步

3.CFB 模式
CFB 模式的全程是 Cipher FeedBack 模式(密文反馈模式)。在 CFB 模式中，前一个密文分组会被送到密码算法的输入端。所谓反馈，这里指的就是返回输入端的意思
解密过程，中间是加密而不是解密
CFB 模式中，明文和一串比特序列 XOR 以后就变成了密文分组

4.OFB 模式
OFB 模式的全程是 Output-FeedBack 模式(输出反馈模式)。在 OFB 模式中，密码算法的输出会反馈到密码算法的输入中
OFB 也不直接对明文进行加密，也是通过利用明文和一串比特序列进行异或运算来得到密文
OFB 的解密过程中，也是用加密，而不是解密

5.CTR 模式
CTR 模式的全程是 CounTeR 模式(计数器模式)。CTR 模式是一种通过将逐次累加的计数器进行加密来生成密钥流的流密码
解密过程，中间是加密而不是解密

针对 CTR 模式，在它上面再加上认证功能，就变成了 GCM 模式(Galois/Counter Mode)，这个模式能够在 CTR 模式生成密文的同时生成用于认证的信息。从而判断“密文是否通过合法的加密过程生成”。通过这一机制，即便主动攻击者发送伪造的密文，我们也能识别出“这段密文是伪造的”


模式	名称	特点	说明
ECB 模式	Electronic Codebook	运算快速，支持并行运算，需要填充	不推荐使用
CBC 模式	Cipher Block Chaining	支持并行运算，需要填充	推荐使用
CFB 模式	Cipher Feedback	支持并行运算，不需要填充	不推荐使用
OFB 模式	Output Feedback	迭代运算使用流密码模式，不需要填充	不推荐使用
CTR 模式	Counter	迭代运算使用流密码模式，支持并行运算，不需要填充	推荐使用
XTS 模式	XEX-based tweaked-codebook	不需要填充	用于本地硬盘存储解决方案中


AES-128-GCM 性能比 AEC-128-CBC 性能高
手机上使用 ChaCha20-poly1305，电脑上使用 AES-128-GCM