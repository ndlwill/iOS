位运算，XOR。
XOR 的全称是 exclusive or，中文翻译是异或

0 XOR 0 = 0
0 XOR 1 = 1
1 XOR 0 = 1
1 XOR 1 = 0
“两个数相同，异或为 0 ，不同则异或为 1”

异或也叫半加运算，其运算法则相当于不带进位的二进制加法：二进制下用1表示真，0表示假，则异或的运算法则为：
0 ⊕ 0 = 0
1 ⊕ 0 = 1
0 ⊕ 1 = 1
1 ⊕ 1 = 0
这些法则与加法是相同的，只是不带进位，所以异或常被认作不进位加法
由异或的这种特点，也就引出了它的一个常用特性，两个相同的数进行 XOR 运算的结果一定为 0

可以得到如下的运算法则：
1. a ⊕ a = 0
2. a ⊕ b = b ⊕ a 交换率
3. a ⊕ b ⊕ c = a ⊕ (b ⊕ c) = (a ⊕ b) ⊕ c  结合律
4. d = a ⊕ b ⊕ c 可以推出 a = d ⊕ b ⊕ c
5. a ⊕ b ⊕ a = b

异或的结合律可以用来做简单的对称加密

如果把异或数设置成一个完全随机的二进制序列，那么被异或数和它进行一次异或运算以后，结果如同“密文”一样
如果窃听者不知道异或数是什么，很难短时间内解出原消息来
a ⊕ b ⊕ b = a ⊕ (b ⊕ b) = a ⊕ 0 = a
消息接收者拿到密文以后，把密文再和异或数进行一起异或运算，就能拿到原文了。这个性质就是异或的结合律