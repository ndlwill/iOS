https://developer.apple.com/documentation/technotes/tn3126-inside-code-signing-hashes

Look inside a code signature to see how it uses hashes to protect the code’s executable pages, resources, and metadata from tampering.


Every now and again an issue crops up where you actually need to understand how code signing works. For example:
1. Using the Latest Code Signature Format has a diagnostic process that involves code signing hash slots. 
While that process is actionable in and of itself, it makes more sense if you know what those hash slots hold.
https://developer.apple.com/documentation/Xcode/using-the-latest-code-signature-format
2. The issue covered by Updating Mac Software makes more sense once you understand code signing’s lazy per-page signature checking.
https://developer.apple.com/documentation/Security/updating-mac-software


#####
This technote explains how code signing uses hashes to protect the code’s executable pages, resources, and metadata from tampering.
The examples in this technote are taken from macOS, but these concepts apply to all Apple platforms.
#####

Important:
When signing code, use Xcode (all platforms) or the codesign tool (macOS only). 
To get information or validate a code signature, use the codesign tool or the Code Signing Services API.
https://developer.apple.com/documentation/Security/code-signing-services // Examine and validate signed code running on the system.



==================================================
.cer 文件既可以是二进制格式，也可以是 Base64 编码（文本格式），具体取决于它的编码方式和扩展名本身并不能 100% 决定格式。

.cer 文件可能是以下两种格式之一：
1. DER 格式（二进制） // openssl x509 -in cert.cer -inform DER -text
2. PEM 格式（Base64 编码 + 文本） // openssl x509 -in cert.cer -inform PEM -text
含有标志性头尾：
-----BEGIN CERTIFICATE-----
MIID...
-----END CERTIFICATE-----



==================================================Code signature storage
The code signature for an item is stored in one of four ways:

1. If the item is a Mach-O image, or is a bundle wrapped around a Mach-O image, the code signature is stored within the image using the LC_CODE_SIGNATURE load command:
otool -l "AppWithTool.app/Contents/MacOS/AppWithTool" | grep LC_CODE_SIGNATURE -B 1 -A 3 
otool 主要用于查看可执行文件（Mach-O）、库文件、动态库等的底层结构。

To build the AppWithTool app used in this example, follow the instructions in Embedding a Command-Line Tool in a Sandboxed App.
https://developer.apple.com/documentation/Xcode/embedding-a-helper-tool-in-a-sandboxed-app

In a universal binary, each architecture is signed independently. For details on the signature of a specific architecture, pass the -arch option to otool.


2. If the item is a bundle without a Mach-O image, the code signature is stored in the bundle’s _CodeSignature directory:
codesign --display -vvv Codeless.bundle  

部分	含义
codesign	Apple 提供的工具，用于对可执行文件、App 包、bundle、framework 等进行代码签名或验证签名。
--display	表示“仅显示签名信息”，不会做验证或签名操作。
-vvv	详细级别为3（very verbose），输出最多的信息，比如签名者证书、hash 算法、权限信息、团队 ID 等。

To build the Codeless bundle used in this example, use Xcode to create a new project from the macOS > Bundle template, then add an empty config.txt file to it.


3. If the item exists within a bundle, it’s covered by the bundle’s code signature. For details on how that works, see Resources.
https://developer.apple.com/documentation/technotes/tn3126-inside-code-signing-hashes#Resources


4. Otherwise, the code signature is stored in extended attributes (EAs) on the item:
% cat hello.txt 
Hello Cruel World!
% codesign --sign "Apple Development: …" hello.txt
% codesign --display -vvv hello.txt
…
Format=generic
…
Authority=Apple Development: …
…
% ls -l@ hello.txt 
-rw-r--r--@ 1 quinn  staff  19  8 Apr 12:46 hello.txt
    com.apple.cs.CodeDirectory      129 
    com.apple.cs.CodeRequirements   168 
    com.apple.cs.CodeRequirements-1 165 
    com.apple.cs.CodeSignature      4860 

Important
Storing a code signature in EAs is brittle because many file transfer mechanisms drop these. 
To avoid this potential pitfall, follow the rules in Placing Content in a Bundle.
https://developer.apple.com/documentation/BundleResources/placing-content-in-a-bundle


Reading UNIX Manual Pages
https://developer.apple.com/documentation/os/reading-unix-manual-pages



==================================================Code directory
The central concept in a code signature is the code directory. 

#####
Note
The final code signature uses Cryptographic Message Syntax. 
#####

In a universal binary, each architecture is signed independently, each with its own code directory.


Hashing a code directory results in a code directory hash, or cdhash. 
This value uniquely identifies the code being signed
It crops up in a variety of places, most notably notarization.
A notarized ticket is a set of cdhash values, signed by the notary service to confirm that it has checked that code for malicious components.


The code may have multiple code directories, each associated with a different hash algorithm. 
This hash algorithm is used both to seal the code directory itself and to seal the executable pages, resources, and metadata of the code.


Code that targets macOS 10.12 or later has a single code directory that uses SHA-256 hashing:
codesign --display -vvv "AppWithTool.app" // 查看 Code Directory
…
Hash type=sha256 size=32
CandidateCDHash sha256=ff19a91b272a49d1a0f16ee54c672da60f0e116f
CandidateCDHashFull sha256=ff19a91b272a49d1a0f16ee54c672da60f0e116fae890512a3609913a01b488c
Hash choices=sha256
…
CDHash=ff19a91b272a49d1a0f16ee54c672da60f0e116f
…

If you change the code’s deploying target to include macOS 10.11, the signature includes both a SHA-256 and a legacy SHA-1 code directory:
codesign --display -vvv --arch x86_64 "AppWithTool for macOS 10.11.app" 
…
Hash type=sha256 size=32
CandidateCDHash sha1=4dbc916a07fb02653ceecef8bef09f43e55cf436
CandidateCDHashFull sha1=4dbc916a07fb02653ceecef8bef09f43e55cf436
CandidateCDHash sha256=dec2275a0e3800fefd1c84c76cd01756984a74c1
CandidateCDHashFull sha256=dec2275a0e3800fefd1c84c76cd01756984a74c1d4cbfb2e97b5ebe7a06e3ce3
Hash choices=sha1,sha256
…
CDHash=dec2275a0e3800fefd1c84c76cd01756984a74c1
…


Note
The command above includes the --arch x86_64 option to show the Intel code signature. 
Without that codesign shows the code signature for the architecture on which you run the command. 
So, if you’re on Apple silicon, you’ll see the Apple silicon code signature. 
Apple silicon debuted with macOS 11, and thus Apple silicon code never includes a legacy SHA-1 code directory.


The CDHash property is the cdhash value used by this Mac; 
it’s the strongest CandidateCDHash value understood by this version of macOS. 
The CandidateCDHash and CandidateCDHashFull properties are alternative cdhash values, each specifying a hash algorithm. 
The Full variant includes the full hash, while the other variant is truncated to 20 bytes to match SHA-1.


Each architecture in a universal binary is signed independently and so has different hash values. 
To get the hashes for a specific architecture, supply the --arch argument:
codesign --display -vvv --arch arm64 "AppWithTool.app"
…
CDHash=118bb46834dd39dad5bc1bc30d991b6467c1be2e
…
codesign --display -vvv --arch x86_64 "AppWithTool.app"
…
CDHash=ff19a91b272a49d1a0f16ee54c672da60f0e116f
…


Code Directory:
它是 Apple 代码签名系统中的核心数据结构，用于描述和保护一个可执行文件的主要内容。它不是指“目录”（folder），而是一个包含签名信息的“目录结构表”（表格/数据块）。

为什么它是“核心概念”？
因为 Apple 的系统（如 Gatekeeper、App Store、kernel）在验证签名时，就是读取 CodeDirectory 并验证内容 hash 是否匹配、签名是否正确：
如果某段代码被篡改，hash 对不上，签名就失效
如果改了权限、plist 也能检测到

它记录了签名要保护的关键内容的摘要（hash 值）,包括：
每个 page（页）大小的代码块的 hash 值
可执行文件的 entry point（入口点）
Info.plist 的 hash
Entitlements（权限声明）的 hash
Team ID、Identifier 等标识信息

这些 hash 值本身被签名者的私钥签名


==================================================Per-page hashes
Within a code directory there are a set of hash slots. For a summary, look at the CodeDirectory property:
codesign --display -vvv "AppWithTool.app"             
…
CodeDirectory v=20500 size=820 flags=0x10000(runtime) hashes=14+7 location=embedded
…

This means there are 14 per-page hash slots and 7 special hash slots. 
For a dump of these hashes, increase the verbosity to the maximum level by adding three more -v options:
codesign --display -vvvvvv "AppWithTool.app"

…
Page size=4096
    -7=662d7e12de97b1d9bf3a9e4574652bc4d1927f4b989a6b7a1d1380e542f2b4f9
    -6=0000000000000000000000000000000000000000000000000000000000000000
    -5=2198747bee96847909af4417876f446cea964f842bd1fbbdea39f53ff947e0d8
    -4=0000000000000000000000000000000000000000000000000000000000000000
    -3=0244f72a51483d010cda907fb8cb22983d372ca57812abe8c3635cedd42ad8bd
    -2=ef927ca54639a460b9519bd5493c1fb192f521a16e0115060b7cb7bf15ff0217
    -1=e3fc08cfb2a658bc588ac603f8bfc04a54a62f5893d586f710f3005a5a763ad2
     0=7bfc0c37d35be00553e99db6c99ce5670cdb53ce7d9314f0019efd8d73f6c1d3
     1=5fd93dda8b09dd27db333a6743c7da8418b637780fd70ee58c725fe00b7d0e76
     2=5b542d3e7e43ec8328307ae7006fadb6ada0ed4d494e1b8a6ef63d899ef458fe
     3=6671e862ed46786ea31773c13605ebd5cef22d01fb7fbb01cfafd188aef4da99
     4=bb31c395959971aa64e9f04770282377b0e9901de85fbf17ac181990caa99848
     5=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
     6=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
     7=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
     8=36932b34d11fe626253a65b73dd11e9269f4e976ef7df8d56b24098cbb14d462
     9=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
    10=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
    11=ad7facb2586fc6e966c004d7d1d16b024f5805ff7cb47c7a85dabd8b48892ca7
    12=98257719ba902d349f1644c2e856df9ff887f70f5c2da9387369ddc41a5964f8
    13=1fa1c2d0d552c0e016ca088a31892411bb206e9926e399b6a64ebc4408a296c5
…

The negative slots are special. For the details, see Special Slots.

The non-negative slots are for per-page hashes: 0 is the hash for the first page of code, 1 for the second, and so on.

This per-page architecture allows the kernel to check each page as it’s loaded into memory.

macOS doesn’t always check code as it’s paged in.
One key feature of the hardened runtime is that it opts the process into this checking by default. 
https://developer.apple.com/documentation/Security/hardened-runtime
The Disable Executable Memory Protection Entitlement opts you out of this and other security features. Don’t do that!
https://developer.apple.com/documentation/BundleResources/Entitlements/com.apple.security.cs.disable-executable-page-protection


Note
The Disable Executable Memory Protection Entitlement only has this effect on Intel code. 
For Apple silicon code, this entitlement leaves page protection enabled, 
making it equivalent to the Allow Unsigned Executable Memory Entitlement.
https://developer.apple.com/documentation/BundleResources/Entitlements/com.apple.security.cs.allow-unsigned-executable-memory



==================================================Special slots
Within the code directory the negative hash slots are special. 
They don’t correspond to code but rather to other data structures. 
Each slot number corresponds to a specific type of data. Here are some highlights:
Slot -1 holds a hash of the Info.plist.
Slot -3 holds a hash of the resources.
Slot -5 holds a hash of the entitlements.


codesign --display -vvvvvv "AppWithTool.app"
…
Page size=4096
    …
    -1=e3fc08cfb2a658bc588ac603f8bfc04a54a62f5893d586f710f3005a5a763ad2
    …

shasum -a 256 "AppWithTool.app/Contents/Info.plist"
e3fc08cfb2a658bc588ac603f8bfc04a54a62f5893d586f710f3005a5a763ad2 …

The Info.plist hash matches the value in its hash slot. Neat-o!


shasum 是一个命令行工具，用于计算文件或文本的 SHA 摘要（哈希值）。用于生成或校验文件的哈希值（指纹）
工具	默认算法	可选算法	跨平台	是否官方标准
shasum	SHA-1	SHA-1/224/256	✅ 是	✅ 是
openssl dgst	MD5	✅ 多种算法	✅ 是	✅ 是


Now consider this advice from Using the Latest Code Signature Format:
https://developer.apple.com/documentation/Xcode/using-the-latest-code-signature-format
If -5 contains a value and -7 contains a zero value, or is not present, you need to re-sign your app to include the new DER entitlements.
You should now have a better handle on this diagnostic. 
Slot -5 holds the hash for the legacy property list entitlements, 
while slot -7 holds the hash for the new-style DER-encoded entitlements. 
If you have an iOS app whose signature has an entry in -5 but no entry in -7, 
then it has entitlements but it’s missing the new-style DER-encoded entitlements and you must re-sign it to be compatible with iOS 15.


当一个结构（比如 X.509 证书、签名、Profile、ASN.1 数据）被 DER-encoded 后，它的内容会变成一种二进制格式，但它是有严格结构规则的，
基于 TLV（Tag-Length-Value） 编码。
部分	含义	示例（十六进制）
Tag	类型标识（1 字节或更多）	30 表示 SEQUENCE，02 表示 INTEGER 等
Length	长度（1～多字节）	0D 表示长度是 13 字节
Value	实际的值（按长度来）	如 313233 表示字符串 "123"

示例：一个简单 DER 编码（二进制 → 十六进制）
一个 ASN.1 结构：
SEQUENCE {
  INTEGER 42
  UTF8String "Hi"
}
对应的 DER 编码（16进制）可能是：
30 06            -- SEQUENCE，长度6字节
   02 01 2A      -- INTEGER，长度1字节，值为 0x2A (42)
   0C 02 48 69   -- UTF8String，长度2，内容是 "Hi"

解释:
30 是 Tag，代表 SEQUENCE
06 是长度，总长度6个字节
02 01 2A 是 INTEGER 类型，长度1，值是 42（0x2A）
0C 02 48 69 是 UTF8String 类型，值是 "H" 0x48, "i" 0x69


==================================================Resources
If your code exist in a bundle then the code signature protects not just your code but the resources in your bundle. 
Central to this is the CodeResources file. Slot -3 in the code directory holds the hash of that file:   

codesign --display -vvvvvv "AppWithTool.app"        
…
Page size=4096
    …
    -3=0244f72a51483d010cda907fb8cb22983d372ca57812abe8c3635cedd42ad8bd
    …
…

shasum -a 256 "AppWithTool.app/Contents/_CodeSignature/CodeResources" 
0244f72a51483d010cda907fb8cb22983d372ca57812abe8c3635cedd42ad8bd …


So, if that file changes, the code directory hash changes and you break the seal on the code signature.


let’s look at that file:
plutil -convert xml1 -o - "AppWithTool.app/Contents/_CodeSignature/CodeResources"
…
<dict>
  <key>files</key>
  <dict>
    …
  </dict>
  <key>files2</key>
  <dict>
    …
  </dict>
  <key>rules</key>
  <dict>
    …
  </dict>
  <key>rules2</key>
  <dict>
    …
  </dict>
</dict>
</plist>

It’s a property list with four top-level dictionaries: files, files2, rules, and rules2. 
Amusingly, three out of four of these items are vestigial. The one that matters is files2.


Note
The files dictionary contains SHA-1 hashes and is present for compatibility purposes. 
The rules and rules2 dictionaries contain resource rules, a concept that’s now obsolete. 
For more on the move away from resource rules, see Technote 2206 macOS Code Signing In Depth.
https://developer.apple.com/library/archive/technotes/tn2206/_index.html


The files2 dictionary contains two kinds of items. The first kind of item is a reference to a resource file. For example:

plutil -convert xml1 -o - "AppWithTool.app/Contents/_CodeSignature/CodeResources"
…
<dict>
  …
  <key>files2</key>
  <dict>
    …
    <key>Resources/Base.lproj/Main.storyboardc/MainMenu.nib</key>
    <dict>
      <key>hash2</key>
      <data>
      5kxOZMmHqiN+QhVFpWQ8xdn5gPGYk+Yanxi+bYAMWFU=
      </data>
    </dict>
    …
  </dict>
  …
</dict>
</plist>


echo "5kxOZMmHqiN+QhVFpWQ8xdn5gPGYk+Yanxi+bYAMWFU=" | base64 -D | xxd -p 
e64c4e64c987aa237e421545a5643cc5d9f980f19893e61a9f18be6d800c
5855


#####
base64 -D
等价于 base64 --decode
把 Base64 编码的文本 解码为 原始的二进制数据

|
管道符，把前一个命令的输出作为后一个命令的输入

xxd -p
把输入的二进制数据以纯十六进制（hex）字符串形式输出
-p 代表 “plain hex dump”，例如输出：308202223082010aa0030201020209...
#####


shasum -a 256 "AppWithTool.app/Contents/Resources/Base.lproj/Main.storyboardc/MainMenu.nib" 
e64c4e64c987aa237e421545a5643cc5d9f980f19893e61a9f18be6d800c5855 …

For each resource file reference, the key is the path of the file, relative to the bundle contents, 
and the value is a dictionary with a hash2 property holding the SHA-256 checksum of the file.


#####
Apple 的 代码签名机制中有一个核心结构叫 CodeDirectory，里面记录了：
可执行页（每 4096 字节一页）的哈希
Info.plist、entitlements、资源文件等的哈希
这些哈希值构成一个结构（CodeDirectory blob）
最后，整个 CodeDirectory 会被开发者的 私钥签名（产生 CMS 签名）

CMS 签名（Cryptographic Message Syntax）是 PKCS #7 的一种形式。
代码签名中的「签名」通常指的是 CMS（PKCS7）签名
在 .app 可执行文件的尾部（Mach-O 文件的 __LINKEDIT 区段中的 LC_CODE_SIGNATURE）

验证签名流程：
系统从 Mach-O 文件中提取出 CodeDirectory
重新计算你本地的每一页哈希，和 CodeDirectory 中的值做比对
对 CodeDirectory 本身的 hash，使用 Apple 系统中的 信任链根证书验证签名（CMS）
#####


The other kind of item in the files2 dictionary is a macOS nested code reference. For example:
plutil -convert xml1 -o - "AppWithTool.app/Contents/_CodeSignature/CodeResources"
…
<dict>
  …
  <key>files2</key>
  <dict>
    …
    <key>MacOS/ToolX</key>
    <dict>
      <key>cdhash</key>
      <data>
      j2kgMbA32V6O/SEDnwa+SlnpJ/s=
      </data>
      <key>requirement</key>
      <string>anchor apple generic and identifier "com.example.apple-samplecode.AppWithTool.ToolX" and (certificate leaf[field.1.2.840.113635.100.6.1.9] /* exists */ or certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = SKMME9E2Y8)</string>
    </dict>
    …
  </dict>
  …
</dict>
</plist>

Again, the key is the path of the file, relative to the bundle contents, but now the value is a dictionary with two properties:

The cdhash property holds the code directory hash of the nested code:
base64 -D | xxd -p
j2kgMbA32V6O/SEDnwa+SlnpJ/s=
^D
8f692031b037d95e8efd21039f06be4a59e927fb


codesign --display -vvv "AppWithTool.app/Contents/MacOS/ToolX" 
…
CDHash=8f692031b037d95e8efd21039f06be4a59e927fb
…


The requirement property holds the designated requirement (DR) of that nested code:
codesign --display -r - "AppWithTool.app/Contents/MacOS/ToolX"  
…
designated => anchor apple generic and identifier "com.example.apple-samplecode.AppWithTool.ToolX" … SKMME9E2Y8


In theory this lets you update the nested code with a new version, as long as it has the same DR. 
In practice, this facility is not used in standard deployment workflows and is now deprecated.


Important
iOS, watchOS, and tvOS have a different model for nested code. 
They put strict limits on where you can place nested code. 
For details on those limits, see Placing Content in a Bundle. 
Also, when you nest code in an app, the app references that nested code as a collection of resource files rather than using a single nested code reference. 
Nested code references are only used on macOS.
https://developer.apple.com/documentation/BundleResources/placing-content-in-a-bundle