Mach-O:
Mach-O(Mach Object)是macOS、iOS、 iPadOS存储程序和库的文件格式。对应系统通过应用二进制接口(application binary interface,缩写为ABI)来运行该格式的文件。
Mach-O格式用来替代BSD系统的a.out格式。Mach-O文件格式保存了在编译过程和链接过程中产生的机器代码和数据，从而为静态链接和动态链接的代码提供了单一文件格式。
Mach-O文件就是一个可读可写的二进制文件

可执行文件调用过程:
调用fork函数，创建一个process进程
调用execve或其衍生函数，在该进程上加载，执行我们的Mach-O文件
当我们调用时execve (程序加载器)，内核实际上在执行以下操作:
将文件加载到内存
开始分析Mach-O中的mach header,以确认它是有效的Mach-O文件

通过终端命令查看Mach-O文件：objdump --macho --private-headers 可执行文件地址

符号的种类与作用:
Symbol Table
Symbol Table：就是用来保存符号。
String Table：就是用来保存符号的名称。
Indirect Symbol Table：间接符号表。保存使用的外部符号，也就是使用的外部动态库的符号(比如NSLog)。是Symbol Table的子集。

确认当前终端, 在终端输入tty:
/dev/ttys002
首先通过重定向在Xcode中让当前终端显示特定内容, Xcode添加Run Script:
echo "test" > /dev/ttys002
Xcode让终端显示xcconfig文件中的变量.


xcode_run_cmd.sh

#!/bin/sh

RunCommand() {
  #判断全局字符串VERBOSE_SCRIPT_LOGGING是否为空。-n string判断字符串是否非空
  #[[是 bash 程序语言的关键字。用于判断
  if [[ -n "$VERBOSE_SCRIPT_LOGGING" ]]; then
    #作为一个字符串输出所有参数。使用时加引号"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数
      if [[ -n "$TTY" ]]; then
          echo "♦ $@" 1>$TTY
      else
          echo "♦ $*"
      fi
      echo "------------------------------------------------------------------------------" 1>$TTY
  fi
  #与$*相同。但是使用时加引号，并在引号中返回每个参数。"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数
  if [[ -n "$TTY" ]]; then
      echo `$@ &>$TTY`
  else
      "$@"
  fi
  #显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
  return $?
}

EchoError() {
    #在shell脚本中，默认情况下，总是有三个文件处于打开状态，标准输入(键盘输入)、标准输出（输出到屏幕）、标准错误（也是输出到屏幕），它们分别对应的文件描述符是0，1，2
    # >  默认为标准输出重定向，与 1> 相同
    # 2>&1  意思是把 标准错误输出 重定向到 标准输出.
    # &>file  意思是把标准输出 和 标准错误输出 都重定向到文件file中
    # 1>&2 将标准输出重定向到标准错误输出。实际上就是打印所有参数已标准错误格式
    if [[ -n "$TTY" ]]; then
        echo "$@" 1>&2>$TTY
    else
        echo "$@" 1>&2
    fi
    
}

RunCMDToTTY() {
    if [[ ! -e "$TTY" ]]; then
        EchoError "=========================================="
        EchoError "ERROR: Not Config tty to output."
        exit -1
    fi
    # CMD：终端需要运行的命令
    # CMD_FLAG：运行的命令的参数
    # TTY：终端标志
    if [[ -n "$CMD" ]]; then
        RunCommand "$CMD" ${CMD_FLAG}
    else
        EchoError "=========================================="
        EchoError "ERROR:Failed to run CMD. THE CMD must not null"
    fi
}

RunCMDToTTY


该xcode_run_cmd.sh脚本需需要三个参数CMD 、CMD_FLAG 、TTY，这三个参数在xcconfig文件中定义就能获取到
// -p：不排序
// -a: 显示除了调试符号的其他所有符号
MACHO_PATH = ${BUILD_DIR}/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)/$(FULL_PRODUCT_NAME)/$(PRODUCT_NAME)
CMD = nm
CMD_FLAG = -pa ${MACHO_PATH}
TTY = /dev/ttys002