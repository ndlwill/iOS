SCNView
A view for displaying 3D SceneKit content.
iOS 8.0
class SCNView : UIView


In iOS and tvOS, SCNView is a subclass of UIView. As part of either operating system’s view hierarchy, an SCNView object provides a place for SceneKit content in your app’s user interface. 
You can create a SceneKit view by using its init(frame:options:) method or by adding it to a nib file or storyboard. 
To provide content for a SceneKit view, assign an SCNScene object to its scene property.

For additional important methods and properties for working with SceneKit views, see the SCNSceneRenderer protocol. 
(You can also render SceneKit content into an arbitrary Metal command queue or OpenGL context using the SCNRenderer class, or into a Core Animation layer on macOS using the SCNLayer class. 
The SCNSceneRenderer protocol defines functionality common to all three SceneKit rendering classes.)


ARSCNView
A view that blends virtual 3D content from SceneKit into your augmented reality experience.

iOS 11.0
class ARSCNView : SCNView

The ARSCNView class provides the easiest way to create augmented reality experiences that blend virtual 3D content with a device camera view of the real world. When you run the view's provided ARSession object:
1. The view automatically renders the live video feed from the device camera as the scene background.
2. The world coordinate system of the view's SceneKit scene directly responds to the AR world coordinate system established by the session configuration.
3. The view automatically moves its SceneKit camera to match the real-world movement of the device.

ARKit automatically matches SceneKit's coordinate space to the real world, so after you place your app's virtual content, it maintains the illusion of resting in the real-world as the user moves the device. 

You don't necessarily need to use the ARAnchor class to track positions of objects you add to the scene, but by implementing ARSCNViewDelegate methods, you can add SceneKit content to any anchors that are automatically detected by ARKit.

Because ARKit requires Metal, use only Metal features of SceneKit. For example:
1. This class supports only SCNProgram instances with Metal Shading Language code.
2. If you set the preferredRenderingAPI property to SCNRenderingAPI.openGLES2, the framework reverts the value to SCNRenderingAPI.metal.