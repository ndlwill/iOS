iOS 静态库、动态库:
https://www.justisit.com/15210408337160.html

http://www.polarhome.com/service/man/?qf=xcrun&af=0&sf=0&of=MacOSX&tf=2

https://developer.apple.com/download/all/

Xcode Command Line Tools 是一个独立的小型包，让开发者可以在 macOS 中进行命令行开发。
它由安装在/Library/Developer/CommandLineTools目录中的 macOS SDK 和命令行工具（例如 Clang）组成
安装方式如下:
1. 安装 Xcode
2. 从 苹果开发者官网下载 // https://developer.apple.com/download/all/
3. 通过运行 xcode-select --install 安装


==================================================
浏览器输入下面的链接:
x-man-page://xcode-select

xcode-select 用于管理开发者到底使用哪一个 developer 工具目录，它可以使得开发者轻松地在不同版本的 Xcode 之间切换工具，并且在 Xcode 移动时更新其路径。
xcode-select 命令用于安装和切换系统上的 Xcode 版本

输出当前选择的路径
xcode-select -p
/Applications/Xcode.app/Contents/Developer

重置到默认的 command line developer tools
xcode-select -r


==================================================xcodebuild
x-man-page://xcodebuild

xcodebuild [-project name.xcodeproj]
            [[-target targetname] ... | -alltargets]
            [-configuration configurationname]
            [-sdk [sdkfullpath | sdkname]] [action ...]
            [buildsetting=value ...] [-userdefault=value ...]

xcodebuild [-project name.xcodeproj] -scheme schemename
            [[-destination destinationspecifier] ...]
            [-destination-timeout value]
            [-configuration configurationname]
            [-sdk [sdkfullpath | sdkname]] [action ...]
            [buildsetting=value ...] [-userdefault=value ...]

xcodebuild -workspace name.xcworkspace -scheme schemename
            [[-destination destinationspecifier] ...]
            [-destination-timeout value]
            [-configuration configurationname]
            [-sdk [sdkfullpath | sdkname]] [action ...]
            [buildsetting=value ...] [-userdefault=value ...]

xcodebuild builds one or more targets contained in an Xcode project, or builds a scheme contained in an Xcode workspace or Xcode project.

To build an Xcode project, run xcodebuild from the directory containing your project (i.e. the directory containing the name.xcodeproj package).

要构建 Workspace，必须同时通过 -workspace 和 -scheme 定义构建的选项。
To build an Xcode workspace, you must pass both the -workspace and -scheme options to define the build.

action	描述
build	默认的 action，未指定 action 时会使用 build，构建工程生成 Product
archive	编译、归档生成 .xcarchive 包，可以指定输出路径
Clean	从构建根目录中删除 Product 目录 和 临时文件

clean:
xcodebuild clean -project name.xcodeproj -target targetName

build:
在构建 project 时，默认 xcodebuild 会构建 project 中 target 列表中的第一个以及默认的 configuration。
默认的配置（Configuration）通常是 "Release"。这意味着当你使用 xcodebuild 命令构建项目时，默认情况下，Xcode 会使用 "Release" 配置来生成应用程序或库。

xcodebuild -workspace FHProject.xcworkspace -scheme FHClientDemo -configuration Release clean -sdk iphoneos build SYMROOT=/Users/leo/Desktop/app
通过SYMROOT命令会把生成的.app安装包放到指定的目录下/Users/leo/Desktop/app


archive:
xcodebuild archive -project name.xcodeproj -scheme scheme -archivePath xxx

Target 表示项目中要构建的不同组件，而 Scheme 则是一种配置，用于指定在构建和运行项目时使用哪些 Target 和其他设置。
通过合理配置 Target 和 Scheme，你可以更好地管理和构建 Xcode 项目，满足不同的开发和测试需求。
Scheme 中的参数将会控制构建每一个 target 如何构建

xcodebuild clean -workspace ${workspace_name}.xcworkspace -scheme ${scheme_name} 
xcodebuild archive -workspace MyWorkspace.xcworkspace -scheme MyScheme

构建过程中常用到的选项，除了 -workspace、-project、 -target、 -scheme 以外，还有一些其它的选项可能会用到，如下:
-configuration
指定构建配置。一般的，多 Scheme 情况下不需要用到这个参数，因为每个 Scheme 都有对应的 Build Configuration，仅在单个 Scheme 的情况下，需要指定 Configuration 时可以用这个选项，比如 Debug、Release等等。

-sdk
指定 sdk 路径。当电脑中有多个 Xcode 版本时，一般情况会用默认 Xcode Command Line Tool 的 sdk，可以通过 -showsdks 获取其它 sdk 路径后，在作为 -sdk 的 Value。

-arch
指定架构类型 architecture，比如arm64

-allowProvisioningUpdates
允许更新描述文件。需要配置 Xcode->Preferences->Account

-xcconfig
指定 xcconfig 文件。xcconfig 的内容会覆盖其它的 Build Settings

buildsetting=value
指定 Build settings 中的内容。例如： ARCHS=arm64,和 xcconfig 文件的写法一样

Export:
Export 主要是的对生成的 .xcarchive 文件进行进一步的处理，根据 ExportOptions.plist 生成相应的 ipa，相应的命令如下:
xcodebuild -exportArchive -archivePath <xcarchivepath> -exportPath <destinationpath> -exportOptionsPlist <path>
其中，ExportOptions.plist 中包含了分发方法：app-store、ad-hoc、enterprise、development，以及分发选项和分发签名选项。可以通过 xcodebuild -help 查看文件可用的 Key
当然最便捷的办法就是通过 Xcode 导出一次 ipa 包，在输出的文件夹内存放了对应的 ExportOptions.plist文件。

Other Options:
还有几个选项可以显示有关已安装设备的信息、Xcode 版本 以及关于 Project 或 Workspace 的信息
-list // ###
-showBuildSettings
-showdestinations
-showsdks // ###
-version // ###


==================================================altool
altool 同样是 Xcode Command Line Tools 用于验证构建版本或将有效构建版本自动上传至 App Store。可以通过xcrun --find altool 查找其位置

altool 分为两步，验证指定的 App，上传指定的 App

参数	详细说明
--validate-app	要验证指定的 App。
--upload-app、--upload-package	要上传指定的 App。
-f file	正在验证或上传的 App 的路径和文件名。
-u username	用户名。
-p password	App 专用密码。
--apiKey	apiKey，私钥文件AuthKey_<api_key>.p8，存储位置 ~/.private_keys
--apiIssuer	Issuer ID ，在 App Store Connect -> 用户和访问 -> 密钥 查看 Issuer ID

用户认证信息的获取:
altool 在上传时需要开发者的用户名 username 和 App 专用密码 password 或者使用 apiKey 和 apiIssuer 用于认证用户信息。

App 专用密码的获取:
https://appleid.apple.com/
在“登录和安全”部分中，点按“App 专用密码”
点按“生成 App 专用密码”或点按+,然后按照屏幕上的步骤操作

apiKey 和 apiIssuer 的获取:
使用开发者账号访问https://appstoreconnect.apple.com/登录 App Store Connect 首页，点击【用户与访问】
选择【密钥】生成 AuthKey_<api_key>.p8密钥下载保存（只能下载一次）,api_key 填入 --apiKey 参数
在终端复制执行 cd ~ && mkdir .private_keys创建隐藏文件夹，再将下载的 AuthKey_<api_key>.p8文件复制或移动到~/.private_keys隐藏文件夹下

验证 App:
xcrun altool --validate-app -f  file_path --type  "{macos | ios | appletvos}" {-u  username [-p  password] |  --apiKey api_key --apiIssuer  issuer_id}

上传 App:
1.使用 --upload-package
xcrun altool --upload-package  file_path --type  {macos | ios | appletvos} --asc-public-id  id --apple-id id
--bundle-version version --bundle-short-version-string string
--bundle-id id {-u username [-p  password] |  --apiKey api_key --apiIssuer issuer_id}

2.使用 --upload-app
xcrun altool --upload-app -f file_path --type  "{macos | ios | appletvos}"
{-u  username [-p  password] |  --apiKey api_key --apiIssuer  issuer_id}  [DEPRECATED use --upload-package]