链接一个库的三要素：
头文件
库文件所在位置
库文件名称

一、App->动态库A->动态库B
对于App，动态库A正常链接，但是动态库B并不在动态库A（他链接的动态库B）保存的@rpath与动态库B的install_name组合的路径下：
动态库B的路径 = 动态库A的rpath + 动态库B的install_name

解决：修改动态库A的@rpath或者copy动态库B到指定路径中。

方式一
修改动态库A的@rpath为动态库B的install_name之前的绝对路径
这样在当前工作空间下，A就可以使用B的相关符号。
LD_RUNPATH_SEARCH_PATHS = $(inherited) ${PODS_CONFIGURATION_BUILD_DIR}/AFNetworking
如果同时想让APP也使用B，根据我们在动态库里面讲的，可以将B的符号暴露给APP。
/// 动态库 A 的xcconfig
OTHER_LDFLAGS=-Xlinker -reexport_framework -Xlinker AFNetworking
/// APP 的xcconfig
HEADER_SEARCH_PATHS="${SRCROOT}/AFNetworking"

这里大家注意一个点：HEADER_SEARCH_PATHS="${SRCROOT}/AFNetworking"这里没有写到Headers是因为Xcode会递归的在文件夹里面去寻找对应的头文件，写到Headers也是可以的。
另外要注意的是，Build Settings里面的设置，如果修改过的话，一定要加上$(inherited)，是继承的意思。

方式二
Cocoapods向App中导入动态库B，在导入的过程中，Cocoapods会帮助我们将动态库B拷贝到App的Frameworks/目录下

方式三：
通过脚本手动Copy:


二、APP -> 动态库A -> 静态库B
因为动态库A生成的过程中在链接静态库B时，会把静态库B所有代码都链接进去。所以编译链接都不会报错。
此时如果想要APP使用静态库B，只需要在APP的xcconfig文件中设置HEADER_SEARCH_PATHS即可:
HEADER_SEARCH_PATHS = "${SRCROOT}/../YSFramework/Pods/Headers/Public/AFNetworking"