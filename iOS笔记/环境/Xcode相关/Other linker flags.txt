-ObjC 参数的意义是告诉链接器，将静态库中所有实现了 Objective-C 或 Category 的成员（目标文件），链接到最终的可执行文件中。

静态语言的链接:
像 C 这样的典型静态语言，所有“源文件”都会被编译为包含着可执行函数和静态数据的“目标文件”，之后在由“链接器”负责，将这些目标文件整合为一个可执行文件。
通常来说我们的工程中源文件不会只有一个，而且各个源文件之间还可能存在引用关系。例如： A.c 中用到了 B.c 中的一个名为 doSomething() 的函数。
当编译器遇到这个函数时，它会将一个 “undefined symbol” 写入到生成的目标文件中，表示这个位置“缺少东西”。
之后，当链接器遇到这个标记时，它就会知道这里有空缺需要填补。
随着连接器的深入，它在B.o 中找到了doSomething() 的实现，这时它就会用这个实现的地址将 A.o 中的 “undefined symbol” 替换掉，从而将 A.o B.o 链接在一起。
UNIX 静态库是一个目标文件的集合，只有那些可以填补“undefined symbol”（空缺）的目标文件才会被整合到最终的可执行文件中，这样做也是为了减少最终可执行文件的体积。


动态语言的链接:
那么它跟静态语言有什么不同呢？其中一个最大的区别就是：直到方法被调用，否则在此之前无从得知这个方法的实现具体在什么位置。
因此，Objective-C 的编译器也就没必要为方法设置“链接标识”了，但是类的链接标识依然存在。
举例来说，假设在源文件 A.m 有这样一条语句 [b doSomething] ，那么经过编译后，A.o 中会有一个用来指示“ b 空缺”的“undefined symbol”，但方法 doSomething 的“undefined symbol”却不会有。


Other linker flags:
Objective-C 这种动态语言特性为我们带来了很多便利，但也存在一些弊端。
例如，当我们的静态库中包含 category 时。根据前面介绍的动态语言链接特性，不难看出，category 的目标文件将不会被链接到可执行文件中，因为其它目标文件中都没有需要链接到位于 category 中的方法的“undefined symbol”。
这样生成的可执行文件，在运行时就可能会出现 “selector not recognized” 的异常。

Linker flags list:
-all_load ： 加载静态库中所有成员（简单暴力，但通常代价也不小）
-force_load <路径参数> : 加载指定路径静态库中的所有成员（这样目标就明确多了）
-arch <架构名>：加载指定架构的目标文件，例如：armv7，arm64，i386。
-framework <name[, suffix]>：为链接器指定 “name.framework/name”的framework检索地址。如果指定了后缀，那么将优先检索。例如：“name.framework/name_suffix”.

https://developer.apple.com/library/archive/qa/qa1490/_index.html#//apple_ref/doc/uid/DTS10004097