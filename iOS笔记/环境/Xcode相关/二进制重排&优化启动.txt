冷启动阶段耗时：
在 Edit Scheme -> run - Arguments -> Environment Variables 填入环境变量 DYLD_PRINT_STATISTICS
dylib loading time : 动态库耗时
rebase/binding time: 偏移修正 / 符号绑定 耗时

地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种防范内存损坏漏洞被利用的计算机安全技术。
偏移修正：任何一款app 生成的二进制文件 ; 在这个二进制文件里的、 方法、函数调用、都有一个地址 ; 这个地址就是在这二进制文件中的 偏移地址。 
当我们运行的时候 ASLR会生成一个随机值插在 二进制文件的开始地址位置。也就是 随机值 偏移值 等于运行时确定的内存数值。也就是修正 值。

绑定： 拿 NSLog举例， 当前写一个NSLog的时候,此时build xcode 并不知道它真实的地址。因为NSlog实际在 Foundation库中，Foundation库是外部的 动态库。聪明的设计师，将Mach0已符号的形式来做。 
这里就将 NSLog 符号 存入了MachO文件的 _DATA段儿。此时 这个符号指定的是一个没有意义的值。当我们运行的时候 此时 就会 将nslog符号 关联 真正的NSLog地址。这个关联 就是 绑定。

ObjC setup time: OC类注册的耗时。相比swift来说 swift要快很多。
initializer time: 执行load 和构造函数的耗时
slowest initializers: 举了几个最慢的例子。

根据列出的信息，我们来说优化方案：
(1)、动态库的耗时：我们app去载入动态库，这些动态库又有自己的依赖关系 ，花时间查找 啊，读取等操作。对于苹果官方的动态库，我们不用去担心，它做了高速的优化。对于一些自己自定义的，和cocopod导入的一些动态库，它花的时间就比较长了，所以我们应该尽量的减少它们。官方给出的建议 自定义的动态库最好是 6个。多余6个我们就要考虑合并动态库。合并动态库对于启动耗时 优化是非常之有效的。

(2)、偏移修正/符号绑定

(3)、类的注册耗时:减少 OC类 。如用swift开发的话 确实会高效许多。

(4)、执行load 和构造函数的耗时：减少load 非懒加载类 的产生 及 c++的构造函数使用，非必须 不这么做，可以考虑 在 initialize里做， 延迟在 main以后去做。

main函数以后的优化：
(1)、减少启动初始化的流程，能懒加载的就懒加载。
(2)、随着业务的不多堆叠，可能会遗留出许多未用到的类，这些类也是有一定的耗的。虽说没用但是它也参与了编译。所以 一定要删掉。
(3)、如果启动的时候，尽量使用多线程去做。在启动那一刻的，尽量使用多线程，把cpu的性能体现出来，来换取时间。
(4)、 我们启动时刻的那一些页面尽量 不用用xib,story.bord,最好用纯代码去做。因为 xib 也好 story.bord，它本身就得需要去做一层代码的解析页面的渲染。
(5)、其他的就是在业务层面的一些优化了。

在技术层面上对项目的启动优化，只要项目大 都有优化的空间，这就是二进制重排。

