==========================Build Configuration
Xcode默认会有2个编译模式，一个是Debug，一个是Release

针对开发时的域名: Debug
针对预上线时的域名: Beta
针对上线时对外公开的域名: Release
我们就使用它来针对3个环境下不同域名做配置

1. 添加Configuration
PROJECT->Configurations 的+ 选duplicatte Debug

2. 查看Configuration
添加完第1步的Configuration之后，在Edit Scheme里就会看到新添加的配置项

3. 更改Preprocessor Macros
PROJECT->Build Settings->Preprocessing->Preprocessor Macros

4. 在程序里配置对应的Configuration下不同域名

#ifdef DEBUG

#elif BETA

#else

#endif

5. 测试
运行程序，修改Scheme下不同的Configuration，就能得到不同的值，那结果就是正确的了。

app还可以在不同环境下配置不同的AppIcon和AppName

AppIcon:
使用Asset Catalog，分别给三种环境下配置3个名字

AppIcon
AppIconDEBUG
AppIconBETA

然后去Target - Build Settings里搜索Asset Catalog App Icon Set Name这一项

App Name:
Target - Build Settings里点+号，添加一个User-Defined Setting

比如我们请一个叫APP_DISPLAY_NAME的key值，下面BETA叫BETA，DEVELOP叫DEVELOP， Release还是用系统原配置,即$(PRODUCT_NAME)。

进到Target - Info里，修改Bundle name为$(APP_DISPLAY_NAME)

打包配置:
查了下Apple的文档，原来可以配置，我将Release环境以外的Deployment->Skip Install配置成YES，就不会Archive出ipa了。

==========================Build Settings
总结：在自身工程里面需要将skip install 设置为NO, 在引入其他静态库文件的工程中skip install 设置为YES

一个工程中引用其他工程时要注意Skip Install选项
当主工程引用其他工程，以便使用他们生成的库的时候，在发布时，主要注意这个选项。

--------------------项目TestBuild

$CONTENTS_FOLDER_PATH:
TestBuild.app

$BUILT_PRODUCTS_DIR:
/Users/youdone-ndl/Library/Developer/Xcode/DerivedData/TestBuild-aylsxjbtuthjiffeijhyqcoarxip/Build/Products/Debug-iphoneos

$PROJECT_TEMP_DIR:
/Users/youdone-ndl/Library/Developer/Xcode/DerivedData/TestBuild-aylsxjbtuthjiffeijhyqcoarxip/Build/Intermediates.noindex/TestBuild.build

$TARGET_NAME:
TestBuild

$PROJECT_DIR:
/Users/youdone-ndl/Desktop/TestBuild

$(TARGET_NAME)
目标工程名称

$(SRCROOT)
工程文件（比如Nuno.xcodeproj）的路径

$(CURRENT_PROJECT_VERSION)
当前工程版本号


1.Installation Directory：安装路径
$(BUILT_PRODUCTS_DIR):
/Users/youdone-ndl/Library/Developer/Xcode/DerivedData/TestBuild-aylsxjbtuthjiffeijhyqcoarxip/Build/Products/Debug-iphoneos
静态库编译时，在Build Settings中Installation Directory设置“$(BUILT_PRODUCTS_DIR)”
Skip Install设为YES
Installation Directory默认为/usr/local/lib
因为Build Location默认时，.a文件会放在很长（比如：/Users/xxx/Library/Developer/Xcode/DerivedData/xxxProgramdalrvzehhtesxdfqhxixzafvddwe/Build/Products/Debug-iPhoneos）的路径下，或是我们target指定的路径
Skip Install如果是NO,可能会被安装到默认路径/usr/local/lib


$(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)
等于$(BUILT_PRODUCTS_DIR)

2.Public Headers Folder Path：对外公开头文件路径

3.User Header Search Paths：依赖的外部头文件搜索路径

Library Search Paths：库搜索路径

4.Other Linker Flags：其他链接标签
设为“-ObjC”
当导入的静态库使用了类别，需要设为-ObjC

5.Prefix Header：预编头文件（比如：UtilLib/UtilLib-Prefix.pch）

6.Precompile Prefix Header：设为“Yes”，表示允许加入预编译头

7.Header Search Paths：导入头文件的相对路径


静态库可能带来的问题:
符号冲突
Bundle的获取
-ObjC 、 -all_load 、-force_load这三个flag的区别：
-ObjC 链接器会加载静态库中所有的Objective-C类和Category；(导致可执行文件变大)
-all_load 链接器会加载静态库中所有的Objective-C类和Category（这里和上面一样）；当静态库只有Category时 -ObjC会失效，需要使用这个flag；
-force_load 加载特定静态库的全部类，与 -all_load类似但是只限定于特定静态库，所以 -force_load需要指定静态库；当两个静态库存在同样的符号时，使用 -all_load会出现 duplicate symbol的错误，此时可以根据情况选择将其中一个库 -force_load。

==========================Build Phases
1.Target Dependencies :框架运行所依赖的文件
2.Compile Sources ：隐藏的代码块，可以设置内存管理的方式和.m文件的添加。
3.Link Binary With Libraries : 添加库的路径
4.Copy Bundle Resources : 添加依赖包的内容
5.Copy Files : 添加导入的文件及相对路径
6.Headers : 制作库的时候所需要的公开设置
