https://developer.apple.com/documentation/xcode/build-system


Essentials:
==================================================Configuring a new target in your project
https://developer.apple.com/documentation/xcode/configuring-a-new-target-in-your-project


==================================================Configuring a multiplatform app
https://developer.apple.com/documentation/xcode/configuring-a-multiplatform-app-target

Share project settings and code across platforms in a single app target.
In Xcode 14 or later, you can share your app’s project settings and code across platforms using a single, multiplatform target.

By default, apps that share a multiplatform target share project settings, so you only need to set them once. 
You can adjust your project settings as needed for individual platforms.

Before you combine targets into a multiplatform target, 
check your app to determine the differences in build configuration, framework availability, and API availability.

Note:
iOS, iPadOS, macOS, visionOS, and tvOS apps can share a single target. watchOS apps remain in a separate target.

If the technologies and project settings that you plan to use overlap considerably, multiplatform app targets are a good fit. 
Otherwise, use a separate target for each platform.

#if canImport(ARKit)
import ARKit
#endif

#if os(macOS)

#endif



Build settings:
==================================================Configuring the build settings of a target
Build settings control every aspect of the build process, 
including how Xcode compiles your source files, how it links your executable, 
whether it generates debug information, and how it packages and distributes your code.

Make changes to your project or target’s settings from the Build Settings tab or with build configuration files.

Note:
You can also store settings in specially formatted text files called build configuration files.
These files make it easy to save your settings along with your source files in your source control management system.

For a complete list of build settings, see Build settings reference.
https://developer.apple.com/documentation/xcode/build-settings-reference


Each build setting has the following attributes.:

Attribute
Description
Example

Title
A human-readable name for the build setting.
Build Active Architecture Only

Name
The programmatic name for the build setting. This name appears in the Quick Help inspector, in build configuration (xcconfig) files, and in the xcodebuild command-line tool.
ONLY_ACTIVE_ARCH

Value type
Common types include Booleans, strings, enumerations, string lists, path strings, and a list of path strings.
Boolean

Value
The current value of the setting.
YES


The Build Settings tab displays a setting’s title or name, but not both. 
When titles are visible, choose Editor > Show Setting Names to display the names. 
When names are visible, choose Editor > Show Setting Titles to display the titles.

When you find the setting you want to modify, click the value attribute and type the new value. 
Xcode applies a bold font to modified settings to help you find them later. 
To restore a setting’s original value, select it and press the Delete key.

Some settings define their values in terms of other settings. 
For example, an attribute whose value is a path to a file might use the BUILD_DIR setting to specify part of the path.
When a setting’s definition is visible, choose Editor > Show Values to see the computed final value — that is, the value without the environment variable. 
When the final value is visible, choose Editor > Show Definitions to see the definition.


Evaluate how your project inherits settings:
Every target inherits settings from both its parent project and the platform SDK.
This inheritance model ensures that the target starts with valid baseline settings.
When you create a target, Xcode changes some settings based on the target type, and you are free to make other changes based on your needs.

Xcode gives the lowest precedence to the default system values. The hierarchy of precedence is:
Target-level values.
Configuration settings file values mapped to a target.
Project-level values.
Configuration settings file mapped to the project.
System default values.

Note:
When using the xcodebuild command-line tool, the tool gives any settings you pass to it the highest prededence.


==================================================Adding a build configuration file to your project
Specify your project’s build settings in plain-text files, and supply different settings for debug and release builds.

A build configuration file is a plain-text file you use to specify the build settings for a specific target or your entire project.
Build configuration files make it easier to manage build settings yourself, and to change build settings automatically for different architectures and platforms.
With a build configuration file, you place only the settings you want to modify in a text file.
You can create multiple files, each with different combinations of build settings, and you can change the settings quickly for your target or project.
Xcode layers your settings on top of other project-related settings to create the final build configuration.

Build configuration files are particularly useful in the following situations:
You want different build settings based on the current platform, architecture, or build type.
You want to store build settings in a way that is easier to inspect.
You want to edit build settings outside of Xcode.

A build configuration file is a text file with an .xcconfig filename extension that you add to your project.
For example, you might use one build configuration file for debug settings and another for release settings.

To create a build configuration file:
Select File > New File.
Select Configuration Settings File.
Click Next.
Enter a name and location for your build configuration file.
Deselect all targets to prevent Xcode from embedding the file as a resource in the target’s bundle.
Click Create to add it to your project.

To specify build configuration files:
Select your project in the project editor.
Click the Info tab.
Click the disclosure triangles to expand the Debug and Release build configurations in the Configurations area.
Choose configuration settings files for your Debug and Release builds from the pop-up menus. You can also select a file that applies to both build types.

Xcode applies settings from a build configuration file before the corresponding settings from the project’s or target’s Build Settings tab. 
###
For example, if you provide a build configuration file for your target, Xcode applies the project settings, then the build configuration settings, then the target settings.
###


Assign a value to a setting:
To specify a new value for a setting, add that setting to your configuration file using the following format:
<SettingName> = <SettingValue>
Place each setting on a separate line, and include only the settings you want to change in your build configuration file. 
Xcode ignores leading and trailing spaces, so you can indent settings as needed. 
If you add the same setting multiple times, Xcode uses the last instance of the setting and ignores previous instances.
Many value types are possible for settings, but the following table lists the most common ones:
Value type
Description

Boolean
A value of YES or NO.

string
A text string.

enumeration (string)
A predefined text string. See the settings reference for a list of valid values.

string list
A space-separated list of string values. If a string within the list contains spaces, surround that string with quotes.

path
A file or directory path, in POSIX form.

path list
A space-separated list of path values. If a path within the list contains spaces, surround the path with quotes.

Some examples of settings include:
ONLY_ACTIVE_ARCH = YES
MACOSX_DEPLOYMENT_TARGET = 11.0
OTHER_LDFLAGS = -lncurses


Augment a setting with additional values:
In some cases, you might want to extend a setting rather than overwrite its current value.
For example, you might want to add more flags to a compiler instead of replacing the existing flags.
To extend a setting’s existing value, add the $(inherited) keyword to the value of your setting, as shown in the following example:
OTHER_SWIFT_FLAGS = $(inherited) -v


Refer to the value of another setting:
To reuse an existing build setting’s value, place the name of the setting in a string of the form $(SettingName). 
When evaluating your build settings, Xcode replaces these references with the values of the corresponding settings.
For example, the following definition assigns the value of the SYMROOT build setting to the OBJROOT setting:
OBJROOT = $(SYMROOT)
When replacing references, Xcode inserts the setting’s value at the same location as the original reference.
You can insert references in the middle of a new value, or you can define a setting using multiple other values, as shown in the following examples:
DSTROOT = /tmp/$(PROJECT_NAME).dst
CONFIGURATION_BUILD_DIR = $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)


Apply a setting conditionally to a platform or architecture:
Add a conditional expression after a build setting to apply that setting only when a specific platform or architecture is active. 
To specify a conditional expression, enclose it in square brackets after the build setting name, as shown in the following example:
OTHER_LDFLAGS[arch=x86_64] = -lncurses
Xcode applies a build setting only when the setting’s conditional expression evaluates to true. Xcode supports the following conditions:

Condition
Values

sdk
An SDK, such as macosx12.0 or iphoneos15.0. To match all versions of a specific platform, replace the version number with an asterisk (*). For example, specify macosx* to match any macOS SDK.

arch
A CPU architecture, such as arm64 or x86_64.

config
The build configuration, such as Debug or Release.

To add multiple conditions to the same build setting, place each condition in separate brackets after that setting’s name, as shown in the following example:
OTHER_LDFLAGS[sdk=macos*][arch=x86_64] = -lncurses


Include settings from other build configuration files:
When you specify the build configuration file for your target, you must select only one file, 
but that file can include settings from other configuration files. 
To import the settings from a different configuration file, add an #include statement:
#include "MyOtherConfigFile.xcconfig"
If Xcode can’t find an included build configuration file, it generates build warnings. 
To suppress these warnings, add a question mark (?) to the #include command, as shown in the following example:
#include? "MyOtherConfigFile.xcconfig"
Xcode looks for included build configuration files in the same directory as the current file.
If your build configuration file is in a different directory, specify a relative path or an absolute path, as shown in the following examples:
#include "../MyOtherConfigFile.xcconfig"    // In the parent directory.
#include "/Users/MyUserName/Desktop/MyOtherConfigFile.xcconfig" // At the specific path.


Add comments to your settings:
Add comments to your build configuration files to include notes or other information that’s relevant to you.
Specify your comments on a single line preceded by two forward slashes (//). 
The build system ignores everything from the comment delimiter to the end of the current line. For example:
//
//  Base Settings.xcconfig
//  Base Settings
//
//  Created by Johnny Appleseed on 7/21/21.
//
You can also place a comment at the end of a line that contains a build setting definition, as in the following example:

ASSETCATALOG_COMPILER_APPICON_NAME = MyAppIcon // This is a comment. 



==================================================Build settings reference
https://developer.apple.com/documentation/xcode/build-settings-reference


==================================================Identifying and addressing framework module issues
Detect and fix common problems found in framework modules with the module verifier.

When you create a framework containing Objective-C, Objective-C++, C, or C++ code that you distribute to customers, clients, or other developers, 
it’s often challenging and time-consuming to find problems in your framework that don’t appear at build time.

In Xcode version 14.3 or later, enable the module verifier in your Xcode project’s build settings 
so that you can identify and address problems with your framework module before you distribute it.

Some examples of these problems include:
Missing header references in your umbrella header
Using quoted includes instead of angle-bracketed includes
Using @import syntax in your public and private headers
Incorrect target conditionals
Imports inside of extern "C" language linkage specification
Non-modular headers in your umbrella header
References to private headers from public headers

When you enable the module verifier, it finds module problems in your code and displays errors for them in Xcode’s Issue navigator, 
just like compiler errors or warnings.


Enable the module verifier build setting:
In your Xcode project, select your framework’s target, then select the Build Settings tab. 
Scroll down to the Apple Clang Module Verifier section. 
For new projects created in Xcode 14.3 or later, the Enable Module Verifier setting defaults to Yes. 
For projects you created in earlier versions of Xcode, change the setting to Yes.

Then, check the values for Supported Languages and Supported Language Dialects, and update them to match your project’s requirements.
View Quick Help for each setting to find valid values.
Supported Language Dialects: gnu17 gnu20++
Supported Languages: objective-c objective-c++


Address common issues:
Identify each issue you find by matching it with an example error message in the following table. 
Then, use the error resolution examples to help you address the issue in your code.

Error message/
Error resolution

umbrella header for module ‘ExampleModule’ does not include header ‘MyObject.h’/
Add missing headers to your umbrella header. Include the missing header like so: #import <ExampleModule/MyObject.h>.

double-quoted include “MyObject.h” in framework header, expected angle-bracketed instead/
Replace quoted includes with angle-bracketed includes. Change #import "MyObject.h" to #import <ExampleModule/MyObject.h>.

use of ‘@import’ in framework header is discouraged, including this header requires -fmodules/
Avoid the use of semantic import syntax in your public and private headers. Change @import Foundation; to #import <Foundation/Foundation.h>.

‘TARGET_OS_IPHONE’ is not defined, evaluates to 0/
Fix target conditionals. Add an include statement to your header that uses the target conditional: #include <TargetConditionals.h>. If that doesn’t fix the issue, check that the target conditional you use is defined in TargetConditionals.h.

import of C++ module ‘ExampleFramework.ExampleSource’ appears within extern “C” language linkage specification, or extern “C” language linkage specification begins here/
Avoid including imports inside of extern "C" language linkage specification. Move the include statement outside of the extern "C" scope. Don’t use the [extern_c] attribute in the module map.

include of non-modular header inside framework module ‘ExampleModule’/
Remove the include statement from your header. The header you are trying to include is not modular so you can’t include it in your framework module. If possible, make that code modular so that you can include it in your framework module.

public framework header includes private framework header ‘ExampleModule/MyObject_Private.h’/
Avoid including references to private headers from public headers. Either make the private header public, or remove the private header include from the public header.