xcodebuild -destination

The argument for -destination is called destination specifier, and its syntax is a list of comma separated key=value pairs.

The supported platforms are:
OS X, your Mac
iOS, a connected iOS device
iOS Simulator
watchOS
watchOS Simulator
tvOS
tvOS Simulator


==================================================XCFramework

Set up the project:
To set up your project for creating an XCFramework, ensure your Xcode project has a scheme that builds only the framework target and its dependencies.
Configure these build settings on your target:
1.Set the Build Libraries for Distribution build setting to Yes. For Swift, this enables support for library evolution and generation of a module interface file.
2.Set the Skip Install build setting to No. If enabled, the built products arenâ€˜t included in the archives.
3.Leave the Architectures build setting unset. The predefined value configures the target to build a universal binary for all the possible architectures the target platform uses.


Create archives for frameworks or libraries:
Create an archive of your framework or library for each platform you wish to support by running xcodebuild in Terminal using the archive build action.
The following command archives a framework for the iOS platform:

xcodebuild archive 
    -project MyFramework.xcodeproj
    -scheme MyFramework
    -destination "generic/platform=iOS"
    -archivePath "archives/MyFramework"

The system determines the architectures and SDK according to build settings when running the command with the -destination flag, 
like the example above. Avoid common errors by using this flag rather than -arch and -sdk.

To build an archive for a different platform, adjust the value for -destination. 
Replacing this value with "generic/platform=iOS Simulator" creates an archive for Simulator.

An XCFramework can contain versions of your framework built for macOS with and without Mac Catalyst. 
To generate an archive for the Mac Catalyst variant, use "generic/platform=macOS,variant=Mac Catalyst", adding the the variant type to the -destination value.

To see an extensive list of all the command options, execute xcodebuild with the -help flag.

xcrun xcodebuild -create-xcframework -archive /Users/youdun-ndl/Desktop/TestIOSFrame/archives/TestIOSFrame-iOS.xcarchive -framework TestIOSFrame.framework -archive /Users/youdun-ndl/Desktop/TestIOSFrame/archives/TestIOSFrame-iOS-Simulator.xcarchive -framework TestIOSFrame.framework -output "xcframeworks/TestIOSFrame.xcframework"

xcrun xcodebuild -create-xcframework -framework /XXX/Build/Products/Debug-iphoneos/PackageFrameworks/CoreSwiftPackage.framework -framework /XXX/Build/Products/Debug-iphonesimulator/PackageFrameworks/CoreSwiftPackage.framework -output "CoreSwiftPackage.xcframework"


Determine the architectures a binary supports:
Projects that link to your XCFramework require that it contains universal binaries covering the architectures each platform builds for.

To determine the architectures an existing binary includes, execute file from Terminal and provide the path to the binary.
file <PathToFramework>/<FrameworkName>.framework/<FrameworkName>
file <PathToLibrary>/libMyLibrary.a