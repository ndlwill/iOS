https://lldb.llvm.org/index.html
https://lldb.llvm.org/use/tutorial.html


==================================================LLDB 命令结构:
(lldb) help breakpoint
breakpoint <subcommand> [<command-options>]


==================================================LLDB查询命令:
1. 使用 apropos 通过命令中的某个关键字就可以找到所有相关的命令信息
2. help breakpoint


==================================================流程控制:
continue/continue/c: 指令全称、指令简称、极简指令

让程序跳过断点继续运行
process continue/continue/c

单步运行，将子函数当做整体一步执行
源码级别：thread step-over/next/n
汇编级别：thread step-inst-over/nexti/ni

单步运行，遇到子函数会进入子函数
源码级别：thread step-in/step/s
汇编级别：thread step-inst-over/stepi/si

退出当前帧栈
thread step-out/finish


==================================================image模块查询指令(模块:可执行文件&共享库等):
image list -o -f: 打印出模块的偏移地址、全路径

image lookup --address 内存地址: 根据内存地址查找在模块中的位置
= image lookup -a 内存地址
image lookup -v --address 内存地址:查找完整的源代码行信息
= image lookup -v -a 内存地址
image lookup --type 类型:查找某个类型的信息
= image lookup -t 类型

image lookup -n 符号或函数名: 查找某个符号或者函数的位置


==================================================expression指令
expression
=print、p、call 效果等同
expression -o
=po 效果等同

expression -o -- self.view 等价于 po self.view

expression后的 -- 表示命令选项结束符，表示所有的命令选项已经设置完毕，如果没有命令选项，--可以省略。如果expression之后有命令选项，则--不能省略。


==================================================内存读写指令
格式:
x是16进制
f是浮点
d是10进制

字节大小:
b：byte 1字节
h：half word 2字节
w：word 4字节
g：giant word 8字节

读取内存:
格式:memory read/数量格式字节数 内存地址
x/数量-格式-字节大小 内存地址
x/3xw 0x10010

修改内存中的值:
格式:memory write 内存地址 数值
memory write 0x0000010 10


==================================================寄存器相关的指令
register read：显示当前线程的通用寄存器

register write rax 123：将一个新的十进制值“123”写入当前线程寄存器“rax”


==================================================其他常用指令
thread backtrace
= bt :指令的作用是打印线程的堆栈信息

frame variable
打印当前栈帧的变量
