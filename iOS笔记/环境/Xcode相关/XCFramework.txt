https://www.jianshu.com/u/ee55b6022bd6

需要Xcode11以上支持
XCFramework:是苹果官方推荐的、支持的，可以更方便的表示一个多个平台和架构的分发进制库的格式。
xcframework,18年苹果出的新的库的格式,我们平常开发中对胖库各种架构都支持的sdk,上线的时候需要把比如模拟器的架构剔除，为了节省空间
可是当想用模拟器运行的时候又会发现此架构被剔除了,所以这种库的出现会省去此操作,想要链接什么架构就链接什么架构。

和传统的Framework相比:
可以用单个.xcframework文件提供多个平台的分发二进制文件;
与Fat Header相比，可以按照平台划分，可以包含相同架构的不同平台的文件;
在使用时，不需要再通过脚本去剥离不需要的架构体系。

xcodebuild -- build Xcode projects and workspaces

1、创建模拟器和真机平台下的Framework
SYTimer->build.sh, Source文件夹, .xcodeproj

build.sh中的命令如下：
xcodebuild archive -project 'SYTimer.xcodeproj' \
-scheme 'SYTimer' \ // 可以从-list命令中获取
-configuration Release \  // <Debug|Release>
-destination 'generic/platform=iOS Simulator' \ // 分发的平台
-archivePath '../archives/SYTimer.framework-iphonesimulator.xcarchive' \
SKIP_INSTALL=NO

iphonesimulator.xcarchive文件，右键显示包内容，会看到Products->Library->Frameworks，
Frameworks存在一个叫SYTimer.framework的库，这个库就是我们编译好的framework。
SKIP_INSTALL=NO
设置这个参数的意义在于：是否将编译好的库拷贝到Products目录下，如果SKIP_INSTALL=YES，则Products目录下为空。我们做库合并时，
需要用到Framework，所以必须加上这个参数。
YES：表示不执行安装操作。在创建归档文件后，不会将构建产物复制到安装目录。
NO：表示执行安装操作。在创建归档文件后，将构建产物复制到安装目录。
这通常用于在构建 framework 或应用程序的归档时，将构建产物复制到指定的安装目录，以便进行后续的导出、测试、分发或集成到其他项目中。


xcodebuild archive -project 'SYTimer.xcodeproj' \
-scheme 'SYTimer' \
-configuration Release \
-destination 'generic/platform=iOS' \
-archivePath '../archives/SYTimer.framework-iphoneos.xcarchive' \
SKIP_INSTALL=NO

2、创建XCFramework
创建xcframework文件夹
cd xcframework文件夹路径

xcodebuild -create-xcframework \
-framework '../archives/SYTimer.framework-iphoneos.xcarchive/Products/Library/Frameworks/SYTimer.framework' \
-framework '../archives/SYTimer.framework-iphonesimulator.xcarchive/Products/Library/Frameworks/SYTimer.framework' \
-output 'SYTimer.xcframework'
一般XCFramework需要包含BitCode和dSYMs方便崩溃时恢复调用栈，那么修改创建XCFramework的命令如下：
xcodebuild -create-xcframework \
-framework '../archives/SYTimer.framework-iphoneos.xcarchive/Products/Library/Frameworks/SYTimer.framework' \
-debug-symbols '/Users/ztkj/Desktop/创建XCFramework/archives/SYTimer.framework-iphoneos.xcarchive/BCSymbolMaps/1F3E7957-8302-390B-AE49-34E61B49E11E.bcsymbolmap' \
-debug-symbols '/Users/ztkj/Desktop/创建XCFramework/archives/SYTimer.framework-iphoneos.xcarchive/BCSymbolMaps/5C6DD85F-0EFE-3551-B330-5AC4A91D32ED.bcsymbolmap' \
-debug-symbols '/Users/ztkj/Desktop/创建XCFramework/archives/SYTimer.framework-iphoneos.xcarchive/dSYMs/SYTimer.framework.dSYM' \
-framework '../archives/SYTimer.framework-iphonesimulator.xcarchive/Products/Library/Frameworks/SYTimer.framework' \
-debug-symbols '/Users/ztkj/Desktop/创建XCFramework/archives/SYTimer.framework-iphonesimulator.xcarchive/dSYMs/SYTimer.framework.dSYM' \
-output 'SYTimer.xcframework'
注意
1、只有真机才有BitCode。
2、BitCode和dSYMs的文件路径必须传绝对路径
3、lipo合并不同平台的Framework要求Framework之间不能有相同的架构
lipo命令却不能将包含相同架构的库进行合并
使用lipo命令，最大的问题就是包含相同架构，无法合并Fat Binary。这种情况只能将所需的架构提取出来，再进行合并。
lipo -output SYTimer-x86_64 -extract x86_64 ../archives/SYTimer.framework-iphonesimulator.xcarchive/Products/Library/Frameworks/SYTimer.framework/SYTimer
从模拟器中提取x86_64架构，输出到当前目录生成SYTimer-x86_64文件。再与真机库进行合并

3、使用XCFramework
Xcode会根据不同的编译平台拷贝XCFramework中相应平台架构下的二进制代码



List of destinations
Platform
Destination

iOS
generic/platform=iOS

iOS Simulator
generic/platform=iOS Simulator

iPadOS
generic/platform=iPadOS

iPadOS Simulator
generic/platform=iPadOS Simulator

macOS
generic/platform=macOS

tvOS
generic/platform=tvOS

watchOS
generic/platform=watchOS

watchOS Simulator
generic/platform=watchOS Simulator

carPlayOS
generic/platform=carPlayOS

carPlayOS Simulator
generic/platform=carPlayOS Simulator


