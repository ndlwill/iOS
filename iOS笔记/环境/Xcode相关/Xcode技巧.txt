1.批量重命名
全局替换,不够优雅，而且容易替换错

rename 适合全局替换的场景。比如，某个方法被多个类调用。就可以使用 Xcode 自带的 rename 特性。只需要右键重命名的对象，即可调出 rename 特性。
Edit All in Scope 适合重命名的对象只在当前文件中被使用。这种情况下，Xcode 只会搜索当前文件内需要重命名的地方，然后高亮显示。

2.Generate Memberwise Initializer
右键需要 init 的类型，选择 Refactor，然后再选择 Generate Memberwise Initializer。

3. Add Missing Switch Cases
对于 OC 来说,右键 switch，既可选择 Add Missing Switch Cases 即可自动填充所有 case
对于 Swift 来说，不用写 switch 语法，只需要输入 switch 枚举变量名，回车即可自动填充所有 case。

4. Find Call Hierarchy
知道函数或变量被调用的所有位置。那么就可以右键方法名称，找到Find Call Hierarchy，在 Xcode 左侧就会出现该方法的调用层级。


os()	OSX/macOS | iOS, watchOS | tvOS | Linux | Windows
arch()	x86_64, arm, arm64, i386
swift(version)
#if swift(>=5)
// 大于等于 swift 5.0 的版本
#endif

#if swift(>=4.2) 
// 大于等于 swift 4.2 的版本
#endif

canImport(module)
#if canImport(Kingfisher)
// 可以使用 Kingfisher 模块
#endif

判断目标环境
使用方法：targetEnvironment(env)
nv 参数可以选用的值为有 simulator | macCatalyst
#if targetEnvironment(simulator)
// 当前运行在模拟器上
#endif

这些条件编译命令是可以混合使用的，使用方法和普通的条件判断一样，用 && 和 ||

也可以使用感叹号 ！来做取反操作
#if !os(iOS)
// 当前环境不是 iOS
#endif