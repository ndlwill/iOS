when you have a task to simultaneously fetch ten high-quality images, it is useful to allow the execution of only one or two image loading operations at a time.

let url = URL(string: "https://source.unsplash.com/random/5120x1000")!
let queue = DispatchQueue.global(qos: .background)
let semaphore = DispatchSemaphore(value: 2)
we will allow only two images to be fetched at the same time.

func loadRandomPhoto() {
    queue.async {
        semaphore.wait()
        
        defer {
            semaphore.signal()
        }
        
        if let data = try? Data(contentsOf: url) {
            
            if let image = UIImage(data: data) {
                print(image)
            }
        }
    }
}

for _ in 0...9 {
    loadRandomPhoto()
}

When using sync, the thread on which it was called will be blocked until the task is finished, while an async execution doesn’t wait for a task to complete. Therefore, it doesn’t block the current thread.