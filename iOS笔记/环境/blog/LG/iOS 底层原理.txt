1.
在64位机器上，如果int是32位，long是64位，pointer也是64位，那么该机器就是LP64的，其中的L表示Long，P表示Pointer，64表示Long和Pointer都是64位的。
由于LP64位下int是32位，因此LP64也叫I32LP64。

2.
实例对象的大小由成员变量决定

3.
struct LGStruct1 {
    char b;
    int c;
    double a;
    short d;
}struct1;  -- 24

struct LGStruct2 {
    double a; 
    int b;
    char c;
    short d;
}struct2; -- 16


struct LGStruct3 {
    double a;
    int b;
    char c;
    struct LGStruct1 str1;
    short d;
    int e;
    struct LGStruct2 str2;
}struct3;

LGStruct1 看最大a，意味着前面b+c占8字节，a占8字节，c占2字节，需要对齐，即满足8的倍数 ==> 24字节
LGStruct2 看最大a，a占8字节，b+c+a 占8字节，对齐==> 16字节
LGStruct3 a占8字节，b+c占8字节，str1占24字节，d+e占8字节，str2占16字节， 对齐==>64字节

4.
(x + 7) & ~7 这个算法是几字节对齐

8字节对齐（抹零后三位）

带入实际数据计算，例如（8+7）& ~7
8+7 => 1111
~7 => 1000
& => 1000 // 8

带入实际数据计算，例如（4+7）& ~7
4+7 => 1011
~7 => 1000
& => 1000 // 8

带入实际数据计算，例如（30+7）& ~7
30+7 => 100101
~7 => 1000
& => 100000 // 32

lwip中的源码: 7 = (8字节对齐 - 1)


(x + (4 - 1)) & ~(4 - 1) // 4字节对齐

(x + 3) & ~3
3+3 => 0110
~3 => 1100
& => 0100 // 4

11+3 => 1110
~3 => 1100
& => 1100 // 12

5.
union kc_t {
    uintptr_t bits;
    struct {
        int a;
        char b;
    };
};
sizeof(union kc_t): 8字节


union kc_t {
    uintptr_t bits;
    struct {
        int a;
        char b;
        double c;
    };
};
sizeof(union kc_t): 16字节
