XNU 加载 MachO 和 dyld 的流程:
XNU 加载 MachO 可执行文件 和 dyld 动态链接器文件的大体流程:
创建进程 -> 创建虚拟内存空间 ->
解析和映射 MachO 可执行文件 ->
解析和映射 dyld 动态链接器文件 ->
进入动态链接器 dyld 的执行流程

XNU 源码
https://opensource.apple.com/tarballs/xnu/

App 在虚拟内存中的分布:
① 虚拟内存 : 我们开发者在开发过程中所接触到的内存均为虚拟内存，虚拟内存使 App 认为它拥有连续可用的内存空间（一个连续完整的地址空间），
而实际上，App 通常是分布在多个物理内存碎片中，系统的虚拟内存空间映射表（vm_map）负责管理虚拟内存和物理内存的映射关系

共享动态库其实就是共享的物理内存中的那份动态库，App 虚拟内存中的共享动态库并未真实分配物理内存，使用时虚拟内存会访问同一份物理内存达到共享动态库的目的

iPhoneXr 的物理内存（RAM）只有3GB，那么当超过 3GB 的物理内存时，iOS 是如何处理的呢？
系统会使用一部分硬盘空间（ROM）来充当内存使用，在需要时进行数据交换。当然，硬盘的数据交换速度是远远慢于物理内存的，这也是我们内存过载时，App 卡顿的原因之一

② ASLR : Address Space Layout Randomization，是一种针对缓冲区溢出漏洞的安全保护技术，通过对 堆、栈、共享库映射等 线性区布局的随机化，
通过增加攻击者预测目的地址的难度，达到保护的目的。注意：ASLR 只是随机了线性区布局的起始地址，而不改变线性区里面内容的顺序

③ 以 Arm64 架构为例，根据上面对 XNU 源码的分析可知：
App 最大的虚拟内存空间为 64GB
空指针陷阱段的默认大小为 4GB
MachO 执行文件、dyld 动态链接器文件、共享动态库 都有独立的 ASLR 偏移量
