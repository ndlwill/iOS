1.DYLD
全名为dynamic loader，动态加载器，是苹果负责加载应用的程序。
它的运行过程与你编写的代码相同，会在启动的时候加载所有依赖框架，包括系统框架。

作用：加载mach-O可执行文件(其中包含rebase文件路径)、加载dylib动态库、链接库、链接主程序、寻找主程序入口(其中会调用所有类的load)

Dyld 的任务之一是重定位二进制元数据中的指针，这些元数据描述了源代码中的类型。
动态运行时功能需要这些元数据，但这些元数据也会导致二进制文件膨胀。以下是某个已编译的应用二进制文件中包含的 Obj-C 类的布局：
struct ObjcClass {
  let isa: UInt64
  let superclass: UInt64
  let cache: UInt64
  let mask: UInt32
  let occupied: UInt32
  let taggedData: UInt64
}
每个 UInt64 都是一段元数据的地址。由于它包含在应用二进制文件中，因此任何人从商店下载到的数据都是完全相同的。
然而，由于地址空间布局随机化（Address Space Layout Randomization，简称 ASLR），
因此每次启动应用时，这些数据在内存中的位置都会不同（并非总是从 0 开始）。
这是一项安全功能，目的是为了防止他人猜测某个特定功能在内存中的位置。

ASLR 的问题在于，它会导致应用的二进制文件中硬编码的地址出错，实际的起始地址有随机的偏移量。Dyld 的任务就是重定位所有指针，纠正起始位置。
可执行文件中的每个指针，以及所有依赖框架（包括递归依赖），都要经过这样的处理。此外，Dyld 还需要设置其他可能会影响启动时间的元数据，比如绑定

所有这些指针的设置都会导致应用的启动时间增加，因此减少指针设置可以缩减应用二进制文件的大小，加快启动速度。

 Swift 引用类型对应用的大小及启动速度有影响

Swift 和 Obj-C:
重定位的时间是由应用的 Obj-C 元数据引起的
但为什么 Swift 应用中会包含这些元数据呢？Swift 具有 @objc 属性，它可以让 Objective-C 代码看到 Swift 中的声明，但是即使 Obj-C 代码看不到 Swift 类型，也会生成元数据。
这是因为所有 Swift 类型都包含苹果平台的 Objective-C 元数据。我们来看一看下面这个声明：
final class TestClass { }
这是纯 Swift 代码，并没有继承 NSObject，也没有使用 @objc。但是，它仍然会在二进制文件中生成一个 Obj-C 类元数据，而且还会产生 9 个需要重定位的指针
使用 Hopper 工具检查二进制文件，并查看“纯 Swift”类的 objc_class 条目：

将环境变量 DYLD_PRINT_STATISTICS_DETAILS 设置成 1，就可以看到启动应用时需要重定位的指针数量。在应用启动完成后，控制台中就会输出重定位的总数。

并非所有 Swift 类型都会添加相同数量的重定位。如果通过重载超类或遵循 Obj-C 协议的方式，将方法公开给 Obj-C，则添加的重定位更多。
另外，Swift 类上的每个属性都将在 Objective-C 元数据中生成一个 ivar。

热启动指的是，系统已经启动过了应用，并缓存了一些 Dyld 设置信息。

尽管每个类都会增加重定位操作，但我并没有建议将每个 Swift 类都换成 struct。大型 struct 也会增加二进制文件的大小，而且在某些情况下，你需要的只是引用而已。

组合与继承:
class Section: Decodable {
  let name: String
  let id: Int
}

final class TextRow: Section {
  let title: String
  let subtitle: String

  private enum CodingKeys: CodingKey {
    case title
    case subtitle
  }

  required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    title = try container.decode(String.self, forKey: .title)
    subtitle = try container.decode(String.self, forKey: .subtitle)
    try super.init(from: decoder)
  }
}

final class ImageRow: Section {
  let imageURL: URL
  let accessibilityLabel: String

  private enum CodingKeys: CodingKey {
    case imageURL
    case accessibilityLabel
  }

  required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    imageURL = try container.decode(URL.self, forKey: .imageURL)
    accessibilityLabel = try container.decode(String.self, forKey: .accessibilityLabel)
    try super.init(from: decoder)
  }
}

这段代码会产生大量元数据，但是同样的功能可以通过值类型实现（更适合在数据层中使用），并最终减少 22% 的重定位。你需要用组合替换掉对象继承，例如具有关联值的枚举，或泛型等。
struct Section<SectionType: Decodable>: Decodable {
  let name: String
  let id: Int
  let type: SectionType
}

struct TextRow: Decodable {
  let title: String
  let subtitle: String
}

struct ImageRow: Decodable {
  let imageURL: URL
  let accessibilityLabel: String
}

属性:
Swift 类中的每个属性都会添加 3～6 个重定位，具体取决于该类是否为 final 类。如果有很多拥有 20 多个属性的大型类，那么这个数字就非常惊人了。
final class TestClass {
  var property1: Int = 0
  var property2: Int = 0
  ...
  var property20: Int = 0
}
将其转换为 struct，可以减少 60% 的 rebase！
final class TestClass {
  struct Content {
    var property1: Int = 0
    var property2: Int = 0
    ...
    var property20: Int = 0
  }

  var content: Content = .init()
}



1.0 共享缓存技术 
在程序启动运行时会依赖很多系统动态库，系统动态库会通过dyld(动态加载器)（默认是/usr/lib/dyld）加载到内存中，
系统内核读取程序可执行文件信息做一些准备工作，接着会将工作交给dyld。由于很多程序需要使用系统动态库，不可能在每个程序加载时都去加载所有的系统动态库，
为了优化程序启动速度和利用动态库缓存，iOS系统采用了共享缓存技术，将所有系统库（私有与公有）编译成一个大的缓存文件，
这就是dyld_shared_cache,该缓存文件存在iOS系统下的 /System/Library/Caches/com.apple.dyld/目录下。）

1.1 dyld之Rebase重定位
首先app其实是一个二进制ipa文件，里面全是二进制元数据指针， 任何人下载下来ipa数据结构都是相同的，
所以为了防止他人猜测某个特定功能在内存中的位置，苹果会运用地址空间布局随机化技术ASLR(Address Space Layout Radomization )来给指针的起始地址一个随机的偏移量,
而dyld任务之一就是重定位二进制ipa文件中的元数据指针指向，纠正起始量。所以减少生成Objc元数据，是一项有效的减少启动时间的方式。
具体做法：1.适当用struct替换class声明 2.减少分类拓展的使用3.swift减少@objc关键词使用 
4.final修饰的包含很多属性的大类  可以用struct来代替 可减少60%多重定位时间


==================================================
在ViewController 中重写了load 方法，在 main中加了一个 C++方法，即kcFunc
运行程序，查看load、kcFunc、main的打印顺序:
load ->C++方法 -> main函数

编译过程：
源文件：载入.h .m .cpp等文件
预处理：替换宏，删除注释，展开头文件，产生.i文件
编译：将.i文件转换为汇编语言(进行词法分析、语法分析和语义分析，源代码优化)，产生.s文件
汇编：将汇编文件转换为机器码文件，产生.o文件
链接：对.o文件中引用其他库的地方进行引用，生成最后的可执行文件

静态库：
在链接阶段，会将汇编生成的目标程序与引用的静态库一起链接打包到可执行文件当中。此时的静态库就不会再改变了，因为它是编译时被直接拷贝一份，复制到目标程序里的。
优点：编译完成后，库文件实际上就没啥作用了，目标程序没有外部依赖，直接就可以运行
缺点：由于静态库会有两份，所以会导致目标程序体积增大，对内存、性能、速度消耗很大

动态库：
程序编译时并不会链接到目标程序中，目标程序只会存储指向动态库的引用，在程序运行时才被载入。
优点：
减少打包之后的 app 的大小；
共享内存，节省资源，同一份库可以被多个程序使用；
通过更新动态库，达到更新程序的目的，由于运行时才载入的特性，可以随时对库进行替换，而不需要重新编译代码
缺点：
动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境，如果环境缺少了动态库，或者库的版本不正确，就会导致程序无法运行。


dyld(the dynamic link editor)是苹果的动态链接器，是苹果操作系统的重要组成部分，在 app 被编译打包成可执行文件格式的 Mach-O文件后，交由 dyld负责链接，加载程序。

共享缓存机制：在iOS系统中，每个程序依赖的动态库都需要通过 dyld 一个一个加载到内存，
然而，很多系统库几乎都是每个程序都会用到的，如果每个程序运行的时候都重复的去加载一次，肯定会运行缓慢，
所以为了优化启动速度，提高程序性能，就有了共享缓存机制。所有默认的动态链接库被合并成一个大的缓存文件，
放到/System/Library/Caches/com.apple.dyld/目录下，按不同的架构保存分别保存着。

https://opensource.apple.com/tarballs/dyld/

（1）最开始是从dyld中的_dyld_start开始的
dyld流程分析：
在dyld-750.6源码中搜索_dyld_start，发现其在dyldStartUp.s文件中，查找arm64架构
发现其调用了dyldbootstrap 命名空间下的start方法：
// call dyldbootstrap::start(app_mh, argc, argv, dyld_mh, &startGlue)

（2）dyldbootstrap::start
源码中搜索找到dyldbootstrap命名空间，在这个文件中查找start方法
uintptr_t start(const dyld3::MachOLoaded* appsMachHeader, int argc, const char* argv[],
                const dyld3::MachOLoaded* dyldsMachHeader, uintptr_t* startGlue)
{

    // Emit kdebug tracepoint to indicate dyld bootstrap has started <rdar://46878536>
    dyld3::kdebug_trace_dyld_marker(DBG_DYLD_TIMING_BOOTSTRAP_START, 0, 0, 0, 0);

    // if kernel had to slide dyld, we need to fix up load sensitive locations
    // we have to do this before using any global variables
    rebaseDyld(dyldsMachHeader);

    // kernel sets up env pointer to be just past end of agv array
    const char** envp = &argv[argc+1];
    
    // kernel sets up apple pointer to be just past end of envp array
    const char** apple = envp;
    while(*apple != NULL) { ++apple; }
    ++apple;

    // set up random value for stack canary
    __guard_setup(apple);

#if DYLD_INITIALIZER_SUPPORT
    // run all C++ initializers inside dyld
    runDyldInitializers(argc, argv, envp, apple);
#endif

    // now that we are done bootstrapping dyld, call dyld's main
    uintptr_t appsSlide = appsMachHeader->getSlide();
    return dyld::_main((macho_header*)appsMachHeader, appsSlide, argc, argv, envp, apple, startGlue);
}

这个方法的核心是在返回值那调用了 dyld::_main 函数，同时做了很多 dyld 初始化相关的工作：
1.rebaseDyld() dyld 重定位
ASLR:是Address Space Layout Randomization(地址空间布局随机化)的简称。App在被启动的时候，程序会被映射到逻辑地址空间，这个逻辑地址空间有一个起始地址，ASLR技术让这个起始地址是随机的。这个地址如果是固定的，黑客很容易就用起始地址+函数偏移地址找到对应的函数地址。

Code Sign：就是苹果代码加密签名机制，但是在Code Sign操作的时候，加密的哈希不是针对整个文件，而是针对每一个Page的。这个就保证了dyld在加载的时候，可以对每个page进行独立的验证。

正是因为ASLR使得地址随机化，导致起始地址不固定，以及Code Sign，导致不能直接修改Image。所以需要rebase来处理符号引用问题，Rebase的时候只需要通过增加对应偏移量就行了。Rebase主要的作用就是修正内部(指向当前Mach-O文件)的指针指向，也就是基地址复位功能。

2.mach_init()
在 rebaseDyld 方法中进行 mach消息初始化

3.__gurad_setup()栈溢出保护
https://www.cnblogs.com/tcctw/p/11487645.html


macho_header是 Mach-O文件的头部，而 dyld 加载的文件就是 Mach-O文件。

（3）dyld::_main
