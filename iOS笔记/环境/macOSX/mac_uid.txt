dscl . -list /Users UniqueID
这会列出所有用户及其对应的唯一ID（UID）
通常，系统内置的用户的UID从0开始，普通用户的UID则从较大的数字开始。

root                     0 // 超级管理员的ID
youdone-dev              501
youdun-ndl               502

如果你想要查看用户的详细信息，可以使用类似以下的命令:
dscl . -read /Users/用户名

一般使用 sudo 命令来临时获取超级管理员权限。
当你使用 sudo 命令执行需要管理员权限的任务时，系统会要求你输入当前用户的密码，而不是 root 用户的密码。
只有拥有 sudo 权限的用户才能执行管理员任务。

在mac终端执行sudo报 sudo: /etc/sudoers is owned by uid 501, should be 0
表明sudoers文件的所有者(uid)应该是0，即超级管理员的ID，但实际上它的所有者是501。这可能是因为在某种情况下，sudoers文件的所有者被修改了，导致无法正确使用sudo命令。
修改sudoers文件的所有者
chown root:wheel /etc/sudoers
修复sudoers文件的权限
chmod 440 /etc/sudoers

chown 是用于修改文件或目录的所有者（用户）和/或所属组（group）的命令。它允许你更改文件或目录的所有权。
chown [选项] 新所有者[:新所属组] 文件或目录

查看某个文件的所有者和所属组:
ls -l ~/Desktop/example.txt
-rw-r--r--  1 ownerName  groupName  12345 Aug  1 10:00 example.txt
ownerName 表示文件的所有者，groupName 表示文件的所属组。

id 命令会显示当前用户的 UID（用户ID）、GID（所属组ID）以及附加的组信息。
uid=501(username) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),501(access_bpf),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
gid=20 表示当前用户所属的主要组（Primary Group）的组ID，groups=20(staff),12(everyone),... 则表示当前用户所属的附加组（Additional Groups）的组ID列表。
在 macOS 中，通常情况下，初始创建的用户会被添加到 staff 组（作为主要组）以及 admin 组（作为附加组）。这样设置可以让用户在需要进行管理员操作时使用管理员权限，例如使用 sudo 命令。

dscl . -read /Groups/admin
这个命令将显示 admin 组的详细信息，包括组名、组ID（GID）、组成员等。

在 Unix-like 系统（包括 macOS）中，wheel 是一个特殊的组，通常用于管理系统的权限和安全性。
在 macOS 中，默认情况下，wheel 组是一个具有特殊权限的组，其成员有权利使用 su 命令来切换到超级用户（root）身份。这意味着属于 wheel 组的用户可以通过 su 命令获取系统管理员（root）的特权，从而执行一些需要管理员权限的任务。
在 /etc/sudoers 文件中，通常会配置允许 wheel 组的成员使用 sudo 命令来执行特权命令，从而代替直接使用 su 切换到 root 用户。这是 macOS 和许多类 Unix 系统上管理权限的一种常见做法，因为使用 sudo 可以更细粒度地控制用户对特权命令的访问，同时也更安全。
一般情况下，初始创建的第一个用户会被默认添加到 wheel 组，从而使该用户拥有使用 sudo 命令的权限。这样做是为了方便用户在需要时可以执行需要管理员权限的任务，同时也可以限制其他普通用户对系统的更改。

虽然 wheel 组和 admin 组都涉及系统权限和管理，但它们的主要区别在于权限获取的方式。wheel 组使用 su 命令进行身份切换，而 admin 组使用 sudo 命令执行特权任务。使用 sudo 比直接切换到 root 用户（使用 su）更安全，因为可以更细粒度地控制用户对特权命令的访问。
在一些类 Unix 系统中，可能并不使用 wheel 组，而仅使用 admin 组来控制管理员权限。

wheel 组:
wheel 组通常是用于通过 su 命令来切换到超级用户（root）身份的。
通过将用户添加到 wheel 组，该用户可以使用 su 命令来获得管理员特权，执行需要 root 权限的任务。
在 macOS 中，默认情况下，第一个创建的用户会被添加到 wheel 组。
admin 组:
admin 组通常是用于通过 sudo 命令来执行特权命令的。
通过将用户添加到 admin 组，该用户可以使用 sudo 命令来执行需要管理员权限的任务，而不是直接切换到 root 用户。
在 macOS 中，默认情况下，管理员账户（第一个创建的用户）会被添加到 admin 组。

要查看 wheel 组下的用户的 UID（用户ID）:
dscl . -list /Users PrimaryGroupID
这个命令会列出所有用户及其对应的主要组（Primary Group）ID

dscl . -read /Groups/wheel
会显示只有root，说明只有root属于这个组
sudo su

chmod a+rx 是一个用于修改文件权限的命令。在这个命令中，chmod 是用于改变文件权限的命令，a 表示 "all"（所有用户），+ 表示添加权限，rx 表示 "read"（读权限）和 "execute"（执行权限）。

rws 表示文件的所有者具有读、写和执行的权限，同时 "setuid" 或 "setgid" 权限被设置。
setuid 权限（SUID）：当一个可执行程序具有 "setuid" 权限时，执行该程序的用户将暂时获得该程序文件所有者的权限，而不是执行用户自己的权限。
setgid 权限（SGID）：当一个可执行程序具有 "setgid" 权限时，执行该程序的用户暂时成为了该程序文件所属组的成员，而不是执行用户自己所属组的成员。
对于普通文件，设置 setuid 权限可能不会起作用，因为在很多系统中，只允许对二进制可执行程序设置 setuid 权限，而不允许对脚本文件设置 setuid 权限
因此，在实际使用中，一般只会使用 rwx 权限设置。对于目录，setgid 权限仍然可以使用，它可以确保在该目录下创建的文件和目录都具有该目录的组权限。

需要注意的是，如果文件之前已经具有执行权限，则 chmod +x 命令不会有任何效果，执行后文件的权限不会改变。
如果想确保文件具有执行权限，不论之前是否已设置，可以使用 chmod a+x 命令，a 表示 "all"（所有用户），表示将执行权限添加给所有用户。
chmod a+x filename
这样可以确保文件 filename 具有执行权限，不论之前是否已设置。

/Library/Application\ Support/ 这个目录添加文件或文件夹需要sudo权限

sudo 命令需要管理员权限才能执行。
如果用户不属于 admin 用户组（管理员组）或者没有被授予 sudo 权限，那么执行 sudo 命令时会报错。
只有管理员账户或者属于 admin 组的用户可以使用 sudo 命令。

sudo 命令使用 /etc/sudoers 文件来确定哪些用户可以执行 sudo 命令以及允许的操作。
如果 /etc/sudoers 文件配置不正确，可能会导致用户无法执行 sudo 命令。