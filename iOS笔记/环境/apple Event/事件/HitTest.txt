hit-Testing的作用就是找出你每次触摸屏幕，点到的究竟是哪个view

当按钮超出Tab bar的view后，那么其实按钮超出的部分是无法被点击的。

我们重写蓝色view(Tab bar)的- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event的方法

  - (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event{
    //if内的条件应该为，当触摸点point超出蓝色部分，但在黄色部分时
    if (.....){
     return YES;
    }
    return NO;
  }


// View-C是最上面最小的view
当我去点击View-C的时候，hit-Testing实际上是这样检测的
1.首先，视图会先从View-A开始检查，发现触摸点在View-A，所以检查View-A的子视图View-B。
2.发现触摸点在View-B内，好棒！看看View-B内的子视图View-C。
3.发现触摸点在View-C内，但View-C没有子视图了，所以View-C是此次触摸事件的hit-TestView了。

那么UIView中其实提供了两个方法来确定hit-TestView
1.- (UIView )hitTest:(CGPoint)point withEvent:(UIEvent )event;
2.- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;//这个就是我们上面重写的方法

注意其实在每次递归去调用hitTest:(CGPoint)point withEvent:(UIEvent *)event之前，都会调用pointInside:withEvent:来确定该触摸点是否在该View内