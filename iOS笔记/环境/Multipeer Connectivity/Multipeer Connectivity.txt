Framework
Multipeer Connectivity
Support peer-to-peer connectivity and the discovery of nearby devices.
iOS 7.0+


The Multipeer Connectivity framework supports the discovery of services provided by nearby devices and supports communicating with those services through message-based data, streaming data, and resources (such as files). 
In iOS, the framework uses infrastructure Wi-Fi networks, peer-to-peer Wi-Fi, and Bluetooth personal area networks for the underlying transport. 
In macOS and tvOS, it uses infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Ethernet.

Important:
Apps that use the local network must provide a usage string in their Info.plist with the key NSLocalNetworkUsageDescription. 
Apps that use Bonjour must also declare the services they browse, using the NSBonjourServices key.



Bonjour:
https://developer.apple.com/bonjour/
Bonjour, also known as zero-configuration networking, enables automatic discovery of devices and services on a local network using industry standard IP protocols. 
Bonjour makes it easy to discover, publish, and resolve network services with a sophisticated, easy-to-use programming interface that is accessible from Cocoa, Ruby, Python, and other languages.


###
Architecture:
When working with the Multipeer Connectivity framework, your app must interact with several types of objects:
###

(1)Session objects (MCSession) support communication between connected peer devices. 
Your app creates a session and adds peers to it when peers accept an invitation to connect, and it creates a session when invited to connect by another peer. 
Session objects maintain a set of peer ID objects that represent the peers connected to the session.

(2)Advertiser objects (MCNearbyServiceAdvertiser) tell nearby peers that your app is willing to join sessions of a specified type. 
An advertiser object uses a single local peer object to provide information that identifies the device and its user to other nearby devices.

(3)Advertiser assistant objects (MCAdvertiserAssistant) provide the same functionality as advertiser objects, but also provide a standard user interface that allows the user to accept invitations. 
If you wish to provide your own user interface, or if you wish to exercise additional programmatic control over which invitations are displayed, use an advertiser object directly.

(4)Browser objects (MCNearbyServiceBrowser) let your app search programmatically for nearby devices with apps that support sessions of a particular type.

(5)Browser view controller objects (MCBrowserViewController) provide a standard user interface that allows the user to choose nearby peers to add to a session.

(6)Peer IDs (MCPeerID) uniquely identify an app running on a device to nearby peers.


###
Discovery Phase and Session Phase:
###
This framework is used in two phases: the discovery phase and the session phase.

In the discovery phase, your app uses an MCNearbyServiceBrowser object to browse for nearby peers, optionally using the MCBrowserViewController object to display a user interface.

The app also uses an MCNearbyServiceAdvertiser object or an MCAdvertiserAssistant object to tell nearby peers that it is available, so that apps on other nearby devices can invite it to a session.

During the discovery phase, your app has limited communication with and knowledge of other peers; 
it has access to the discoveryInfo data that other nearby clients provide, and any context data that other peers provide when inviting it to join a session.

After the user chooses which peers to add to a session, the app invites those peers to join the session. 
Apps running on the nearby devices can choose whether to accept or reject the invitation, and can ask their users for permission.

If the peer accepts the invitation, the browser establishes a connection with the advertiser and the session phase begins. 
In this phase, your app can perform direct communication to one or more peers within the session. 
The framework notifies your app through delegate callbacks when peers join the session and when they leave the session.

If the app moves into the background, the framework stops advertising and browsing and disconnects any open sessions. 
Upon returning to the foreground, the framework automatically resumes advertising and browsing, but the developer must reestablish any closed sessions.