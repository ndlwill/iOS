void test(){
    
}
void test1(){
    
}
int global = 10;
int main(){
    global = 21;
    global = 20;
    test();
    test1();
   return 0;
}

查看代码段
objdump --macho -d test

_test:
100003f60:
...

_test1:
100003f70:
...

_main:
100003f80(虚拟内存地址): 
...

查看.o文件的代码段
objdump --macho -d test.o

_test1:
10:
...

_main:
20:
...
43:         e8 00 00 00 00 (A框) callq _test
48(B框):     e8 00 00 00 00 callq _test1

编译是按照文件声明的顺序编译的，即:_text、_text1、_main
e8固定机器码，代表callq指令
函数_text地址等于A框偏移量加B框偏移量

_text1函数的偏移量都是0，但是往上面看能够看到，_test1偏移量是10
所以，当前函数调用的地址并不是真实的地址。
#####
链接的时候还会分配虚拟内存地址，链接的时候要告诉编译器将真实的地址拿过来覆盖这些占位的00 00 00 00 ，_test1放到重定位符号表里
#####

查看需要重定位的符号:
objdump --macho --reloc test.o
address  ...   symbolnum/value
00000049 ...   _test1

_test1的地址是49
###
在编译成目标文件的时候，没有分配真实的虚拟内存地址，用了临时变量占位，把需要重新定位的函数放到重定位符号表里
###

生成可执行文件并查看:
clang test.m -o test
objdump --macho -d test

_test:
100003f60:
...


_main:
...
100003fa3: e8 b8 ff ff ff callq _test
100003fa8:
...

iOS是小端模式，这里最高位就是ff，所以为负，ff是补码，需要变成原码，所有的1取反后为0，所以这里直接看b8。
b8目前是补码，求原码

b8(补码)二进制表示：10111000

反码（补码-1）： 10110111

原码（反码取反）: 01001000

当前算出的原码16进制就是0x48 因为高位是ff，为负 _test地址就等于0x100003FA8加上负的0x48等于0x100003F60


=====globle变量地址查找=====
_main:
...
100003f8f: c7 05 (67 40 00 00) 15 00 00 00 movl $21, 16487(%rip)
100003f99: c7 05 5d 40 00 00 14 00 00 00 movl $20, 16477(%rip)
100003fa3: e8 b8 ff ff ff callq _test
100003fa8:
...

c7 05 是movl指令
100003f8f中的15， 21的十进制就是15

21地址就是0x100003f99+0x4067 就是 0x100008000

查看macho所有内容
objdump --macho -s test

...
Contents of section __data:
100008000 0a000000

0a就是代码中的int global = 10;