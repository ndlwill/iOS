依赖注入（Dependency Injection，DI）是一种设计模式，用于实现对象之间的解耦和依赖关系的管理。
###
通过依赖注入，可以将对象所依赖的组件（或服务）在运行时传递给它，而不是在对象内部直接创建或获取这些组件。
###


依赖注入的基本概念
依赖：
一个对象在执行某些功能时所需要的其他对象。例如，一个 ViewController 可能依赖于一个 Service 类来获取数据。
注入：
将依赖对象传递给另一个对象。可以通过构造函数注入、属性注入或方法注入来实现。



1. 构造函数注入：

通过构造函数将依赖传递给对象。

class Service {
    func fetchData() -> String {
        return "Data"
    }
}

class ViewController {
    let service: Service

    init(service: Service) {
        self.service = service
    }

    func displayData() {
        print(service.fetchData())
    }
}

let service = Service()
let viewController = ViewController(service: service)
viewController.displayData()


2. 属性注入：

通过设置对象的属性来注入依赖。

class ViewController {
    var service: Service?

    func displayData() {
        if let data = service?.fetchData() {
            print(data)
        }
    }
}

let service = Service()
let viewController = ViewController()
viewController.service = service
viewController.displayData()

3. 方法注入：

通过方法参数传递依赖。

class ViewController {
    func displayData(service: Service) {
        print(service.fetchData())
    }
}

let service = Service()
let viewController = ViewController()
viewController.displayData(service: service)


依赖注入的优点
解耦：
对象不再负责创建其依赖对象，使得类之间的依赖关系更加清晰、松散。
易于测试：
可以轻松地使用模拟对象（Mock）来替换实际的依赖对象，从而进行单元测试。
可扩展性：
容易替换和扩展依赖对象，使得代码更具弹性。


使用构造函数注入的简单示例：
protocol NetworkService {
    func fetchData() -> String
}

class APIService: NetworkService {
    func fetchData() -> String {
        return "API Data"
    }
}

class ViewModel {
    private let networkService: NetworkService

    init(networkService: NetworkService) {
        self.networkService = networkService
    }

    func getData() -> String {
        return networkService.fetchData()
    }
}

let apiService = APIService()
let viewModel = ViewModel(networkService: apiService)
print(viewModel.getData()) // 输出 "API Data"

在这个示例中，ViewModel 依赖于 NetworkService 协议，通过构造函数注入传递具体实现 APIService。这样 ViewModel 就解耦了具体的网络服务实现，可以更容易地进行测试和扩展。