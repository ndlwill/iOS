What is the difference between a struct and a class in Swift?

继承：与结构体不同，Swift中的类支持继承。一个类可以从另一个类继承属性、方法和其他特性。

引用类型 vs 值类型：这是一个关键的区别。
类是引用类型，这意味着当你将类实例分配给新的变量或常量时，它们都引用同一个底层实例。
另一方面，结构体是值类型。当你将结构体分配给新的变量或常量，或将其传递给函数时，实际上是复制了结构体。

反初始化：类可以有反初始化器，这是在类实例即将被销毁时调用的方法。另一方面，结构体不支持反初始化器。

类型转换：Swift允许你在运行时检查和解释类实例的类型。如果你使用了子类，你也可以使用类型转换来检查类类型。

可变性：为了改变结构体实例的属性，实例本身需要是可变的（用 var 声明）。这不适用于类，在类中，无论实例是如何声明的，属性都可以改变。

struct ⾥的 class，即使 struct 复制了，它也是引⽤类型
###
重要：例外，闭包⾥使⽤ Struct 是⼀份引⽤，除⾮明确的 copy ⼀份
###


Why Choose Struct Over Class?
内存上，值引⽤在栈区，引⽤类型在堆区进⾏存储和操作，栈区的运⾏效率更⾼
多线程的环境下更安全，写时复制的操作可以最⼤限度的优化性能，也不⽤担⼼内存泄露（互相引⽤）
为什么栈在⾼地址？这样栈的起始位置固定，扩展的时候不需要迁移整个栈的数据。

值类型确实不一定在 stack 里。比如 struct 里面有个 class，这时候 stack 里面会存它的索引，真正的 class 存在 heap 上。

==================================================

OC block:
there is an underlying relationship in the sense that a block is actually implemented as a special kind of struct in Objective-C's runtime.

Blocks: Blocks in Objective-C are a way to define reusable pieces of code, somewhat similar to functions.

==================================================

内存中，负责动态分配内存的数据区有两个，一个是栈（Stack），另一个是堆（Heap）

        Heap	                                                                            Stack
结构	基于链表、数组、树	                                                                    栈
特点	手动分配大小，随时释放空间，数据进出无序	                                                自动分配大小，自动释放内存，数据先进后出
操作	查询之后分配/释放，之后再做整合，复杂度高	                                                依靠栈底指针移动来分配/释放，复杂度低
对象	引用类型如 class。引用计数，变量类型等信息	                                                值类型如 struct, enum, Int。函数返回值，局部变量
场景	C 中的 malloc 和 free 操作，java 中的garbage collection，iOS 中的 MRC、ARC	            适用于撤销、保存操作
线程	共享，多线程不安全	                                                                    独享，多线程安全


Swift 中 Heap 是由双向链表实现的，其操作也是调用了 C++ 的 malloc 和 dealloc 方法。
Stack 的操作只是指针移动，故而复杂度低，为常数。


Swift 中 Heap 的设计
首先明确一下需求，retain 即分配空间，比如 [myString retain]，就是给一个字符串分配一定字节的内存。而 release 即释放之前的空间，比如[myString release]，就是释放这个字符串分配的内存。

最直观的设计：数组
最简单粗暴的设计 Heap 的方法如下：将其设计成数组，其中所占的内存切分成 n 等分，每一等分代表一个字节。从左往右顺序分配空间，同样顺序释放空间，这样所有的操作都是线性。
然而想象很美好，现实却很残酷。假如 Heap 一共有10个字节，我们有以下4个字符串：
let string1 = "abcd" // 假设4个字节
let string2 = "a"    // 假设1个字节
let string3 = "abc"  // 假设3个字节
let string4 = "abcde"  // 假设5个字节

每一步的 heap 数组长这样，注意数字代表是内存大小，'代表空闲：
[heap init] -> [10‘]
[string1 retain] -> [4, 6']
[string2 retain] -> [4, 1, 5']
[string3 retain] -> [4, 1, 3, 2']
[string3 release] -> [4, 1, 3', 2']
[string4 retain] -> ?

这时候我们发现，Heap 中虽然有5个字节的空余空间，却无法分配给 string4，因为这5个字节的空余空间不连续。
系统只认为有一个3字节的空余空间和一个2字节的空余空间。于是我们发现数组的想法过于天真，没有处理 release 之后整合空余空间的问题。


链表设计:
假如我们利用链表，将所有的内存块连起来，并且在 release 时通过调整链表指针来整合空间，这样就能解决我们刚才的问题。
但是它有一个很严重的问题：性能。因为一般而言，Heap 比较大，每次遍历去找空余空间比较耗时；其二，每次 release 之后都必须判断当前内存块的前一块和后一块是否为空闲，如果是则要分别整合。
这又牵涉到遍历链表查询的问题，当然解决办法也比较简单，用双向链表。


优化：双向链表
双向链表的引入主要是引入 release 之后的内存块整合问题，这样可以快速查询前后内存块是否为空。
同时为了解决之前设计每次遍历极度耗时的性能问题，我们这样设计，我们只把空闲内存块用指针连起来形成链表。
这样每次 retain 操作，我们可以少遍历一半的内存（已经分配的），效率理论上来讲提高一倍。