class Counter {
    var value: Int = 0
}


1.
var counter = Counter()
let closure = {
    print("Captured value: \(counter.value)")// 10
}

counter.value = 10
closure()


2.
let counter = Counter()
/**
    [counter] 是简写的捕获列表形式，后面闭包参数为空时可以省略 in。
    
    [capturedCounter = counter] 是带有赋值表达式的捕获列表，Swift 语法要求必须明确写出 in 来分隔“捕获列表”和“闭包体”。
    */
//
let closure = { [capturedCounter = counter] in
    print("Captured counter value: \(capturedCounter.value)")// 10
    print("counter value: \(counter.value)")// 10
}

counter.value = 10
closure()


3.
let counter = Counter()
let value = counter.value // 要想让闭包捕获当时值的快照（而不是后续变化），你必须主动拷贝
let closure = {
    print("value: \(value)")// 0
    print("counter.value: \(counter.value)")// 10
}

counter.value = 10
closure()


let counter = Counter()
let closure = { [val = counter.value] in
    print("value: \(val)")// 0
    print("counter.value: \(counter.value)")// 10
}

counter.value = 10
closure()


==================================================
值捕获（按值拷贝变量，而不是引用）
var count = 0
let closure = { [count] in // 表示按值拷贝 count 变量当时的值
    print("Captured count: \(count)") // 0
}

count = 10
closure()



var count = 0
let closure1 = { // 闭包默认按引用捕获外部变量
    print("Captured count: \(count)") // 10
}

count = 10
closure1()