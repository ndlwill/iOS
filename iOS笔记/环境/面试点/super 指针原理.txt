https://juejin.cn/user/588993965865198/posts


sonTest 是 继承自 test


NSLog(@"[sel class]:%@",[self class]);
NSLog(@"[self superClass]:%@",[self superclass]);

NSLog(@"-----");

NSLog(@"[super class]:%@",[super class]);
NSLog(@"[super superClass]:%@",[super superclass]);


2020-02-11 15:11:10.485413+0800 blogTest[44855:7572222] [sel class]:SonTest
2020-02-11 15:11:10.485551+0800 blogTest[44855:7572222] [self superClass]:Test
2020-02-11 15:11:10.485681+0800 blogTest[44855:7572222] -----
2020-02-11 15:11:10.485822+0800 blogTest[44855:7572222] [super class]:SonTest
2020-02-11 15:11:10.485960+0800 blogTest[44855:7572222] [super superClass]:Test


用 super 调用方法的时候，其实内部就是通过 objc_msgSendSuper
objc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ )
struct objc_super {

    __unsafe_unretained _Nonnull id receiver;

    __unsafe_unretained _Nonnull Class super_class;

};
第一个参数其实就是消息的接受者，第二个参数就是 superClass。


-[super class]方法的本质是objc_msgSendSuper({self, superClass}, @selector(class))
self是receiver(消息接收者)，superClass表示从父类开始查找方法。所以本质还是self在调用class方法。


+(Class)class{
    return  object_getClass(self);
}
object_getClass 这个方法其实就是，如果传进来一个实例对象，就会返回当前的类对象，如果传进来一个类对象，就返回一个元类对象，
因为消息的接受者是self，所以上面class方法返回的类对象就为SonTest。

而另一个 [super superClass];他的 superClass 实现其实就是下面着这样
+(Class)superclass{
    return class_getSuperclass(object_getClass(self));
}


[super class]
1. 消息的接受者仍然为self
2. 方法从 super 开始查找
3. +class 的内部其实就是 object_getClass(self);

[super superClass]
1. 消息的接受者仍然为self
2. 方法从 super 开始查找
3. +superClass 的内部其实就是 class_getSuperclass(object_getClass(self));
