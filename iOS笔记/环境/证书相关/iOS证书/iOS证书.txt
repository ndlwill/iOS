$99这种账号可以用来上传App Store提审并发布:
这种账号有个人和公司的区别
个人账号：在上架App Store后，开发者直接显示申请人姓名，每一种Apple产品，均有各类设备各100台测试权限。iPhone、iPad、Mac等。

公司账号：上架App Store的App开发者显示公司，公司账号下，可以添加多个测试子账号，支持Xcode在真机测试，但是子账号没有上传App Store权限。
与个人账号权限类似，均有各类设备各100台测试机权限，iPhone、iPad、Mac等。公司申请需要邓白氏号，而个人不需要。

$299这种账号只能用于企业内部使用，测试设备无限，但是不能用来上传app store, 
也就是常说的in-house证书（用这种证书打出来的包能在任何iOS设备上运行，不需要苹果的验证、签名）。
2017年开始，苹果对这类证书的申请极为严格，一般的公司基本申请不成功，申请时长也从以前的一个多月延长到半年-1年不等。
原因大家的能想到，因为可以避开苹果的审核，发布app的内容也不受限制，常见于博彩app，金融类app
（Apple对此类app审核及其严格，涉及一些国家的法律法规）等等

99美元的可以配置Ad-Hoc证书、发布证书（提审AppStore的证书）
299美元的可以配置Ad-Hoc证书、In-House证书，不能配置提审AppStore的证书。

Ad Hoc - $99, $299
发布到指定设备
100台，由于苹果的限制，在开发者网站上只能添加100台设备

In House：是指企业内部发布，仅限企业内部人员使用。
不能发布到Apple Store进行销售。
可以将包放到一个网址，下载后就能直接安装。

ps: 如果app的内容比较敏感，或者一直上架被拒，可以建议客户考虑使用企业号代签方式发布

============================iOS相关
Certificates(证书,包括开发、发布证书)
作用: 这.cer文件格式的证书是让开发者使用的设备（也就是你的Mac）有真机调试，发布APP的权限

Provisioning Profiles(描述文件,简称PP)
.mobileprovision文件格式的配置文件是让开发者的项目（APP）能有真机调试，发布的权限。

各种证书的有效期:
个人帐号开发证书发布证书有效期都是1年，描述文件也全是1年有效期。

各种证书过期后的后果:




============================mac下查看.mobileprovision文件及钥匙串中证书.cer文件
钥匙串（Keychain）实质上就是一个用于存放证书、密钥、密码等安全认证实体的仓库，在计算机中保存为一个.keychain的文件

1.mobileprovision文件查看:
.mobileprovision是ios开发中的设备描述文件，里面有证书信息、调试设备的UUID信息、bundle identifier等
因为配置文件可能很多，所以需要找到自己要的那个配置，这里通过比对TeamName来匹配配置文件

// cd的目录为xcode配置的profile配置文件目录
cd /Users/ndl/Library/MobileDevice/Provisioning Profiles
for file in $(ls *)
do
    if [[ $(/usr/libexec/PlistBuddy -c "Print TeamName" /dev/stdin <<< $(/usr/bin/security cms -D -i ${file})) == "${TeamName}" ]]
    then
        profile=${file}
    #else
    fi
done
ExpirationDate=`/usr/libexec/PlistBuddy -c "Print ExpirationDate" /dev/stdin <<< $(/usr/bin/security cms -D -i xxxx.mobileprovision)`
/usr/libexec/PlistBuddy -c "Print Entitlements:com.apple.developer.team-identifier" /dev/stdin <<< $(/usr/bin/security cms -D -i ${file})

使用mac自带security命令行:
cms: Encode or decode CMS messages.
find-identity: Find an identity (certificate + private key) 查找证书
-a  指定键值对属性
[-c name]

security cms -D -i XXX.mobileprovision

security list-keychains

查找证书的过期时间:
2.钥匙串中证书.cer文件查看
需要右键将其导出成.p12文件，之后将.p12文件转成.pem文件
openssl pkcs12 -in xxx.p12 -out xxx.pem -nodes


查看钥匙链下的证书:
security find-identity
security find-identity -p codesigning /Users/ndl/Library/Keychains/login.keychain// 不包含推送证书

// ##推荐##
直接查找证书导并出为pem文件:
security find-certificate -a -c "iPhone xxxx" -p > cert.pem
查看pem证书的具体信息:
openssl x509 -in cert.pem -noout -text
查看证书的过期时间:
openssl x509 -in cert.pem -noout -dates

比较当前时间和证书时间来判断是否过期:
主要用了date命令，将证书的时间转换成秒，然后当前时间转换成秒后进行减法，可以计算出还有多少天过期

=========================date
查看当天日期:
date
直接调用date命令就会把日期和时间输出到 stdout上

需要在调用格式的前边加上一个'+'号.
echo "The number of days since the year's beginning is `date +%j`."
%j用来给出今天是本年度的第几天.
echo "The number of seconds elapsed since 01/01/1970 is `date +%s`."
%s将产生从"UNIX 元年"到现在为止的秒数  

date
2020年 5月 9日 星期六 14时24分17秒 CST
date -u
2020年 5月 9日 星期六 06时24分20秒 UTC

date -u
-u选项将给出UTC时间(Universal Coordinated Time).

exit 0 // 表示退出终端

=========================###mac data###
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ... 
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]

-u：显示或设置日期为UTC时间
-r：秒转换时间
+：+号引导的一些格式,和正常的Linux的格式一致

-t：（time zone）设置一GMT为基准的时区

-j：使用-j才能使用-f
-f：根据格式调整时间

查看特定时间的时间戳:
date -j -f "%Y-%m-%d %H:%M:%S" "2015-09-28 10:10:10" +%s // 北京时间

把当前时间转换成想要的格式:
date +"%Y-%m-%d %H:%M:%S"

date
2019年 8月26日 星期一 14时02分23秒 CST
直接输入date就可以获取当前的时间（CST时间）
中央标准时间 (CST)

date -jnRu
Mon, 26 Aug 2019 06:06:29 +0000
如果加上参数-jnRu会显示格林威治时间(GMT)

date 后加 -v 加减一个值，最后填写格式化参数格式化输出。都是在当前时间的基础上进行加减运算的:
date -v-1d +"%Y-%m-%d"
2019-08-25
date -v-1y +"%Y-%m-%d"
2018-08-26
date -v+1m +"%Y-%m-%d"
2019-09-26
date -v+1H +"%Y-%m-%d %H:%M:%S"
2019-08-26 15:40:36
date -v+1M +"%Y-%m-%d %H:%M:%S"
2019-08-26 14:41:58
date -v+1S +"%Y-%m-%d %H:%M:%S"
2019-08-26 14:40:12

date -j -f "%m %d %H:%M:%S %Y %Z" "4 9 10:49:24 2021 GMT" +%s // 得到北京时间

LC_ALL=en_US.UTF-8 date
Tue May 12 11:10:41 CST 2020
LC_ALL=zh_CN.UTF-8 date
2020年 5月12日 星期二 11时11分59秒 CST

报错：
date: illegal time format
通过locale查看LANG是中文还是英文，如果日期月份用的英文，切换到英文。反之切换到中文
切换到英文：export LANG="en_US.UTF-8"
切换到中文：export LANG="zh_CN.UTF-8"
系统是分中英文的，-f对日期字符串解析时，月份和星期必须是对应系统的中文或英文才可以
LC_ALL=en_US.UTF-8 /bin/date -j -f "%b %d %H:%M:%S %Y %Z" "Apr 9 10:49:24 2021 GMT" +%s

locale
Locale是根据计算机用户所使用的语言，所在国家或者地区，以及当地的文化传统所定义的一个软件运行时的语言环境
设定locale就是设定12大类的locale分类属性，即12个LC_*。除了这12个变量可以设定以外，为了简便起见，还有两个变量：LC_ALL和LANG。
它们之间有一个优先级的关系：LC_ALL > LC_* >LANG。可以这么说，LC_ALL是最上级设定或者强制设定，而LANG是默认设定值。
LANG="zh_CN.UTF-8"
LC_COLLATE="zh_CN.UTF-8"
LC_CTYPE="zh_CN.UTF-8"
LC_MESSAGES="zh_CN.UTF-8"
LC_MONETARY="zh_CN.UTF-8"
LC_NUMERIC="zh_CN.UTF-8"
LC_TIME="zh_CN.UTF-8"
LC_ALL=

'TZ'参数允许改变当前的默认时区.
date                 # Mon Mar 28 21:42:16 MST 2005
TZ=EST date          # Mon Mar 28 23:42:16 EST 2005

mac:
uname -s
Darwin

=========================echo
echo "The # here does not begin a comment."
echo 'The # here does not begin a comment.'
echo The \# here does not begin a comment.
echo中转义的#是不能作为注释的

echo ${PATH#*:}       # 参数替换
echo $(( 2#101011 ))  # 数制转换

=========================命令分隔符;

=========================:
空命令  等价于"NOP"
也可以被认为与shell的内建命令true作用相同
它的退出码(exit status)是"true"(0)

:
echo $?   # 0

在与>重定向操作符结合使用时, 将会把一个文件清空, 但是并不会修改这个文件的权限. 如果之前这个文件并不存在, 那么就创建这个文件
: > data.xxx   # 文件"data.xxx"现在被清空了
与 cat /dev/null >data.xxx 的作用相同

":"还用来在$PATH变量中做分隔符

=========================通配符 *
可以用来做文件名匹配
echo *

算术操作符. 在算术操作符的上下文中, *号表示乘法运算

=========================$
变量替换(引用变量的内容):
var1=5
echo $var1     # 5

a=375
hello=$a
在赋值的的时候, 等号前后一定不要有空格eg: VARIABLE =value
如果出现空格,脚本将尝试运行一个"VARIABLE"的命令, 带着一个"=value"参数

hello="A B  C   D"
echo $hello   # A B C D
echo "$hello" # A B  C   D
引用一个变量将保留其中的空白, 当然, 如果是变量替换就不会保留了
echo '$hello' # $hello 全引用的作用将会导致"$"被解释为单独的字符

hello=    # 设置为空值.
echo "\$hello (null value) = $hello"

命令替换: date是个shell命令
$(COMMAND)形式
echo $(date) // 2020年 5月 9日 星期六 10时09分27秒 CST

echo $(echo \\) # 输出\

使用命令替换来产生for循环的[list]
NUMBERS="9 7 3 8 37.53"
for number in `echo $NUMBERS`  # for number in 9 7 3 8 37.53
do
    echo -n "$number "
done

$(...)形式的命令替换是允许嵌套的

位置参数:
$0, $1, $2
位置参数, 从命令行传递到脚本, 或者传递给函数

$#
命令行参数或者位置参数的个数

$*
所有的位置参数都被看作为一个单词
"$*"必须被引用起来

参数替换:
${parameter}与$parameter相同, 也就是变量parameter的值
可以把变量和字符串组合起来使用

echo ${username-`whoami`}
# 如果变量$username还没有被声明, 那么就echoe出`whoami`的结果.也就是把'whoami'的结果赋值给变量$username

=========================命令组()
(a=hello; echo $a)

在括号中的命令列表, 将会作为一个子shell来运行
a=123
( a=321; )	      
echo "a = $a"   # a = 123

初始化数组
Array=(element1 element2 element3)

=========================命令替换'
echo '$hello' # $hello 全引用的作用将会导致"$"被解释为单独的字符

全引用即单引号'
'STRING'将会阻止STRING中所有特殊字符的解释. 这是一种比使用"更强烈的形式
引用的字面意思就是将字符串用双引号括起来. 它的作用就是保护字符串中的特殊字符不被shell或者shell脚本重新解释, 或者扩展

========================={xxx,yyy,zzz,...} 大括号扩展
cat {file1,file2,file3} > combined_file
# 把file1, file2, file3连接在一起, 并且重定向到combined_file中

cp file22.{txt,backup}
# 拷贝"file22.txt"到"file22.backup"中. 在大括号中, 不允许有空白.除非这个空白被引用或转义

=========================条件测试[]
if/then结构用来判断命令列表的退出状态码是否为0(因为在UNIX惯例, 0表示"成功")

[]根据比较的结果来返回一个退出状态码(0 表示真, 1表示假).

// (( ... ))结构可以用来计算并测试算术表达式的结果. 退出状态将会与[ ... ]结构完全相反
计算一个算术表达式的值. 如果表达式的结果为0, 那么返回的退出状态码为1, 或者是"假"
而一个非零值的表达式所返回的退出状态码将为0, 或者是"true"
和[ ]结构的行为正好相反

(( 0 )) // 0
echo "Exit status of \"(( 0 ))\" is $?." // 退出状态 = 1
if [ $(( 0 )) ] // true

(( 1 )) // 1
echo "Exit status of \"(( 1 ))\" is $?." // 0

if [ $(( 5 > 4 )) ] // true
echo "Exit status of \"(( 5 > 4 ))\" is $?." // 0

(( 5 > 9 )) // false
echo "Exit status of \"(( 5 > 9 ))\" is $?." // 1

(( 1 / 2 )) // 结果为 0
echo "Exit status of \"(( 1 / 2 ))\" is $?." // 1

(( 1 / 0 )) 2>/dev/null

(( ... ))和let ...结构也能够返回退出状态码, 当它们所测试的算术表达式的结果为非零的时候, 将会返回退出状态码0

# 非常有用的"if-grep"结构:
if grep -q Bash file
then echo "File contains at least one occurrence of Bash."
fi

if []
then
else
fi

if [ 0 ] // true
if [ 1 ] // true
if [ -1 ] // true
if [ ]        # NULL (空状态) false
if [ xyz ] // 随便的一串字符为真 true
if [ $xyz ] // 判断$xyz是否为null, 但是...这只是一个未初始化的变量 false 未定义的初始化为假
if [ -n "$xyz" ]            # 更加正规的条件检查. false
if [ -n $xyz ] // true

xyz=          # 初始化了, 但是赋null值.
if [ -n "$xyz" ]   // false
if [ -n $xyz ] // true

=========================[[ ... ]]扩展测试命令
ASCII comparison:
veg1=carrots
veg2=tomatoes
if [[ "$veg1" < "$veg2" ]]
then
    echo "Although $veg1 precede $veg2 in the dictionary,"
    echo "this implies nothing about my culinary preferences."
else
    echo "What kind of dictionary are you using, anyhow?"
fi

=========================(( ))整数扩展
扩展并计算在(( ))中的整数表达式

a=$(( 5 + 3 ))

(( a = 23 ))  # C语言风格的变量赋值, "="两边允许有空格.
echo "a (initial value) = $a"

=========================使用"let"命令来做算术运算
let a=11
let a=a+5
let "a -= 5"        # 等价于 let "a = a - 5"

=========================重定向
> &> >& >>

scriptname >filename: 重定向scriptname的输出到文件filename中. 如果filename存在的话, 那么将会被覆盖
command &>filename 重定向command的stdout和stderr到filename中.
command >&2 重定向command的stdout到stderr中
scriptname >>filename 把scriptname的输出追加到文件filename中. 如果filename不存在的话, 将会被创建

=========================Here String
COMMAND <<<$WORD, $WORD将被扩展并且被送入COMMAND的stdin中

========================={}代码块
又被称为内部组, 这个结构事实上创建了一个匿名函数(一个没有名字的函数).
与"标准"函数不同的是, 在其中声明的变量,对于脚本其他部分的代码来说还是可见的

a=123
{ a=321; }
echo "a = $a"   # a = 321   (说明在代码块中对变量a所作的修改, 影响了外边的变量)

=========================!取反操作符
将会反转命令的退出码的结果

=========================函数
函数返回一个值, 被称为退出状态码. 退出状态码可以由return命令明确指定, 也可以由函数中最后一条命令的退出状态码来指定(如果成功则返回0, 否则返回非0值). 
可以在脚本中使用$?来引用退出状态码. 因为有了这种机制, 所以脚本函数也可以象C函数一样有"返回值".

使用local关键词，可以定义只在函数内有效的局部变量，函数执行结束后，变量消失

=========================文件比较运算符
-e filename  如果 filename存在，则为真  [ -e /var/log/syslog ]
-d filename  如果 filename为目录，则为真  [ -d /tmp/mydir ]
-f filename  如果 filename为常规文件，则为真  [ -f /usr/bin/grep ]
-L filename  如果 filename为符号链接，则为真  [ -L /usr/bin/grep ]
-r filename  如果 filename可读，则为真  [ -r /var/log/syslog ]
-w filename  如果 filename可写，则为真  [ -w /var/mytmp.txt ]
-x filename  如果 filename可执行，则为真  [ -L /usr/bin/grep ]

filename1-nt filename2  如果 filename1比 filename2新，则为真  [ /tmp/install/etc/services -nt /etc/services ]
filename1-ot filename2  如果 filename1比 filename2旧，则为真  [ /boot/bzImage -ot arch/i386/boot/bzImage ]

=========================字符串比较运算符 
请注意引号的使用，这是防止空格扰乱代码的好方法
-z string  如果 string长度为零，则为真  [ -z "$myvar" ]
-n string  如果 string长度非零，则为真  [ -n "$myvar" ]
string1= string2  如果 string1与 string2相同，则为真  [ "$myvar" = "one two three" ]
string1!= string2  如果 string1与 string2不同，则为真  [ "$myvar" != "one two three" ]

=========================算术比较运算符
num1-eq num2  等于 [ 3 -eq $mynum ]
num1-ne num2  不等于 [ 3 -ne $mynum ]
num1-lt num2  小于 [ 3 -lt $mynum ]
num1-le num2  小于或等于 [ 3 -le $mynum ]
num1-gt num2  大于 [ 3 -gt $mynum ]
num1-ge num2  大于或等于 [ 3 -ge $mynum ]



=========================Awk是功能完整的文本处理语言
echo one two | awk '{print $1}' #one
echo one two | awk '{print $2}' #two

将传递进来的每行输入都分割成域. 默认情况下, 一个域指的就是使用空白分隔的一个连续字符串, 不过我们可以修改属性来改变分隔符

awk [-F field-separator]

=========================grep
grep [OPTIONS] PATTERN [FILE...]
OPTIONS:
--color=auto：对匹配到的文本着色后高亮显示
-i：ignorecase，忽略字符的大小写
-o：仅显示匹配到的字符串本身

=========================sed
它即可以从stdin中接收文本输入, 也可以从文件中接收文本输入, 它对输入中的指定行进行特定的操作, 一行操作一次, 然后将结果输出到stdout, 或输出到文件中.

sed 's/要被取代的字串/新的字串/g'

=========================openssl
openssl pkcs12 -clcerts -nokeys -in temp.p12 -out cert.pem -passin pass:1

1.-in后面为要转换的.p12文件
2.-out后面为要输出的pem的文件名字，以.pem结尾
3.-nokeys表示不对pem文件设置密码
4.-passin pass:xxx：输入.p12文件的密码

