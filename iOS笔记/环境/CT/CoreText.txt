https://www.cnblogs.com/XYQ-208910/p/6222931.html
https://my.oschina.net/FEEDFACF/blog/1845913

CoreText 是一个高级的文本布局和渲染框架，提供了精细控制文本显示的能力。它主要用于需要自定义文本排版的场景。
CoreText 是一个底层的 C 语言 API


https://www.fuhaozi.com/unicode/2/2026.html
//  “...”
static NSString* const kEllipsesCharacter = @"\u2026";
// 3.使用 0xFFFC 作为空白的占位符
unichar objectReplacementChar = 0xFFFC;
NSString *string = [NSString stringWithCharacters:&objectReplacementChar length:1];

##########
iOS文本容器中都是基线对齐，所谓的基线对齐就是指无论中文字符，数字，英文字符，表情等它们在一行的时候，基线是在同一高度的。

字体大小不同文本垂直居中:
//NSBaselineOffsetAttributeName:@(([UIFont systemFontOfSize:30].lineHeight - [UIFont systemFontOfSize:15].lineHeight)/2 + (([UIFont systemFontOfSize:30].descender - [UIFont systemFontOfSize:15].descender))),
NSDictionary *dic1 = @{NSFontAttributeName:[UIFont systemFontOfSize:15],
                          NSForegroundColorAttributeName:[UIColor blackColor],
                          NSBackgroundColorAttributeName:[UIColor yellowColor],
                          NSBaselineOffsetAttributeName:@(([UIFont systemFontOfSize:30].lineHeight - [UIFont systemFontOfSize:15].lineHeight)/2 + (([UIFont systemFontOfSize:30].descender - [UIFont systemFontOfSize:15].descender))),
                          NSParagraphStyleAttributeName:ParagraphStyle
                          };

NSTextAttachment默认也是基线对齐，attachment.bounds的坐标原点Y轴是和基线持平，是coregraphics的坐标系。

// NSTextAttachment基线对齐
NSTextAttachment *attachment = [[NSTextAttachment alloc] init];
attachment.image = [UIImage imageNamed:@"tsj"];
attachment.bounds = CGRectMake(0,0,[UIFont systemFontOfSize:30].ascender,[UIFont systemFontOfSize:30].ascender);

如果希望NSTextAttachment底部对齐
将bound.origin.y移动descender距离即可。
attachment.bounds = CGRectMake(0,[UIFont systemFontOfSize:30].descender,[UIFont systemFontOfSize:30].lineHeight,[UIFont systemFontOfSize:30].lineHeight);
##########


翻转坐标系
CGAffineTransform transform = CGAffineTransformScale(CGAffineTransformMakeTranslation(0, rect.size.height), 1.f, -1.f);
CGContextConcatCTM(context, transform);


https://www.jianshu.com/p/abe24f8bde6e?utm_campaign=hugo
//获取上下文
CGContextRef c = UIGraphicsGetCurrentContext();
// 将当前图形状态推入堆栈
CGContextSaveGState(c);
// 设置字形变换矩阵为CGAffineTransformIdentity，也就是说每一个字形都不做图形变换
CGContextSetTextMatrix(c, CGAffineTransformIdentity);
// 坐标转换，UIKit 坐标原点在左上角，CoreText 坐标原点在左下角
CGContextTranslateCTM(c, 0.0f, insetRect.size.height);
CGContextScaleCTM(c, 1.0f, -1.0f);
// TODO:进行图文绘制操作
//...
// 绘制完成，将堆栈顶部的状态弹出，返回到之前的图形状态
CGContextRestoreGState(c);

CTFramesetter:
CTFramesetter是管理生成CTFrame的工厂类，其中记录了需要绘制的文本内容中不同字符串对应的富文本属性（加粗、颜色、字号等），通过NSAttributedString可生成CTFrameSetter。

NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:text attributes:attributes];
//生成CTFramesetter
CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attributedStr);
CFRelease(framesetter);


CTFrame:
CTFrame描述了总的文本绘制区域的frame，通过它你可以得到在指定区域内绘制的文本一共有多少行。

CGRect rect = CGRectMake(0, 0, 100, 100);
//生成绘制区域路径
CGMutablePathRef path = CGPathCreateMutable();
CGPathAddRect(path, NULL, rect);
//生成CTFrame
CTFrameRef frame = CTFramesetterCreateFrame(framesetter, CFRangeMake(0, [attributedStr length]), path, NULL);

//获取一共有多少行
CFArrayRef lines = CTFrameGetLines(frame);

CFRelease(frame);
CGPathRelease(path);

CTLine:
CTLine记录了需要绘制的单行文本信息，通过它你可以得到当前行的上行高、下行高以及行间距等信息。

//获取第一行信息
CTLineRef line = CFArrayGetValueAtIndex(lines, 0);
//上行高、下行高、行间距
CGFloat lineAscent = 0.0f, lineDescent = 0.0f, lineLeading = 0.0f;
//获取行宽、行高信息
CGFloat lineWidth = CTLineGetTypographicBounds(line, &lineAscent, &lineDescent, &lineLeading);


系统绘制文本的时候，首先会以基线（Baseline）为基准，从当前行的基线最左侧的原点（Origin）开始，计算得到上行高（Ascent），下行高（Descent），不同行之间的行间距（Leading），以及行宽信息。

CTRun:
CTRun描述了单行文本中具有相同富文本属性的字符实体，每一行文字中可能有多个CTRun，也有可能只包含一个CTRun。如下图，这行文字中包含三个CTRun，分别为：这是 一段(使用了大字体) 测试数据
与CTLine一样，同样可以计算得到单个CTRun的绘制区域大小。
//初始化CTRun的区域大小为CGRectZero
CGRect runBounds = CGRectZero;
//初始化CTRun的上行高、下行高、行间距
CGFloat runAscent = 0.0f, runDescent = 0.0f, runLeading = 0.0f;
//计算得到上下行高、行间距以及CTRun绘制区域宽度
runBounds.size.width = (CGFloat)CTRunGetTypographicBounds(glyphRun, CFRangeMake(0, 0), &runAscent, &runDescent, &runLeading);
//计算高度，注意下行高为负数的情况
CGFloat runHeight = runAscent + fabs(runDescent);
runBounds.size.height = runHeight;


CTRunDelegate：
CTRunDelegate用于图文混排时候的图片绘制，因为CoreText本身并不能进行图文混排，
但是可以使用CTRunDelegate在需要显示图片的地方添加占位符，当CoreText绘制到该位置的时候，会触发CTRunDelegate代理，在代理方法中可以获取到该区域的大小以及图片信息，
然后调用 CGContextDrawImage(c, runBounds, image.CGImage) 绘制图片即可。

NSDictionary *imgInfoDic = @{kCJImage:image,//需要绘制的图片
                             kCJImageWidth:@(size.width),//需要绘制的图片区域宽度
                             kCJImageHeight:@(size.height),//需要绘制的图片区域高度};
    
//创建CTRunDelegateRef并设置回调函数
CTRunDelegateCallbacks imageCallbacks;
imageCallbacks.version = kCTRunDelegateVersion1;
imageCallbacks.dealloc = RunDelegateDeallocCallback;
imageCallbacks.getWidth = RunDelegateGetWidthCallback;//图片区域宽度回调
imageCallbacks.getAscent = RunDelegateGetAscentCallback;//图片区域上行高回调
imageCallbacks.getDescent = RunDelegateGetDescentCallback;//图片区域下行高回调
CTRunDelegateRef runDelegate = CTRunDelegateCreate(&imageCallbacks, (__bridge void *)imgInfoDic);
//初始化空白占位字符
unichar imgReplacementChar = 0xFFFC;
NSString *imgReplacementString = [NSString stringWithCharacters:&imgReplacementChar length:1];
//插入图片 空白占位符
NSMutableString *imgPlaceholderStr = [[NSMutableString alloc]initWithCapacity:3];
[imgPlaceholderStr appendString:imgReplacementString];
NSRange imgRange = NSMakeRange(0, imgPlaceholderStr.length);
NSMutableAttributedString *imageAttributedString = [[NSMutableAttributedString alloc] initWithString:imgPlaceholderStr];
//将CTRunDelegate记录到NSMutableAttributedString的富文本信息中
[imageAttributedString addAttribute:(NSString *)kCTRunDelegateAttributeName value:(__bridge id)runDelegate range:imgRange];
//kCJImageAttributeName为自定义的记录图片信息的富文本属性
[imageAttributedString addAttribute:kCJImageAttributeName value:imgInfoDic range:imgRange];



https://www.jianshu.com/p/ad4796df3dd6
文字排版的基础概念:
字体(Font):和我们平时说的字体不同，计算机意义上的字体表示的是同一大小，同一样式(Style)字形的集合。从这个意义上来说，当我们为文字设置粗体，斜体时其实是使用了另外一种字体(下划线不算)。
字符(Character)和字形(Glyphs)：排版过程中一个重要的步骤就是从字符到字形的转换，字符表示信息本身，而字形是它的图形表现形式。
字符一般就是指某种编码，如Unicode编码，而字形则是这些编码对应的图片。
但是他们之间不是一一对应关系，同个字符的不同字体族，不同字体大小，不同字体样式都对应了不同的字形。
而由于连写(Ligatures)的存在，多个字符也会存在对应一个字形的情况。
字形描述集(Glyphs Metris)：即字形的各个参数。

边框(Bounding Box)：一个假想的边框，尽可能地容纳整个字形。

基线(Baseline)：一条假想的参照线，以此为基础进行字形的渲染。

基础原点(Origin)：基线上最左侧的点。

行间距(Leading)：行与行之间的间距。

字间距(Kerning)：字与字之间的距离，为了排版的美观，并不是所有的字形之间的距离都是一致的，但是这个基本不影响到我们的文字排版。

上行高度(Ascent)和下行高度(Decent)：一个字形最高点和最低点到基线的距离，前者为正数，而后者为负数。当同一行内有不同的字体文字时，就取最大的值为相应的值。

lineHeight = Ascent + |Decent| + Leading

CTRun(既字形绘制的最小单元)

图文混排的实现:
CoreText实际上并没有相应API直接将一个图片转换为CTRun并进行绘制，它所能做的只是为图片预留响应的空白区域，而真正的绘制则是交由CoreGraphics完成。

在CoreText中提供了CTRunDelegate这么个CoreFoundation类，顾名思义它可以对CTRun进行拓展。AttributedString某个段设置kCTRunDelegateAttributeName属性之后，CoreText使用它生成CTRun是通过当前Delegate的回调来获取自己的ascent，descent和width，而不是根据文字信息。这样就给我们留下了可操作的空间：用一个空白字符作为图片的占位符，设好Delegate，占好位置，然后用CoreGraphics进行图片的绘制。

==================================================

CoreText在渲染界面前就可以精确地获得显示内容的高度（只要有了CTFrame即可），而UIWebView只有渲染出内容后，才能获得内容的高度（而且还需要通过JavaScript代码来获取）
CoreText的CTFrame可以在后台线程渲染，UIWebView的内容只能在主线程（UI线程）渲染

图文混排:
CTFrameRef  textFrame     // coreText 的 frame
CTLineRef   line          // coreText 的 line
CTRunRef    run           // line  中的部分文字

CFArrayRef CTFrameGetLines(CTFrameRef frame) //获取包含CTLineRef的数组
void CTFrameGetLineOrigins(CTFrameRef frame,CFRange range,CGPoint origins[])//获取所有CTLineRef的原点
CFRange CTLineGetStringRange(CTLineRef line) //获取line中文字在整段文字中的Range
CFArrayRef CTLineGetGlyphRuns(CTLineRef line)//获取line中包含所有run的数组
CFRange CTRunGetStringRange(CTRunRef run)//获取run在整段文字中的Range
CFIndex CTLineGetStringIndexForPosition(CTLineRef line,CGPoint position)//获取点击处position文字在整段文字中的index
CGFloat CTLineGetOffsetForStringIndex(CTLineRef line,CFIndex charIndex,CGFloat* secondaryOffset)//获取整段文字中charIndex位置的字符相对line的原点的x值

每一个CTRun代表一组显示风格一致的文本

CTM（current transformation matrix当前转换矩阵）

// 绘制文字,旋转坐坐标系(默认和UIKit坐标是相反的)
CGContextSetTextMatrix(context, CGAffineTransformIdentity);
CGContextTranslateCTM(context, 0, self.bounds.size.height);
CGContextScaleCTM(context, 1.0, -1.0);