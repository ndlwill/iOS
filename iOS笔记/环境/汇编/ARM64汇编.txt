https://juejin.cn/post/7115302848270696485


需要从以下三个方面入手，寄存器、汇编指令 和 堆栈

16个常用寄存器
rax、rbx、rcx 、rdx、rsi、rdi、rbp、rsp
r8、r9、r10、r11、r12、r13、r14、r15

寄存器的具体用途:
rax、rdx常作为函数返回值使用
rdi、rsi、rdx、rcx、r8、r9等寄存器常用于存放函数参数
rsp、rbp用于栈操作
rip作为指令指针:
存储着CPU下一条要执行的指令的地址
一旦CPU读取一条指令，rip会自动指向下一条指令（存储下一条指令的地址）

x86汇编(32bit) 32位时代，常用寄存器能存32位，也就是4个字节。
x64汇编(64bit) 64位时代，常用寄存器能存64位，也就是8个字节。
只要是r开头的都是64位寄存器，8字节。e开头的都是32位寄存器，4字节。

r开头：64bit，8字节
e开头：32bit，4字节
ax、bx、cx等：16bit，2字节
ah、al、bh、bl等：8bit，1字节


==================================================常见ARM汇编指令
移动指令：MOV，寄存器和寄存器之间传值
mov    x2, x16             ;把x16的值传递给寄存器x2

算术运算指令： 加（ADD）、减（SUB）
add x1, x2, x3             ;把x2+x3的值传递给寄存器x1
sub x1, x2, x3             ;把x2-x3的值传递给x1

逻辑运算指令：与（AND）、或（ORR）、异或（EOR）
bash 代码解读复制代码and    x1，x1，#0xf           ;把x1中的值与0xf按位与后传递给x1
orr    x1，x1，#6               ;把x1中的值与6按位或后传递给x1
eor    x1，x1，#0xf           ;把x1中的值与0xf按位异或后传递给x1

用于在二进制数据上执行位移操作
LSL：逻辑左移 
LSR：逻辑右移
ASR：算术右移
ROR：循环右移

存/取数据指令：STR（寄存器加载到内存中）、取数据LDR （把内存中的数据传递给寄存器）
ini 代码解读复制代码str x1, [sp, #0x4]                  ;把x1寄存器的数据传递给sp+0x4地址值指向的内存空间
ldr x1, [sp, #0x4]                  ;把sp+0x4地址值内的数据传递给寄存器x1

栈操作指令：STP（入栈）、LDP（出栈）
stp x0, x1,  [sp, #0x4] 
ldp x0, x1,  [sp, #0x4] 
sp 通常指的是 栈指针（Stack Pointer），它是一个寄存器，负责指示当前栈顶的位置
栈通常用于存储函数调用的局部变量、返回地址、保存寄存器值等数据。在函数调用时，栈指针会发生变化，栈的内容也会相应调整。

比较指令：CMP，CBZ，CBNZ，TBZ，TBNZ
cmp x0,x1                        ;把x0的内容和x1的内容进行比较，根据结果更新条件标志，并丢弃结果，相当于subs xzr x0, x1
cbz x0, LGetImpMiss1                    ;如果x0等于0就跳转到LGetImpMiss1，不影响条件标志
cbnz x0, LGetImpMiss1               ;如果x0不等于0就跳转到LGetImpMiss1，不影响条件标志
tbz x0, #20, LGetImpMiss1                 ;寄存器中指定位某个值是否为零，如果x0中的第20位（x0[20]）等于0就跳转到LGetImpMiss1，不影响条件标志
tbnz x0, #20, LGetImpMiss1                 ;寄存器中指定位比较，如果x0中的第20位（x0[20]）不等于0就跳转到LGetImpMiss1，不影响条件标志

跳转指令： B：无返回跳转，配合CMP使用 BL：带返回的跳转，会将返回地址存储到寄存器x30，说明这是一个子程序调用
示例1：
b    LLookupExample          ;直接跳转到LLookupExample
示例2：配合cmp使用
cmp x0,#6                    
b.eq LReturnZeroExample     ;如果x0等于6,则跳转LReturnZeroExample
条件代码：
b.eq                ;等于
b.ne                ;不等于
b.le                 ;有符号的小于或等于
b.ge                ;有符号的大于或等于
b.lt                ;有符号小于
b.gt                ;有符号大于
示例3：
bl lookUpFindExample

子程序返回指令：RET（返回地址存储在x30）
LTestExample:
    mov x2, #0
    ret

寻址指令：ADRP（将PC相对地址形成4KB页面，即：取指定label的基地址，存储到指定寄存器中）
adrp    x1, __example_handle@PAGE       ;获取__example_handle所在页的基地址存储到x1寄存器中

无符号位域选取指令：UBFX（提取指定位）
ubfx    x11, x0, #60, #4            ;从源寄存器x0中提取4位，位置从60开始。即将x0中的60-63位复制到目标寄存器x11的最低有效位，并将该x11上的其他高位设置为零

==================================================LLDB指令
内存地址的规律
内存地址格式为：0x4bdc(%rip)，一般是全局变量，全局区（数据段）
内存地址格式为：-0x78(%rbp)，一般是局部变量，栈空间
内存地址格式为：0x10(%rax)，一般是堆空间

机器语言
由0和1组成的机器指令.

汇编语言(assembly language)

汇编语言与机器语言一一对应，每一条机器指令都有与之对应的汇编指令
汇编语言可以通过编译得到机器语言，机器语言可以通过反汇编得到汇编语言
高级语言可以通过编译得到汇编语言 \ 机器语言，但汇编语言\机器语言几乎不可能还原成高级语言


每一个CPU芯片都有许多管脚，这些管脚和总线相连，CPU通过总线跟外部器件进行交互
总线：一根根导线的集合

进制的定义
八进制由8个符号组成:0 1 2 3 4 5 6 7 逢八进一
十进制由10个符号组成:0 1 2 3 4 5 6 7 8 9逢十进一
N进制就是由N个符号组成:逢N进一

位(Bit): 1个位就是1个二进制位.0或者1
字节(Byte): 1个字节由8个Bit组成(8位).内存中的最小单元Byte.
字(Word): 1个字由2个字节组成(16位),这2个字节分别称为高字节和低字节.
双字(Doubleword): 1个双字由两个字组成(32位)


计算机存储数据它会分为有符号数和无符号数
有符号数:
正数:  0    1    2    3    4    5    6    7 
负数:  F    E    D    B    C    A    9    8