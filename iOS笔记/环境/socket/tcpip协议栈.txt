普通 socket 发送/接收数据
应用层通过 socket 接口发送数据时，系统内核的 TCP/IP 协议栈会帮你完成完整的协议处理：
组装 TCP 或 UDP 报文头
维护连接状态（TCP 三次握手、流量控制等）
IP 层的分片和路由
应用层只看到最终的“payload”（有效负载），不需要关心协议细节。

原始 IP 数据包（Raw IP Packet）
你拿到的是完整的 IP 包，里面包含 IP 头、TCP/UDP 头以及 payload。
如果你自己处理原始 IP 包，意味着要自己处理：
IP 协议的解析和校验
TCP 或 UDP 协议的处理（重传、顺序、校验、连接管理等）
这些都是 TCP/IP 协议栈原本负责的复杂工作。

为什么需要 lwIP（或者其他轻量级协议栈）
lwIP 是一个轻量级的 TCP/IP 协议栈实现，适合嵌入式系统或者网络设备。
当你在一个环境里没有完整的操作系统协议栈，或者你想自己控制协议细节时，用 lwIP 来完成：
协议解析
连接管理
数据重组
以及最终交付给上层应用的 payload
lwIP 代替了内核 TCP/IP 协议栈的作用，帮你完成那些复杂的协议处理工作。


==================================================维护连接状态（TCP 三次握手）表示：
维护连接状态（TCP 三次握手），指的就是：
当你在应用层（比如用 socket 连接一个 HTTP 服务器）调用 connect() 时，系统的 TCP/IP 协议栈会自动帮你发起 TCP 三次握手过程。

具体流程是：
发送 SYN 包（客户端发起连接请求）
收到服务器的 SYN+ACK 包（确认请求）
再发一个 ACK 包（确认收到服务器的响应）
这整个过程由协议栈自动完成，应用层只看到连接成功或失败的结果，不用自己手动发包或管理状态。

你不需要自己写代码去组装这些 TCP 报文，也不用处理超时重传、序列号管理、拥塞控制等细节，这些都是 TCP/IP 协议栈负责的。

TCP 三次握手是 TCP/IP 协议栈帮你自动发起和维护的连接过程，应用层只需要调用 connect() 之类的接口即可。