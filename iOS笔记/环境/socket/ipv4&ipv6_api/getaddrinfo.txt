https://www.jianshu.com/p/d16b0b358d3f

Linux/UNIX系统编程手册
https://www.cnblogs.com/arnoldlu/category/1470315.html


IPv4中使用 gethostbyname() 函数完成主机名到地址解析，这个函数仅仅支持 IPv4 。返回的结构只包含了用于存储 IPv4 地址的空间
IPv6中引入了getaddrinfo()的新API，它是协议无关的，既可用于 IPv4 也可用于IPv6 

getaddrinfo函数能够处理名字到地址以及服务到端口这两种转换，返回的是一个addrinfo的结构（列表）指针而不是一个地址清单。
这些addrinfo结构随后可由socket函数直接使用

#include <netdb.h>
int getaddrinfo(const char *restrict node, 
                const char *restrict service, 
                const struct addrinfo *restrict hints, 
                struct addrinfo **restrict res);
给定一个 node 和 service (分别标识host_name和service_name)，getaddrinfo() 将返回一个或多个 addrinfo 结构
每个 addrinfo 都包含一个 Internet 地址(包含IP和端口号，即 ip:port)
可以使用该地址进行 bind或 connect操作
注意，host_name可以是具体的名称如:dns.google，也可以是10进制点ip地址如:8.8.8.8 。前者将返回两个addrinfo，即8.8.8.8和8.8.4.4；而后者则仅仅包含8.8.8.8。
可以认为是getaddrinfo()融合了gethostbyname和 getservbyname两者的功能到一个接口中

node: 一个主机名或者地址串(IPv4 的点分十进制串或者 IPv6 的 16 进制串)。
service：服务名可以是十进制的端口号，也可以是已定义的服务名称，如 ftp、http 等。
hints：可以是一个空指针，也可以是一个指向某个 addrinfo 结构体的指针，调用者在这个结构中填入关于期望返回的信息类型的暗示。
result：本函数通过 result 指针参数返回一个指向 addrinfo 结构体链表的指针。
0：成功；非0：出错
在getaddrinfo函数之前通常需要对以下6个参数进行以下设置：node、service、hints的ai_flags、ai_family、ai_socktype、ai_protocol。
ai_protocol一般为0

hints 参数可以认为是一种对结果的选择标准，简单的以service为例，相同的service服务，可能使用了TCP协议或者UDP协议，他们对应了不同的端口
我们可以在hints.ai_protocol中指定，我们所关心的具体是那一个。如果hints不是NULL，那么其ai_family、ai_socktype 和ai_protocol三个字段，将用于指定返回的值的筛选条件
ai_family
指定返回地址的地址族


struct addrinfo {
    int ai_flags;   /* AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST */
    int ai_family;  /* PF_xxx */
    int ai_socktype;    /* SOCK_xxx */
    int ai_protocol;    /* 0 or IPPROTO_xxx for IPv4 and IPv6 */
    socklen_t ai_addrlen;   /* length of ai_addr */
    char    *ai_canonname;  /* canonical name for hostname */
    struct  sockaddr *ai_addr;  /* binary address */
    struct  addrinfo *ai_next;  /* next structure in linked list */
};