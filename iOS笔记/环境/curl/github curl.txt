https://github.com/curl/curl


==================================================https://everything.curl.dev/
Code layout:
A key thing to remember is that libcurl is the library and that this library is the biggest component of the curl command-line tool.


----------root
Some of the more notable ones include:
buildconf: (deprecated) script used to build configure and more when building curl from source out of the git repository.
buildconf.bat: the Windows version of buildconf. Run this after having checked out the full source code from git.
configure: a generated script that is used on Unix-like systems to generate a setup when building curl.

----------lib
lib
This directory contains the full source code for libcurl. 
It is the same source code for all platforms—over one hundred C source files and a few more private header files. 
The header files used when building applications against libcurl are not stored in this directory; see include/curl for those.

Depending on what features are enabled in your own build and what functions your platform provides, 
some of the source files or portions of the source files may contain code that is not used in your particular build.

----------lib/vtls
The VTLS sub section within libcurl is the home of all the TLS backends libcurl can be built to support. 
The "virtual" TLS internal API is a backend agnostic API used internally to access TLS and crypto functions without the main code knowing which specific TLS library is used. 
This allows the person who builds libcurl to select from a wide variety of TLS libraries to build with.

We also maintain a SSL comparison table on the website to aid users.
https://curl.se/docs/ssl-compared.html

AmiSSL: an OpenSSL fork made for AmigaOS (uses openssl.c)
BearSSL
BoringSSL: an OpenSSL fork maintained by Google. (uses openssl.c)
GnuTLS
LibreSSL: an OpenSSL fork maintained by the OpenBSD team. (uses openssl.c)
mbedTLS
OpenSSL
rustls: a TLS library written in rust
Schannel: the native TLS library on Windows.
Secure Transport: the native TLS library on macOS
wolfSSL

----------src
This directory holds the source code for the curl command-line tool. 
It is the same source code for all platforms that run the tool.

Most of what the command-line tool does is to convert given command line options into the corresponding libcurl options or set of options and then makes sure to issue them correctly to drive the network transfer according to the user's wishes.

This code uses libcurl just as any other application would.

----------include/curl
Here are the public header files that are provided for libcurl-using applications. 
Some of them are generated at configure or release time so they do not look identical in the git repository as they do in a release archive.

With modern libcurl, all an application is expected to include in its C source code is #include <curl/curl.h>

----------docs
The main documentation location. Text files in this directory are typically plain text files. 
We have slowly started to move towards Markdown format so a few (but growing number of) files use the .md extension to signify that.

Most of these documents are also shown on the curl website automatically converted from text to a web friendly format/look.

BINDINGS: lists all known libcurl language bindings and where to find them
BUGS: how to report bugs and where
CODE_OF_CONDUCT.md: how we expect people to behave in this project
CONTRIBUTE: what to think about when contributing to the project
curl.1: the curl command-line tool man page, in nroff format
curl-config.1: the curl-config man page, in nroff format
FAQ: frequently asked questions about various curl-related subjects
FEATURES: an incomplete list of curl features
HISTORY: describes how the project started and has evolved over the years
HTTP2.md: how to use HTTP/2 with curl and libcurl
HTTP-COOKIES: how curl supports and works with HTTP cookies
index.html: a basic HTML page as a documentation index page
INSTALL: how to build and install curl and libcurl from source
INSTALL.cmake: how to build curl and libcurl with CMake
INSTALL.devcpp: how to build curl and libcurl with devcpp
INTERNALS: details curl and libcurl internal structures
KNOWN_BUGS: list of known bugs and problems
LICENSE-MIXING: describes how to combine different third party modules and their individual licenses
MAIL-ETIQUETTE: this is how to communicate on our mailing lists
MANUAL: a tutorial-like guide on how to use curl
mk-ca-bundle.1: the mk-ca-bundle tool man page, in nroff format
README.cmake: CMake details
README.netware: Netware details
README.win32: win32 details
RELEASE-PROCEDURE: how to do a curl and libcurl release
RESOURCES: further resources for further reading on what, why and how curl does things
ROADMAP.md: what we want to work on in the future
SECURITY: how we work on security vulnerabilities
SSLCERTS: TLS certificate handling documented
SSL-PROBLEMS: common SSL problems and their causes
THANKS: thanks to this extensive list of friendly people, curl exists today.
TheArtOfHttpScripting: a tutorial into HTTP scripting with curl
TODO: things we or you can work on implementing
VERSIONS: how the version numbering of libcurl works

----------docs/libcurl
All libcurl functions have their own man pages in individual files with .3 extensions, using nroff format, in this directory. 
There are also a few other files that are described below.

----------docs/libcurl/opts
This directory contains the man pages for the individual options for three different libcurl functions.

curl_easy_setopt() options start with CURLOPT_, curl_multi_setopt() options start with CURLMOPT_ and curl_easy_getinfo() options start with CURLINFO_.

----------docs/examples
Contains around 100 stand-alone examples that are meant to help readers understand how libcurl can be used.

See also the libcurl examples section of this book.
https://everything.curl.dev/examples


==================================================https://everything.curl.dev/build
Build curl and libcurl:

The source code for this project is written in a way that allows it to be compiled and built on just about any operating system and platform, 
with as few restraints and requirements as possible.

For the most popular platforms, the curl project comes with build systems already done and prepared to allow you to easily build it yourself.

The curl project creates source code that can be built to produce the two products curl and libcurl. 
The conversion from source code to binaries is often referred to as "building". You build curl and libcurl from source.

The curl project does not provide any built binaries at all — it only ships the source code. 
The binaries which can be found on the download page of the curl web and installed from other places on the Internet are all built and provided to the world by other friendly people and organizations.


git vs release tarballs:
When release tarballs are created, a few files are generated and included in the final release bundle. 
Those generated files are not present in the git repository, because they are generated and there is no need to store them in git.

If you build curl from a git checkout, you need to generate some files yourself before you can build. 
On Linux and Unix-like systems, do this by running autoreconf -fi and on Windows, run buildconf.bat.


On Linux and Unix-like systems:
There are two distinctly different ways to build curl on Linux and other Unix-like systems; 
there is the one using the configure script and there is the CMake approach.
https://everything.curl.dev/build/autotools
https://everything.curl.dev/build/cmake
There are two different build environments to cater to people's different opinions and tastes. 
The configure-based build is arguably the more mature and more encompassing build system and should probably be considered the default one.


On Windows:
On Windows there are at least four different ways to build. 
The above mentioned ways, the CMake approach and using configure with msys work, 
but the more popular and common methods are probably building with Microsoft's Visual Studio compiler using either nmake or project files. 
See the build on windows section.
https://everything.curl.dev/build/cmake
https://everything.curl.dev/build/autotools
https://everything.curl.dev/build/windows


==================================================https://curl.se/docs/manpage.html
==================================================https://curl.se/docs/tutorial.html
Find out how to use curl by reading the curl.1 man page or the MANUAL document.

HTTP代理和SOCKS代理是两种不同类型的代理服务器
协议支持：
HTTP代理： HTTP代理主要用于HTTP请求，它只能代理HTTP和HTTPS协议的流量。
SOCKS代理： SOCKS代理支持多种协议，包括HTTP、FTP、SMTP等，不限于特定的协议，因此它更加通用。
连接方式：
HTTP代理： HTTP代理在转发请求时会解析HTTP请求头，因此对HTTP协议有一定的了解，通常会修改请求头中的一些信息，比如Host字段。
SOCKS代理： SOCKS代理在转发数据时不解析数据内容，它只是简单地转发数据包，不对数据进行解析或修改。
认证支持：
HTTP代理： HTTP代理通常支持基本认证（Basic Authentication）或摘要认证（Digest Authentication），这样可以在连接时验证用户身份。
SOCKS代理： SOCKS代理也支持认证，但是它的认证方式更加简单，通常是用户名和密码的形式。
网络层支持：
HTTP代理： HTTP代理工作在应用层，只能代理HTTP请求，因此对于一些特殊的应用场景可能不适用。
SOCKS代理： SOCKS代理工作在传输层或会话层，它能够代理更多种类的流量，包括TCP和UDP等。

Proxy:
curl supports both HTTP and SOCKS proxy servers, with optional authentication.
You can also use both HTTP and SOCKS proxies to transfer files to and from FTP servers.

Get an ftp file using an HTTP proxy named my-proxy that uses port 888:
curl -x my-proxy:888 ftp://ftp.example.com/README
Get a file from an HTTP server that requires user and password, using the same proxy as above:
curl -u user:passwd -x my-proxy:888 http://www.example.com/

==================================================https://curl.se/libcurl/c/libcurl.html
libcurl is the library curl is using to do its job. It is readily available to be used by your software. Read the libcurl.3 man page to learn how.

==================================================https://curl.se/docs/install.html   #####Install from source#####
CMake 和 Make 是两种用于构建和管理软件项目的工具

Make:
Make 是一个构建工具，主要用于根据项目中的 Makefile 文件来编译源代码并生成可执行文件、库文件或者其他构建产物。
Makefile 文件通常包含了一系列的规则，指定了如何编译源代码、链接库、生成目标文件等操作。
Make 是一个传统的构建工具，在 Unix/Linux 环境中广泛使用。
CMake:
CMake 是一个跨平台的构建系统生成工具，它可以根据简单的 CMakeLists.txt 文件生成适用于不同构建系统（如 Make、Ninja、Visual Studio 等）的构建文件（如 Makefile、Ninja 构建文件、Visual Studio 项目文件等）。
CMakeLists.txt 文件描述了项目的目录结构和构建规则，以及依赖关系。
CMake 提供了更高级的功能，例如自动生成依赖关系、跨平台支持、模块化构建等。

主要的区别在于 Make 是一个特定的构建工具，而 CMake 是一个构建系统生成工具，它可以生成适用于不同构建系统的构建文件。
因此，CMake 更加灵活和跨平台，而 Make 更加专注于特定的构建任务。通常情况下，使用 CMake 可以更好地管理和构建复杂的软件项目。

how to install curl and libcurl
Find out how to install Curl by reading the INSTALL document.

==========Unix:
A normal Unix installation is made in three or four steps (after you have unpacked the source archive):

./configure --with-openssl [--with-gnutls --with-wolfssl]
make
make test (optional)
make install

(Adjust the configure line accordingly to use the TLS library you want.)

You probably need to be root when doing the last command.

Get a full listing of all available configure options by invoking it like:
./configure --help

If you want to install curl in a different file hierarchy than /usr/local, specify that when running configure:
./configure --prefix=/path/to/curl/tree

If you have write permission in that directory, you can do 'make install' without being root. An example of this would be to make a local install in your own home directory:
./configure --prefix=$HOME
make
make install

The configure script always tries to find a working SSL library unless explicitly told not to. 
If you have OpenSSL installed in the default search path for your compiler/linker, you do not need to do anything special. 
If you have OpenSSL installed in /usr/local/ssl, you can run configure like:
./configure --with-openssl

If you have OpenSSL installed somewhere else (for example, /opt/OpenSSL) and you have pkg-config installed, set the pkg-config path first, like this:
env PKG_CONFIG_PATH=/opt/OpenSSL/lib/pkgconfig ./configure --with-openssl

Without pkg-config installed, use this:
./configure --with-openssl=/opt/OpenSSL

If you insist on forcing a build without SSL support, you can run configure like this:
./configure --without-ssl

If you have OpenSSL installed, but with the libraries in one place and the header files somewhere else, 
you have to set the LDFLAGS and CPPFLAGS environment variables prior to running configure. Something like this should work:
CPPFLAGS="-I/path/to/ssl/include" LDFLAGS="-L/path/to/ssl/lib" ./configure

If you have shared SSL libs installed in a directory where your runtime linker does not find them (which usually causes configure failures), you can provide this option to gcc to set a hard-coded path to the runtime linker:
LDFLAGS=-Wl,-R/usr/local/ssl/lib ./configure --with-openssl

----------Static builds:
To force a static library compile, disable the shared library creation by running configure like:
./configure --disable-shared

The configure script is primarily done to work with shared/dynamic third party dependencies. 
When linking with shared libraries, the dependency "chain" is handled automatically by the library loader - on all modern systems.

If you instead link with a static library, you need to provide all the dependency libraries already at the link command line.

When using static dependencies, the build scripts will mostly assume that you, the user, 
will provide all the necessary additional dependency libraries as additional arguments in the build. With configure, by setting LIBS or LDFLAGS on the command line.

Building statically is not for the faint of heart.

----------Debug
If you are a curl developer and use gcc, you might want to enable more debug options with the --enable-debug option.

curl can be built to use a whole range of libraries to provide various useful services, and configure will try to auto-detect a decent default. 
If you want to alter it, you can select how to deal with each individual library.

----------Select TLS backend
These options are provided to select the TLS backend to use.

AmiSSL: --with-amissl
BearSSL: --with-bearssl
GnuTLS: --with-gnutls.
mbedTLS: --with-mbedtls
OpenSSL: --with-openssl (also for BoringSSL, AWS-LC, libressl, and quictls)
rustls: --with-rustls
Schannel: --with-schannel
Secure Transport: --with-secure-transport
wolfSSL: --with-wolfssl

You can build curl with multiple TLS backends at your choice, but some TLS backends cannot be combined: if you build with an OpenSSL fork (or wolfSSL), 
you cannot add another OpenSSL fork (or wolfSSL) simply because they have conflicting identical symbol names.

When you build with multiple TLS backends, you can select the active one at runtime when curl starts up.

----------configure finding libs in wrong directory
When the configure script checks for third-party libraries, it adds those directories to the LDFLAGS variable and then tries linking to see if it works. 
When successful, the found directory is kept in the LDFLAGS variable when the script continues to execute and do more tests and possibly check for more libraries.

This can make subsequent checks for libraries wrongly detect another installation in a directory that was previously added to LDFLAGS by another library check.


==========Apple Platforms (macOS, iOS, tvOS, watchOS, and their simulator counterparts):
CFLAGS 和 CPPFLAGS 是用于设置编译选项的环境变量，它们的作用如下:
CFLAGS:
CFLAGS 用于设置 C 编译器的编译选项。这些选项会传递给 C 编译器，用于控制编译过程中的行为，例如优化级别、警告级别、调试信息等。通常情况下，CFLAGS 包含了一系列的编译选项。
CPPFLAGS:
CPPFLAGS 用于设置 C/C++ 预处理器的选项。这些选项会传递给预处理器，用于控制预处理阶段的行为，例如包含文件的搜索路径、宏定义等。通常情况下，CPPFLAGS 包含了一系列的预处理器选项。

总的来说，CFLAGS 主要用于设置编译选项，而 CPPFLAGS 主要用于设置预处理器选项。在实际使用中，可以根据需要将需要的选项设置到对应的环境变量中，以控制编译过程的行为。

包含头文件：处理 #include 预处理指令，将指定的头文件内容插入到源文件中。
宏替换：对源代码中的宏进行替换，包括使用 #define 定义的宏以及编译器提供的预定义宏。
条件编译：根据 #ifdef、#ifndef、#if、#elif、#else 和 #endif 等预处理指令，进行条件编译，选择性地包含或排除某些代码块。
删除注释：删除源代码中的注释，包括单行注释 // 和多行注释 /* */。
去除空格：在预处理过程中会去除不必要的空格，包括空格、制表符和换行符。
展开宏定义：将源代码中使用的宏展开为其定义的内容。

On modern Apple operating systems, curl can be built to use Apple's SSL/TLS implementation, Secure Transport, instead of OpenSSL. 
To build with Secure Transport for SSL/TLS, use the configure option --with-secure-transport.

When Secure Transport is in use, the curl options --cacert and --capath and their libcurl equivalents, will be ignored, 
because Secure Transport uses the certificates stored in the Keychain to evaluate whether or not to trust the server.
This, of course, includes the root certificates that ship with the OS. 
The --cert and --engine options, and their libcurl equivalents, are currently unimplemented in curl with Secure Transport.

In general, a curl build for an Apple ARCH/SDK/DEPLOYMENT_TARGET combination can be taken by providing appropriate values for ARCH, SDK, DEPLOYMENT_TARGET below and running the commands:

# Set these three according to your needs
export ARCH=x86_64
export SDK=macosx
export DEPLOYMENT_TARGET=10.8

export CFLAGS="-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET"
./configure --host=$ARCH-apple-darwin --prefix $(pwd)/artifacts --with-secure-transport
make -j8
make install

Above will build curl for macOS platform with x86_64 architecture and 10.8 as deployment target.

Here is an example for iOS device:

export ARCH=arm64
export SDK=iphoneos
export DEPLOYMENT_TARGET=11.0

export CFLAGS="-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET"
./configure --host=$ARCH-apple-darwin --prefix $(pwd)/artifacts --with-secure-transport
make -j8
make install

Another example for watchOS simulator for macs with Apple Silicon:

export ARCH=arm64
export SDK=watchsimulator
export DEPLOYMENT_TARGET=5.0

export CFLAGS="-arch $ARCH -isysroot $(xcrun -sdk $SDK --show-sdk-path) -m$SDK-version-min=$DEPLOYMENT_TARGET"
./configure --host=$ARCH-apple-darwin --prefix $(pwd)/artifacts --with-secure-transport
make -j8
make install
In all above, the built libraries and executables can be found in the artifacts folder.


make -j8 是一个在使用 GNU Make 工具时常见的命令。它的含义是并行构建项目，其中 -j8 表示启动 8 个并行作业来执行构建任务。

具体地说:
-j 选项用于指定并行作业的数量。
8 是指定的并行作业数量，表示同时进行 8 个构建任务。
这个选项通常用于加快构建过程，特别是对于大型项目来说，可以利用多核处理器的性能并行构建，从而提高构建速度。

==================================================github curl-8_5_0:  /Users/youdun-ndl/Desktop/curl-curl-8_5_0/buildconf --help:
Do not use buildconf. Instead, just use: autoreconf -fi
Usage: /opt/homebrew/bin/autoreconf [OPTION]... [DIRECTORY]...

autoreconf -fi 是一个用于重新生成 GNU 自动化工具（Autotools）所需的配置脚本和相关文件的命令。
在使用 Autotools 构建的项目中，通常会包含一些自动生成的文件，比如 configure 脚本和 Makefile.in 文件等，这些文件是根据项目的 configure.ac 和 Makefile.am 等输入文件生成的。
具体来说:
-f 选项表示强制执行，即使文件已经存在也会重新生成。
-i 选项表示根据 configure.ac 和 Makefile.am 等输入文件重新生成自动化文件。
这个命令的作用是在 Autotools 项目的根目录中重新生成自动化文件

###
执行完autoreconf -fi
就会出现configure可执行文件
###

configure --help:
To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE

Some influential environment variables:
CC          C compiler command
CFLAGS      C compiler flags
LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
            nonstandard directory <lib dir>
LIBS        libraries to pass to the linker, e.g. -l<library>
CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
            you have headers in a nonstandard directory <include dir>
CPP         C preprocessor
LT_SYS_LIBRARY_PATH
            User-defined run-time library search path.

使用 Clang 编译器和指定的编译选项:
CC = clang
CFLAGS = -g -Wall
CC 变量指定了使用的 C 编译器，CFLAGS 变量指定了传递给编译器的选项。


==================================================Autotools
The Autotools are a collection of different tools that are used together to generate the configure script.
The configure script is run by the user who wants to build curl and it does a whole bunch of things:
1.It checks for features and functions present in your system.
2.It offers command-line options so that you as a builder can decide what to enable and disable in the build. 
Features and protocols, etc., can be toggled on/off, even compiler warning levels and more.
3.It offers command-line options to let the builder point to specific installation paths for various third-party dependencies that curl can be built to use.
4.It specifies on which file path the generated installation should be placed when ultimately the build is made and make install is invoked.

In the most basic usage, just running ./configure in the source directory is enough.
When the script completes, it outputs a summary of what options it has detected/enabled and what features that are still disabled, some of which possibly because it failed to detect the presence of necessary third-party dependencies that are needed for those functions to work.
If the summary is not what you expected it to be, invoke configure again with new options or with the previously used options adjusted.

After configure has completed, you invoke make to build the entire thing and then finally make install to install curl, libcurl and associated things. 
make install requires that you have the correct rights in your system to create and write files in the installation directory or you get an error displayed.


Cross-compiling:
Cross-compiling means that you build the source on one architecture but the output is created to be run on a different one. 
For example, you could build the source on a Linux machine but have the output work on a Windows machine.

For cross-compiling to work, you need a dedicated compiler and build system setup for the particular target system for which you want to build. 

Once you have a cross compiler, you can instruct configure to use that compiler instead of the native compiler when it builds curl so that the end result then can be moved over and used on the other machine.


Static linking:
By default, configure setups the build files so that the following 'make' command creates both shared and static versions of libcurl.
You can change that with the --disable-static or --disable-shared options to configure.

If you instead want to build with static versions of third party libraries instead of shared libraries, 
you need to prepare yourself for an uphill battle. 
curl's configure script is focused on setting up and building with shared libraries.

One of the differences between linking with a static library compared to linking with a shared one is in how shared libraries handle their own dependencies while static ones do not. 
In order to link with library xyz as a shared library, 
it is basically a matter of adding -lxyz to the linker command line no matter which other libraries xyz itself was built to use. 
But, if that xyz is instead a static library we also need to specify each dependency of xyz on the linker command line. 
curl's configure cannot keep up with or know all possible dependencies for all the libraries it can be made to build with, 
so users wanting to build with static libs mostly need to provide that list of libraries to link with.


Select TLS backend:
The configure-based build offers the user to select from a wide variety of different TLS libraries when building. 
You select them by using the correct command line options. 
Before curl 7.77.0, the configure script would automatically check for OpenSSL, but modern versions do not.
mbedTLS: --with-mbedtls
OpenSSL: --with-openssl
Secure Transport: --with-secure-transport

If you do not specify which TLS library to use, the configure script fails. 
If you want to build without TLS support, you must explicitly ask for that with --without-ssl.
These --with-* options also allow you to provide the install prefix so that configure searches for the specific library where you tell it to. Like this:
./configure --with-gnutls=/home/user/custom-gnutls
You can opt to build with support for multiple TLS libraries by specifying multiple --with-* options on the configure command line. 
Pick which one to make the default TLS backend with --with-default-ssl-backend=[NAME].
For example, build with support for both GnuTLS and OpenSSL and default to OpenSSL:
./configure --with-openssl --with-gnutls \
  --with-default-ssl-backend=openssl


Select SSH backend:
The configure-based build offers the user to select from a variety of different SSH libraries when building. You select them by using the correct command-line options.
libssh2: --with-libssh2
libssh: --with-libssh
wolfSSH: --with-wolfssh

./configure --with-libssh2=/home/user/custom-libssh2


Select HTTP/3 backend:
The configure-based build offers the user to select different HTTP/3 libraries when building. You select them by using the correct command-line options.
quiche: --with-quiche
ngtcp2: --with-ngtcp2 --with-nghttp3
msh3: --with-msh3


==================================================CMake
CMake is an alternative build method that works on most modern platforms, including Windows. 
Using this method you first need to have cmake installed on your build machine, invoke cmake to generate the build files and then build.
With cmake's -G flag, you select which build system to generate files for.
See cmake --help for the list of "generators" your cmake installation supports.

On the cmake command line, the first argument specifies where to find the cmake source files, which is . (a single dot) if in the same directory.

To build on Linux using plain make with CMakeLists.txt in the same directory, you can do:
cmake -G "Unix Makefiles" .
make
Or rely on the fact that unix makefiles are the default there:
cmake .
make

To create a subdirectory for the build and run make in there:
mkdir build
cd build
cmake ..
make

==================================================TLS libraries
To make curl support TLS based protocols, such as HTTPS, FTPS, SMTPS, POP3S, IMAPS and more, 
you need to build with a third-party TLS library since curl does not implement the TLS protocol itself.

curl is written to work with a large number of TLS libraries:

AmiSSL
AWS-LC
BearSSL
BoringSSL
GnuTLS
libressl
mbedTLS
OpenSSL
rustls
Schannel (native Windows)
Secure Transport (native macOS)
WolfSSL

When you build curl and libcurl to use one of these libraries, 
it is important that you have the library and its include headers installed on your build machine.


configure:
The configure script does not select any TLS library by default. 
You must select one, or instruct configure that you want to build without TLS support using --without-ssl.


mbedTLS:
./configure --with-mbedtls
configure detects mbedTLS in its default path by default. 
You can optionally point configure to a custom install path prefix where it can find mbedTLS:
./configure --with-mbedtls=/home/user/installed/mbedtls