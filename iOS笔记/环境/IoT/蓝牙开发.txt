https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1


==================================================Core Bluetooth Overview

The Core Bluetooth framework lets your iOS and Mac apps communicate with Bluetooth low energy devices.
For example, your app can discover, explore, and interact with low energy peripheral devices, such as heart rate monitors and digital thermostats. 
As of macOS 10.9 and iOS 6, Mac and iOS devices can also function as Bluetooth low energy peripherals, serving data to other devices, including other Mac and iOS devices.

Bluetooth low energy wireless technology is based on the Bluetooth 4.0 specification, 
which, among other things, defines a set of protocols for communicating between low energy devices. 
The Core Bluetooth framework is an abstraction of the Bluetooth low energy protocol stack.
Because the framework is based on the specification, some concepts and terminology from the specification have been adopted.

Important: An iOS app linked on or after iOS 10.0 must include in its Info.plist file the usage description keys for the types of data it needs to access or it will crash. 
To access Bluetooth peripheral data specifically, it must include NSBluetoothPeripheralUsageDescription.


==================================================Central and Peripheral Devices and Their Roles in Bluetooth Communication:
There are two major players involved in all Bluetooth low energy communication: the central and the peripheral.
###
Based on a somewhat traditional client-server architecture, a peripheral typically has data that is needed by other devices.
###
A central typically uses the information served up by peripherals to accomplish some particular task.
for example, a heart rate monitor may have useful information that your Mac or iOS app may need in order to display the user’s heart rate in a user-friendly way.


Centrals Discover and Connect to Peripherals That Are Advertising:
Peripherals broadcast some of the data they have in the form of advertising packets. 
An advertising packet is a relatively small bundle of data that may contain useful information about what a peripheral has to offer, 
such as the peripheral’s name and primary functionality. 
For instance, a digital thermostat may advertise that it provides the current temperature of a room. 
In Bluetooth low energy, advertising is the primary way that peripherals make their presence known.

A central, on the other hand, can scan and listen for any peripheral device that is advertising information that it’s interested in, 
A central can ask to connect to any peripheral that it has discovered advertising.


How the Data of a Peripheral Is Structured:
The purpose of connecting to a peripheral is to begin exploring and interacting with the data it has to offer. 
Before you can do this, however, it helps to understand how the data of a peripheral is structured.

Peripherals may contain one or more services or provide useful information about their connected signal strength. 
A service is a collection of data and associated behaviors for accomplishing a function or feature of a device (or portions of that device). 
For example, one service of a heart rate monitor may be to expose heart rate data from the monitor’s heart rate sensor.

Services themselves are made up of either characteristics or included services (that is, references to other services). 
A characteristic provides further details about a peripheral’s service. 
For example, the heart rate service just described may contain one characteristic that describes the intended body location of the device’s heart rate sensor and another characteristic that transmits heart rate measurement data. Figure 1-3 illustrates one possible structure of a heart rate monitor’s service and characteristics.


Centrals Explore and Interact with the Data on a Peripheral:
After a central has successfully established a connection to a peripheral, it can discover the full range of services and characteristics the peripheral has to offer (advertising data might contain only a fraction of the available services).

A central can also interact with a peripheral’s service by reading or writing the value of that service’s characteristic. 
For example, your app may request the current room temperature from a digital thermostat, or it may provide the thermostat with a value at which to set the room’s temperature.


==================================================How Centrals, Peripherals, and Peripheral Data Are Represented:





==================================================

MFI ======= make for ipad ,iphone, itouch 专们为苹果设备制作的设备
BLE ==== buletouch low energy，蓝牙4.0设备因为低耗电，所以也叫做BLE
peripheral,central === 外设和中心,发起连接的时central，被连接的设备为perilheral
service and characteristic === 服务和特征 每个设备会提供服务和特征，类似于服务端的api，但是机构不同。每个外设会有很多服务，每个服务中包含很多字段，这些字段的权限一般分为 读read，写write，通知notiy几种，就是我们连接设备后具体需要操作的内容。
Description === 每个characteristic可以对应一个或多个Description用户描述characteristic的信息或属性

MFI === 开发使用ExternalAccessory 框架
4.0 BLE === 开发使用CoreBluetooth 框架

