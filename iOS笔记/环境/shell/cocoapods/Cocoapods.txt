#####
https://www.zhihu.com/column/c_1254403935512834048
#####

DSL: Domain Specific Language 领域特定语言

（国内Ruby镜像）
gem source -a https://gems.ruby-china.com

sudo gem install -n /usr/local/bin cocoapods



[!] CDN: trunk - Cannot perform full-text search because Algolia returned an error: 0: Cannot reach any host: execution expired, execution expired, execution expired, execution expired
可以用终端执行命令 pod repo remove trunk 恢复正常


pod setup   //这条命令是将Github上的开源库都托管都安装Podspec索引安装到到本地
跳过pod setup快速安装:
在网络不允许的情况下，执行pod setup这一步, 感觉很慢
pod setup 这条命令是将Github上的开源库都托管都安装Podspec索引安装到到本地. 简单说就是下载一个包,到本地,也就是Specs这个东西
如果你同事电脑上有安装好,你其实可以从你同事电脑上拷贝过来,直接放到该路径就OK了.
也可以访问这个链接
https://github.com/CocoaPods/Specs (github所有的第三方开源库的Podspec文件都托管在这里,这也是你pod setup所要下载的).
Specs-master改名为master 放在 ~/.cocoapods/repos 路径即可.
~/.cocoapods/repos 这个路径是在执行 pod setup生成的,所以电脑无法前往此路径是,建议先pod setup下,然后关闭掉即可生成路径.

==================================================更新到指定版本，更新也使用gem install cocoapods
sudo gem install cocoapods -v 1.12.0

==================================================CocoaPods Packager
https://zhuanlan.zhihu.com/p/125702468

作为 CococaPods 的官方插件之一，CocoaPods Packager 为 Pod 提供了 package 命令来生成 framework or static library。
你可以仅凭一个 podspec 文件就能完成一个 framework 或 library 的生成。

包管理，不得不提 RubyGems 和 Bundler。CocoaPods 背后的原型就是基于它们俩.

RubyGems 是为 ruby library 提供集中代码托管的服务。Bundler 则是针对当前项目来管理 Gem 版本的工具.


Bundler 依据项目中的 Gemfiles 文件来管理 Gem，就好比 CocoaPods 通过 Podfile 来管理 Pod 的版本一样。Gemfile 长这样：
source 'https://gems.example.com' do
  gem 'cocoapods', '1.8.4'
  gem 'another_gem', :git => 'https://looseyi.github.io.git', :branch => 'master'
end

Podfile 的 DSL 和 Gemfile 如出一辙。


那什么情况会用到 Gemfile 呢？
比如，公司级项目中可以通过 gemfile 来统一 CocoaPods 的版本，不然大家各自为政会导致提交代码会因为 CocoaPods 版本不同导致对项目的配置产生各种差异
当然还可以管理 CocoaPods 的插件版本，可以指向你自己的定制版本。


Bundle 的使用也很简单，在 gem install bundler 后，通过添加 bundle exec 前缀来执行 pod 命令。
这时会读取安装在本地 .bundle/ 目录或全局目录下所指定的 Gem 包来执行 pod 命令。
bundle install #安装 gemfile 中的包
bundle exec pod install

Gem
The software package is called a “gem” which contains a packaged Ruby application or library.

Gem 则是包含 Ruby 代码的 application 或者 library
CocoaPods Plugin 本质上就是 Gem

看一眼 Gem 的文件结构：
tree CocoaPods -L 2
CocoaPods
├── Rakefile
├── cocoapods.gemspec
├── bin
│   ├── pod
│   └── sandbox-pod
├── lib
│   ├── cocoapods
│   ├── ...
└── spec
│   ├── cocoapods-integration-specs
│   ...

bin：可执行文件目录，当 gem install 的时候，会被加载到用户的 PATH 路径下；
lib：gem 的源代码目录；
spec：gem 的测试代码目录；
Rakefile：是自动化测试程序 rake 的配置文件，也可用于生成代码或者其他任务；
gemspec：描述了 gem 的关键信息


GemSpec
The gemspec specifies the information about a gem such as its name, version, description, authors and homepage.

既然 CocoaPods 也是 Gem，它的 GemSpec 包含哪些信息呢：
Gem::Specification.new do |s|
  s.name     = "cocoapods"
  s.version  = Pod::VERSION
  s.files = Dir["lib/**/*.rb"] + %w{ bin/pod bin/sandbox-pod README.md LICENSE CHANGELOG.md }
  s.executables   = %w{ pod sandbox-pod }
  s.require_paths = %w{ lib }
  s.add_runtime_dependency 'cocoapods-core',        "= #{Pod::VERSION}"
  s.add_runtime_dependency 'claide',                '>= 1.0.2', '< 2.0'
  s.add_runtime_dependency 'xcodeproj',             '>= 1.14.0', '< 2.0'
  ...
end

如果你有搞过 Pod library 的话。PodSpec 类比 Gemspec

CocoaPods Plugins:
作为 CocoaPods 的 Plugin，CocoaPods 为我们提供了方便生成 plugin 模版的命令。

pod plugins create NAME [TEMPLATE_URL]
生成 plugin 模版的文件目录与 gem 相差无几，这里直接贴 cocoapods-packager 的文件目录：

cocoapods-packager
├── Gemfile
├── Rakefile
├── cocoapods-packager.gemspec
├── lib
│   ├── cocoapods-packager
│   ├── cocoapods_packager.rb
│   ├── cocoapods_plugin.rb
│   └── pod
└── spec
    ├── command
    ├── fixtures
    ├── integration
    ├── spec_helper.rb
    └── unit
...


Package:
基于 Packager 内部提供的测试 spec 来做示例，启动命令如下：
bundle exec pod package ${workspaceRoot}/cocoapods-packager/spec/fixtures/KFData.podspec --dynamic

Package 类：
module Pod
    class Command
      class Package < Command
         # functions ...
    end
end
Package Command 继承自 CocoaPods 内部所提供的命令工具模块 CLAide::Command。所有扩展 Pod 的命令都需要继承它，同时需要重载它的 options、validate、initialize 和 run 四个方法。


==================================================版本管理工具及 Ruby 工具链环境
https://zhuanlan.zhihu.com/p/147537112

######Version Control System (VCS)######
版本控制系统是敏捷开发的重要一环，为后续的持续集成提供了保障。
Source Code Manager (SCM) 源码管理就属于 VCS 的范围之中，熟知的工具有如 Git 。

Package Manger (PM)也可以看作是 SCM 的一种

Git 或 SVN 是针对项目的单个文件的进行版本控制，而 PM 则是以每个独立的 Package 作为最小的管理单元。
包管理工具都是结合 SCM 来完成管理工作，对于被 PM 接管的依赖库的文件，通常会在 Git 的 .ignore 文件中选择忽略它们。

在 Node 项目中一般会把 node_modules 目录下的文件 ignore 掉，在 iOS / macOS 项目则是 Pods。

Git Submodule:
Git submodules allow you to keep a git repository as a subdirectory of another git repository. 
Git submodules are simply a reference to another repository at a particular snapshot in time. 
Git submodules enable a Git repository to incorporate and track version history of external code.

https://www.bootcss.com/p/git-guide/

submodule项目和父项目本质上是两个独立的git仓库，只是父项目存储了它依赖的submodule项目的版本号信息。
添加子模块:
git submodule add <url> <path>
url为子模块的路径，path为该子模块存储的目录路径。
执行成功后，git status会看到项目中修改了.gitmodules

克隆含有子模块的项目：
当一个git项目包含子模块时，直接克隆下来的子模块目录里面是空的。
要克隆子模块需要执行下面的步骤：
1、初始化本地子模块配置文件
git submodule init
2、更新项目，抓取子模块内容
// 更新项目内子模块到最新版
git submodule update
// 更新子模块为远程项目的最新版本
git submodule update --remote
不过还有更简单一点的方式。 如果给 git clone 命令传递 --recurse-submodules 选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。
如果你已经克隆了项目但忘记了 --recurse-submodules，那么可以运行 git submodule update --init 将 git submodule init 和 git submodule update 合并成一步。

git submodule类似于引用，父仓库引用了子仓库，两者的更新是独立的；

Git Submodules 可以算是 PM 的“青春版”，它将单独的 git 仓库以子目录的形式嵌入在工作目录中。
它不具备 PM 工具所特有的语义化版本[2]管理、无法处理依赖共享与冲突等。

Git submodule 是依赖 .gitmodules 文件来记录子模块的。
[submodule "ReactNative"]
 path = ReactNative
 url = https://github.com/facebook/ReactNative.git


.gitmodules 仅记录了 path 和 url 以及模块名称的基本信息， 但是我们还需要记录每个 Submodule Repo 的 commit 信息，而这 commit 信息是记录在 .git/modules 目录下。
同时被添加到 .gitmodules 中的 path 也会被 git 直接 ignore 掉。

Package Manger:
PM 基本都具备了语义化的版本检查能力，依赖递归查找，依赖冲突解决，以及针对具体依赖的构建能力和二进制包等。

| **Key File** | **Git submodule** | **CocoaPods** | **SPM**          | **npm**           |
| ------------ | ----------------- | ------------- | ---------------- | ----------------- |
| **描述文件** | .gitmodules       | Podfile       | Package.swift    | Package.json      |
| **锁存文件** | .git/modules      | Podfile.lock  | Package.resolved | package-lock.json 

PM 工具基本围绕这个两个文件来现实包管理：
描述文件：声明了项目中存在哪些依赖，版本限制；
锁存文件（Lock 文件）：记录了依赖包最后一次更新时的全版本列表。

除了这两个文件之外，中心化的 PM 一般会提供依赖包的托管服务.比如 npm 提供的 http://npmjs.com[3] 可以集中查找和下载 npm 包。
如果是去中心化的 PM 比如 iOS 的 Carthage 和 SPM 就只能通过 Git 仓库的地址了。

CocoaPods:
CocoaPods 是开发 iOS/macOS 应用程序的一个第三方库的依赖管理工具。 
利用 CocoaPods，可以定义自己的依赖关系（简称 Pods），以及在整个开发环境中对第三方库的版本管理非常方便。

Podfile
Podfile 是一个文件，以 DSL（其实直接用了 Ruby 的语法）来描述依赖关系，用于定义项目所需要使用的第三方库。该文件支持高度定制，你可以根据个人喜好对其做出定制。

Podfile.lock
这是 CocoaPods 创建的最重要的文件之一。它记录了需要被安装的 Pod 的每个已安装的版本。如果你想知道已安装的 Pod 是哪个版本，可以查看这个文件。推荐将 Podfile.lock 文件加入到版本控制中，这有助于整个团队的一致性。

Manifest.lock
这是每次运行 pod install 命令时创建的 Podfile.lock 文件的副本。如果你遇见过这样的错误 沙盒文件与 Podfile.lock 文件不同步 (The sandbox is not in sync with the Podfile.lock)，这是因为 Manifest.lock 文件和 Podfile.lock 文件不一致所引起。

Master Specs Repo
作为包管理工具，CocoaPods 的目标是为我们提供一个更加集中的生态系统，来提高依赖库的可发现性和参与度。本质上是为了提供更好的检索和查询功能，可惜成为了它的问题之一。
因为 CocoaPods 通过官方的 Spec 仓库来管理这些注册的依赖库。随着不断新增的依赖库导致 Spec 的更新和维护成为了使用者的包袱。
好在这个问题在 1.7.2 版本中已经解决了，CocoaPods 提供了 Mater Repo CDN ，可以直接 CDN 到对应的 Pod 地址而无需在通过本地的 Spec 仓库了。
同时在 1.8 版本中，官方默认的 Spec 仓库已替换为 CDN，其地址为 https://cdn.cocoapods.org
https://blog.cocoapods.org/CocoaPods-1.7.2/

######Ruby 生态及工具链######
其实 CocoaPods 的思想借鉴了其他语言的 PM 工具，例：`RubyGems`, `Bundler`

我们知道 CocoaPods 是通过 Ruby 语言实现的。它本身就是一个 Gem 包。
理解了 Ruby 的依赖管理有助于我们更好的管理不同版本的 CocoaPods 和其他 Gem。同时能够保证团队中的所有同事的工具是在同一个版本，这也算是敏捷开发的保证吧。

RVM & rbenv
都是管理多个 Ruby 环境的工具，它们都能提供不同版本的 Ruby 环境管理和切换。

RubyGems
The RubyGems software allows you to easily download, install, and use ruby software packages on your system. 
The software package is called a “gem” which contains a packaged Ruby application or library.
RubyGems 是 Ruby 的一个包管理工具，这里面管理着用 Ruby 编写的工具或依赖我们称之为 Gem。
并且 RubyGems 还提供了 Ruby 组件的托管服务，可以集中式的查找和安装 library 和 apps。当我们使用 gem install xxx 时，会通过 rubygems.org 来查询对应的 Gem Package。
而 iOS 日常中的很多工具都是 Gem 提供的，例：Bundler，fastlane，jazzy，CocoaPods 等。

在默认情况下 Gems 总是下载 library 的最新版本，这无法确保所安装的 library 版本符合我们预期。因此我们还缺一个工具。
Bundler:
Bundler 是管理 Gem 依赖的工具，可以隔离不同项目中 Gem 的版本和依赖环境的差异，也是一个 Gem。

Bundler 通过读取项目中的依赖描述文件 Gemfile ，来确定各个 Gems 的版本号或者范围，来提供了稳定的应用环境。
当我们使用 bundle install 它会生成 Gemfile.lock 将当前 librarys 使用的具体版本号写入其中。
之后，他人再通过 bundle install 来安装 libaray 时则会读取 Gemfile.lock 中的 librarys、版本信息等。

bundle show GEM [OPTIONS]      # Shows all gems that are part of the bundle...

Gemfile
可以说 CocoaPods 其实是 iOS 版的 RubyGems + Bundler 组合。
Bundler 依据项目中的 Gemfile 文件来管理 Gem，而 CocoaPods 通过 Podfile 来管理 Pod。

Gemfile 配置如下：
source 'https://gems.example.com' do
  gem 'cocoapods', '1.8.4'是管理 Gem 依赖的工具
  gem 'another_gem', :git => 'https://looseyi.github.io.git', :branch => 'master'
end
Podfile 的 DSL 写法和 Gemfile 如出一辙

CocoaPods 每年都会有一些重大版本的升级，前面聊到过 CocoaPods 在 install 过程中会对项目的 .xcodeproj 文件进行修改，不同版本其有所不同，这些在变更都可能导致大量 conflicts，处理不好，项目就不能正常运行了。

安装一套可管控的 Ruby 工具链？
我们可以使用 homebrew + rbenv + RubyGems + Bundler 这一整套工具链来控制一个工程中 Ruby 工具的版本依赖。

1. 使用 homebrew 安装 rbenv
$ brew install rbenv

2. 使用 rbenv 管理 Ruby 版本
使用 rbenv 来安装一个 Ruby 版本，这里我使用刚刚 release Ruby 2.7：
$ rbenv install 2.7.0
安装成功后，我们让其在本地环境中生效：
$ rbenv shell 2.7.0
输入上述命令后，可能会有报错。 rbenv 提示我们在 .zshrc 中增加一行 eval "$(rbenv init -)" 语句来对 rbenv 环境进行初始化。如果报错，我们增加并重启终端即可。
$ ruby --version
ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-darwin19]
$ which ruby
/Users/gua/.rbenv/shims/ruby
切换之后我们发现 Ruby 已经切换到 rbenv 的管理版本，并且其启动 PATH 也已经变成 rbenv 管理下的 Ruby。并且我们可以看一下 Ruby 捆绑的 Gem 的 PATH ：
$ which gem
/Users/bytedance/.rbenv/shims/gem
对应的 Gem 也已经变成 rbenv 中的 PATH 。

3. 查询系统级 Gem 依赖
我们使用 rbenv 已经对 Ruby 及其 Gem 环境在版本上进行了环境隔离。
我们可以通过 gem list 命令来查询当前系统环境下所有的 Gem 依赖：
gem list

查询项目的 Gem 依赖
bundle exec gem list
活着查看Gemfile.lock

######
使用 Bundler 管理工程中的 Gem 环境
######
使用 Bundler 来锁定项目中的 Gem 环境，从而让整个团队统一 Gem 环境中的所有 Ruby 工具版本。从而避免文件冲突和不必要的错误。
我们可以在项目中增加一个 Gemfile 描述，从而锁定当前项目中的 Gem 依赖环境。

1. 在 iOS 工程中初始化 Bundler 环境
首先我们有一个 iOS Demo 工程 

初始化一个 Bundler 环境（其实就是自动创建一个 Gemfile 文件）
bundle init

2. 在 Gemfile 中声明使用的 CocoaPods 版本并安装
之后我们编辑一下这个 Gemfile 文件，加入我们当前环境中需要使用 CocoaPods 1.8.4 这个版本，则使用 Gemfile 的 DSL 编写以下内容：

# frozen_string_literal: true

source "https://rubygems.org"

git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }

# gem "rails"
gem "cocoapods", "1.8.4"

编写之后执行一下 bundle install

3. 使用当前环境下的 CocoaPods 版本操作 iOS 工程
此时我们可以检查一下当前 Bundler 环境下的 Gem 列表：
$ bundle exec gem list
发现相比于全局 Gem 列表，这个列表精简了许多，并且也只是基础 Gem 依赖和 CocoaPods 的 Gem 依赖。
此时我们使用 bundle exec pod install 来执行 Install 这个操作

而当我们不使用 bundle exec 执行前缀，则会使用系统环境中的 CocoaPods 版本
如此我们也就验证了工程中的 Gem 环境和系统中的环境可以通过 Bundler 进行隔离。


==================================================Podfile 的解析逻辑
cocoapods-core（以下简称 Core） 的两大概念：
Podfile
另外一个则是 Podspec (用于描述 Pod Library 的配置文件)，只有当你需要开发 Pod 组件的时候才会接触。


Xcode 工程结构:
target 'Demo' do
  pod 'Alamofire', :path => './Alamofire'
end
作为包管理工具 CocoaPods 将所管理的 Pods 依赖库组装成一个个 Target，统一放入 Pods.project 中
之后将 Demo.project 主工程和 Pods.project 工程一起打包到新建的 Demo.workspace，配好主工程与 Pods 工程之间的依赖，完成最终转换。

Target - 最小可编译单元:
A target specifies a product to build and contains the instructions for building the product from a set of files in a project or workspace.
首先是 Target，它作为工程中最小的可编译单元，根据 Build Phases 和 Build Settings 将源码作为输入，经编译后输出结果产物。 其输出结果可以是链接库、可执行文件或者资源包等
具体细节如下：
Build Setting：比如指定使用的编译器，目标平台、编译参数、头文件搜索路径等；
Build 时的前置依赖、执行的脚本文件；
Build 生成目标的签名、Capabilities 等属性；
Input：哪些源码或者资源文件会被编译打包；
Output：哪些静态库、动态库会被链接；

Project - Targets 的载体:
An Xcode project is a repository for all the files, resources, and information required to build one or more software products.
Project 就是一个独立的 Xcode 工程，作为一个或多个 Targets 的资源管理器，本身无法被编译。 Project 所管理的资源都来自它所包含的 Targets。特点如下：
至少包含一个或多个可编译的 Target；
为所包含的 Targets 定义了一份默认编译选项，如果 Target 有自己的配置，则会覆盖 Project 的预设值；
能将其他 Project 作为依赖嵌入其中；

Workspace - 容器:
A workspace is an Xcode document that groups projects
作为纯粹的项目容器，Workspace 不参与任何编译链接过程，仅用于管理同层级的 Project，其特点：
Workspace 可以包含多个 Projects；
同一个 Workspace 中的 Proejct 文件对于其他 Project 是默认可见的，这些 Projcts 会共享 workspace build directory ；
一个 Xcode Project 可以被包含在多个不同的 Workspace 中，因为每个 Project 都有独立的 Identity，默认是 Project Name；

Scheme - 描述 Build 过程:
An Xcode scheme defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute.
Scheme 是对于整个 Build 过程的一个抽象，它描述了 Xcode 应该使用哪种 Build Configurations 、执行什么任务、环境参数等来构建我们所需的 Target。
Scheme 中预设了六个主要过程： Build、Run、Test、Profile、Analyze、Archive。包括了我们对 Target 的所有操作，每一个过程都可以单独配置。

CocoaPods-Core:
The CocoaPods-Core gem provides support to work with the models of CocoaPods, for example the Podspecs or the Podfile.
CocoaPods-Core 用于 CocoaPods 中配置文件的解析，包括 Podfile、Podspec 以及解析后的依赖锁存文件，如 Podfile.lock 等。

CocoaPods 正是巧妙利用了 Xcode 工程结构的特点，引入 Pods.project 这一中间层，将主工程的 Pods 依赖全部转接到 Pods.project 上，
最后再将 Pods.project 作为主项目的依赖。尽管这么做也受到了一些质疑和诟病（所谓的侵入性太强）

Podfile 内容加载
Podfile 文件类型
你可以在 CocoaPods 的 /lib/cocoapods/config.rb 找到 Podfile 所支持的文件类型：

PODFILE_NAMES = [
   'CocoaPods.podfile.yaml',
   'CocoaPods.podfile',
   'Podfile',
   'Podfile.rb',
].freeze

YAML 是 YAML Ain't Markup Language 的缩写，其 官方定义：
YAML is a human friendly data serialization standard for all programming languages.
它是一种面向工程师友好的序列化语言。我们的 Lockfile 文件就是以 YAML 格式写入 Podfile.lock 中的。

Podfile Syntax Reference
https://guides.cocoapods.org/syntax/podfile.html#pod

Target 嵌套:
假设在我们的主工程同时维护了三个项目，它们都依赖了 Alamofire，通过俄罗斯套娃就能轻松满足条件：
target 'Demo1' do
  pod 'Alamofire'

  target 'Demo2' do
    target 'Demo3' do
    end
  end
end
CocoaPods 在 Pods.project 中为每个在 Podfile 中声明的 Target 生成一个与之对应的专属 Target 来集成它的 Pod 依赖。
对于有依赖关系的 Target 其生成的专属 Target 名称则会按照依赖关系叠加来命名，如 target Demo3 的专属 Target 名称为 Pods-Demo1-Demo2-Demo3。安装完成后主项目将会引入该专属 Target 来完成依赖关联

关于 Target 嵌套，一个父节点是可以有多个子节点的：
target 'Demo1' do
  pod 'Alamofire'

  target 'Demo2' do
    pod 'RxSwift'
  end
  target 'Demo3' do
   pod 'SwiftyJSON'
  end
end
Abstract Target:
上面例子中，由于 Demo1 与 Demo2 都需要依赖 Alamofire，我们通过 Target 嵌套让 Demo2 来继承 Demo1 的 Pods 库依赖。
这么做可能会有一个限制，就是当 Demo1 的 Pod 依赖并非 Demo2 所需要的时候，就会有依赖冗余。此时就需要 Abstract Target 登场了。例如：
abstract_target 'Networking' do
  pod 'Alamofire'

  target 'Demo1' do
    pod 'RxSwift'
  end
  target 'Demo2' do
    pod 'ReactCocoa'
  end
  target 'Demo3' do
  end
end
将网络请求的 pod 依赖抽象到 Networking target 中，这样就能避免 Demo2 对 RxSwift 的依赖。
这种方式配置所生成的 Pods.project 并不会存在名称为 Networking 的 Target

Podfile 文件是如何解析与加载，并最终 "入侵" 项目影响其工程结构的。
==================================================PodSpec 文件分析
一个 Pod 的创建和发布离不开 .podspec 文件

Podspec 是用于 描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework 的文件 ，而 Podspec 中的这些描述内容最终将映会映射到 Specification 类中（以下简称 Spec）。

Podspec 支持的文件格式为 .podspec 和 .json 两种，而 .podspec 本质是 Ruby 文件。
为什么是 JSON 格式而不像 Podfile 一样支持 YAML 呢？
由于 Podspec 文件会满世界跑，它可能存在于 CocoaPods 的 CDN Service、Speces Repo 或者你们的私有 Specs Repo 上，因此采用 JSON 的文件在网络传输中会更友好。
而 Podfile 更多的场景是用于序列化，它需要在项目中生成一份经依赖仲裁后的 Podfile 快照，用于后续的对比。

Podspec
Pod::Spec.new do |spec|
  spec.name         = 'Reachability'
  spec.version      = '3.1.0'
  spec.license      = { :type => 'BSD' }
  spec.homepage     = 'https://github.com/tonymillion/Reachability'
  spec.authors      = { 'Tony Million' => 'tonymillion@gmail.com' }
  spec.summary      = 'ARC and GCD Compatible Reachability Class for iOS and OS X.'
  spec.source       = { :git => 'https://github.com/tonymillion/Reachability.git', :tag => "v#{spec.version}" }
  spec.source_files = 'Reachability.{h,m}'
  spec.framework    = 'SystemConfiguration'
end

下面是进阶版配置：
Pod::Spec.new do |spec|
  spec.name         = 'Reachability'
  # 省略与前面相同部分的配置 ...
  
  spec.module_name   = 'Rich'
  spec.swift_version = '4.0'

  spec.ios.deployment_target  = '9.0'
  spec.osx.deployment_target  = '10.10'

  spec.source_files       = 'Reachability/common/*.swift'
  spec.ios.source_files   = 'Reachability/ios/*.swift', 'Reachability/extensions/*.swift'
  spec.osx.source_files   = 'Reachability/osx/*.swift'

  spec.framework      = 'SystemConfiguration'
  spec.ios.framework  = 'UIKit'
  spec.osx.framework  = 'AppKit'

  spec.dependency 'SomeOtherPod'
end

Podspec:
Specification
https://guides.cocoapods.org/syntax/podspec.html


Subspecs:
Pod::Spec.new do |s|
  s.name             = "QMUIKit"
  s.version          = "4.2.1"
  # ...
  s.subspec 'QMUICore' do |ss|
    ss.source_files = 'QMUIKit/QMUIKit.h', 'QMUIKit/QMUICore', 'QMUIKit/UIKitExtensions'
    ss.dependency 'QMUIKit/QMUIWeakObjectContainer'
    ss.dependency 'QMUIKit/QMUILog'
  end

  s.subspec 'QMUIWeakObjectContainer' do |ss|
    ss.source_files = 'QMUIKit/QMUIComponents/QMUIWeakObjectContainer.{h,m}'
  end

  s.subspec 'QMUILog' do |ss|
    ss.source_files = 'QMUIKit/QMUIComponents/QMUILog/*.{h,m}'
  end

  s.subspec 'QMUIComponents' do |ss|
    ss.dependency 'QMUIKit/QMUICore'
     
    ss.subspec 'QMUIButton' do |sss|
      sss.source_files = 'QMUIKit/QMUIComponents/QMUIButton/QMUIButton.{h,m}'
    end
    # 此处省略 59 个 Components
  end
  # ...
end

创建并使用你的 Pod:
https://guides.cocoapods.org/making/using-pod-lib-create.html
1. 创建 Pod
仅需一行命令完成 Pod 创建
$ pod lib create `NAME`

之后每一步都会输出友好提示，按照提示选择即可。在添加完 source code 和 dependency 之后，你还可以在 CocoaPods 为你提供的 Example 项目中运行和调试代码。

准备就绪后，可以通过以下命令进行校验，检查 Pod 正确性：
$ pod lib lint `[Podspec_PATHS ...]`

2. 发布 Pod
校验通过后就可以将 Pod 发布了，你可以将 PodSepc 发布到 Master Repo 上，或者发布到内部的 Spec Repo 上。

CocoaPods Master Repo
如果发布的 CocoaPods 的主仓库，那么需要通过 CocoaPods 提供的 Trunk 命令：
$ pod trunk push `[NAME.podspec]`
不过使用前需要先通过邮箱注册
https://guides.cocoapods.org/making/getting-setup-with-trunk.html

Private Spec Repo
对于发布到私有仓库的，可通过 CocoaPods 提供的 Repo 命令：
$ pod repo push `REPO_NAME` `SPEC_NAME.podspec`
https://guides.cocoapods.org/making/private-cocoapods.html


SubSpecs In Podfile:
在 CocoaPods 中 SubSpec 是被作为单独的依赖来看待的
