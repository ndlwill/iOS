用来查看可执行文件的mach-o信息.

终端输入otool,查看可命令的使用方式

-l print the load commands
-L print shared libraries used

查看App所使用的动态库
otool -L Mach-O文件路径

查看ipa是否已经砸壳
otool -l Mach-O文件路径 | grep crypt
cryptid为 0 则已经砸壳，为 1 未砸壳
$ otool -l /Users/demo/Desktop/demo | grep crypt 
cryptoff 16384
cryptsize 557056
cryptid 0
cryptoff 16384
cryptsize 606208
cryptid 0
发现打印了两遍，其实代表着该可执行文件支持两种架构armv7和arm64。

otool 是 macOS 上用于查看 Mach-O 文件（如应用程序或动态库）信息的工具
otool -LD /path/to/executable
命令是用来查看可执行文件或动态库的 依赖库（libraries）信息的

==================================================

使用 otool 查看最小部署版本
otool -l YourBinary | grep -A 3 LC_VERSION_MIN
Load command 9
      cmd LC_VERSION_MIN_IPHONEOS
  cmdsize 16
  version 12.0
      sdk 17.0
最低部署版本（Deployment Target）是 12.0
编译使用的 SDK 是 17.0

或者 grep -A 5 LC_BUILD_VERSION，前者没有再用这个


cmake:
设置 set(CMAKE_OSX_DEPLOYMENT_TARGET "10.13" CACHE STRING "Minimum OS X deployment version") // 针对Mac，很特殊，都有。其余，比如tv，只有LC_BUILD_VERSION
或者 add_definitions(-miphoneos-version-min=9.0) // 设置这个，会有 LC_VERSION_MIN_XXX，没有 LC_BUILD_VERSION 已验证 (但-mtvos-version-min=17.0，只有LC_BUILD_VERSION，很奇怪)所以，都以实际打印为准
###
这边以实际打印为准，是否有 LC_VERSION_MIN_XXX（LC_VERSION_MIN_IPHONEOS） 或者 LC_BUILD_VERSION
###

同时有 LC_VERSION_MIN_XXX 和 LC_BUILD_VERSION，以 LC_VERSION_MIN_XXX 的最小版本为准，LC_BUILD_VERSION的和LC_VERSION_MIN_XXX的最小版本不一致


set(CMAKE_OSX_DEPLOYMENT_TARGET "15.0")  # 会转成 -mtvos-version-min=15.0
CMake 自动根据 SYSROOT 推断你是 tvOS 平台，最终生成编译指令中包含 -mtvos-version-min=15.0