shell 是一个命令解释器.是介于操作系统 kernel 与用户之间的一个绝缘层

Bash 是"Bourne-Again shell"首字母的缩写
Bash 已经成为了 所有 UNIX 中 shell 脚本的事实上的标准了

每个脚本的开头都使用"#!",这意味着告诉你的系统这个文件的执行需要指定一个解释器

逗号链接了一系列的算术操作,虽然里边所有的内容都被运行了,但只有最后一项被返回.
let"t2=((a=9,15/3))" #Set"a=9"and"t2=15/3"

脚本中的#!行的最重要的任务就是命令解释器(sh 或者 bash)

调用一个脚本
编写完脚本之后,你可以使用 sh scriptname或者 bash scriptname 来调用它
更方便的方法是让脚本本身就具有可执行权限,通过 chmod 命令可以修改
chmod 555 scriptname (允许任何人都具有 可读和执行权限)
既然脚本已经具有了可执行权限,现在你可以使用./scriptname

你可能想把它移动到/usr/local/bin(当然是以 root 身份)
来让你的脚本对所有用户都有用.这样用户就可以直接敲脚本名字来运行了

=========================:
: 空命令,等价于"NOP"
也可以被认为":"命令是一个 bash 的内建命令,它的返回值为 0,就是 shell 返回的 true

// 终端
:
echo $? #0

在和 > (重定向操作符)结合使用时,把一个文件截断到 0 长度,没有修改它的权限
如果文件在之前并不存在,那么就创建它
在和>>重定向操作符结合使用时,将不会对想要附加的文件产生任何影响. 如果文件不存在,将创建

在 if/then 中的占位符

用来做分隔符
echo $PATH /usr/local/bin:/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games

=========================;;
终止"case"选项

=========================*
* 万能匹配字符,用于文件名匹配(有个专有名词叫file globbing)
注意:在正则表达式匹配中的作用和在文件名匹配中的作用是不同的

=========================?
测试操作.在一个确定的表达式中,用?来测试结果

? 在 file globbing 中和在正则表达式中一样匹配任意的单个字符

=========================\
转义字符,如\X 等价于"X"或'X'

=========================$
$ 变量替换

=========================${}
${} 参数替换

=========================$?
$? 退出状态变量
$?保存一个命令/一个函数或者脚本本身的退出状态
$?读取最后执行命令的退出码.函数返回后,$?给出函数最后执行的那条命令的退出码

成功返回 0,如果返回一个非 0 值,通 常情况下都会被认为是一个错误码

=========================()
命令组.如:
(a=hello;echo $a)
注意:在()中的命令列表,将作为一个子 shell 来运行. 
在()中的变量,由于是在子 shell 中,所以对于脚本剩下的部分是不可用的

========================={xxx,yyy,zzz...} 
大括号扩展
cat {file1,file2,file3} > combined_file
# 把 file1,file2,file3 连接在一起,并且重定向到 combined_file 中

cp file22.{txt,backup}
# 拷贝"file22.txt" 到"file22.backup"中

注意: 在大括号中,不允许有空白,除非这个空白是有意义的.
echo {file1,file2}\ :{\ A," B",' C'}
file1 : A file1 : B file1 : C file2 : A file2 : B file2 : C

========================={}
{} 代码块.又被称为内部组.事实上,这个结构创建了一个匿名的函数.但是与函数不同的
是,在其中声明的变量,对于脚本其他部分的代码来说还是可见的

{
local a;
a= 123; 
}
bash 中的 local 申请的变量只能够用在函数中

File=/etc/fstab
{
read line1
read line2
} < $File

echo "First line in $File is:"
echo "$line1"

=========================`
命令替换. `command`结构可以将命令的输出赋值到一个变量中去.

=========================[]
数组元素
Array[1]=slot_1 
echo ${Array[1]}

=========================>
scriptname >filename 重定向脚本的输出到文件中.覆盖文件原有内容
command &>filename 重定向 stdout 和 stderr 到文件中
scriptname >>filename 重定向脚本的输出到文件中.添加到文件尾端,如果没有文件, 则创建这个文件

=========================|
| 管道.分析前边命令的输出,并将输出作为后边命令的输入.
echo ls -l | sh // 与一个简单的"ls -l"结果相同

cat *.lst | sort | uniq
# 合并和排序所有的".lst"文件,然后删除所有重复的行

管道是进程间通讯的一个典型办法,将一个进程的 stdout 放到另一个进程的 stdin 中

=========================~
home 目录
相当于$HOME 变量
~bozo 是 bozo 的 home 目录

~+ 当前工作目录,相当于$PWD 变量.
~- 之前的工作目录,相当于$OLDPWD 内部变量


=========================变量替换
a=375
hello=$a
强烈注意,在赋值的前后一定不要有空格

如果"VARIABLE =value"
脚本将尝试运行一个"VARIABLE"的命令,带着一个"=value"参数

在""中还是会发生变量替换,这被叫做部分引用,或叫弱引用.而在''中就不会发生变量替换,这叫做全引用,也叫强引用
hello="AB C  D"
echo $hello #ABCD
echo "$hello" #AB C  D
echo '$hello' # $hello

hello= # 设置为空值
echo "\$hello (null value) = $hello"

a=2335
b=${a/23/BB} #将23替换成BB b = BB35

=========================特殊的变量类型
local variables
这种变量只有在代码块或者是函数中才可见

positional parameters 就是从命令行中传进来的参数,$0, $1, $2, $3...
$0 就是脚本文件的名字,$1 是第一个参数,$2 为第 2 个...
$9 以后就需要打括号了,如${10},${11},${12}
echo "The name of this script is \"`basename $0`\"."    # 去掉目录信息

$# #位置参数的个数

=========================引号
引号的特殊效果就是,保护字符串中的特殊字符不被 shell 或者是 shell 脚本重新解释或者扩展. 
(我们这里所说的"特殊"指的是一些字符在 shell 中具有的特殊意义,比如*)

ls -l [Vv]* #V或v开头的
ls -l '[Vv]*' #No such file or directory

在一个双引号中直接使用变量名,一般都是没有问题的.它阻止了所有在引号中的特殊字符的 重新解释--包括变量名
但是$,`和\除外.保留$,作为特殊字符的意义,是为了能够在双 引号中也能够正常地引用变量("$var")

如果在参数列表中使用双引号,将使得双引号中的参数作为一个参 数
variable1="a variable containing five words"
COMMAND This is $variable1 # COMMAND 将以 7 个参数来执行
COMMAND "This is $variable1" # COMMAND 将以 1 个参数来执行

=========================转义(\)
一个具有特殊含义的字符前边放上一个转义符(\)就告诉 shell 这个字符失去了特殊的含义
在某些特定的命令和工具中,比如 echo 和 sed,转义符往往会起到相反的效果, 它反倒有可能引发出这个字符特殊的含义.
在 echo 和 sed 中所使用的
\n 意味着新的一行

=========================if/then
if/then结构可以测试命令的返回值是否为 0

=========================
文件表达式
-e filename 如果 filename存在，则为真
-d filename 如果 filename为目录，则为真 
-f filename 如果 filename为常规文件，则为真
-L filename 如果 filename为符号链接，则为真
-r filename 如果 filename可读，则为真 
-w filename 如果 filename可写，则为真 
-x filename 如果 filename可执行，则为真
-s filename 如果文件长度不为0，则为真
-h filename 如果文件是软链接，则为真
filename1 -nt filename2 如果 filename1比 filename2新，则为真。
filename1 -ot filename2 如果 filename1比 filename2旧，则为真。


整数比较
-eq 等于,如:if [ "$a" -eq "$b" ]
-ne 不等于,如:if [ "$a" -ne "$b" ]
-gt 大于,如:if [ "$a" -gt "$b" ]
-ge 大于等于,如:if [ "$a" -ge "$b" ]
-lt 小于,如:if [ "$a" -lt "$b" ]
-le 小于等于,如:if [ "$a" -le "$b" ]
< 小于(需要双括号),如:(("$a" < "$b"))
<= 小于等于(需要双括号),如:(("$a" <= "$b")) > 大于(需要双括号),如:(("$a" > "$b"))
>= 大于等于(需要双括号),如:(("$a" >= "$b"))

字符串比较
= 等于,如:if [ "$a" = "$b" ]
== 等于,如:if [ "$a" == "$b" ],与=等价
注意:==的功能在[[]]和[]中的行为是不同的,如下:
1 [[ $a == z* ]]
2 [[ $a == "z*" ]]
3
4 [ $a == z* ]
5 [ "$a" == "z*" ]
一点解释,关于 File globbing 是一种关于文件的速记法,比如"*.c"就是,再如~也是. 但是 file globbing 并不是严格的正则表达式,虽然绝大多数情况下结构比较像.
!= 不等于,如:if [ "$a" != "$b" ]
# 如果$a 以"z"开头(模式匹配)那么将为 true # 如果$a 等于 z*(字符匹配),那么结果为 true
# File globbing 和 word splitting 将会发生 # 如果$a 等于 z*(字符匹配),那么结果为 true
这个操作符将在[[]]结构中使用模式匹配. < 小于,在 ASCII 字母顺序下.如:
if [[ "$a" < "$b" ]]
if [ "$a" \< "$b" ] 注意:在[]结构中"<"需要被转义.
> 大于,在 ASCII 字母顺序下.如: if [[ "$a" > "$b" ]]
if [ "$a" \> "$b" ]
注意:在[]结构中">"需要被转义.
具体参考 Example 26-11 来查看这个操作符应用的例子.
-z 字符串为"null".就是长度为 0. -n 字符串不为"null"
注意:
使用-n 在[]结构中测试必须要用""把变量引起来.习惯于使用""来测试字符串是一种好习惯.


字符串变量表达式
If  [ $a = $b ]                 如果string1等于string2，则为真
                                字符串允许使用赋值号做等号
if  [ $string1 !=  $string2 ]   如果string1不等于string2，则为真       
if  [ -n $string  ]             如果string 非空(非0），返回0(true)  
if  [ -z $string  ]             如果string 为空，则为真
if  [ $sting ]                  如果string 非空，返回0 (和-n类似) 


    逻辑非 !                   条件表达式的相反
if [ ! 表达式 ]
if [ ! -d $num ]               如果不存在目录$num


    逻辑与 –a                   条件表达式的并列
if [ 表达式1  –a  表达式2 ]


a=4
b=5
# 这里的变量 a 和 b 既可以当作整型也可以当作是字符串
Bash 变量并不是强类型的


    逻辑或 -o                   条件表达式的或
if [ 表达式1  –o 表达式2 ]