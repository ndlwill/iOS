
curl -sIL -w '%{http_code}' https://www.baidu.com -o /dev/null

echo $(curl -sIL -w "%{http_code}" -o /dev/null https://baidu.com)

curl [options] [URL...]

发送GET请求:
curl URL
curl URL?a=1&b=hello

发送POST请求:
curl -X POST -d 'a=1&b=nihao' URL

发送json格式请求:
curl -H "Content-Type: application/json" -X POST -d '{"abc":123,"bcd":"nihao"}' URL
curl -H "Content-Type: application/json" -X POST -d @test.json URL
-H代表header头，-X是指定什么类型请求(POST/GET/HEAD/DELETE/PUT/PATCH)，-d代表传输什么数据

查看所有curl命令: man curl或者curl -h


curl -h 的完整参数解释:
-a/--append                            	上传文件时，附加到目标文件
--anyauth                              	可以使用“任何”身份验证方法
--basic                                	使用HTTP基本验证
-B/--use-ascii                         	使用ASCII文本传输
-d/--data <data>                       	HTTP POST方式传送数据
--data-ascii <data>                    	以ascii的方式post数据
--data-binary <data>                   	以二进制的方式post数据
--negotiate                            	使用HTTP身份验证
--digest                               	使用数字身份验证
--disable-eprt                         	禁止使用EPRT或LPRT
--disable-epsv                         	禁止使用EPSV
--egd-file <file>                      	为随机数据(SSL)设置EGD socket路径
--tcp-nodelay                          	使用TCP_NODELAY选项
-E/--cert <cert[:passwd]>              	客户端证书文件和密码 (SSL)
--cert-type <type>                     	证书文件类型 (DER/PEM/ENG) (SSL)
--key <key>                            	私钥文件名 (SSL)
--key-type <type>                      	私钥文件类型 (DER/PEM/ENG) (SSL)
--pass  <pass>                         	私钥密码 (SSL)
--engine <eng>                         	加密引擎使用 (SSL). "--engine list" for list
--cacert <file>                        	CA证书 (SSL)
--capath <directory>                   	CA目   (made using c_rehash) to verify peer against (SSL)
--ciphers <list>                       	SSL密码
--compressed                           	要求返回是压缩的形势 (using deflate or gzip)
--connect-timeout <seconds>            	设置最大请求时间
--create-dirs                          	建立本地目录的目录层次结构
--crlf                                 	上传是把LF转变成CRLF
--ftp-create-dirs                      	如果远程目录不存在，创建远程目录
--ftp-method [multicwd/nocwd/singlecwd]	控制CWD的使用
--ftp-pasv                             	使用 PASV/EPSV 代替端口
--ftp-skip-pasv-ip                     	使用PASV的时候,忽略该IP地址
--ftp-ssl                              	尝试用 SSL/TLS 来进行ftp数据传输
--ftp-ssl-reqd                         	要求用 SSL/TLS 来进行ftp数据传输
-F/--form <name=content>               	模拟http表单提交数据
-form-string <name=string>             	模拟http表单提交数据
-g/--globoff                           	禁用网址序列和范围使用{}和[]
-G/--get                               	以get的方式来发送数据
-h/--help                              	帮助
-H/--header <line>                     	自定义头信息传递给服务器
--ignore-content-length                	忽略的HTTP头信息的长度
-i/--include                           	输出时包括protocol头信息
-I/--head                              	只显示文档信息
-j/--junk-session-cookies              	读取文件时忽略session cookie
--interface <interface>                	使用指定网络接口/地址
--krb4 <level>                         	使用指定安全级别的krb4
-k/--insecure                          	允许不使用证书到SSL站点
-K/--config                            	指定的配置文件读取
-l/--list-only                         	列出ftp目录下的文件名称
--limit-rate <rate>                    	设置传输速度
--local-port<NUM>                      	强制使用本地端口号
-m/--max-time <seconds>                	设置最大传输时间
--max-redirs <num>                     	设置最大读取的目录数
--max-filesize <bytes>                 	设置最大下载的文件总量
-M/--manual                            	显示全手动
-n/--netrc                             	从netrc文件中读取用户名和密码
--netrc-optional                       	使用 .netrc 或者 URL来覆盖-n
--ntlm                                 	使用 HTTP NTLM 身份验证
-N/--no-buffer                         	禁用缓冲输出
-p/--proxytunnel                       	使用HTTP代理
--proxy-anyauth                        	选择任一代理身份验证方法
--proxy-basic                          	在代理上使用基本身份验证
--proxy-digest                         	在代理上使用数字身份验证
--proxy-ntlm                           	在代理上使用ntlm身份验证
-P/--ftp-port <address>                	使用端口地址，而不是使用PASV
-Q/--quote <cmd>                       	文件传输前，发送命令到服务器
--range-file                           	读取（SSL）的随机文件
-R/--remote-time                       	在本地生成文件时，保留远程文件时间
--retry <num>                          	传输出现问题时，重试的次数
--retry-delay <seconds>                	传输出现问题时，设置重试间隔时间
--retry-max-time <seconds>             	传输出现问题时，设置最大重试时间
-S/--show-error                        	显示错误
--socks4 <host[:port]>                 	用socks4代理给定主机和端口
--socks5 <host[:port]>                 	用socks5代理给定主机和端口
-t/--telnet-option <OPT=val>           	Telnet选项设置
--trace <file>                         	对指定文件进行debug
--trace-ascii <file>                   	Like --跟踪但没有hex输出
--trace-time                           	跟踪/详细输出时，添加时间戳
--url <URL>                            	Spet URL to work with
-U/--proxy-user <user[:password]>      	设置代理用户名和密码
-V/--version                   	显示版本信息
-X/--request <command>         	指定什么命令
-y/--speed-time                	放弃限速所要的时间。默认为30
-Y/--speed-limit               	停止传输速度的限制，速度时间'秒
-z/--time-cond                 	传送时间设置
-0/--http1.0                   	使用HTTP 1.0
-1/--tlsv1                     	使用TLSv1（SSL）
-2/--sslv2                     	使用SSLv2的（SSL）
-3/--sslv3                     	使用的SSLv3（SSL）
--3p-quote                     	like -Q for the source URL for 3rd party transfer
--3p-url                       	使用url，进行第三方传送
--3p-user                      	使用用户名和密码，进行第三方传送
-4/--ipv4                      	使用IP4
-6/--ipv6                      	使用IP6

curl命令退出码:
退出码	错误描述
1	Unsupported protocol. This build of curl has no support for this protocol.
2	Failed to initialize.
3	URL malformed. The syntax was not correct.
5	Couldn't resolve proxy. The given proxy host could not be resolved.
6	Couldn't resolve host. The given remote host was not resolved.
7	Failed to connect to host.
8	FTP weird server reply. The server sent data curl couldn't parse.
9	FTP access denied. The server denied login or denied access to the particular resource or directory you wanted to reach. Most often you tried to change to a directory that doesn't exist on the server.
11	FTP weird PASS reply. Curl couldn't parse the reply sent to the PASS request.
13	FTP weird PASV reply, Curl couldn't parse the reply sent to the PASV request.
14	FTP weird 227 format. Curl couldn't parse the 227-line the server sent.
15	FTP can't get host. Couldn't resolve the host IP we got in the 227-line.
17	FTP couldn't set binary. Couldn't change transfer method to binary.
18	Partial file. Only a part of the file was transferred.
19	FTP couldn't download/access the given file, the RETR (or similar) command failed.
21	FTP quote error. A quote command returned error from the server.
22	HTTP page not retrieved. The requested url was not found or returned another error with the HTTP error code being 400 or above. This return code only appears if -f/--fail is used.
23	Write error. Curl couldn't write data to a local filesystem or similar.
25	FTP couldn't STOR file. The server denied the STOR operation, used for FTP uploading.
26	Read error. Various reading problems.
27	Out of memory. A memory allocation request failed.
28	Operation timeout. The specified time-out period was reached according to the conditions.
30	FTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead!
31	FTP couldn't use REST. The REST command failed. This command is used for resumed FTP transfers.
33	HTTP range error. The range "command" didn't work.
34	HTTP post error. Internal post-request generation error.
35	SSL connect error. The SSL handshaking failed.
36	FTP bad download resume. Couldn't continue an earlier aborted download.
37	FILE couldn't read file. Failed to open the file. Permissions?
38	LDAP cannot bind. LDAP bind operation failed.
39	LDAP search failed.
41	Function not found. A required LDAP function was not found.
42	Aborted by callback. An application told curl to abort the operation.
43	Internal error. A function was called with a bad parameter.
45	Interface error. A specified outgoing interface could not be used.
47	Too many redirects. When following redirects, curl hit the maximum amount.
48	Unknown TELNET option specified.
49	Malformed telnet option.
51	The peer's SSL certificate or SSH MD5 fingerprint was not ok.
52	The server didn't reply anything, which here is considered an error.
53	SSL crypto engine not found.
54	Cannot set SSL crypto engine as default.
55	Failed sending network data.
56	Failure in receiving network data.
58	Problem with the local certificate.
59	Couldn't use specified SSL cipher.
60	Peer certificate cannot be authenticated with known CA certificates.
61	Unrecognized transfer encoding.
62	Invalid LDAP URL.
63	Maximum file size exceeded.
64	Requested FTP SSL level failed.
65	Sending the data requires a rewind that failed.
66	Failed to initialize SSL Engine.
67	The user name, password, or similar was not accepted and curl failed to log in.
68	File not found on TFTP server.
69	Permission problem on TFTP server.
70	Out of disk space on TFTP server.
71	Illegal TFTP operation.
72	Unknown TFTP transfer ID.
73	File already exists (TFTP).
74	No such user (TFTP).
75	Character conversion failed.
76	Character conversion functions required.
77	Problem with reading the SSL CA cert (path? access rights?).
78	The resource referenced in the URL does not exist.
79	An unspecified error occurred during the SSH session.
80	Failed to shut down the SSL connection.
82	Could not load CRL file, missing or wrong format (added in 7.19.0).
83	Issuer check failed (added in 7.19.0).
XX	More error codes will appear here in future releases. The existing ones are meant to never change.