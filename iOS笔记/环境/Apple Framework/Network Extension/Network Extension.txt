Get started with a supervised iPhone or iPad
https://support.apple.com/en-us/HT202837

==============================NEDNSProxyProvider
NEDNSProxyProvider is only available on supervised devices

==============================
http://www.openradar.me/page/1

==============================Personal VPN 
The NEVPNManager (iOS 8+) API gives apps the ability to create and manage a VPN configuration (one per app).
NEVPNManager
An object to create and manage a Personal VPN configuration.

==============================Network Tunneling Protocol Client
The NETunnelProvider APIs allow apps to implement the client side of a custom network tunneling protocol (e.g. VPN protocols).

https://developer.apple.com/documentation/networkextension/nepackettunnelprovider
NEPacketTunnelProvider (iOS 9+) gives its subclasses access to reading and writing to a virtual network interface. 
In general, you would establish the connection with a VPN server, configure the tunnel, 
and start reading ###IP packets### coming from the virtual network interface and sending them to the VPN server.

https://developer.apple.com/documentation/networkextension/neappproxyprovider
NEAppProxyProvider (iOS 9+, supervised devices, managed apps only) is very similar to the NEPacketTunnelProvider, 
but operates on a TCP/UDP level instead of IP level.

The provider subclass should be added inside a special app extension target. 
The app extension will be automatically started by the system when necessary. 
In some cases, e.g. always-on VPN, the process running an extension will run indefinitely and will automatically be started even after the system restart.

You won’t be able to run any of these app extensions in a simulator, and to run in on a device you will need to create an entitlement.

==============================On-Device Network Content Filter
The NEFilterProvider (iOS 9+, supervised devices) APIs give the ability to filter network traffic on iOS devices. 
This API was designed primarily for devices owned by schools. 
In general, most schools have some sort of content filtering enabled on their local WiFi networks, 
but that doesn’t work with mobile networks. With NEFilterProvider the traffic filtering is going to work regardless of which network the device is connected to.

==============================DNS Proxy
The NEDNSProxyProvider (iOS 11+, supervised devices) API allows apps to intercept all of the network traffic coming from the device. 
This allows apps to send DNS queries to preferred DNS servers, use custom DNS protocols (e.g. DNS over HTTPS which is supported by recently introduced Cloudflare DNS, by Google Public DNS and other DNS services), and more. One of the reasons to use custom (and encrypted) DNS protocols is to avoid DNS hijacking, which is a common practice among US mobile network operators.

https://developers.google.com/speed/public-dns/docs/doh/json?hl=zh-cn

==============================Wi-Fi Hotspot Authentication and Configuration
The NEHotspotHelper (iOS 9+) API gives apps the ability to perform custom authentication for Wi-Fi Hotspots. It can also give users a way to seamlessly connect to a large network of Wi-Fi Hotspots. The NEHotspotConfiguration (iOS 11+) API lets apps configure these hotspots.

==============================SimpleTunnel
https://developer.apple.com/library/archive/samplecode/SimpleTunnel/Introduction/Intro.html

==============================DNS hijacking
https://www.dnsoverride.com/dns-hijacking-by-some-mobile-carriers/


https://github.com/kean/VPN

https://github.com/kean/Pulse

https://github.com/kean/Nuke


==============================VPN Profiles
https://kean.blog/post/vpn-configuration-manager

You don’t need a Personal VPN entitlement which allows apps to create and control a custom system VPN configuration using NEVPNManager. 
The Packet Tunnel Provider entitlements are classified as enterprise VPNs and only require Network Extension entitlement.

The primary interface for managing VPN configurations that use a custom VPN protocols is NETunnelProviderManager, which is a sublcass of NEVPNManager.

You can use NEVPNManager without the tunnel provider to create and manage personal VPN configurations that use one of the built-in VPN protocols (IPsec or IKEv2).

1. The first thing that you want to do when your app starts is read the exiting configuration.
NETunnelProviderManager.loadAllFromPreferences { managers, error in
    // Where managers: [NETunnelProviderManager]
}
This method reads all of the VPN configurations created by the calling app that have previously been saved to the Network Extension preferences. 
The completion closure gives you the list of “managers”, each represents a single saved VPN configuration.

Installing VPN Profile:
private func makeManager() -> NETunnelProviderManager {
    let manager = NETunnelProviderManager()
    manager.localizedDescription = "BestVPN"

    // Configure a VPN protocol to use a Packet Tunnel Provider
    let proto = NETunnelProviderProtocol()
    // This must match an app extension bundle identifier
    proto.providerBundleIdentifier = "com.github.kean.vpn-client.vpn-tunnel"
    // Replace with an actual VPN server address
    proto.serverAddress = "127.0.0.1:4009"
    // Pass additional information to the tunnel
    proto.providerConfiguration = [:]

    manager.protocolConfiguration = proto

    // Enable the manager by default
    manager.isEnabled = true

    return manager
}

Once you created an instance of NETunnelProviderManager, you can save it:
let manager = makeManager()
manager.saveToPreferences { error in
    if error == nil {
        // Success
    }
}

I would sometimes encounter an issue where I would not be able to start a VPN tunnel right after saving it. 
A workaround seems to be to reload the manager using loadFromPreferences() method right after saving it.

https://developer.apple.com/forums/


Managing VPN:
Now that the profile is installed, the same NETunnelProviderManager instance can be used to update it and to manage the connection status.

Enabled VPN configuration have isEnabled flag set to true.


https://developer.apple.com/documentation/networkextension/netunnelprovidermanager#1661690
Configuration Model:
Each NETunnelProviderManager instance corresponds to a single VPN configuration stored in the Network Extension preferences. 
Multiple VPN configurations can be created and managed by creating multiple NETunnelProviderManager instances.

VPN configurations created using NETunnelProviderManager are classified as regular enterprise VPN configurations (as opposed to the Personal VPN configurations created by NEVPNManager).
Only one enterprise VPN configuration can be enabled on the system at a time.
If both a Personal VPN and an enterprise VPN are active on the system simultaneously, the enterprise VPN takes precedence, 
meaning that if the routes for the two VPNs conflict then the routes for the enterprise VPN will take precedence.
The Personal VPN will remain active and connected while the enterprise VPN is active and connected, and any traffic that is routed to the Personal VPN and is not routed to the enterprise VPN will continue to traverse the Personal VPN.



To detect configuration changes, use NEVPNConfigurationChange notification.
VPN Settings:
If you go to Settings / General / VPN, you are going to see your VPN configuration registered there.

The settings screen allow user to switch between configurations (isEnabled), start/stop VPN, and even remove the configuration. 
This is why it is important to use .NEVPNConfigurationChange and .NEVPNStatusDidChange notification to update your app UI accordingly.