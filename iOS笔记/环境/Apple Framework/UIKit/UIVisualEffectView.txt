if (kIsIOS8Later) {
    [self.tabBar setBackgroundImage:[UIImage imageWithColor:[UIColor colorWithRed:238/255.0 green:240/255.0 blue:245/255.0 alpha:0.78]]];
    // blur效果
    UIVisualEffectView *visualEfView = [[UIVisualEffectView alloc] initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleLight]];
    visualEfView.frame = CGRectMake(0, -1, CGRectGetWidth(self.tabBar.frame), CGRectGetHeight(self.tabBar.frame)+1);
    visualEfView.alpha = 1.0;
    [self.tabBar insertSubview:visualEfView atIndex:0];
}

==================================================add blur and vibrancy using UIVisualEffectView
As of iOS 8.0, visual effects such as blur and vibrancy are a cinch because Apple provides a built in UIView subclass that does all the hard work: UIVisualEffectView.
For example, if you want to blur an image, you would use this code:

let imageView = UIImageView(image: UIImage(named: "example"))
imageView.frame = view.bounds
imageView.contentMode = .scaleToFill
view.addSubview(imageView)

let blurEffect = UIBlurEffect(style: .dark)
let blurredEffectView = UIVisualEffectView(effect: blurEffect)
blurredEffectView.frame = imageView.bounds
view.addSubview(blurredEffectView)

As well as blurring content, Apple also lets you add a "vibrancy" effect to your views – this is a translucency effect designed to ensure that text is readable when it's over any kind of blurred background, 
and it's used to create that soft glow effect you see in the notification center.

We could extend the previous example so that it adds a segmented control in the middle of the view, using a vibrancy effect.
This is accomplished by created a second UIVisualEffectView inside the first one, this time using UIVibrancyEffect to create the glow.
Note that you need to use the same blur type for both your visual effect views, otherwise the glow effect will be incorrect.

let segmentedControl = UISegmentedControl(items: ["First Item", "Second Item"])
segmentedControl.sizeToFit()
segmentedControl.center = view.center

let vibrancyEffect = UIVibrancyEffect(blurEffect: blurEffect)
let vibrancyEffectView = UIVisualEffectView(effect: vibrancyEffect)
vibrancyEffectView.frame = imageView.bounds

vibrancyEffectView.contentView.addSubview(segmentedControl)
blurredEffectView.contentView.addSubview(vibrancyEffectView)

Warning: you need to add child views to the contentView property of a UIVisualEffectView otherwise they will not be drawn correctly.


==================================================UIVisualEffect 例子
Inherited By:
UIBlurEffect
UIGlassContainerEffect
UIGlassEffect
UIVibrancyEffect


UIBlurEffect	实际的“模糊效果”，模糊背景
UIVibrancyEffect	在模糊基础上“增强内容颜色”，让前景更亮、更清晰（通常用于文字）


--------------------------------------------------
通过Xcode测试，UILabel和UIImageView处理不一样

小提示
模糊层应始终放在背景图上方，但内容控件下方；
UIVisualEffectView 的效果会自动响应深色模式、系统动态模糊；

总结结构图
view
 └─ UIVisualEffectView (blur)
     └─ UIVisualEffectView (vibrancy)
         └─ UILabel / UIButton / UIImageView

外层是模糊
中间是振动（增强颜色）
内层是你想展示的内容

// 文字：
例子1
func makeBlurCard() -> UIView { // 合适
    let blurEffect = UIBlurEffect(style: .systemMaterial) // .dark .light .systemMaterial 分别测试
    let blurView = UIVisualEffectView(effect: blurEffect)
    blurView.frame = CGRect(x: 40, y: 100, width: 300, height: 200)
    blurView.layer.cornerRadius = 20
    blurView.clipsToBounds = true

    let label = UILabel(frame: blurView.bounds)
    label.text = "模糊卡片"
    label.textAlignment = .center
    label.font = UIFont.systemFont(ofSize: 24)
    blurView.contentView.addSubview(label) // ###已验证### blurView.contentView add label

    return blurView
}

let card = makeBlurCard()
view.addSubview(card) // view add blurView

例子2
func makeBlurCard2() -> UIView { // 不合适
    let blurEffect = UIBlurEffect(style: .dark) 
    let blurView = UIVisualEffectView(effect: blurEffect)
    blurView.frame = CGRect(x: 0, y: 0, width: 200, height: 200)

    let label = UILabel(frame: blurView.bounds)
    label.text = "模糊卡片"
    label.textAlignment = .center
    label.font = UIFont.systemFont(ofSize: 24)
    label.frame = CGRect(x: 100, y: 400, width: 200, height: 200)
    
    label.addSubview(blurView) // .dark 文字看不清，只能看到影子，.light .systemMaterial 啥也看不见

    return label
}

例子3
模糊 + 振动增强（UIVibrancyEffect）:
let blurEffect = UIBlurEffect(style: .light)
let vibrancyEffect = UIVibrancyEffect(blurEffect: blurEffect)

let blurView = UIVisualEffectView(effect: blurEffect)
blurView.frame = view.bounds
view.addSubview(blurView) // view add blurView

let vibrancyView = UIVisualEffectView(effect: vibrancyEffect)
vibrancyView.frame = blurView.bounds
blurView.contentView.addSubview(vibrancyView) // blurView.contentView add vibrancyView

// 文字内容加在 vibrancyView 上，这样颜色增强
let label = UILabel()
label.text = "Hello Vibrancy"
label.font = UIFont.boldSystemFont(ofSize: 30)
label.textAlignment = .center
label.frame = vibrancyView.bounds

vibrancyView.contentView.addSubview(label) // vibrancyView.contentView add label
// 相比例子1的效果（文字正常显示，较深，blurView背景效果较深），这边文字好像同样（相当于blurView背景效果）有模糊效果，较钱，这边的blurView背景效果也变淡，较浅

对于例子3，文字如果直接加在 blurView.contentView 上（将vibrancyView.contentView.addSubview(label)修改），文字显示较深
加在 vibrancyView.contentView 上，系统会让颜色“穿透”模糊层，所以文字好像有模糊效果一样


// 图片：
例子1 // 不合适图片，合适文字
let blurEffect = UIBlurEffect(style: .dark)
let blurredEffectView = UIVisualEffectView(effect: blurEffect)
blurredEffectView.frame = CGRect(x: 100, y: 400, width: 200, height: 200)
view.addSubview(blurredEffectView)

let imageView = UIImageView(image: UIImage(named: "menu_about_logo"))
imageView.frame = CGRect(x: 0, y: 0, width: 200, height: 200)
imageView.contentMode = .scaleToFill
blurredEffectView.contentView.addSubview(imageView) // 和文字效果类似，正常显示图片，图片下面背景是模糊效果

例子2 // 合适
let imageView = UIImageView(image: UIImage(named: "menu_about_logo")) 
imageView.frame = CGRect(x: 100, y: 400, width: 200, height: 200)
imageView.contentMode = .scaleToFill
view.addSubview(imageView)

let blurEffect = UIBlurEffect(style: .light)
let blurredEffectView = UIVisualEffectView(effect: blurEffect)
blurredEffectView.frame = imageView.bounds
imageView.addSubview(blurredEffectView) // 和文字看不见的效果不一致（blur盖在控件上面，就是控件 add blur），能看到模糊图片效果，.dark .light .systemMaterial 都能看到

例子3 // 不合适图片，效果不好
let blurEffect = UIBlurEffect(style: .light)
let vibrancyEffect = UIVibrancyEffect(blurEffect: blurEffect)

let blurView = UIVisualEffectView(effect: blurEffect)
blurView.frame = CGRect(x: 100, y: 400, width: 200, height: 200)
view.addSubview(blurView)

let vibrancyView = UIVisualEffectView(effect: vibrancyEffect)
vibrancyView.frame = blurView.bounds
blurView.contentView.addSubview(vibrancyView)

let imageView = UIImageView(image: UIImage(named: "menu_about_logo"))
imageView.frame = CGRect(x: 0, y: 0, width: 200, height: 200)
imageView.contentMode = .scaleToFill
vibrancyView.contentView.addSubview(imageView)

例子4 // 不合适，vibrancyEffect不适合图片，和例子2效果一致
let imageView = UIImageView(image: UIImage(named: "menu_about_logo"))
imageView.frame = CGRect(x: 100, y: 400, width: 200, height: 200)
imageView.contentMode = .scaleToFill
view.addSubview(imageView)

let blurEffect = UIBlurEffect(style: .light)
let vibrancyEffect = UIVibrancyEffect(blurEffect: blurEffect)

let blurredEffectView = UIVisualEffectView(effect: blurEffect)
blurredEffectView.frame = imageView.bounds
let vibrancyView = UIVisualEffectView(effect: vibrancyEffect)
vibrancyView.frame = blurredEffectView.bounds
blurredEffectView.contentView.addSubview(vibrancyView)

imageView.addSubview(blurredEffectView)


--------------------------------------------------