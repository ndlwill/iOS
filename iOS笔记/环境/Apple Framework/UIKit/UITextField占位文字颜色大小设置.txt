1.自定义一个TextField继承自UITextField
2.重写drawPlaceholderInRect:方法
3.在drawPlaceholderInRect方法中设置placeholder的属性
-(void)drawPlaceholderInRect:(CGRect)rect {
// 计算占位文字的 Size
CGSize placeholderSize = [self.placeholder sizeWithAttributes:
@{NSFontAttributeName : self.font}];
[self.placeholder drawInRect:CGRectMake(0, (rect.size.height - placeholderSize.height)/2, rect.size.width, rect.size.height) withAttributes:
@{NSForegroundColorAttributeName : [UIColor blueColor],
NSFontAttributeName : self.font}];
}




textField.placeholder = @"设置了占位文字内容以后, 才能设置占位文字的颜色";// 必须先设置placeholder，可能懒加载placeholderLabel
textField setValue:[UIColor redColor] forKeyPath:@"_placeholderLabel.textColor"];



通过attributedPlaceholder属性修改占位文字颜色
textField.font = [UIFont systemFontOfSize:14];
NSAttributedString *attrString = [[NSAttributedString alloc] initWithString:@"请输入占位文字" attributes:
@{NSForegroundColorAttributeName:[UIColor redColor],
NSFontAttributeName:textField.font
}];
textField.attributedPlaceholder = attrString;



修改光标的颜色就是修改UITextField的tintColor


======================
自定义的UITextField,获取到焦点(编辑状态)的时候是白色,失去焦点(非编辑状态)的时候是灰色:

#define YCplaceholderTextColor @"_placeholderLabel.textColor"

@implementation YCTextField
// 获取到焦点
- (BOOL)becomeFirstResponder {

    // 利用运行时获取key,设置占位文字的颜色
    [self setValue:self.textColor forKeyPath:YCplaceholderTextColor];
    
    return [super becomeFirstResponder];
}

// 失去焦点
- (BOOL)resignFirstResponder {

    // 利用运行时获取key,设置占位文字的颜色
    [self setValue:[UIColor grayColor] forKeyPath:YCplaceholderTextColor];
    
    return [super resignFirstResponder];
}


textField.keyboardType=UIKeyboardTypeNumberPad;

m_userName.returnKeyType = UIReturnKeyNext;
m_userName.delegate= self;
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{

　　return YES;
}

UITextField获取键盘输入焦点：[self.m_userPassword becomeFirstResponder];

self.textField.inputView = keyView;//输入我们自定义的键盘

======================
设置占位文字的偏移-用来设置光标与占位的间距

//控制placeHolder的位置，左右缩20
-(CGRect)placeholderRectForBounds:(CGRect)bounds
{
    return CGRectInset(bounds, 20, 0);
}


扩充:系统还提供了很多类似的方法
– textRectForBounds:　 //重写来重置文字区域
– drawTextInRect: 　　 //改变绘文字属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了.
– placeholderRectForBounds:　　//重写来重置占位符区域
– drawPlaceholderInRect:　　//重写改变绘制占位符属性.重写时调用super可以按默认图形属性绘制,若自己完全重写绘制函数，就不用调用super了
– borderRectForBounds:　　//重写来重置边缘区域
– editingRectForBounds:　　//重写来重置编辑区域
– clearButtonRectForBounds:　　//重写来重置clearButton位置,改变size可能导致button的图片失真
– leftViewRectForBounds:
– rightViewRectForBounds:
