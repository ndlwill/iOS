SHA（Secure Hash Algorithm）
定义：SHA 是一种 哈希函数，比如 SHA-256、SHA-512。
作用：把任意长度的数据映射成一个固定长度的摘要（hash 值）。
特点：
不可逆（不能从 hash 值恢复原文）
相同输入 → 相同输出
不同输入 → 输出差异极大（雪崩效应）
用途：
数据完整性校验（文件校验码）
数字签名的底层哈希算法


HMAC（Hash-based Message Authentication Code）
定义：基于哈希函数（比如 SHA-256）构造的一种 消息认证码。
公式：HMAC = H( (K ⊕ opad) ∥ H((K ⊕ ipad) ∥ message) )
（K=密钥, H=哈希函数, ⊕=异或, ∥=拼接）
作用：保证 数据完整性 + 身份认证
需要一个密钥，和单纯的 SHA 不同。
用途：
API 请求签名（比如 AWS、阿里云、微信支付）
TLS、IPSec 等协议中的认证
JWT 的 HS256（HMAC-SHA256）


| 特性     | SHA          | HMAC             |
| ------ | ------------ | ---------------- |
| 类型     | 哈希函数         | 基于哈希的消息认证码       |
| 是否需要密钥 | ❌ 不需要        | ✅ 需要密钥           |
| 用途     | 数据完整性校验、签名底层 | 数据完整性 + 身份认证     |
| 安全性    | 仅能防篡改检测      | 能同时防篡改 + 验证发送方身份 |


SHA 就像“指纹” → 可以验证数据没改过。
HMAC 就像“带密码的指纹” → 既能验证数据没改过，还能确认是谁发的。



import CryptoKit

// SHA256
let digest = SHA256.hash(data: Data("hello".utf8))

// SHA512
let digest2 = SHA512.hash(data: Data("hello".utf8))

// HMAC
let key = SymmetricKey(size: .bits256)
let authenticationCode = HMAC<SHA256>.authenticationCode(for: Data("hello".utf8), using: key)
