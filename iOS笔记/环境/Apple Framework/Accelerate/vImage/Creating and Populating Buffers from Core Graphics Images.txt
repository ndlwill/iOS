Creating and Populating Buffers from Core Graphics Images
Initialize vImage buffers from Core Graphics images.

vImage_Buffer structures are the basic data structures that vImage uses for working with images.
They describe an image's dimensions and contain the pixel data that vImage routines operate on.

Typically, you'll initialize a source buffer from an image and initialize and allocate a destination buffer to receive the result of a vImage operation.



Initialize a Source Buffer from a Core Graphics Image:
The vImage functions that initialize a buffer's size and data require an instantiated vImage_Buffer structure. 
Typically, you declare a buffer as a variable because these functions mutate the buffer.

You can initialize a vImage buffer from a CGImage instance that's acquired from the cgImage property of an image. 
In the following example, the image is named Flowers_2.jpg. The init(cgImage:format:flags:) function initializes a vImage_Buffer structure with the image data using the format discussed in Converting bitmap data between Core Graphics images and vImage buffers.
guard
    let cgImage = UIImage(named: "Flowers_2.jpg")?.cgImage,
    var sourceBuffer = try? vImage_Buffer(cgImage: cgImage,
                                          format: format) else {
                                            return nil
}



Initialize and Allocate a Destination Buffer:
Typically, in addition to creating a buffer to represent your source image, you create a destination buffer to receive the result of the vImage operation.
In this case, you use the init(width:height:bitsPerPixel:) function to initialize a buffer of a specified size and the correct memory allocation for the bit-depth of the image:

guard var destinationBuffer = try? vImage_Buffer(width: Int(sourceBuffer.width),
                                                 height: Int(sourceBuffer.height),
                                                 bitsPerPixel: format.bitsPerPixel) else {
                                                    return nil
}


Free the Buffer Memory:
After you're finished with buffers that have have their own memory allocation, it's important that you free the memory allocated to them:
sourceBuffer.free()
destinationBuffer.free()



bit-depth of the image:
图像的比特深度（bit-depth）指的是每个像素用来表示颜色信息的比特数。
比特深度直接影响图像的颜色范围和细节表现能力。理解比特深度对图像处理和质量评估非常重要。

单色图像：
1-bit：每个像素用 1 个比特表示，可以表示 2 种颜色（通常是黑和白）。
灰度图像：
8-bit：每个像素用 8 个比特表示，可以表示 256 种灰度级别，从完全黑到完全白。
彩色图像：
24-bit：每个像素用 24 个比特表示，通常使用 RGB 颜色模型。每个颜色通道（红、绿、蓝）用 8 个比特表示，可以表示 
2 ^ 8 =256 种颜色。总共可以表示 
256 × 256 × 256 = 16,777,216种颜色。
32-bit：每个像素用 32 个比特表示，除了 RGB 三个颜色通道外，还包括一个 8-bit 的 Alpha 通道，用于表示透明度。

