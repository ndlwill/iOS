https://developer.apple.com/documentation/createml/creating-an-image-classifier-model


Creating an Image Classifier Model
Train a machine learning model to classify images, and add it to your Core ML app.


1. Gather Your Data
Use at least 10 images per category, but keep in mind that an image classifier performs better with a more diverse set of images. 
Consider including images of each category from multiple angles and in different lighting conditions.

Balance the number of images for each category. 
For example, don’t use 10 images for one category and then 1000 images for another.

The images can be in any format you can open in the Quicktime Player, such as JPEG and PNG. 
They don’t have to be a particular size, nor do they need to be the same size as each other. 
However, it’s best to use images that are at least 299 x 299 pixels.

If possible, gather images that best represent what you expect the model to see when you use it in your app. 
For example, if your app classifies images from a device’s camera in an outdoor setting, gather outdoor images from an identical or similar camera.

Note:
By default, the image classifier uses the scene print feature extractor to accelerate the training process and works best with real-world objects. 
For more information, see MLImageClassifier.FeatureExtractorType.scenePrint(revision:).


2. Organize Your Training Data


3. Organize Your Testing Data


4. Create an Image Classifier Project


5. Configure the Training Session
You can adjust the following parameters before training your image classifier:

Feature Extractor
A Feature Extractor is the underlying base model that extracts image features for image classifier training session. 
There are 2 options for feature extraction. Image Feature Print V2 has a smaller output embedding size than Image Feature Print V1.
This leads to faster training times, reduces the memory needed to store the extracted features, and can also increase accuracy. 
On the other hand, Image Feature Print V1 is compatible with older operating systems, including macOS 10.14 or later and iOS 12 or later. 
Image Feature Print V2 is compatible with macOS 14 or later and iOS 17 or later.

Iterations
If you know how many training iterations you’d like use in your training session, change the default value. 
Include enough iterations for an accurate model; stopping too early may result in a model that’s less accurate.

Augmentations
You can also turn on any or all of the image augmentations. 
Each augmentation copies the dataset’s images and applies a transform or filter that effectively gives the dataset more variety without gathering additional images. 
For more information on augmentation options, see doc://com.apple.documentation/documentation/createml/augmenting-images-to-expand-your-training-data


6. Train the Image Classifier


7. Assess the Model’s Accuracy
When Create ML finishes training the model, it tests the model using the testing dataset.
When it’s finished testing the model, Create ML shows the training, validation, and testing accuracy scores in the Evaluation tab.
Models typically have higher accuracy scores on the training dataset because it learned from those images.

Precision is the number of true positives divided by the sum of true positives and false positives. 
Recall is the number of true positives divided by the sum of true positives and false negatives.


Improving Your Model’s Accuracy:
https://developer.apple.com/documentation/createml/improving-your-model-s-accuracy


8. Preview the Model


9. Save the Model


10. Add the Model to Your App


11. Automate Model Training and Assessment
You can use Create ML to train a useful image classifier with very little code or machine learning expertise, as described in the sections above. 
However, you can also use an MLImageClassifier instance to script the model training process. 
The general tasks are the same: prepare data, train a model, assess performance, and save the Core ML model file. 
The difference is that you do everything programmatically.

For example, you can initialize two MLImageClassifier.DataSource instances, one for the training dataset and another for the testing dataset. 
Use the training data source to initialize an image classifier with init(trainingData:parameters:). 
Then use the testing data source with its evaluation(on:) method, and assess the values in the MLClassifierMetrics instance it returns.