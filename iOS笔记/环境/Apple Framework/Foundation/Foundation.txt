https://developer.apple.com/documentation/foundation


在 Swift 里：
实例有类型；
类型本身也有“类型” —— 这就是 元类型（Metatype）。
let test1: UIView.Type = UIView.self
String(describing: test1)
print(String(describing: test1)) // UIView
let test: UIView.Type.Type = UIView.Type.self
String(describing: test)
print(String(describing: test)) // UIView.Type
 
如何理解 .self // xx.self 表示前面 xx 这个类型本身
UIView.self 不是实例，而是“UIView 这个类型本身”。
Swift 中每个类型在运行时都有一个元类型值，可以通过 .self 获取。

let view = UIView()          // view 的类型是 UIView
let type1 = type(of: view)   // UIView.Type
type(of: view) // 获取运行时实例的元类型 UIView.Type


let viewClass: UIView.Type = type(of: label)
let newView = viewClass.init(frame: .zero)

所有 class 的元类型最终都是 AnyObject.Type
所有值类型（struct / enum）的元类型最终都是 Any.Type

#####
用法	含义
UIView.self	UIView 类型对象（元类型值）
UIView.Type	“UIView 这种类型的元类型”
#####