https://github.com/qunten/iOS-Core-Animation-Advanced-Techniques

https://github.com/qunten/iOS-Core-Animation-Advanced-Techniques/blob/master/7-%E9%9A%90%E5%BC%8F%E5%8A%A8%E7%94%BB/%E9%9A%90%E5%BC%8F%E5%8A%A8%E7%94%BB.md


https://blog.csdn.net/HQ_LIN

图层（CALayer）
图层提供绘图和动画的基础

图层使用两种类型的坐标系
坐标点（position）
指定图层的大小和位置，您可以使用图层的bounds和position属性进行指定。
图层bounds和frame矩形的方向始终与基础平台的默认方向匹配。position属性位于图层的中间。

锚点（anchorPoint）
默认为值（0.5，0.5）
层的几何相关操作是相对于该层的锚点进行的
操纵图层的position或transform属性时，锚点的影响最为明显。始终相对于图层的锚点指定position属性，并且您应用于图层的任何变换也都相对于锚点进行。

更改UIView使用的图层类
您可以通过覆盖iOS视图的layerClass方法并返回不同的类对象来更改iOS视图使用的图层类型。

您的视图使用Metal或OpenGL ES绘制内容，在这种情况下，您将使用CAMetalLayer或CAEAGLLayer对象。

使用图像作为图层的内容
由于图层只是用于管理位图图像的容器，因此您可以将图像直接分配给图层的contents属性。

您分配给图层的图像必须是一种CGImageRef类型。分配图像时，请记住提供分辨率与本机设备的分辨率匹配的图像。
对于具有Retina显示屏的设备，这可能还需要您调整contentsScale图像的属性。
- (void)displayLayer:(CALayer *)theLayer {
    // Check the value of some state property
    if (self.displayYesImage) {
        // Display the Yes image
        theLayer.contents = [someHelperObject loadStateYesImage];
    }
    else {
        // Display the No image
        theLayer.contents = [someHelperObject loadStateNoImage];
    }
}


使用委托提供图层内容
如果图层的内容动态变化，则可以使用委托对象在需要时提供和更新该内容。在显示时，该层调用委托的方法以提供所需的内容：

如果您的委托实现了该displayLayer:方法，则该实现负责创建位图并将其分配给图层的contents属性。
如果您的委托实现了该drawLayer:inContext:方法，则Core Animation将创建一个位图，创建一个图形上下文以绘制到该位图中，然后调用您的委托方法以填充该位图。您的委托方法要做的就是绘制到提供的图形上下文中。

委托对象必须实现displayLayer:ordrawLayer:inContext:方法。如果委托同时实现displayLayer:和drawLayer:inContext:方法，则该层仅调用该displayLayer:方法。

- (void)drawLayer:(CALayer *)theLayer inContext:(CGContextRef)theContext {
    CGMutablePathRef thePath = CGPathCreateMutable();
 
    CGPathMoveToPoint(thePath,NULL,15.0f,15.f);
    CGPathAddCurveToPoint(thePath,
                          NULL,
                          15.f,250.0f,
                          295.0f,250.0f,
                          295.0f,15.0f);
 
    CGContextBeginPath(theContext);
    CGContextAddPath(theContext, thePath);
 
    CGContextSetLineWidth(theContext, 5);
    CGContextStrokePath(theContext);
 
    // Release the path
    CFRelease(thePath);
}



CAMediaTiming协议
属性列表
beginTime	指定接收者相对于其父对象的开始时间
duration	指定动画的基本持续时间，以秒为单位。
speed	用于调整父时间与当地时间的比例，例如。如果速率为2，则本地时间的进展速度是父时间的两倍。默认为1
timeOffset	活动的本地时间中的时间偏移量
repeatCount	确定动画将重复的次数。
repeatDuration	确定动画将重复多少秒。默认为0
autoreverses	动画结束后是否执行反向动画
fillMode	结束后是否被冻结或删除。
“kCAFillModeForwards”:在动画开始之后至结束后保留最后的状态;
“kCAFillModeBackwards”:在动画开始之前迅速进入最初的状态，动画结束后返回最初状态;
“kCAFillModeBoth”:结合了上面两个；在动画开始之前迅速进入最初的状态，动画开始之后至结束后保留最后的状态。
“kCAFillModeRemoved”:动画开始前和结束后，动画对layer的状态没有影响。也就是说，动画开始前和结束后，layer都会处于添加动画前的状态


CAAnimation
属性列表
timingFunction	一个计时函数，定义动画的节奏。默认为linear匀速运动
delegate	动画的代理协议
removedOnCompletion	动画完成是否移除动画
timingFunction（CAMediaTimingFunction）
kCAMediaTimingFunctionLinear：匀速，给你一个相对静态的感觉,这个是默认的动画行为。
kCAMediaTimingFunctionEaseIn：动画缓慢进入，然后加速离开
kCAMediaTimingFunctionEaseOut：动画全速进入，然后减速的到达目的地
kCAMediaTimingFunctionEaseInEaseOut：动画缓慢的进入，中间加速，然后减速的到达目的地。
delegate
animationDidStart: 动画开始触发函数
animationDidStop:finished:：动画结束后触发函数


CAPropertyAnimation
属性列表
keyPath	指定接收者动画的关键路径。
cumulative	确定属性的值是否为上一个重复周期结束时的值加上当前重复周期的值
additive	确定是否将动画指定的值添加到当前渲染树值中以产生新的渲染树值。
valueFunction	应用于内插值的可选值函数。


CALayer 动画属性
anchorPoint
backgroundColor
backgroundFilters
borderColor
borderWidth
bounds
compositingFilter
contents
contentsRect
cornerRadius
doubleSided
filters
frame
hidden
mask
masksToBounds
opacity
position
shadowColor
shadowOffset
shadowOpacity
shadowPath
shadowRadius
sublayers
sublayerTransform
transform 翻转包含scale rotation
zPosition


CABasicAnimation 属性列表
fromValue	起始值
byValue	途径的值
toValue	结束值


CASpringAnimation 属性列表
damping	阻尼系数。必须大于或等于0。默认为10。
mass	附着在弹簧末端的物体质量。必须更大比0。默认为1。
stiffness	弹簧刚度系数。必须大于0。默认为100。
initialVelocity	物体附着在弹簧上的初始速度。默认为0，表示一个不移动的对象。负表示远离弹簧附着点的物体，正值表示物体向弹簧移动
settlingDuration	返回spring系统需要的估计持续时间

mass 值越大动画的速度变慢，并且波动幅度变大
initialVelocity 初始速度越大，弹性越大
damping 阻尼系数越大，弹性越小