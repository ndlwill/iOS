https://llvm.org/

LLVM的核心思想是将编译器分为前端和后端两个部分，前端负责将源代码转换为中间表示（IR），后端负责将中间表示转换为目标机器的汇编代码。
这种设计使得LLVM可以支持多种编程语言，因为只需要为每种语言编写一个前端，就可以利用后端的通用性支持多种目标架构。
LLVM已经成为了广泛使用的编译器基础架构，许多编程语言和工具链都采用了LLVM作为后端，例如C、C++、Objective-C、Swift、Rust、Go等。

在编译器领域，"Pass" 是指一个单独的编译器优化或分析步骤。
LLVM（Low Level Virtual Machine）是一个编译器基础架构，它使用一系列的编译器 Pass 来进行代码的转换、优化和分析。
这些 Pass 可以单独或组合使用，以改进代码的性能、减小代码的大小，或执行其他编译器任务。
LLVM Pass 可以分为两种主要类型：
Transform Pass（变换 Pass）：这些 Pass 用于改变代码的行为或结构。例如，"优化 Pass" 可以将代码转换为更有效率的形式，而 "指令选择 Pass" 可以将高级源代码翻译成底层目标代码。
Analysis Pass（分析 Pass）：这些 Pass 用于分析代码，而不会直接改变它。例如，"数据流分析 Pass" 可以帮助识别未使用的变量，而 "依赖性分析 Pass" 可以确定代码之间的依赖关系。

LLVM 提供了一系列内置的 Pass，同时还允许开发者自定义 Pass 来执行特定的编译器优化或分析任务。
开发者可以通过组合不同的 Pass 来构建自定义的编译流程，以满足特定需求。
Pass 是 LLVM 中非常重要的概念，它们是实现编译器优化和分析的基本单元。开发者可以通过配置和调整 Pass 来优化代码，提高编译器性能。

==================================================llvm-project-main/llvm/docs/GettingStarted.rst
Bitcode 是一种特定于苹果平台的中间表示格式，而 IR 是一种更通用的概念，可用于描述各种编程语言和编译器的中间表示。 Bitcode 可以被认为是 LLVM IR 的一种特殊形式

The LLVM project has multiple components. 
The core of the project is itself called "LLVM". 
This contains all of the tools, libraries, and header files needed to process intermediate representations and converts it into object files. 
Tools include an assembler, disassembler, bitcode analyzer, and bitcode optimizer.  
It also contains basic regression tests.

C-like languages use the `Clang <https://clang.llvm.org/>`_ front end.  
This component compiles C, C++, Objective C, and Objective C++ code into LLVM bitcode -- and from there into object files, using LLVM.

Other components include:
the `libc++ C++ standard library <https://libcxx.llvm.org>`_,
the `LLD linker <https://lld.llvm.org>`_, and more.


----------Getting the Source Code and Building LLVM
1. Check out LLVM (including subprojects like Clang):
git clone https://github.com/llvm/llvm-project.git

To save storage and speed-up the checkout time, you may want to do a
`shallow clone <https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt>`_.
For example, to get the latest revision of the LLVM project, use
``git clone --depth 1 https://github.com/llvm/llvm-project.git``


git clone 命令中的 --depth 1 参数用于指定克隆仓库时只获取最新的一次提交，而不是完整地克隆整个版本历史。这可以节省大量的时间和带宽，因为您只获取了最新的代码快照，而不是整个版本历史记录。
具体来说，--depth 1 表示只克隆最新的一次提交。您可以将数字 1 替换为其他数字，以获取最新提交及其之前的特定数量的提交。这对于快速克隆大型仓库或只关注最新代码的情况非常有用。
请注意，使用 --depth 选项克隆的仓库是浅层仓库，意味着您不能在其中查看或检出历史中的旧提交，因为这些提交的信息并没有完全保存在本地。
这对于只关注最新代码的使用场景非常有用，但如果您需要查看历史记录或在提交之间切换，则可能需要完整地克隆仓库。

2. Configure and build LLVM and Clang:
   * ``cd llvm-project``
   * ``cmake -S llvm -B build -G <generator> [options]``

     Some common build system generators are:

     * ``Ninja`` --- for generating `Ninja <https://ninja-build.org>`_
       build files. Most llvm developers use Ninja.
     * ``Unix Makefiles`` --- for generating make-compatible parallel makefiles.
     * ``Visual Studio`` --- for generating Visual Studio projects and
       solutions.
     * ``Xcode`` --- for generating Xcode projects.

     * See the `CMake docs
       <https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html>`_
       for a more comprehensive list.

     Some common options:

     * ``-DLLVM_ENABLE_PROJECTS='...'`` --- semicolon-separated list of the LLVM
       subprojects you'd like to additionally build. Can include any of: clang,
       clang-tools-extra, lldb, lld, polly, or cross-project-tests.

       For example, to build LLVM, Clang, and LLD, use
       ``-DLLVM_ENABLE_PROJECTS="clang;lld"``.

     * ``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full
       pathname of where you want the LLVM tools and libraries to be installed
       (default ``/usr/local``).

     * ``-DCMAKE_BUILD_TYPE=type`` --- Controls optimization level and debug
       information of the build. Valid options for *type* are ``Debug``,
       ``Release``, ``RelWithDebInfo``, and ``MinSizeRel``. For more detailed
       information see :ref:`CMAKE_BUILD_TYPE <cmake_build_type>`.

     * ``-DLLVM_ENABLE_ASSERTIONS=ON`` --- Compile with assertion checks enabled
       (default is ON for Debug builds, OFF for all other build types).

     * ``-DLLVM_USE_LINKER=lld`` --- Link with the `lld linker`_, assuming it
       is installed on your system. This can dramatically speed up link times
       if the default linker is slow.

     * ``-DLLVM_PARALLEL_{COMPILE,LINK}_JOBS=N`` --- Limit the number of
       compile/link jobs running in parallel at the same time. This is
       especially important for linking since linking can use lots of memory. If
       you run into memory issues building LLVM, try setting this to limit the
       maximum number of compile/link jobs running at the same time.

   * ``cmake --build build [--target <target>]`` or the build system specified
     above directly.

     * The default target (i.e. ``cmake --build build`` or ``make -C build``)
       will build all of LLVM.

     * The ``check-all`` target (i.e. ``ninja check-all``) will run the
       regression tests to ensure everything is in working order.

     * CMake will generate build targets for each tool and library, and most
       LLVM sub-projects generate their own ``check-<project>`` target.

     * Running a serial build will be **slow**.  To improve speed, try running a
       parallel build. That's done by default in Ninja; for ``make``, use the
       option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the
       number of available CPUs.

   * A basic CMake and build/test invocation which only builds LLVM and no other
     subprojects:

     ``cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug``

     ``ninja -C build check-llvm``

     This will setup an LLVM build with debugging info, then compile LLVM and
     run LLVM tests.

LLD（Low-Level Virtual Machine Linker）是 LLVM 编译器基础设施的一部分，它是一个用于链接程序的开源链接器。
LLD 负责将编译后的目标文件和库文件组合成可执行文件或共享库。与传统的链接器相比，LLD 旨在提供更快的链接速度和更低的内存占用。