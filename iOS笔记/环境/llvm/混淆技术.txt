OLLVM（Obfuscator-LLVM）
https://github.com/obfuscator-llvm/obfuscator

虚假控制流(BCF, Bogus Control Flow)
https://github.com/obfuscator-llvm/obfuscator/wiki/Bogus-Control-Flow#description

控制流平坦化(FLA)

指令替换(SUB)

https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0/lib/Transforms/Obfuscation


https://github.com/obfuscator-llvm/obfuscator/wiki


$ git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE=Release ../obfuscator/
$ make -j8




llvmorg-17.0.6_ollvm:
https://github.com/GreenDamTan/llvm-project_ollvm

在 LLVM 中，Pass 是对程序执行某种分析或转换的模块，是整个编译器架构的核心组成部分。
Pass 是 LLVM 编译器中的“插件式处理单元”，用于分析或修改程序的中间表示（IR）
Pass 有两个核心作用：
类型	作用说明
分析（Analysis）Pass	收集信息，但不改变 IR。例如：依赖分析、控制流图生成等。
变换（Transformation）Pass	修改 IR，进行优化或混淆。例如：死代码消除、函数内联、控制流平坦化（OLLVM 用到）。

LLVM 中的 Pass 是串联起来运行的，称为 Pass Pipeline，类似流水线结构：
IR → Pass1 → Pass2 → Pass3 → … → 优化后的 IR

生成目标代码：在所有的 Pass 完成后，LLVM 将最终的 IR 转换为目标机器代码（通常是 .o 或 .obj 文件）。
链接阶段：最终的链接阶段是将多个目标文件（例如 .o 文件）和库链接在一起，生成可执行文件或共享库。

你可以通过 opt 工具运行某个 Pass：
opt -mem2reg input.ll -o output.ll
mem2reg 是一个将内存变量提升为寄存器变量的转换 Pass。

OLLVM 中的混淆 Pass 就是变换 Pass
-mllvm -fla -mllvm -bcf -mllvm -sub
这些实际上就是自定义的 LLVM Transformation Pass，用来做：
-fla：Flattening，控制流变形
-bcf：Bogus Control Flow，伪造控制分支
-sub：Substitution，指令替换

