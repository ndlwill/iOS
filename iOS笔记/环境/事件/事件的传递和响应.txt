事件的传递和响应（iOS响应者链条）

只有继承了UIResponder的对象才能接收并处理事件。我们称之为响应者对象

UIApplication、UIViewController、UIView都继承自UIResponder


事件的产生和传递(重点)
1.发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件队列中
2.UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）
3.主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步
4.找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理

事件的响应:(重点)
事件的响应其实就是调用touches方法
找到最合适的视图控件后，就会调用控件的touches方法来作具体的事件处理(响应)

这些touches方法的默认做法是将事件顺着响应者链条向上传递，将事件交给上一个响应者进行处理(响应)
如果找到了最合适的响应者,但是如果其没有实现touches方法,就会调用其上一个响应者对象的touches方法

响应者链条:由很多响应者(继承了UIResponder的对象)链接在一起组合起来的一个链条

判断当前响应者的上一个响应者:
判断当前是否是控制器的View,如果是控制器的View,那么上一个响应者就是控制器
如果当前不是控制器的view,上一个响应者就是其父控件

可以让一个触摸事件发生的时候让多个响应者同时响应事件(也就是执行touches方法)
做法:在当前响应者的touches方法中调用super的touches方法




事件传递的完整过程:
1.事件由上往下传递(由父控件传递给子控件)，找到最合适的控件来处理这个事件
2.调用最合适控件的touches….方法
如果调用了[super touches….]; 就会将事件顺着响应者链条往上传递，传递给上一个响应者,此时两者都能响应事件
3.如果最合适的控件没有实现touches….方法,就会将事件顺着响应者链条往上传递，传递给上一个响应者,由上一个响应者来响应事件
4.如果依次传递到了Application还不能响应,就会丢弃这个事件




1.事件的传递 : 由UIApplication --> UIWindow --> 递归找到最合适的响应者
2.事件的响应 : 调用最合适的响应者的touches方法--> 如果其没有实现,默认做法,将事件传递给上一个响应者-->找到上一个响应者,调用它的touches方法