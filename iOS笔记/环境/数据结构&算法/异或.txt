异或运算规则
A	B	A ^ B
0	0	0
0	1	1
1	0	1
1	1	0

换句话说：相同为 0，不同为 1


异或的“可逆性”很重要！
a ^ b = c   →   c ^ b = a   →   c ^ a = b


这就是为啥异或常被用在：
加密算法（轻量级）
协议加密/解密
数据恢复（如 RAID）
位图处理

uint8_t a = 0x41;  // 'A'
uint8_t b = 0x0A;

uint8_t c = a ^ b;  // 加密
uint8_t d = c ^ b;  // 解密回来

std::cout << std::hex << (int)c << " " << (int)d << std::endl;
// 输出：4b 41



原始数据（原始字节序列）是：[0x41, 0x42, 0x43] → 即 'A', 'B', 'C'
FV_ProtocolV2MagicConst = 7
我们使用如下协议：
// 编码规则：
encoded = (originalByte ^ lastByte) + FV_ProtocolV2MagicConst;
// 解码规则：
decoded = (encodedByte - FV_ProtocolV2MagicConst) ^ lastDecodedByte;
