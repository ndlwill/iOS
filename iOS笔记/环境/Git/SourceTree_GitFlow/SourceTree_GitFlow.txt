保护分支：项目管理员才能管理（Push）被保护的分支，一般为master分支


初始化:
clone工程
仓库->git-flow  项目代码库里自动增加了一个develop的分支
还有三类分支的命名规则：feature、release、hotfix
将新创建的develop分支推送到远端仓库，点击‘推送’，弹出框里勾选新创建的develope分支并点击“推送”按钮

创建分支:
hotfix
bug修复分支，用于解决生产环境发现的bug
派生于master;合并于master、develop
仓库->git-flow->建立新的修复补丁->只需要输入名字即可
开发工作完成后，hotfix分支会同时合并到master与develope。仓库->git-flow->完成修复补丁
输入信息标签，可选择“删除分支”。不建议选择“推送变更到远程仓库”，合并分支后自测一遍再推送develope
对于master看情况是否需要推送，如果没有权限就不推送，待后期领导在远端develope合并到master后再进行拉取，有权限的话就也推送

feature
功能开发分支，用于承接具体功能需求的开发
派生、合并都在develop分支
仓库->git-flow->建立新的功能->只需要输入名字即可
仓库->git-flow->完成功能
可选“删除分支”，点击“确定”。这里没有“推送变更到远程仓库”的选项
推送develope

release
版本发布分支，用于完成发布准备的
派生于develop
合并于master、develop
当一个或多个需求开发完毕，由feature分支合并到develope后，可以提测后，就要创建release分支了。
仓库->git-flow->建立新的发布版本
测试结束，bug修改完毕时，将release分支合并到develope和master分支
仓库->git-flow->完成发布版本
可选“删除分支”输入标签后v1.0.0，点击“确定”，此时不建议选“推送变更到远程仓库”
验证无误后，就可以推送到远程仓库了。

总结:
远程仓库仅仅应该存在两个分支，一个是master分支，存放线上（生产环境）版本，这个分支的代码总是可靠可用的；另一个是develop分支，这个分支用于日常需求开发
master分支上的内容不应直接提交，应该由develop分支发布到release分支，经过QA测试确认可以上线后，再完成发布新版本功能然后合并入master分支；或者由hotfix分支修复完补丁合并上去
develop分支下允许有多个feature分支，并不会冲突；允许在仍然有feature在开发的情况下从develop分支拉取到release分支。
