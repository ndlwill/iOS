git log
commit c4f9d71863ab78cfca754c78e9f0f2bf66a2bd77 (HEAD -> master)

git reset HEAD <file> 指的是恢复到当前分支中文件的状态

git其实就是靠HEAD知道我们该处于哪个分支的，你可以把HEAD理解成一个指针，HEAD指针通常会指向一个分支
git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针

切换回master分支: git checkout master

cat .git/HEAD
ref: refs/heads/master
当前HEAD指针指向了另一个文件，这个文件就是.git/refs/heads/master
看看.git/refs/heads/master这个文件的文件内容
cat .git/refs/heads/master
7406a10efcc169bbab17827aeda189aa20376f7f
这个文件的内容是一串哈希码，而这个哈希码正是master分支上最新的提交所对应的哈希码

"指针"还有另外一个名字，它们被称之为"引用" （references 或者 refs），其实都是一样的东西，不用纠结于它们的名字。

结论：
HEAD指针 --------> 分支指针 --------> 最新提交

分离头的状态其实就是HEAD指针没有指向分支指针，而是直接指向了某个提交

====================================================HEAD^ 和 HEAD~
HEAD~1指回退一个快照，可以简写为HEAD~

~ 是用来在当前提交路径上回溯的修饰符
HEAD~{n} 表示当前所在的提交路径上的前 n 个提交（n >= 0）：
HEAD = HEAD~0
HEAD~ = HEAD~1
HEAD~~ = HEAD~2
HEAD{n个~} = HEAD~n

HEAD^n
^ 是用来切换父级提交路径的修饰符。当我们始终在一个分支比如 dev 开发/提交代码时，
每个 commit 都只会有一个父级提交，就是上一次提交，但当并行多个分支开发，
feat1, feat2, feat3，完成后 merge feat1 feat2 feat3 回 dev 分支后，此次的 merge commit 就会有多个父级提交。

第一个父级提交 即 feat1 的最近第1次的提交
git show HEAD^

第二个父级提交 即 feat2 的最近第1次的提交
git show HEAD^2
第二个父级提交的上1次提交 即 feat2 的最近第2次的提交
git show HEAD^2~1