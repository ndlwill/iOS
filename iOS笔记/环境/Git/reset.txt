git-reset - Reset current HEAD to the specified state

意思就是可以让HEAD这个指针指向其他的地方。
例如我们有一次commit不是不是很满意，需要回到上一次的Commit里面。
那么这个时候就需要通过reset，把HEAD指针指向上一次的commit的点。

它有三种模式，soft,mixed,hard

Git会有三个区域：
Working Tree 当前的工作区域
Index/Stage 暂存区域 使用git add xx，就可以将xx添加近Stage里面
Repository 提交的历史 即使用git commit提交后的结果

当git管理的文件夹里面的内容出现改变后，此時 working tree 的內容就会跟 index 及 repository(HEAD)的不一致，
而Git知道是哪些文件(Tracked File)被改动过，直接将文件状态设置为 modified (Unstaged files)。

当我們执行 git add 后，会将这些改变的文件內容加入 index 中 (Staged files)，
所以此时working tree跟index的內容是一致的，但他们与repository(HEAD)內容不一致

接着执行 git commit 後，將Git索引中所有改变的文件內容提交至 Repository 中，
建立出新的 commit 节点(HEAD)后， working tree 、 index 與与repository(HEAD)区域的内容 又会保持一致。

mixed: 重置到某次commit 保留这次提交后面的所有修改 并重置索引   把所有差异都混合（mixed）放在工作目录中
soft: 重置到某次commit 保留这次提交后面的所有修改   保留工作目录，并把重置 HEAD 所带来的新的差异放进暂存区

hard: 重置到某次commit 后面的修改全部不保留

git reset --hard HEAD^
你的 HEAD 和当前 branch 切到上一条commit 的同时，你工作目录里的新改动和已经add到stage区的新改动也一起全都消失了