https://github.com/tdlib/td/blob/master/CMake/iOS.cmake // 推荐
https://github.com/leetal/ios-cmake/blob/master/ios.toolchain.cmake

https://www.jianshu.com/u/92039eec654b

CMake（构建工具） 的工作原理：
你首先编写一个 CMakeLists.txt 文件，其中定义了项目的源代码、目标文件、依赖项和构建规则。
运行 cmake 命令来生成对应的构建系统文件（如 Makefile 或 Visual Studio 项目文件）。
使用生成的构建系统文件（例如 make 或 ninja）来执行实际的构建过程。

#####
cmake中要特别注意命令和变量的大小写
cmake的内置命令是不区分大小写的
cmake内置变量是区分大小写的，或者干脆就说，cmake的所有变量都是区分大小写的
#####


ccmake 是 CMake 的一个交互式配置工具，它帮助你更方便地配置 CMake 项目的选项。
它实际上是 CMake 的一个命令行界面，提供了一个交互式的方式来配置 CMake 项目的选项和生成构建系统所需的 Makefiles 或其他构建工具文件。
与普通的命令行方式相比，ccmake 提供了一个基于文本界面的配置界面，使配置更加交互和可视化。你可以使用箭头键、Enter 键等来浏览和修改项目的配置选项，然后保存配置并生成构建文件。
这个过程允许你以交互方式配置项目，而不必直接编辑 CMakeLists.txt 文件。一旦你保存了配置并生成了构建系统文件，你可以使用常规的构建工具（如 make、ninja、Xcode、Visual Studio 等）来构建你的项目。
具体来说，使用步骤如下：
进入你的 CMake 项目目录。
运行命令 ccmake .（注意最后的点表示当前目录）。
在 ccmake 的界面中，你可以浏览和修改各种 CMake 配置选项。
使用箭头键和其他键来导航和编辑选项，按 c 键来进行配置。
修改完配置后，按 g 键来生成构建文件（通常是 Makefile）。
退出 ccmake。



CMake就是生成Makefile的自动化构建工具（自动生成Makefile文件，不需要我们自己写Makefile）

它使用平台无关的 CMake 清单文件CMakeLists.txt

我们写代码无非就是将写好的代码进行编译生成可执行文件，那么就可以用CMake 生成 Makefile 文件并编译源代码

它的流程基本如下：
编写 CMake配置文件 CMakeLists.txt 。
执行cmake PATH命令生成 Makefile。其中， PATH 是 CMakeLists.txt 所在的目录。
使用 make 命令进行编译。（既然步骤2的时候就生成Makefile文件了，那么肯定是可以直接make编译啦）

基本语法 一个最基本的CmakeLists.txt文件最少需要包含以下3行代码：
CMake 最低版本号要求
cmake_minimum_required (VERSION 2.8)

项目信息
project (section1)

指定生成目标
add_executable(section1 main.c) 注意：CMake的语法支持大写、小写甚至是大小写混合的，实在是太变态了，使用的CMake语法是小写的，全局变量是大写的，局部变量是小写！

其实上面的三句代码看起来像是函数，但并不是函数而是命令，它跟我们的在linux的命令差不多，反正就是指定CMake要怎么做的一系列命令。比如：
cmake_minimum_required：设置一个工程所需要的最低 CMake版本，如果 CMake的当前版本低于指定的版本，它会停止处理工程文件，并报告错误。
project：为整个工程设置一个工程名。
add_executable：使用给定的源文件，为工程引入一个可执行文件。