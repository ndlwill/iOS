==================================================make makefile cmake
make 是用来执行Makefile的

Makefile是类unix环境下(比如Linux)的类似于批处理的"脚本"文件。其基本语法是: 目标+依赖+命令，只有在目标文件不存在，或目标比依赖的文件更旧，命令才会被执行。

Makefile+make可理解为类unix环境下的项目管理工具，但它太基础了，抽象程度不高，而且在windows下不太友好(针对visual studio用户)，于是就有了跨平台项目管理工具cmake

cmake是跨平台项目管理工具，它用更抽象的语法来组织项目。虽然，仍然是目标，依赖之类的东西，但更为抽象和友好，比如你可用math表示数学库，
而不需要再具体指定到底是math.dll还是libmath.so，在windows下它会支持生成visual studio的工程，在linux下它会生成Makefile，甚至它还能生成eclipse工程文件。
也就是说，从同一个抽象规则出发，它为各个编译器定制工程文件。

cmake是抽象层次更高的项目管理工具，cmake命令执行的CMakeLists.txt文件

总结一下，make用来执行Makefile，cmake用来执行CMakeLists.txt
Makefile的抽象层次最低，cmake在Linux等环境下最后还是会生成一个Makefile。
cmake支持跨平台，cmake的做法是生成指定编译器的工程文件。

cl表示visual studio的编译器，gcc表示linux下的编译器

make clean删除makefile产生的所有文件
没有cmake clean
我通常在"build"之类的单个文件夹中构建项目。因此，如果我想cmake clean，我可以rm -rf build。

https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html

==========configure_file
将一个文件(由input参数指定)拷贝到指定位置(由output参数指定)，并根据options修改其内容。

configure_file命令一般用于自定义编译选项或者自定义宏的场景

configure_file命令会根据options指定的规则，自动对input文件中cmakedefine关键字及其内容进行转换。
具体来说，会做如下几个替换：
1. 将input文件中的@var@或者${var}替换成cmake中指定的值。
2. 将input文件中的#cmakedefine var关键字替换成#define var或者#undef var，取决于cmake是否定义了var。

需要准备2个文件，config.h.in（input）、CMakeLists.txt，（output是自动生成的）
执行cmake命令: cmake .
自动生成的config.h文件内容

input - 输入文件的路径，它是一个相对路径，以CMAKE_CURRENT_SOURCE_DIR为路径前缀。此外，\color{red}{它必须是一个文件，不能是目录}。
output - 输出文件或目录，它也是一个相对路径，以CMAKE_CURRENT_BINARY_DIR为前缀。

-- The C compiler identification is AppleClang 12.0.0.12000032
-- The CXX compiler identification is AppleClang 12.0.0.12000032
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
var1=ON var2=13 var3=var3string var4=VARTEST4 var5=VARTEST5
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/youdone-ndl/Desktop/iOS/iOS笔记/环境/TestCMake/build

==========What is the difference between include_directories && target_include_directories
include_directories(x/y) affects directory scope. 
All targets in this CMakeLists, as well as those in all subdirectories added after the point of its call, will have the path x/y added to their include path.

target_include_directories(t x/y) has target scope—it adds x/y to the include path for target t.

You want the former one if all of your targets use the include directories in question. 
You want the latter one if the path is specific to a target, or if you want finer control of the path's visibility. 
The latter comes from the fact that target_include_directories() supports the PRIVATE, PUBLIC, and INTERFACE qualifiers.

============================================================
CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。
CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so(shared object)）。
因此CMake的编译基本就两个步骤：
cmake
make

cmake后会生成很多编译的中间文件以及makefile文件
其中cmake .. 在build里生成Makefile，make根据生成makefile文件，编译程序，make应当在有Makefile的目录下，根据Makefile生成可执行文件。

============================================================INTERFACE && PUBLIC && PRIVATE && target_include_directories && target_link_libraries

######
https://leimao.github.io/blog/CMake-Public-Private-Interface/
In CMake, for any target, in the preprocessing stage, it comes with a INCLUDE_DIRECTORIES and a INTERFACE_INCLUDE_DIRECTORIES for searching the header files building.

Include Inheritance:
###
target_include_directories will populate all the directories to INCLUDE_DIRECTORIES and/or INTERFACE_INCLUDE_DIRECTORIES depending on the keyword <PRIVATE|PUBLIC|INTERFACE> we specified.

The INCLUDE_DIRECTORIES will be used for the current target only and the INTERFACE_INCLUDE_DIRECTORIES will be appended to the INCLUDE_DIRECTORIES of any other target which has dependencies on the current target.

Include Inheritance	Description
PUBLIC	All the directories following PUBLIC will be used for the current target and the other targets that have dependencies on the current target, i.e., appending the directories to INCLUDE_DIRECTORIES and INTERFACE_INCLUDE_DIRECTORIES.
PRIVATE	All the include directories following PRIVATE will be used for the current target only, i.e., appending the directories to INCLUDE_DIRECTORIES.
INTERFACE	All the include directories following INTERFACE will NOT be used for the current target but will be accessible for the other targets that have dependencies on the current target, i.e., appending the directories to INTERFACE_INCLUDE_DIRECTORIES.

Note that when we do target_link_libraries(<target> <PRIVATE|PUBLIC|INTERFACE> <item>), the dependent <item>, if built in the same CMake project, would append the INTERFACE_INCLUDE_DIRECTORIES of <item> to the INCLUDE_DIRECTORIES of <target>. 
By controlling the INTERFACE_INCLUDE_DIRECTORIES, we could eliminate some unwanted or conflicting declarations from <item> to the <target>.

For example, the fruit library has INCLUDE_DIRECTORIES of fruit_h, tree_h, and INTERFACE_INCLUDE_DIRECTORIES of fruit_h. 
If there is a apple library that is linked with the fruit library, the apple library would also have the fruit_h in its INCLUDE_DIRECTORIES as well. 
We could equivalently say, the apple library’s include directory inherited the fruit_h of the fruit library.
###

Link Inheritance:
###
Similarly, for any target, in the linking stage, we would need to decide, given the item to be linked, whether we have to put the item in the link dependencies, or the link interface, or both, in the compiled target. 
Here the link dependencies means the item has some implementations that the target would use, and it is linked to the item, 
so that whenever we call the functions or methods corresponding to those implementations it will always be mapped correctly to the implementations in item via the link, 
whereas the link interface means the target becomes an interface for linking the item for other targets which have dependencies on the target, 
and the target does not have to use item at all.

Link Type	Description
PUBLIC	All the objects following PUBLIC will be used for linking to the current target and providing the interface to the other targets that have dependencies on the current target.
PRIVATE	All the objects following PRIVATE will only be used for linking to the current target.
INTERFACE	All the objects following INTERFACE will only be used for providing the interface to the other targets that have dependencies on the current target.

For example, if the fruit library has the implementation of functions, such as size and color, 
and the apple library has a function apple_size which called the size from the fruit library and was PRIVATE linked with the fruit library. 
We could create an executable eat_apple that calls apple_size by PUBLIC or PRIVATE linking with the apple library. 
However, if we want to create an executable eat_apple that calls the size and color from the fruit library, only linking with the apple library will cause building error, 
since the fruit library was not part of the interface in the apple library, and is thus inaccessible to eat_apple. To make the apple library to inherit the size and color from the fruit library, 
we have to make the linking of the apple library to the the fruit library PUBLIC instead of PRIVATE.

###

Conclusions
The CMake builds a hierarchical project via the include interface or link interface. The “inheritance” mechanism in C++ is built upon the include interface or link interface.

==================================================target_compile_definitions
target_compile_definitions(<target>
  <INTERFACE|PUBLIC|PRIVATE> [items1...]
  [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])
Specifies compile definitions to use when compiling a given <target>. The named <target> must have been created by a command such as add_executable() or add_library() and must not be an ALIAS target.

PRIVATE and PUBLIC items will populate the COMPILE_DEFINITIONS property of <target>. PUBLIC and INTERFACE items will populate the INTERFACE_COMPILE_DEFINITIONS property of <target>. 

Any leading -D on an item will be removed. Empty items are ignored. For example, the following are all equivalent:
target_compile_definitions(foo PUBLIC FOO)
target_compile_definitions(foo PUBLIC -DFOO)  # -D removed
target_compile_definitions(foo PUBLIC "" FOO) # "" ignored
target_compile_definitions(foo PUBLIC -D FOO) # -D becomes "", then ignored

Definitions may optionally have values:

target_compile_definitions(foo PUBLIC FOO=1)
Note that many compilers treat -DFOO as equivalent to -DFOO=1, but other tools may not recognize this in all circumstances

==================================================Transitive Usage Requirements
add_library(archive archive.cpp)
target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

add_library(serialization serialization.cpp)
target_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)

add_library(archiveExtras extras.cpp)
target_link_libraries(archiveExtras PUBLIC archive)
target_link_libraries(archiveExtras PRIVATE serialization)
# archiveExtras is compiled with -DUSING_ARCHIVE_LIB
# and -DUSING_SERIALIZATION_LIB

add_executable(consumer consumer.cpp)
# consumer is compiled with -DUSING_ARCHIVE_LIB
target_link_libraries(consumer archiveExtras)

Because archive is a PUBLIC dependency of archiveExtras, the usage requirements of it are propagated to consumer too. 
Because serialization is a PRIVATE dependency of archiveExtras, the usage requirements of it are not propagated to consumer.

###
Generally, a dependency should be specified in a use of target_link_libraries() with the PRIVATE keyword if it is used by only the implementation of a library, and not in the header files. 
If a dependency is additionally used in the header files of a library (e.g. for class inheritance), then it should be specified as a PUBLIC dependency. 
A dependency which is not used by the implementation of a library, but only by its headers should be specified as an INTERFACE dependency.
###

The target_link_libraries() command may be invoked with multiple uses of each keyword:
target_link_libraries(archiveExtras
  PUBLIC archive
  PRIVATE serialization
)

Usage requirements are propagated by reading the INTERFACE_ variants of target properties from dependencies and appending the values to the non-INTERFACE_ variants of the operand. 
For example, the INTERFACE_INCLUDE_DIRECTORIES of dependencies is read and appended to the INCLUDE_DIRECTORIES of the operand. 
In cases where order is relevant and mai


For example, if the linked libraries for a target must be specified in the order lib1 lib2 lib3 , but the include directories must be specified in the order lib3 lib1 lib2:
target_link_libraries(myExe lib1 lib2 lib3)
target_include_directories(myExe PRIVATE $<TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES>)