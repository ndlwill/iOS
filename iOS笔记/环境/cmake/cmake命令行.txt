Generate a Project Buildsystem
 cmake [<options>] <path-to-source | path-to-existing-build>
 cmake [<options>] -S <path-to-source> -B <path-to-build>

Build a Project
 cmake --build <dir> [<options>] [-- <build-tool-options>]

Install a Project
 cmake --install <dir> [<options>]

Open a Project
 cmake --open <dir>

Run a Script
 cmake [-D <var>=<value>]... -P <cmake-script-file>

Run a Command-Line Tool
 cmake -E <command> [<options>]

Run the Find-Package Tool
 cmake --find-package [<options>]

Run a Workflow Preset
 cmake --workflow [<options>]

View Help
 cmake --help[-<topic>]

==============================Introduction to CMake Buildsystems
A buildsystem describes how to build a project's executables and libraries from its source code using a build tool to automate the process.
For example, a buildsystem may be a Makefile for use with a command-line make tool or a project file for an Integrated Development Environment (IDE).
In order to avoid maintaining multiple such buildsystems, a project may specify its buildsystem abstractly using files written in the CMake language.
From these files CMake generates a preferred buildsystem locally for each user through a backend called a generator.

To generate a buildsystem with CMake, the following must be selected:
1.Source Tree
The top-level directory containing source files provided by the project. 
The project specifies its buildsystem using files as described in the cmake-language(7) manual, 
starting with a top-level file named CMakeLists.txt. These files specify build targets and their dependencies as described in the cmake-buildsystem(7) manual.

2.Build Tree
The top-level directory in which buildsystem files and build output artifacts (e.g. executables and libraries) are to be stored. 
CMake will write a CMakeCache.txt file to identify the directory as a build tree and store persistent information such as buildsystem configuration options.

To maintain a pristine source tree, perform an out-of-source build by using a separate dedicated build tree. 
An in-source build in which the build tree is placed in the same directory as the source tree is also supported, but discouraged.

3.Generator
This chooses the kind of buildsystem to generate. 
See the cmake-generators(7) manual for documentation of all generators. Run cmake --help to see a list of generators available locally. 
Optionally use the -G option below to specify a generator, or simply accept the default CMake chooses for the current platform.

When using one of the Command-Line Build Tool Generators CMake expects that the environment needed by the compiler toolchain is already configured in the shell. 
When using one of the IDE Build Tool Generators, no particular environment is needed.

==============================Generate a Project Buildsystem
Run CMake with one of the following command signatures to specify the source and build trees and generate a buildsystem:
1.cmake [<options>] <path-to-source>
Uses the current working directory as the build tree, and <path-to-source> as the source tree.
The specified path may be absolute or relative to the current working directory.
The source tree must contain a CMakeLists.txt file and must not contain a CMakeCache.txt file because the latter identifies an existing build tree. For example:

mkdir build ; cd build
cmake ../src

2.cmake [<options>] <path-to-existing-build>
Uses <path-to-existing-build> as the build tree, and loads the path to the source tree from its CMakeCache.txt file, which must have already been generated by a previous run of CMake. 
The specified path may be absolute or relative to the current working directory. For example:

cd build
cmake .

3.cmake [<options>] -S <path-to-source> -B <path-to-build>
New in version 3.13.
Uses <path-to-build> as the build tree and <path-to-source> as the source tree.
The specified paths may be absolute or relative to the current working directory. The source tree must contain a CMakeLists.txt file. The build tree will be created automatically if it does not already exist. For example:

cmake -S src -B build

In all cases the <options> may be zero or more of the Options below.

current working directory (cwd)

After generating a buildsystem one may use the corresponding native build tool to build the project. 
For example, after using the Unix Makefiles generator one may run make directly:
make
make install
Alternatively, one may use cmake to Build a Project by automatically choosing and invoking the appropriate native build tool.

==============================Options
-S <path-to-source>
Path to root directory of the CMake project to build.

-B <path-to-build>
Path to directory which CMake will use as the root of build directory.

If the directory doesn't already exist CMake will make it.

-C <initial-cache>
Pre-load a script to populate the cache.

When CMake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. 
This option may be used to specify a file from which to load cache entries before the first pass through the project's CMake listfiles. The loaded entries take priority over the project's default values. The given file should be a CMake script containing set() commands that use the CACHE option, not a cache-format file.

References to CMAKE_SOURCE_DIR and CMAKE_BINARY_DIR within the script evaluate to the top-level source and build tree.

-D <var>:<type>=<value>, -D <var>=<value>
Create or update a CMake CACHE entry.

When CMake is first run in an empty build tree, it creates a CMakeCache.txt file and populates it with customizable settings for the project. 
This option may be used to specify a setting that takes priority over the project's default value. 
The option may be repeated for as many CACHE entries as desired.

If the :<type> portion is given it must be one of the types specified by the set() command documentation for its CACHE signature. 
If the :<type> portion is omitted the entry will be created with no type if it does not exist with a type already. 
If a command in the project sets the type to PATH or FILEPATH then the <value> will be converted to an absolute path.

This option may also be given as a single argument: -D<var>:<type>=<value> or -D<var>=<value>.

It's important to note that the order of -C and -D arguments is significant. 
They will be carried out in the order they are listed, with the last argument taking precedence over the previous ones. 
For example, if you specify -DCMAKE_BUILD_TYPE=Debug, followed by a -C argument with a file that calls:

set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)

then the -C argument will take precedence, and CMAKE_BUILD_TYPE will be set to Release. 
However, if the -D argument comes after the -C argument, it will be set to Debug.

If a set(... CACHE ...) call in the -C file does not use FORCE, and a -D argument sets the same variable,
the -D argument will take precedence regardless of order because of the nature of non-FORCE set(... CACHE ...) calls.

-G <generator-name>
Specify a build system generator.

CMake may support multiple native build systems on certain platforms. A generator is responsible for generating a particular build system. Possible generator names are specified in the cmake-generators(7) manual.

If not specified, CMake checks the CMAKE_GENERATOR environment variable and otherwise falls back to a builtin default selection.

--install-prefix <directory>
Specify the installation directory, used by the CMAKE_INSTALL_PREFIX variable. Must be an absolute path.

-Wno-dev
Suppress developer warnings.

Suppress warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn off deprecation warnings.

-Wdev
Enable developer warnings.

Enable warnings that are meant for the author of the CMakeLists.txt files. By default this will also turn on deprecation warnings.

-Wdeprecated
Enable deprecated functionality warnings.

Enable warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.

-Wno-deprecated
Suppress deprecated functionality warnings.

Suppress warnings for usage of deprecated functionality, that are meant for the author of the CMakeLists.txt files.

==============================Run a Script
cmake [-D <var>=<value>]... -P <cmake-script-file> [-- <unparsed-options>...]
-D <var>=<value>
Define a variable for script mode.

-P <cmake-script-file>
Process the given cmake file as a script written in the CMake language. No configure or generate step is performed and the cache is not modified. If variables are defined using -D, this must be done before the -P argument.

Any options after -- are not parsed by CMake, but they are still included in the set of CMAKE_ARGV<n> variables passed to the script (including the -- itself).
