Deprecated since version 3.0: Use the execute_process() command instead.
Run an executable program during the processing of the CMakeList.txt file.

exec_program(Executable [directory in which to run]
             [ARGS <arguments to executable>]
             [OUTPUT_VARIABLE <var>]
             [RETURN_VALUE <var>])

The executable is run in the optionally specified directory.
The executable can include arguments if it is double quoted, but it is better to use the optional ARGS argument to specify arguments to the program.
This is because cmake will then be able to escape spaces in the executable path.
An optional argument OUTPUT_VARIABLE specifies a variable in which to store the output.
To capture the return value of the execution, provide a RETURN_VALUE.
If OUTPUT_VARIABLE is specified, then no output will go to the stdout/stderr of the console running cmake.


execute_process:
Execute one or more child processes.

execute_process(COMMAND <cmd1> [<arguments>]
                [COMMAND <cmd2> [<arguments>]]...
                [WORKING_DIRECTORY <directory>]
                [TIMEOUT <seconds>]
                [RESULT_VARIABLE <variable>]
                [RESULTS_VARIABLE <variable>]
                [OUTPUT_VARIABLE <variable>]
                [ERROR_VARIABLE <variable>]
                [INPUT_FILE <file>]
                [OUTPUT_FILE <file>]
                [ERROR_FILE <file>]
                [OUTPUT_QUIET]
                [ERROR_QUIET]
                [COMMAND_ECHO <where>]
                [OUTPUT_STRIP_TRAILING_WHITESPACE]
                [ERROR_STRIP_TRAILING_WHITESPACE]
                [ENCODING <name>]
                [ECHO_OUTPUT_VARIABLE]
                [ECHO_ERROR_VARIABLE])

Runs the given sequence of one or more commands.

Commands are executed concurrently as a pipeline, with the standard output of each process piped to the standard input of the next.
A single standard error pipe is used for all processes.

Options:

COMMAND
A child process command line.

CMake executes the child process using operating system APIs directly.
All arguments are passed VERBATIM to the child process.
No intermediate shell is used, so shell operators such as > are treated as normal arguments.
(Use the INPUT_*, OUTPUT_*, and ERROR_* options to redirect stdin, stdout, and stderr.)
If a sequential execution of multiple commands is required, use multiple execute_process() calls with a single COMMAND argument.

OUTPUT_VARIABLE, ERROR_VARIABLE
The variable named will be set with the contents of the standard output and standard error pipes, respectively.
If the same variable is named for both pipes their output will be merged in the order produced.