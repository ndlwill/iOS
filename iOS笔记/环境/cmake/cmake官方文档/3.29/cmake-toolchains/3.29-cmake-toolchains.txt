CMake uses a toolchain of utilities to compile, link libraries and create archives, and other tasks to drive the build.
The toolchain utilities available are determined by the languages enabled.
In normal builds, CMake automatically determines the toolchain for host builds based on system introspection and defaults.
In cross-compiling scenarios, a toolchain file may be specified with information about compiler and utility paths.

New in version 3.19: One may use cmake-presets(7) to specify toolchain files.

==================================================Languages:
Languages are enabled by the project() command.
Language-specific built-in variables, such as CMAKE_CXX_COMPILER, CMAKE_CXX_COMPILER_ID etc are set by invoking the project() command.
If no project command is in the top-level CMakeLists file, one will be implicitly generated. By default the enabled languages are C and CXX:
project(C_Only C)

A special value of NONE can also be used with the project() command to enable no languages:
project(MyProject NONE)

The enable_language() command can be used to enable languages after the project() command:
enable_language(CXX)

When a language is enabled, CMake finds a compiler for that language, 
and determines some information, 
such as the vendor and version of the compiler, 
the target architecture and bitwidth, the location of corresponding utilities etc.

The ENABLED_LANGUAGES global property contains the languages which are currently enabled.

==================================================Variables and Properties
Several variables relate to the language components of a toolchain which are enabled:
CMAKE_<LANG>_COMPILER
The full path to the compiler used for <LANG>

CMAKE_<LANG>_COMPILER_ID
The compiler identifier used by CMake

CMAKE_<LANG>_COMPILER_VERSION
The version of the compiler.

CMAKE_<LANG>_FLAGS
The variables and the configuration-specific equivalents contain flags that will be added to the compile command when compiling a file of a particular language.

CMake needs a way to determine which compiler to use to invoke the linker.
This is determined by the LANGUAGE property of source files of the target, and in the case of static libraries, the LANGUAGE of the dependent libraries.
The choice CMake makes may be overridden with the LINKER_LANGUAGE target property.

==================================================Cross Compiling
uname -s：显示操作系统名称。
uname -r：显示操作系统内核版本。
uname -m：显示系统硬件架构。

If cmake(1) is invoked with the command line parameter --toolchain path/to/file or -DCMAKE_TOOLCHAIN_FILE=path/to/file, 
the file will be loaded early to set values for the compilers.
The CMAKE_CROSSCOMPILING variable is set to true when CMake is cross-compiling.