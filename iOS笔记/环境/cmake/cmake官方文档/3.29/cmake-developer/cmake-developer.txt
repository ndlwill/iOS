https://cmake.org/cmake/help/v3.29/manual/cmake-developer.7.html#find-modules

==================================================Find Modules

A "find module" is a Find<PackageName>.cmake file to be loaded by the find_package() command when invoked for <PackageName>.

The primary task of a find module is to determine whether a package is available, 
set the <PackageName>_FOUND variable to reflect this and provide any variables, 
macros and imported targets required to use the package.
A find module is useful in cases where an upstream library does not provide a config file package.


The traditional approach is to use variables for everything, including libraries and executables: see the Standard Variable Names section below.
This is what most of the existing find modules provided by CMake do.


The more modern approach is to behave as much like config file packages files as possible, by providing imported target.
https://cmake.org/cmake/help/v3.29/manual/cmake-buildsystem.7.html#imported-targets

This has the advantage of propagating Transitive Usage Requirements to consumers.
https://cmake.org/cmake/help/v3.29/manual/cmake-buildsystem.7.html#target-usage-requirements

In either case (or even when providing both variables and imported targets), find modules should provide backwards compatibility with old versions that had the same name.

A FindFoo.cmake module will typically be loaded by the command:
find_package(Foo [major[.minor[.patch[.tweak]]]]
             [EXACT] [QUIET] [REQUIRED]
             [[COMPONENTS] [components...]]
             [OPTIONAL_COMPONENTS components...]
             [NO_POLICY_SCOPE])

See the find_package() documentation for details on what variables are set for the find module. 
Most of these are dealt with by using FindPackageHandleStandardArgs.
https://cmake.org/cmake/help/v3.29/module/FindPackageHandleStandardArgs.html#module:FindPackageHandleStandardArgs

