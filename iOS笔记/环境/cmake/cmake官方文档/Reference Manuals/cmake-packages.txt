https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html

Packages provide dependency information to CMake based buildsystems. 
Packages are found with the find_package() command. 
The result of using find_package() is either a set of IMPORTED targets, or a set of variables corresponding to build-relevant information.

IMPORTED
Read-only indication of whether a target is IMPORTED.
The boolean value of this property is True for targets created with the IMPORTED option to add_executable() or add_library(). 
It is False for targets built within the project.

==============================Using Packages
CMake provides direct support for two forms of packages, Config-file Packages and Find-module Packages.
Indirect support for pkg-config packages is also provided via the FindPkgConfig module. 
In all cases, the basic form of find_package() calls is the same:

find_package(Qt4 4.7.0 REQUIRED) # CMake provides a Qt4 find-module
find_package(Qt5Core 5.1.0 REQUIRED) # Qt provides a Qt5 package config file.
find_package(LibXml2 REQUIRED) # Use pkg-config via the LibXml2 find-module

In cases where it is known that a package configuration file is provided by upstream, and only that should be used, the CONFIG keyword may be passed to find_package():
find_package(Qt5Core 5.1.0 CONFIG REQUIRED)
find_package(Qt5Gui 5.1.0 CONFIG)

Similarly, the MODULE keyword says to use only a find-module:
find_package(Qt4 4.7.0 MODULE REQUIRED)

Specifying the type of package explicitly improves the error message shown to the user if it is not found.
Both types of packages also support specifying components of a package, either after the REQUIRED keyword:
find_package(Qt5 5.1.0 CONFIG REQUIRED Widgets Xml Sql)

or as a separate COMPONENTS list:
find_package(Qt5 5.1.0 COMPONENTS Widgets Xml Sql)

or as a separate OPTIONAL_COMPONENTS list:
find_package(Qt5 5.1.0 COMPONENTS Widgets
                       OPTIONAL_COMPONENTS Xml Sql
)
Handling of COMPONENTS and OPTIONAL_COMPONENTS is defined by the package.

By setting the CMAKE_DISABLE_FIND_PACKAGE_<PackageName> variable to TRUE, the <PackageName> package will not be searched, 
and will always be NOTFOUND. Likewise, setting the CMAKE_REQUIRE_FIND_PACKAGE_<PackageName> to TRUE will make the package REQUIRED.

----------Config-file Packages
A config-file package is a set of files provided by upstreams for downstreams to use.
CMake searches in a number of locations for package configuration files, as described in the find_package() documentation.
The most simple way for a CMake user to tell cmake(1) to search in a non-standard prefix for a package is to set the CMAKE_PREFIX_PATH cache variable.

Config-file packages are provided by upstream vendors as part of development packages, that is, they belong with the header files and any other files provided to assist downstreams in using the package.
A set of variables which provide package status information are also set automatically when using a config-file package. 
###
The <PackageName>_FOUND variable is set to true or false, depending on whether the package was found. 
The <PackageName>_DIR cache variable is set to the location of the package configuration file.
###

----------Find-module Packages
A find module is a file with a set of rules for finding the required pieces of a dependency, primarily header files and libraries.
Typically, a find module is needed when the upstream is not built with CMake, or is not CMake-aware enough to otherwise provide a package configuration file.
Unlike a package configuration file, it is not shipped with upstream, but is used by downstream to find the files by guessing locations of files with platform-specific hints.

Unlike the case of an upstream-provided package configuration file, no single point of reference identifies the package as being found, so the <PackageName>_FOUND variable is not automatically set by the find_package() command.
It can still be expected to be set by convention however and should be set by the author of the Find-module. 
Similarly there is no <PackageName>_DIR variable, but each of the artifacts such as library locations and header file locations provide a separate cache variable.

See the cmake-developer(7) manual for more information about creating Find-module files.

==============================Package Layout
A config-file package consists of a Package Configuration File and optionally a Package Version File provided with the project distribution.
----------Package Configuration File
a project Foo that installs the following files:

<prefix>/include/foo-1.2/foo.h
<prefix>/lib/foo-1.2/libfoo.a

It may also provide a CMake package configuration file:
<prefix>/lib/cmake/foo-1.2/FooConfig.cmake

with content defining IMPORTED targets, or defining variables, such as:

# ...
# (compute PREFIX relative to file location)
# ...
set(Foo_INCLUDE_DIRS ${PREFIX}/include/foo-1.2)
set(Foo_LIBRARIES ${PREFIX}/lib/foo-1.2/libfoo.a)

If another project wishes to use Foo it need only to locate the FooConfig.cmake file and load it to get all the information it needs about package content locations.
Since the package configuration file is provided by the package installation it already knows all the file locations.

The find_package() command may be used to search for the package configuration file.
This command constructs a set of installation prefixes and searches under each prefix in several locations.
Given the name Foo, it looks for a file called FooConfig.cmake or foo-config.cmake.
The full set of locations is specified in the find_package() command documentation. One place it looks is:
<prefix>/lib/cmake/Foo*/
where Foo* is a case-insensitive globbing expression.
In our example the globbing expression will match <prefix>/lib/cmake/foo-1.2 and the package configuration file will be found.
Once found, a package configuration file is immediately loaded. It, together with a package version file, contains all the information the project needs to use the package.

----------Package Version File
When the find_package() command finds a candidate package configuration file it looks next to it for a version file.
The version file is loaded to test whether the package version is an acceptable match for the version requested.
If the version file claims compatibility the configuration file is accepted. Otherwise it is ignored.

The name of the package version file must match that of the package configuration file but has either -version or Version appended to the name before the .cmake extension. For example, the files:
<prefix>/lib/cmake/foo-1.3/foo-config.cmake
<prefix>/lib/cmake/foo-1.3/foo-config-version.cmake
and:
<prefix>/lib/cmake/bar-4.2/BarConfig.cmake
<prefix>/lib/cmake/bar-4.2/BarConfigVersion.cmake

are each pairs of package configuration files and corresponding package version files.


When the find_package() command loads a version file it first sets the following variables:
PACKAGE_FIND_NAME
The <PackageName>

PACKAGE_FIND_VERSION
Full requested version string

PACKAGE_FIND_VERSION_MAJOR
Major version if requested, else 0

PACKAGE_FIND_VERSION_MINOR
Minor version if requested, else 0

PACKAGE_FIND_VERSION_PATCH
Patch version if requested, else 0

PACKAGE_FIND_VERSION_TWEAK
Tweak version if requested, else 0

PACKAGE_FIND_VERSION_COUNT
Number of version components, 0 to 4


The version file must use these variables to check whether it is compatible or an exact match for the requested version and set the following variables with results:
PACKAGE_VERSION
Full provided version string

PACKAGE_VERSION_EXACT
True if version is exact match

PACKAGE_VERSION_COMPATIBLE
True if version is compatible

PACKAGE_VERSION_UNSUITABLE
True if unsuitable as any version


Version files are loaded in a nested scope so they are free to set any variables they wish as part of their computation. The find_package command wipes out the scope when the version file has completed and it has checked the output variables. 
When the version file claims to be an acceptable match for the requested version the find_package command sets the following variables for use by the project:
<PackageName>_VERSION
Full provided version string

<PackageName>_VERSION_MAJOR
Major version if provided, else 0

<PackageName>_VERSION_MINOR
Minor version if provided, else 0

<PackageName>_VERSION_PATCH
Patch version if provided, else 0

<PackageName>_VERSION_TWEAK
Tweak version if provided, else 0

<PackageName>_VERSION_COUNT
Number of version components, 0 to 4

The variables report the version of the package that was actually found. 
The <PackageName> part of their name matches the argument given to the find_package() command.

==============================Creating Packages
Usually, the upstream depends on CMake itself and can use some CMake facilities for creating the package files.
Consider an upstream which provides a single shared library:

project(UpstreamLib)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

set(Upstream_VERSION 3.4.1)

include(GenerateExportHeader)

add_library(ClimbingStats SHARED climbingstats.cpp)
generate_export_header(ClimbingStats)
set_property(TARGET ClimbingStats PROPERTY VERSION ${Upstream_VERSION})
set_property(TARGET ClimbingStats PROPERTY SOVERSION 3)
set_property(TARGET ClimbingStats PROPERTY
  INTERFACE_ClimbingStats_MAJOR_VERSION 3)
set_property(TARGET ClimbingStats APPEND PROPERTY
  COMPATIBLE_INTERFACE_STRING ClimbingStats_MAJOR_VERSION
)

install(TARGETS ClimbingStats EXPORT ClimbingStatsTargets
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)
install(
  FILES
    climbingstats.h
    "${CMAKE_CURRENT_BINARY_DIR}/climbingstats_export.h"
  DESTINATION
    include
  COMPONENT
    Devel
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
  VERSION ${Upstream_VERSION}
  COMPATIBILITY AnyNewerVersion
)

export(EXPORT ClimbingStatsTargets
  FILE "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsTargets.cmake"
  NAMESPACE Upstream::
)
configure_file(cmake/ClimbingStatsConfig.cmake
  "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfig.cmake"
  COPYONLY
)

set(ConfigPackageLocation lib/cmake/ClimbingStats)
install(EXPORT ClimbingStatsTargets
  FILE
    ClimbingStatsTargets.cmake
  NAMESPACE
    Upstream::
  DESTINATION
    ${ConfigPackageLocation}
)
install(
  FILES
    cmake/ClimbingStatsConfig.cmake
    "${CMAKE_CURRENT_BINARY_DIR}/ClimbingStats/ClimbingStatsConfigVersion.cmake"
  DESTINATION
    ${ConfigPackageLocation}
  COMPONENT
    Devel
)



==============================Package Registry