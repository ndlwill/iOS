https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#cmake-language-environment-variables

CMake input files are written in the "CMake Language" in source files named CMakeLists.txt or ending in a .cmake file name extension.
CMake Language source files in a project are organized into:
Directories (CMakeLists.txt),
Scripts (<script>.cmake), and
Modules (<module>.cmake).

Directories:
When CMake processes a project source tree, the entry point is a source file called CMakeLists.txt in the top-level source directory. 
This file may contain the entire build specification or use the add_subdirectory() command to add subdirectories to the build. 
Each subdirectory added by the command must also contain a CMakeLists.txt file as the entry point to that directory. 
For each source directory whose CMakeLists.txt file is processed CMake generates a corresponding directory in the build tree to act as the default working and output directory.

Scripts:
An individual <script>.cmake source file may be processed in script mode by using the cmake(1) command-line tool with the -P option. 
Script mode simply runs the commands in the given CMake Language source file and does not generate a build system. 
It does not allow CMake commands that define build targets or actions.

Modules:
CMake Language code in either Directories or Scripts may use the include() command to load a <module>.cmake source file in the scope of the including context. 
Project source trees may also provide their own modules and specify their location(s) in the CMAKE_MODULE_PATH variable.

==============================Command Invocations
A command invocation is a name followed by paren-enclosed arguments separated by whitespace:
add_executable(hello world.c)
Command names are case-insensitive.

if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE

==============================Command Arguments
There are three types of arguments within Command Invocations:
bracket_argument | quoted_argument | unquoted_argument

1.Bracket Argument
A bracket argument, inspired by Lua long bracket syntax, encloses content between opening and closing "brackets" of the same length:

message([=[
This is the first line in a bracket argument with bracket length 1.
No \-escape sequences or ${variable} references are evaluated.
This is always one argument even though it contains a ; character.
The text does not end on a closing bracket of length 0 like ]].
It does end in a closing bracket of length 1.
]=])

2.Quoted Argument
Quoted argument content consists of all text between opening and closing quotes. 
Both Escape Sequences and Variable References are evaluated. A quoted argument is always given to the command invocation as exactly one argument.

A quoted argument encloses content between opening and closing double-quote characters:
message("This is a quoted argument containing multiple lines.
This is always one argument even though it contains a ; character.
Both \\-escape sequences and ${variable} references are evaluated.
The text does not end on an escaped double-quote like \".
It does end in an unescaped double quote.
")

The final \ on any line ending in an odd number of backslashes is treated as a line continuation and ignored along with the immediately following newline character. For example:
message("\
This is the first line of a quoted argument. \
In fact it is the only line but since it is long \
the source code uses line continuation.\
")

3.Unquoted Argument
An unquoted argument is not enclosed by any quoting syntax. It may not contain any whitespace, (, ), #, ", or \ except when escaped by a backslash:

Unquoted argument content consists of all text in a contiguous block of allowed or escaped characters. 
Both Escape Sequences and Variable References are evaluated. The resulting value is divided in the same way Lists divide into elements. 
Each non-empty element is given to the command invocation as an argument. Therefore an unquoted argument may be given to a command invocation as zero or more arguments.

foreach(arg
    NoSpace
    Escaped\ Space
    This;Divides;Into;Five;Arguments
    Escaped\;Semicolon
    )
  message("${arg}")
endforeach()