A CMake-based buildsystem is organized as a set of high-level logical targets.
Each target corresponds to an executable or library, or is a custom target containing custom commands.
Dependencies between the targets are expressed in the buildsystem to determine the build order and the rules for regeneration in response to change.

==============================Binary Targets
Executables and libraries are defined using the add_executable() and add_library() commands.
The resulting binary files have appropriate PREFIX, SUFFIX and extensions for the platform targeted.
Dependencies between binary targets are expressed using the target_link_libraries() command:
add_library(archive archive.cpp zip.cpp lzma.cpp)
add_executable(zipapp zipapp.cpp)
target_link_libraries(zipapp archive)

archive is defined as a STATIC library -- an archive containing objects compiled from archive.cpp, zip.cpp, and lzma.cpp. 
zipapp is defined as an executable formed by compiling and linking zipapp.cpp. 
When linking the zipapp executable, the archive static library is linked in.

==============================Binary Executables
The add_executable() command defines an executable target:
add_executable(mytool mytool.cpp)

Commands such as add_custom_command(), which generates rules to be run at build time can transparently use an EXECUTABLE target as a COMMAND executable. 
The buildsystem rules will ensure that the executable is built before attempting to run the command.

==============================Binary Library Types
1.Normal Libraries
By default, the add_library() command defines a STATIC library, unless a type is specified. A type may be specified when using the command:
add_library(archive SHARED archive.cpp zip.cpp lzma.cpp)
add_library(archive STATIC archive.cpp zip.cpp lzma.cpp)
The BUILD_SHARED_LIBS variable may be enabled to change the behavior of add_library() to build shared libraries by default.

In the context of the buildsystem definition as a whole, it is largely irrelevant whether particular libraries are SHARED or STATIC -- the commands,
dependency specifications and other APIs work similarly regardless of the library type.

The MODULE library type is dissimilar in that it is generally not linked to -- it is not used in the right-hand-side of the target_link_libraries() command.

It is a type which is loaded as a plugin using runtime techniques.

If the library does not export any unmanaged symbols (e.g. Windows resource DLL, C++/CLI DLL), 
it is required that the library not be a SHARED library because CMake expects SHARED libraries to export at least one symbol.

add_library(archive MODULE 7z.cpp)

2.Apple Frameworks
A SHARED library may be marked with the FRAMEWORK target property to create an macOS or iOS Framework Bundle.
A library with the FRAMEWORK target property should also set the FRAMEWORK_VERSION target property.
This property is typically set to the value of "A" by macOS conventions.
The MACOSX_FRAMEWORK_IDENTIFIER sets CFBundleIdentifier key and it uniquely identifies the bundle.
add_library(MyFramework SHARED MyFramework.cpp)
set_target_properties(MyFramework PROPERTIES
  FRAMEWORK TRUE
  FRAMEWORK_VERSION A # Version "A" is macOS convention
  MACOSX_FRAMEWORK_IDENTIFIER org.cmake.MyFramework
)

3.Object Libraries
The OBJECT library type defines a non-archival collection of object files resulting from compiling the given source files.
The object files collection may be used as source inputs to other targets by using the syntax $<TARGET_OBJECTS:name>
This is a generator expression that can be used to supply the OBJECT library content to other targets:

add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)

add_library(archiveExtras STATIC $<TARGET_OBJECTS:archive> extras.cpp)

add_executable(test_exe $<TARGET_OBJECTS:archive> test.cpp)

The link (or archiving) step of those other targets will use the object files collection in addition to those from their own sources.
Alternatively, object libraries may be linked into other targets:

add_library(archive OBJECT archive.cpp zip.cpp lzma.cpp)

add_library(archiveExtras STATIC extras.cpp)
target_link_libraries(archiveExtras PUBLIC archive)

add_executable(test_exe test.cpp)
target_link_libraries(test_exe archive)

The link (or archiving) step of those other targets will use the object files from OBJECT libraries that are directly linked.
Additionally, usage requirements of the OBJECT libraries will be honored when compiling sources in those other targets. 
Furthermore, those usage requirements will propagate transitively to dependents of those other targets.

Object libraries may not be used as the TARGET in a use of the add_custom_command(TARGET) command signature.
However, the list of objects can be used by add_custom_command(OUTPUT) or file(GENERATE) by using $<TARGET_OBJECTS:objlib>.

==============================Build Specification and Usage Requirements
The target_include_directories(), target_compile_definitions() and target_compile_options() commands specify the build specifications and the usage requirements of binary targets. 
The commands populate the INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS and COMPILE_OPTIONS target properties respectively
and/or the INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS and INTERFACE_COMPILE_OPTIONS target properties.

Each of the commands has a PRIVATE, PUBLIC and INTERFACE mode.
The PRIVATE mode populates only the non-INTERFACE_ variant of the target property and the INTERFACE mode populates only the INTERFACE_ variants.
The PUBLIC mode populates both variants of the respective target property.
Each command may be invoked with multiple uses of each keyword:
target_compile_definitions(archive
  PRIVATE BUILDING_WITH_LZMA
  INTERFACE USING_ARCHIVE_LIB
)

==============================Target Properties
The contents of the INCLUDE_DIRECTORIES, COMPILE_DEFINITIONS and COMPILE_OPTIONS target properties are used appropriately when compiling the source files of a binary target.

Entries in the INCLUDE_DIRECTORIES are added to the compile line with -I or -isystem prefixes and in the order of appearance in the property value.
Entries in the COMPILE_DEFINITIONS are prefixed with -D or /D and added to the compile line in an unspecified order.
The DEFINE_SYMBOL target property is also added as a compile definition as a special convenience case for SHARED and MODULE library targets.
Entries in the COMPILE_OPTIONS are escaped for the shell and added in the order of appearance in the property value. Several compile options have special separate handling, such as POSITION_INDEPENDENT_CODE.

The contents of the INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS and INTERFACE_COMPILE_OPTIONS target properties are Usage Requirements -- they specify content which consumers must use to correctly compile and link with the target they appear on. 
For any binary target, the contents of each INTERFACE_ property on each target specified in a target_link_libraries() command is consumed:
set(srcs archive.cpp zip.cpp)
if (LZMA_FOUND)
  list(APPEND srcs lzma.cpp)
endif()
add_library(archive SHARED ${srcs})
if (LZMA_FOUND)
  # The archive library sources are compiled with -DBUILDING_WITH_LZMA
  target_compile_definitions(archive PRIVATE BUILDING_WITH_LZMA)
endif()
target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

add_executable(consumer)
# Link consumer to archive and consume its usage requirements. The consumer
# executable sources are compiled with -DUSING_ARCHIVE_LIB.
target_link_libraries(consumer archive)

Because it is common to require that the source directory and corresponding build directory are added to the INCLUDE_DIRECTORIES, 
the CMAKE_INCLUDE_CURRENT_DIR variable can be enabled to conveniently add the corresponding directories to the INCLUDE_DIRECTORIES of all targets.
The variable CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE can be enabled to add the corresponding directories to the INTERFACE_INCLUDE_DIRECTORIES of all targets. 
This makes use of targets in multiple different directories convenient through use of the target_link_libraries() command.

==============================###Transitive Usage Requirements###
The usage requirements of a target can transitively propagate to the dependents.
###
The target_link_libraries() command has PRIVATE, INTERFACE and PUBLIC keywords to control the propagation.
###

add_library(archive archive.cpp)
target_compile_definitions(archive INTERFACE USING_ARCHIVE_LIB)

add_library(serialization serialization.cpp)
target_compile_definitions(serialization INTERFACE USING_SERIALIZATION_LIB)

add_library(archiveExtras extras.cpp)
target_link_libraries(archiveExtras PUBLIC archive)
target_link_libraries(archiveExtras PRIVATE serialization)
# archiveExtras is compiled with -DUSING_ARCHIVE_LIB
# and -DUSING_SERIALIZATION_LIB

add_executable(consumer consumer.cpp)
# consumer is compiled with -DUSING_ARCHIVE_LIB
target_link_libraries(consumer archiveExtras)

###
Because the archive is a PUBLIC dependency of archiveExtras, the usage requirements of it are propagated to consumer too.
Because serialization is a PRIVATE dependency of archiveExtras, the usage requirements of it are not propagated to consumer.
###

Generally, a dependency should be specified in a use of target_link_libraries() with the PRIVATE keyword if it is used by only the implementation of a library, 
and not in the header files. If a dependency is additionally used in the header files of a library (e.g. for class inheritance), 
then it should be specified as a PUBLIC dependency. A dependency which is not used by the implementation of a library, 
but only by its headers should be specified as an INTERFACE dependency. The target_link_libraries() command may be invoked with multiple uses of each keyword:

target_link_libraries(archiveExtras
  PUBLIC archive
  PRIVATE serialization
)

Usage requirements are propagated by reading the INTERFACE_ variants of target properties from dependencies and appending the values to the non-INTERFACE_ variants of the operand. 
For example, the INTERFACE_INCLUDE_DIRECTORIES of dependencies is read and appended to the INCLUDE_DIRECTORIES of the operand.
In cases where order is relevant and maintained, and the order resulting from the target_link_libraries() calls does not allow correct compilation, use of an appropriate command to set the property directly may update the order.

For example, if the linked libraries for a target must be specified in the order lib1 lib2 lib3 , but the include directories must be specified in the order lib3 lib1 lib2:

target_link_libraries(myExe lib1 lib2 lib3)
target_include_directories(myExe
  PRIVATE $<TARGET_PROPERTY:lib3,INTERFACE_INCLUDE_DIRECTORIES>)

Note that care must be taken when specifying usage requirements for targets which will be exported for installation using the install(EXPORT) command. 
See Creating Packages for more.

==============================Output Artifacts
The buildsystem targets created by the add_library() and add_executable() commands create rules to create binary outputs.

The exact output location of the binaries can only be determined at generate-time because it can depend on the build-configuration and the link-language of linked dependencies etc. TARGET_FILE, TARGET_LINKER_FILE and related expressions can be used to access the name and location of generated binaries. 
These expressions do not work for OBJECT libraries however, as there is no single file generated by such libraries which is relevant to the expressions.

There are three kinds of output artifacts that may be build by targets as detailed in the following sections. 
Their classification differs between DLL platforms and non-DLL platforms. All Windows-based systems including Cygwin are DLL platforms.

1.Runtime Output Artifacts
A runtime output artifact of a buildsystem target may be:
(1)The executable file (e.g. .exe) of an executable target created by the add_executable() command.
(2)On DLL platforms: the executable file (e.g. .dll) of a shared library target created by the add_library() command with the SHARED option.
The RUNTIME_OUTPUT_DIRECTORY and RUNTIME_OUTPUT_NAME target properties may be used to control runtime output artifact locations and names in the build tree.

2.Library Output Artifacts
A library output artifact of a buildsystem target may be:
(1)The loadable module file (e.g. .dll or .so) of a module library target created by the add_library() command with the MODULE option.
(2)On non-DLL platforms: the shared library file (e.g. .so or .dylib) of a shared library target created by the add_library() command with the SHARED option.
The LIBRARY_OUTPUT_DIRECTORY and LIBRARY_OUTPUT_NAME target properties may be used to control library output artifact locations and names in the build tree.

3.Archive Output Artifacts
An archive output artifact of a buildsystem target may be:
(1)The static library file (e.g. .lib or .a) of a static library target created by the add_library() command with the STATIC option.
(2)On DLL platforms: the import library file (e.g. .lib) of a shared library target created by the add_library() command with the SHARED option. This file is only guaranteed to exist if the library exports at least one unmanaged symbol.
(3)On DLL platforms: the import library file (e.g. .lib) of an executable target created by the add_executable() command when its ENABLE_EXPORTS target property is set.
(4)On AIX: the linker import file (e.g. .imp) of an executable target created by the add_executable() command when its ENABLE_EXPORTS target property is set.

The ARCHIVE_OUTPUT_DIRECTORY and ARCHIVE_OUTPUT_NAME target properties may be used to control archive output artifact locations and names in the build tree.

==============================Pseudo Targets
Some target types do not represent outputs of the buildsystem, but only inputs such as external dependencies, aliases or other non-build artifacts. Pseudo targets are not represented in the generated buildsystem.

1.Imported Targets
An IMPORTED target represents a pre-existing dependency. 
Usually such targets are defined by an upstream package and should be treated as immutable.
After declaring an IMPORTED target one can adjust its target properties by using the customary commands such as target_compile_definitions(), target_include_directories(), target_compile_options() or target_link_libraries() just like with any other regular target.

IMPORTED targets may have the same usage requirement properties populated as binary targets, 
such as INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS, INTERFACE_COMPILE_OPTIONS, INTERFACE_LINK_LIBRARIES, and INTERFACE_POSITION_INDEPENDENT_CODE.

The LOCATION may also be read from an IMPORTED target, though there is rarely reason to do so. 
Commands such as add_custom_command() can transparently use an IMPORTED EXECUTABLE target as a COMMAND executable.

The scope of the definition of an IMPORTED target is the directory where it was defined. 
It may be accessed and used from subdirectories, but not from parent directories or sibling directories. 
The scope is similar to the scope of a cmake variable.

It is also possible to define a GLOBAL IMPORTED target which is accessible globally in the buildsystem.

2.Alias Targets
An ALIAS target is a name which may be used interchangeably with a binary target name in read-only contexts. 
A primary use-case for ALIAS targets is for example or unit test executables accompanying a library, which may be part of the same buildsystem or built separately based on user configuration.

add_library(lib1 lib1.cpp)
install(TARGETS lib1 EXPORT lib1Export ${dest_args})
install(EXPORT lib1Export NAMESPACE Upstream:: ${other_args})

add_library(Upstream::lib1 ALIAS lib1)

In another directory, we can link unconditionally to the Upstream::lib1 target, which may be an IMPORTED target from a package, or an ALIAS target if built as part of the same buildsystem.

if (NOT TARGET Upstream::lib1)
  find_package(lib1 REQUIRED)
endif()
add_executable(exe1 exe1.cpp)
target_link_libraries(exe1 Upstream::lib1)

ALIAS targets are not mutable, installable or exportable. They are entirely local to the buildsystem description. A name can be tested for whether it is an ALIAS name by reading the ALIASED_TARGET property from it:

get_target_property(_aliased Upstream::lib1 ALIASED_TARGET)
if(_aliased)
  message(STATUS "The name Upstream::lib1 is an ALIAS for ${_aliased}.")
endif()

3.Interface Libraries
An INTERFACE library target does not compile sources and does not produce a library artifact on disk, so it has no LOCATION.
It may specify usage requirements such as INTERFACE_INCLUDE_DIRECTORIES, INTERFACE_COMPILE_DEFINITIONS, INTERFACE_COMPILE_OPTIONS, INTERFACE_LINK_LIBRARIES, INTERFACE_SOURCES, and INTERFACE_POSITION_INDEPENDENT_CODE.
Only the INTERFACE modes of the target_include_directories(), target_compile_definitions(), target_compile_options(), target_sources(), and target_link_libraries() commands may be used with INTERFACE libraries.

Since CMake 3.19, an INTERFACE library target may optionally contain source files.
An interface library that contains source files will be included as a build target in the generated buildsystem.
It does not compile sources, but may contain custom commands to generate other sources.
Additionally, IDEs will show the source files as part of the target for interactive reading and editing.

A primary use-case for INTERFACE libraries is header-only libraries.
Since CMake 3.23, header files may be associated with a library by adding them to a header set using the target_sources() command:
add_library(Eigen INTERFACE)

target_sources(Eigen INTERFACE
  FILE_SET HEADERS
    BASE_DIRS src
    FILES src/eigen.h src/vector.h src/matrix.h
)

add_executable(exe1 exe1.cpp)
target_link_libraries(exe1 Eigen)

When we specify the FILE_SET here, the BASE_DIRS we define automatically become include directories in the usage requirements for the target Eigen. 
The usage requirements from the target are consumed and used when compiling, but have no effect on linking.

Another use-case is to employ an entirely target-focussed design for usage requirements:
add_library(pic_on INTERFACE)
set_property(TARGET pic_on PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE ON)
add_library(pic_off INTERFACE)
set_property(TARGET pic_off PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE OFF)

add_library(enable_rtti INTERFACE)
target_compile_options(enable_rtti INTERFACE
  $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>
)

add_executable(exe1 exe1.cpp)
target_link_libraries(exe1 pic_on enable_rtti)

This way, the build specification of exe1 is expressed entirely as linked targets, and the complexity of compiler-specific flags is encapsulated in an INTERFACE library target.

INTERFACE libraries may be installed and exported. We can install the default header set along with the target:
add_library(Eigen INTERFACE)

target_sources(Eigen INTERFACE
  FILE_SET HEADERS
    BASE_DIRS src
    FILES src/eigen.h src/vector.h src/matrix.h
)

install(TARGETS Eigen EXPORT eigenExport
  FILE_SET HEADERS DESTINATION include/Eigen)
install(EXPORT eigenExport NAMESPACE Upstream::
  DESTINATION lib/cmake/Eigen
)

Here, the headers defined in the header set are installed to include/Eigen. The install destination automatically becomes an include directory that is a usage requirement for consumers.