https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html

==============================INCLUDE_DIRECTORIES
List of preprocessor include file search directories.

This property specifies the list of directories given so far to the target_include_directories() command.
In addition to accepting values from that command, values may be set directly on any target using the set_property() command.
A target gets its initial value for this property from the value of the INCLUDE_DIRECTORIES directory property.
Both directory and target property values are adjusted by calls to the include_directories() command.

The value of this property is used by the generators to set the include paths for the compiler.

Relative paths should not be added to this property directly. Use one of the commands above instead to handle relative paths.

Contents of INCLUDE_DIRECTORIES may use cmake-generator-expressions(7) with the syntax $<...>.

==============================INTERFACE_INCLUDE_DIRECTORIES
List of public include directories requirements for a library.

Targets may populate this property to publish the include directories required to compile against the headers for the target. 
The target_include_directories() command populates this property with values given to the PUBLIC and INTERFACE keywords. Projects may also get and set the property directly.

When target dependencies are specified using target_link_libraries(), CMake will read this property from all target dependencies to determine the build properties of the consumer.

Contents of INTERFACE_INCLUDE_DIRECTORIES may use "generator expressions" with the syntax $<...>.

Include directories usage requirements commonly differ between the build-tree and the install-tree.
The BUILD_INTERFACE and INSTALL_INTERFACE generator expressions can be used to describe separate usage requirements based on the usage location.

==============================RESOURCE
Specify resource files in a FRAMEWORK or BUNDLE.

Target marked with the FRAMEWORK or BUNDLE property generate framework or application bundle (both macOS and iOS is supported) or normal shared libraries on other platforms. 
This property may be set to a list of files to be placed in the corresponding directory (eg. Resources directory for macOS) inside the bundle.
On non-Apple platforms these files may be installed using the RESOURCE option to the install(TARGETS) command.

Following example of Application Bundle:
add_executable(ExecutableTarget
  addDemo.c
  resourcefile.txt
  appresourcedir/appres.txt)

target_link_libraries(ExecutableTarget heymath mul)

set(RESOURCE_FILES
  resourcefile.txt
  appresourcedir/appres.txt)

set_target_properties(ExecutableTarget PROPERTIES
  MACOSX_BUNDLE TRUE
  MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget
  RESOURCE "${RESOURCE_FILES}")

will produce flat structure for iOS systems:
ExecutableTarget.app
  appres.txt
  ExecutableTarget
  Info.plist
  resourcefile.txt

For macOS systems it will produce following directory structure:
ExecutableTarget.app/
  Contents
    Info.plist
    MacOS
      ExecutableTarget
    Resources
      appres.txt
      resourcefile.txt

For Linux, such CMake script produce following files:
ExecutableTarget
Resources
  appres.txt
  resourcefile.txt

==============================FRAMEWORK
Build SHARED or STATIC library as Framework Bundle on the macOS and iOS.

If such a library target has this property set to TRUE it will be built as a framework when built on the macOS and iOS.
It will have the directory structure required for a framework and will be suitable to be used with the -framework option.
This property is initialized by the value of the CMAKE_FRAMEWORK variable if it is set when a target is created.

To customize Info.plist file in the framework, use MACOSX_FRAMEWORK_INFO_PLIST target property.

For macOS see also the FRAMEWORK_VERSION target property.

Example of creation dynamicFramework:

add_library(dynamicFramework SHARED
            dynamicFramework.c
            dynamicFramework.h
)
set_target_properties(dynamicFramework PROPERTIES
  FRAMEWORK TRUE
  FRAMEWORK_VERSION C
  MACOSX_FRAMEWORK_IDENTIFIER com.cmake.dynamicFramework
  MACOSX_FRAMEWORK_INFO_PLIST Info.plist
  # "current version" in semantic format in Mach-O binary file
  VERSION 16.4.0
  # "compatibility version" in semantic format in Mach-O binary file
  SOVERSION 1.0.0
  PUBLIC_HEADER dynamicFramework.h
  XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer"
)

==============================PRIVATE_HEADER
Specify private header files in a FRAMEWORK shared library target.

Shared library targets marked with the FRAMEWORK property generate frameworks on macOS, iOS and normal shared libraries on other platforms. 
This property may be set to a list of header files to be placed in the PrivateHeaders directory inside the framework folder.
On non-Apple platforms these headers may be installed using the PRIVATE_HEADER option to the install(TARGETS) command.