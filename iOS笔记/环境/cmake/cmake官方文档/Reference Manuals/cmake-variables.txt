https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html

CMake reserves identifiers that:
begin with CMAKE_ (upper-, lower-, or mixed-case), or
begin with _CMAKE_ (upper-, lower-, or mixed-case), or
begin with _ followed by the name of any CMake Command.

==============================CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT
New in version 3.7.1

CMake sets this variable to a TRUE value when the CMAKE_INSTALL_PREFIX has just been initialized to its default value, 
### 第一次构建时才有值（或者 build后把build目录下的全删除，再进行构建）
typically on the first run of CMake within a new build tree. 
###
This can be used by project code to change the default without overriding a user-provided value:

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "/my/default" CACHE PATH "..." FORCE)
endif()

==============================CMAKE_INSTALL_PREFIX
Install directory used by install().

If make install is invoked or INSTALL is built, this directory is prepended onto all install directories. 
This variable defaults to /usr/local on UNIX and c:/Program Files/${PROJECT_NAME} on Windows. 
See CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT for how a project might choose its own default.

On UNIX one can use the DESTDIR mechanism in order to relocate the whole installation to a staging area. 
See the DESTDIR environment variable for more information.

The installation prefix is also added to CMAKE_SYSTEM_PREFIX_PATH so that find_package(), find_program(), find_library(), find_path(), and find_file() will search the prefix for other software.
This behavior can be disabled by setting the CMAKE_FIND_NO_INSTALL_PREFIX to TRUE before the first project() invocation.

The CMAKE_INSTALL_PREFIX may be defined when configuring a build tree to set its installation prefix. 
Or, when using the cmake(1) command-line tool's --install mode, one may specify a different prefix using the --prefix option:
cmake --install . --prefix /my/install/prefix

==============================CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
Default component used in install() commands.

If an install() command is used without the COMPONENT argument, these files will be grouped into a default component. 
The name of this default install component will be taken from this variable. It defaults to Unspecified.

==============================CMAKE_GENERATOR
The generator used to build the project.See cmake-generators

The name of the generator that is being used to generate the build files. (e.g. Unix Makefiles, Ninja, etc.)

The value of this variable should never be modified by project code.
A generator may be selected via the cmake -G option, interactively in cmake-gui(1), or via the CMAKE_GENERATOR environment variable.

==============================CMAKE_MAKE_PROGRAM
build tool

Tool that can launch the native build system.
The value may be the full path to an executable or just the tool name if it is expected to be in the PATH.

The tool selected depends on the CMAKE_GENERATOR used to configure the project:
1.The Makefile Generators set this to make, gmake, or a generator-specific tool (e.g. nmake for NMake Makefiles).
These generators store CMAKE_MAKE_PROGRAM in the CMake cache so that it may be edited by the user.
2.The Ninja generator sets this to ninja.
This generator stores CMAKE_MAKE_PROGRAM in the CMake cache so that it may be edited by the user.
3.The Xcode generator sets this to xcodebuild.
This generator prefers to lookup the build tool at build time rather than to store CMAKE_MAKE_PROGRAM in the CMake cache ahead of time. 
This is because xcodebuild is easy to find.
For compatibility with versions of CMake prior to 3.2, if a user or project explicitly adds CMAKE_MAKE_PROGRAM to the CMake cache then CMake will use the specified value.
4.The Visual Studio Generators set this to the full path to MSBuild.exe (VS >= 10), devenv.com (VS 7,8,9), or VCExpress.exe (VS Express 8,9). (See also variables CMAKE_VS_MSBUILD_COMMAND and CMAKE_VS_DEVENV_COMMAND.
These generators prefer to lookup the build tool at build time rather than to store CMAKE_MAKE_PROGRAM in the CMake cache ahead of time.
This is because the tools are version-specific and can be located using the Windows Registry.
For compatibility with versions of CMake prior to 3.0, if a user or project explicitly adds CMAKE_MAKE_PROGRAM to the CMake cache then CMake will use the specified value if possible.
It is also necessary because the proper build tool may depend on the project content (e.g. the Intel Fortran plugin to VS 10 and 11 requires devenv.com to build its .vfproj project files even though MSBuild.exe is normally preferred to support the CMAKE_GENERATOR_TOOLSET).
5.The Green Hills MULTI generator sets this to the full path to gbuild.exe(Windows) or gbuild(Linux) based upon the toolset being used.
Once the generator has initialized a particular value for this variable, changing the value has undefined behavior.

The CMAKE_MAKE_PROGRAM variable is set for use by project code. 
The value is also used by the cmake --build and ctest --build-and-test tools to launch the native build process.

==============================CMAKE_FRAMEWORK
New in version 3.15.

Default value for FRAMEWORK of targets.
This variable is used to initialize the FRAMEWORK property on all the targets. See that target property for additional information.