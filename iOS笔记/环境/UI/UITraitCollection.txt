https://onevcat.com/2014/07/ios-ui-unique/

/** Trait environments expose a trait collection that describes their environment. */
public protocol UITraitEnvironment : NSObjectProtocol {

    @available(iOS 8.0, *)
    var traitCollection: UITraitCollection { get }

    
    /** To be overridden as needed to provide custom behavior when the environment's traits change. */
    @available(iOS 8.0, *)
    func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
}
而UIScreen, UIWindow, UIViewController, UIPresentationController, 和 UIView都遵循了该协议

您可以使用UITraitCollection 的horizontalSizeClass，verticalSizeClass，displayScale和userInterfaceIdiom属性访问特定的特征值

displayScale:
A value of 1.0 indicates a non-Retina display and a value of 2.0 indicates a Retina display.
The default display scale for a trait collection is 0.0 (indicating unspecified).

public enum UIUserInterfaceIdiom : Int, @unchecked Sendable {

    
    case unspecified = -1

    @available(iOS 3.2, *)
    case phone = 0 // iPhone and iPod touch style UI

    @available(iOS 3.2, *)
    case pad = 1 // iPad style UI

    @available(iOS 9.0, *)
    case tv = 2 // Apple TV style UI

    @available(iOS 9.0, *)
    case carPlay = 3 // CarPlay style UI

    @available(iOS 14.0, *)
    case mac = 5 // Optimized for Mac UI
}


要使视图控制器和视图对iOS界面环境中的更改做出响应，可以重写UITraitEnvironment协议的 traitCollectionDidChange(_:) 方法，
要自定义视图控制器动画以响应界面环境的变化，可重写UIContentContainer协议的willTransition(to:with:) 方法

UIContentContainer:
A set of methods for adapting the contents of your view controllers to size and trait changes.
所有UIViewController和UIPresentationController对象均提供此协议方法的默认实现

iOS13:
If you rely on size changes to build adaptive layouts, 
you should review your code for iOS 13. 
UIKit now predicts the initial traits for a view so you cannot assume traitCollectionDidChange will be called when a view is first added to the view hierarchy.

在iOS 13中，在将视图添加到视图层次结构之前，UIKit会在创建视图时设置视图的trait。

调试Trait Collection的改变:
添加launch argument到scheme
-UITraitCollectionChangeLoggingEnabled YES