https://khorbushko.github.io/article/2020/12/08/affineTransformation.html#google_vignette

Transformation:
What can be done in 2D space? 
translation
rotation
scaling
reflection
shear
combination of these effects

https://en.wikipedia.org/wiki/Homogeneous_coordinates

why the name is Homogeneous and not something else:
https://robotics.stanford.edu/~birch/projective/node4.html
P1 = {x=1, y=1, z=5}
P2 = {x=10, y=10, z=50}
P3 = {x=100, y=100, z=500}
and representation will be

P1 = { 1/5; 1/5 }
P2 = { 10/50; 10/50 } => { 1/5; 1/5 }
P3 = { 100/500; 100/500 } => { 1/5; 1/5 }
so the rule is

P1 = { 1a/5a; 1a/5a } => {x=1a, y=1a, z=5a}
https://www.songho.ca/math/homogeneous/homogeneous.html

This means that 1 point in Cartesian space may be represented by a few points. 
This means that these points are “homogeneous” which according to dictinary means : of the same or a similar kind or nature.


Translation:
To translate the point we simply should add X' and Y' to the original coordinate:
Xnew = Xold + Tx
Ynew = Yold + Ty

###
matrix that contains no changes is Identity matrix
###

https://developer.apple.com/documentation/corefoundation/cgaffinetransform

the CGAffineTransform data structure contains values for only the first two columns.
the third column is always (0,0,1)
So Apple’s matrix is read downstairs instead of by row, 3rd column not important because it’s always 001 and the result does nothing.
Apple 的矩阵系统（比如在 Core Graphics、ARKit 或 SceneKit 中）通常使用的是 列主序（Column-Major Order），这意味着矩阵的列是主要的存储和操作顺序，而不是行
This means that u can’t change index m13; m23 and m33 - these items responsible for factor scale in Homogeneous space.

###
3D数学-透视投影:
投影变换完成的是如何将三维模型显示到二维视口上，这是一个三维到二维的过程。你可以将投影变换看作是调整照相机的焦距，它模拟了为照相机选择镜头的过程。

近大远小
近大远小是众所周知的光学现象。
在计算机图形学中，为了让三维物体显示在屏幕上有立体感，有必要模拟人眼近大远小这一个特性，利用透视投影矩阵可以方便地完成这项任务。

视锥体
视锥体是一个三维体，他的位置和摄像机相关，视锥体的形状决定了模型如何从camera space投影到屏幕上。
透视投影使用棱锥作为视锥体，摄像机位于棱锥的椎顶。
该棱锥被前后两个平面截断，形成一个棱台，叫做View Frustum，只有位于Frustum内部的模型才是可见的。
我们也通常称这个为裁剪空间，在这个裁剪空间中有两个平面比较特殊，我们分辨称为近裁剪平面（near clip plane）和远裁剪平面（far clip plane）。

不在视锥体内的物体不会参与渲染，可以节省计算资源。
这种技术称为 Frustum Culling（视锥体剔除）。

裁剪空间（Clip Space）：
在图形管线中，物体经过投影矩阵变换后会被映射到裁剪空间，裁剪空间的 Z 值范围通常是 [−1,1] 或 [0,1]（取决于具体实现）
###


Rotation:
2D Rotation is a process of rotating an object with respect to an angle in a two-dimensional plane.
X' = X x cosθ – Y x sinθ
Y' = X x sinθ + Y x cosθ

Scaling:
Scaling is a process of modifying or altering the size of objects
X' = X x Sx
Y' = Y x Sy
If scaling factor > 1, then the object size is increased. 
If scaling factor < 1, then the object size is reduced.


Reflection:
Reflection is a kind of rotation where the angle of rotation is 180 degree
reflection can be done within 2 axis - X and Y. This means that we simply rotate the point. 
To do so, we need to multiply the coordinate value by -1
for reflection over X:
X' = X x 1
Y' = Y x -1
for reflection over Y:
X' = X x -1
Y' = Y x 1


Shear:
Shearing is an ideal technique to change the shape of an existing object in a two-dimensional plane
Shear can be done in 2 X and Y axis. To perform shear we need to define shearing parameter toward X direction and Y direction:
X' = Xold + Shx x Y
Y' = Yold + Shy x X

https://en.wikipedia.org/wiki/Affine_transformation


composition:
Composing Transformation – the process of applying several transformations in succession to form one overall transformation

the order of computation is important: as standard in GDI the order is Scale, Rotate and Translate (SRT). 
If u perform the same operation in another order (for example TRS) - the result will be different. 
This is because all changes are done with respect to the origin of coordinates.

https://gamedev.stackexchange.com/questions/16719/what-is-the-correct-order-to-multiply-scale-rotation-and-translation-matrices-f/16721#16721



==================================================Camera Space（相机坐标空间）
在 Camera Space（相机坐标空间）中，相机的位置被定义为原点 (0, 0, 0)，并且整个场景的坐标系会以相机为参考重新定义。
这种坐标系统主要用于计算物体相对于相机的视角、深度以及在屏幕上的投影。

原点是相机位置：
所有物体的坐标会被转换到以相机为中心的坐标系统中。
在相机空间，相机的位置恒定为 (0, 0, 0)。

相机方向：
Z 轴：
通常沿相机的视线方向定义为 负 Z 轴（即深度轴），也称为 forward direction。
X 轴：
相机的右侧定义为 正 X 轴，即 right direction。
Y 轴：
相机的上方定义为 正 Y 轴，即 up direction。

物体位置变化：
世界中的所有物体都会被转换到相机的局部坐标系，计算公式通过视图矩阵（View Matrix）完成。
如果物体相对于相机向后移动，它们的 Z 值会是负数。

如果一个物体的世界坐标为 𝑃world，视图矩阵为 V，那么相机空间坐标 𝑃camera 为：
P camera=V⋅P world

在图形渲染管线中，物体通常会先从 世界空间 转换到 相机空间，然后再进行透视投影。

==================================================Projective space（射影空间）
射影空间最重要的特性之一是它能够表示各种变换，特别是射影变换。射影变换（也叫投影变换）是一种保持直线的变换，通常用于透视投影。
射影变换可以通过一个矩阵乘法来表示，并且能够处理从三维空间到二维视图的投影。
例如，在计算机图形学中，三维世界中的物体通过射影变换被投影到二维屏幕上。射影变换包含了平移、旋转、缩放以及透视的效果。

射影空间的一个重要特性是它能够表示无穷远的点。在传统的欧几里得空间中，平行线永远不会相交，但在射影空间中，平行线的交点被认为是无穷远的点。
应用
计算机图形学：射影空间在计算机图形学中有广泛应用，特别是在描述透视投影时。例如，三维物体在屏幕上投影时，图像的深度和透视效果都可以通过射影空间来理解和处理。
计算机视觉：射影空间还被用于计算机视觉中的图像投影和图像重建等任务。它帮助我们理解如何从不同的视角捕获图像以及如何在不同的坐标系之间转换。
相机投影模型：在摄影和计算机图像生成中，射影空间模型帮助描述如何将三维场景投影到二维相机视图上。


相机投影模型的原理基于射影几何和透视变换，它通过将三维空间中的点映射到二维图像平面来计算
这个过程的核心是使用 投影矩阵，通过相机的内参和外参来完成
投影模型的步骤:
1. 从世界坐标到相机坐标
在三维空间中，物体的位置首先是通过世界坐标系来表示的。
为了将物体的三维坐标投影到相机的二维视图上，我们需要知道相机在世界中的位置和朝向。
这部分涉及相机的外部参数，包括相机的位置（平移）和朝向（旋转）。
相机的外部参数用一个 旋转矩阵（R）和平移向量（T）来描述
相机坐标系中的点=R×世界坐标系中的点+T
这样，我们可以将世界坐标系中的三维点转换为相机坐标系中的三维点。
2. 相机坐标系到投影坐标系
相机坐标系中的三维点会被投影到二维图像平面上。为了做到这一点，我们需要知道相机的焦距和图像传感器的尺寸等参数，这些都属于相机的内部参数。
内部参数通过一个 内参矩阵（K）表示
    fx  0   cx
K = 0   fy  cy
    0   0   1

fx fy是焦距（图像传感器的像素单位）
cx cy是图像的主点（通常是图像的中心）
通过内参矩阵，三维相机坐标系中的点可以映射到二维图像平面上的坐标。

相机的焦距（focal length）是指镜头的光学中心（即镜头的焦点）到相机感光元件（如相机传感器或胶片）的距离
焦距是衡量镜头视角（视野范围）和拍摄对象大小的重要参数。
在物理学上，这个距离决定了镜头能够聚焦的范围。焦距通常以**毫米（mm）**为单位。
###
焦距是决定相机镜头视角和拍摄效果的关键参数，焦距越短，视角越广，适合拍摄大场景；焦距越长，视角越窄，适合拍摄远距离的细节或背景虚化效果。

广角镜头：通常焦距在 35mm 以下，适合拍摄大场景，风景，建筑等。
标准镜头：焦距通常在 50mm 左右，视角接近人眼的自然视野，适合多种拍摄场景。
远摄镜头：焦距在 85mm 到 200mm 或更长，用于拍摄远距离物体，如运动、野生动物、天文等。
###

3. 齐次坐标和投影变换
为了方便计算，我们通常使用齐次坐标来表示这些变换。在齐次坐标下，一个三维点 (X,Y,Z) 会表示为 (X,Y,Z,1)。
将相机坐标系中的点 (X,Y,Z) 投影到二维图像平面时，首先通过内参矩阵进行缩放和位移，再通过一个投影矩阵进行透视投影。
投影矩阵 P 由内参矩阵和外参矩阵组合而成
P=K×[R∣T]
R 是旋转矩阵
T 是平移向量
K 是内参矩阵

4. 透视除法（Perspective Division）
经过投影矩阵的计算后，得到的坐标会是齐次坐标形式 (x ′,y ′,z ′,w ′)。然后通过透视除法将齐次坐标转换为标准的二维坐标：
x= x ′/w ′
y= y ′/w ′
这样，我们就得到了二维图像中的坐标 (x,y)。

简单的投影计算公式
最终，三维世界坐标 (X,Y,Z) 被投影到二维图像平面上的公式可以写成
x​          X
y = P *    Y
z          Z
           1
然后，通过透视除法得到二维图像坐标 (x,y)。

==================================================


Cartesian Space (笛卡尔空间)
笛卡尔空间（或称笛卡尔坐标系）是基于 笛卡尔坐标系 的一个空间。笛卡尔坐标系是一种用于定位点的数学坐标系，在该坐标系中，点的位置是通过一组坐标来表示的，这些坐标表示点与各个坐标轴的距离。
在 二维笛卡尔坐标系（2D），点的坐标通常表示为 (x,y)，其中 x 和 y 分别表示水平和垂直轴的坐标。

Euclidean Space (欧几里得空间)
欧几里得空间是一个更为一般化的数学概念，指的是符合 欧几里得几何学 规则的空间。
在这种空间中，点的位置和距离是通过坐标和度量来定义的，符合平直几何的规则。
欧几里得空间是通过点与点之间的距离度量来定义的，这种度量通常使用 欧几里得距离公式 来计算。
在二维和三维欧几里得空间中，距离的计算遵循 欧几里得距离公式