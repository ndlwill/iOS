Use nodes to define the structure of a scene.

SceneKit implements content as a hierarchical tree structure of nodes, also known as a scene graph.
A scene consists of a root node, which defines a coordinate space for the world of the scene, and other nodes that populate the world with visible content.
SceneKit displays scenes in a view, processing the scene graph and performing animations before efficiently rendering each frame on the GPU.

Before working with SceneKit, you should be familiar with basic graphics concepts such as coordinate systems and the mathematics of three-dimensional geometry.
SceneKit uses a right-handed coordinate system where (by default) the direction of view is along the negative z-axis


==================================================class SCNNode : NSObject
A structural element of a scene graph, representing a position and transform in a 3D coordinate space, to which you can attach geometry, lights, cameras, or other displayable content.

An SCNNode object by itself has no visible content when the scene containing it is rendered—it represents only a coordinate space transform (position, orientation, and scale) relative to its parent node.
To construct a scene, you use a hierarchy of nodes to create its structure, then add lights, cameras, and geometry to nodes to create visible content.

The rootNode object in a scene defines the coordinate system of the world rendered by SceneKit.
Each child node you add to this root node creates its own coordinate system, which is in turn inherited by its own children.
You determine the transformation between coordinate systems using the node’s position, rotation, and scale properties properties (or directly using its transform property).

A Node’s Attachments Define Visual Content and Behavior:
You add 2D and 3D objects to a scene by attaching SCNGeometry objects to nodes. 
(Geometries, in turn, have attached SCNMaterial objects that determine their appearance.) 
To shade the geometries in a scene with light and shadow effects, add nodes with attached SCNLight objects.
To control the viewpoint from which the scene appears when rendered, add nodes with attached SCNCamera objects.

To add physics-based behaviors and special effects to SceneKit content, use other types of node attachments.
For example, an SCNPhysicsBody object defines a node’s characteristics for physics simulation, and an SCNPhysicsField object applies forces to physics bodies in an area around the node.
An SCNParticleSystem object attached to a node renders particle effects such as fire, rain, or falling leaves in the space defined by a node.

To improve performance, SceneKit can share attachments between multiple nodes.
For example, in a racing game that includes many identical cars,
the scene graph would contain many nodes—one to position and animate each car—but all car nodes would reference the same geometry object.

Managing the Node's Transform
var simdTransform: simd_float4x4
The transform applied to the node relative to its parent. Animatable.
var simdPosition: simd_float3
The translation applied to the node. Animatable.
var simdRotation: simd_float4
The node’s orientation, expressed as a rotation angle about an axis. Animatable.
var simdEulerAngles: simd_float3
The node’s orientation, expressed as pitch, yaw, and roll angles in radians. Animatable.
var simdOrientation: simd_quatf
The node’s orientation, expressed as a quaternion. Animatable.
var simdScale: simd_float3
The scale factor applied to the node. Animatable.
var simdPivot: simd_float4x4
The pivot point for the node’s position, rotation, and scale. Animatable.

simdTransform:
The transform is the combination of the node’s simdRotation, simdPosition, and simdScale properties. The default transform is the identity matrix.
When you set the value of this property, the node’s simdRotation, simdOrientation, simdEulerAngles, simdPosition, and simdScale properties automatically change to match the new transform, and vice versa. 
SceneKit can perform this conversion only if the transform you provide is a combination of rotation, translation, and scale operations.
If you set the value of this property to a skew transform or to a nonaffine transform, the values of these properties become undefined.
Setting a new value for any of these properties causes SceneKit to compute a new transform, discarding any skew or nonaffine operations in the original transform.
You can animate changes to this property’s value. 

simdRotation:
The node’s orientation, expressed as a rotation angle about an axis. Animatable.
The four-component rotation vector specifies the direction of the rotation axis in the first three components and the angle of rotation (in radians) in the fourth.
The default rotation is the zero vector, specifying no rotation. Rotation is applied relative to the node’s simdPivot property.
The simdRotation, simdEulerAngles, and simdOrientation properties all affect the rotational aspect of the node’s simdTransform property. Any change to one of these properties is reflected in the others.

simdPosition:
The translation applied to the node. Animatable.
The node’s position locates it within the coordinate system of its parent, as modified by the node’s simdPivot property.
The default position is the zero vector, indicating that the node is placed at the origin of the parent node’s coordinate system.

simdScale:
The scale factor applied to the node. Animatable.
Each component of the scale vector multiplies the corresponding dimension of the node’s geometry.
The default scale is 1.0 in all three dimensions. For example, applying a scale of (2.0, 0.5, 2.0) to a node containing a cube geometry reduces its height and increases its width and depth.
Scaling is applied relative to the node’s simdPivot property.

simdPivot:
The pivot point for the node’s position, rotation, and scale. Animatable.
A node’s pivot is the transform between its coordinate space and that used by its simdPosition, simdRotation, and simdScale properties.
The default pivot is the identity matrix, specifying that the node’s position locates the origin of its coordinate system, its rotation is about an axis through its center, and its scale is also relative to that center point.
Changing the pivot transform alters these behaviors in many useful ways. You can:
Offset the node’s contents relative to its position. For example, by setting the pivot to a translation transform you can position a node containing a sphere geometry relative to where the sphere would rest on a floor instead of relative to its center.
Move the node’s axis of rotation. For example, with a translation transform you can cause a node to revolve around a faraway point instead of rotating around its center, and with a rotation transform you can tilt the axis of rotation.
Adjust the center point and direction for scaling the node. For example, with a translation transform you can cause a node to grow or shrink relative to a corner instead of to its center.

==================================================class SCNGeometry : NSObject
A three-dimensional shape (also called a model or mesh) that can be displayed in a scene, with attached materials that define its appearance.

In SceneKit, geometries attached to SCNNode objects form the visible elements of a scene, and SCNMaterial objects attached to a geometry determine its appearance.

Working with Geometry Objects
You control a geometry’s appearance in a scene with nodes and materials. A geometry object provides only the form of a visible object rendered by SceneKit. You specify color and texture for a geometry’s surface, control how it responds to light, and add special effects by attaching materials (for details, see the methods in Managing a Geometry’s Materials). You position and orient a geometry in a scene by attaching it to an SCNNode object. Multiple nodes can reference the same geometry object, allowing it to appear at different positions in a scene.
You can easily copy geometries and change their materials. A geometry object manages the association between immutable vertex data and a mutable assignment of materials. To make a geometry appear more than once in the same scene with a different set of materials, use its inherited copy() method. The copy shares the underlying vertex data of the original, but can be assigned materials independently. You can thus make many copies of a geometry without incurring a significant cost to rendering performance.
You can animate a geometry object. The vertex data associated with a geometry is immutable, but SceneKit provides several ways to animate geometry. You can use a SCNMorpher or SCNSkinner object to deform a geometry’s surface, or run animations created in an external 3D authoring tool and loaded from a scene file. You can also use methods in the SCNShadable protocol to add custom GLSL shader programs that alter SceneKit’s rendering of a geometry.

firstMaterial
Calling this convenience method is equivalent to retrieving the first object from the geometry’s materials array. This property’s value is nil if the geometry has no attached materials.

SceneKit provides several ways to introduce geometry objects to your app:
Action
For further information

Load from a scene file created using external 3D authoring tools
SCNScene, SCNSceneSource

Use and customize SceneKit’s built-in primitive shapes
SCNPlane, SCNBox, SCNSphere, SCNPyramid, SCNCone, SCNCylinder, SCNCapsule, SCNTube, and SCNTorus

Create 3D geometry from 2D text or Bézier curves
SCNText, SCNShape

Create a custom geometry from vertex data
SCNGeometrySource, SCNGeometryElement, init(sources:elements:), Managing Geometry Data

