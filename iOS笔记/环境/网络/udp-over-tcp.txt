udp over tcp、udp in tcp说的是一回事儿，是把udp协议封装到tcp协议里发送。
本质上是发送时把udp转换成tcp，然后在接收方恢复出来。
这种方案的缺点是会影响udp传输的速率和实时性，因为tcp有可靠传输、拥塞控制、按序到达等特性，这些特性都是会牺牲速率和实时性且无法关掉的。

udp in tcp方案的常见特点:
如果网络很好不丢包，那么udp in tcp方案会工作得很好；如果网路稍微有一点丢包，数据包的延迟会极大得增加。 （按序到达造成的副作用）
如果带宽充足，udp in tcp方案也会工作得很好；如果udp数据发送的数据一但超过了tcp的带宽，连接就会卡住一段时间，有时候会造成超过10秒的时间无法发送数据。（可靠传输、拥塞控制造成的副作用）

TCP 不适合大流量实时传输：TCP 的可靠传输和拥塞控制机制虽然提供了数据传输的可靠性，但牺牲了实时性。
UDP 的优势在实时性：UDP 没有流量控制和重传机制，因此即使有数据丢失，也不会阻塞整个数据流。

带宽（Bandwidth）是网络通信中的一个核心概念，指的是单位时间内能够传输的数据量，通常用比特每秒（bps，bits per second）或其更大的单位（如 Mbps、Gbps）来表示。
简单来说，带宽可以类比成一条水管的宽度——水管越宽，在相同时间内可以输送更多的水；同样，带宽越大，在相同时间内可以传输更多的数据。
影响数据速度：带宽越大，数据传输速率（速度）通常越快，延迟和拥堵现象也会减少。


OSI 层	普通套接字行为	Raw Socket 行为
应用层	使用协议栈的服务（如 HTTP 请求）。	需用户手动构造包，不支持高层协议逻辑。
表示层	数据格式转换、加密/解密。	直接传输原始数据，需用户自行处理。
会话层	TCP 连接管理（三次握手、状态管理）。	无状态传输，不进行会话管理。
传输层	自动处理 TCP 包头、UDP 包头（如端口、校验和等）。	需用户手动构造传输层包头。
网络层	自动添加 IP 包头，设置源地址、目的地址、校验和等。	允许用户完全控制 IP 包头。
数据链路层	由系统生成以太网帧，封装 IP 包，处理 MAC 地址。	通常由驱动完成，无需用户关心。
物理层	传输比特流。	不直接干涉，由硬件处理。

TCP/IP 协议栈:
TCP/IP 协议栈 是一个层次化的网络协议体系，用于处理网络通信中的各种功能。从应用层到硬件层，每一层都承担特定的职责，相互协作完成数据的传输。
使用协议栈，系统可以自动完成大量网络通信的功能，比如组装数据包、路由选择、数据重传等。开发者只需要关心应用层的逻辑，而底层细节由协议栈处理。

TCP/IP 协议栈的分层结构:
层级	对应 OSI 层	职责	系统的自动处理内容
应用层	应用层、表示层、会话层	提供用户访问网络服务的接口（如 HTTP、FTP、DNS）。	数据编码、加密、会话管理等。
传输层	传输层	负责端到端通信，确保数据完整性和可靠性（如 TCP、UDP）。	TCP 的分段、重传机制，校验和计算，UDP 的简单封装等。
网络层	网络层	负责数据包的路由选择与转发（如 IP 协议）。	IP 地址分配、路由转发、碎片重组等。
链路层	数据链路层、物理层	处理物理网络的访问，封装 IP 数据包到帧，并通过硬件发送比特流。	MAC 地址封装、以太网帧的生成与解析，硬件信号驱动。


系统自动完成的任务
1. 封装与解封装数据
当一个应用程序通过 Socket API 发送数据时，协议栈会自动封装数据：
在应用层添加应用协议头（如 HTTP）。
在传输层封装为 TCP 或 UDP 包，添加源/目标端口、校验和等。
在网络层封装为 IP 数据包，添加源/目标 IP 地址。
在链路层封装为帧，添加 MAC 地址等。
接收数据时，协议栈会逆向解封装，从链路层到应用层依次提取有用信息。
2. 路由选择
在发送数据时，协议栈会根据目标 IP 地址，决定数据包的路由路径。
操作系统内置路由表会记录网关、子网掩码等信息。
3. 错误处理与重传
TCP 协议会自动处理丢包、数据包乱序等问题，确保数据可靠性。
如果某个数据包未被确认，TCP 会在规定时间内重传。
4. 流量控制与拥塞控制
TCP 会根据接收方的接收能力（窗口大小）调整发送速度，避免网络拥堵。
5. 分片与重组
如果网络层的数据包超过链路层的最大传输单元（MTU），IP 协议会自动将其分片。
接收端协议栈会自动重组分片，恢复为完整的 IP 数据包。
6. 地址解析
协议栈会自动通过 ARP（地址解析协议） 查找目标 IP 地址对应的 MAC 地址，用于局域网通信。


Raw Socket 与协议栈的关系:
Raw Socket 是一种特殊接口，允许开发者直接构造和发送自定义数据包。
使用 Raw Socket 时，操作系统会跳过高层协议的部分自动处理逻辑（如 TCP 的重传、IP 地址检查等），但链路层和物理层仍由系统处理。


UDP-Over-TCP is a proxy
It works on transport layer, which transfers payload of UDP packet over TCP

For example: app sends hello to github.com over UDP and github.com replies nice. When using UDP-Over-TCP, the communication is as follow:

sequenceDiagram
app ->> client: [udp] github.com hello
client ->> server: [tcp] github.com hello
server ->> github.com: [udp] hello
github.com -->> server: [udp] nice
server -->> client: [tcp] nice
client -->> app: [udp] nice