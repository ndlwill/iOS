“L4S” 全称是 Low Latency, Low Loss, Scalable Throughput，是由 IETF 提出的一个新型网络拥塞控制框架，目标是让互联网通信既 低延迟、低丢包，又具备 可扩展的高吞吐能力。

L4S 是一种网络拥塞管理机制，它的设计理念是：
让高吞吐量应用也能拥有实时应用一样低的延迟。

它不是一个单独的协议，而是由几个关键技术组合而成：
ECN（Explicit Congestion Notification）扩展：
使用了新的 ECN 标记方式（ECT(1)），不同于传统的 ECT(0)，以便更快速、更精准地检测网络拥塞。

DualQ（双队列）机制：
网络设备对传统流量和 L4S 流量进行区分，用不同策略处理，避免互相影响。

Scalable congestion control：
使用像 TCP Prague 这样的拥塞控制算法，可以在出现拥塞前提前响应，而不是等到丢包。



网络拥塞控制的作用，简单说就是：
在网络“挤”起来之前，控制发送速率，避免数据丢包和性能下降。
它的核心目标是让数据传输既高效，又不把网络“塞爆”。



为什么需要拥塞控制？
在没有拥塞控制的情况下，发送端会不断发送数据，不管接收端或者网络能不能承受。
这会导致：
丢包：路由器缓存满了就会扔掉数据。
延迟暴涨：数据排队排很久，用户体验变差。
重传：重发数据增加更多网络负担，雪上加霜。
网络崩溃：特别是在大规模系统或公网中，拥塞可导致严重卡顿甚至断连。


拥塞控制的核心职责是：
流量调节	控制数据发送的速率，避免“塞车”。
检测拥塞	判断网络是否拥堵（通过丢包、延迟、ECN等信号）。
调整速率	拥塞时就降低速率，空闲时再慢慢升回来。
探测带宽	自动探测当前网络能承受多少吞吐量，动态适配。


常见的拥塞控制算法
名称	特点
TCP Reno	老派经典，丢包才反应。
TCP Cubic	默认用于 Linux，适合高带宽网络。
BBR（Google）	根据带宽/延迟建模，智能又高效。
TCP Vegas	基于 RTT 变化，提前发现拥塞。
TCP Prague（用于 L4S）	低延迟+高吞吐的未来方案。


拥塞控制 ≠ 流量控制
流量控制	控制发送端不要超过接收端处理能力（点对点）
拥塞控制	控制发送速率避免网络整体拥塞（全局）