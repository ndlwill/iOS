子网掩码计算器
https://www.sojson.com/convert/subnetmask.html


==============================dig
domain information groper
It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried.

Dig is a powerful command-line tool for querying DNS name servers.

dig 8.8.8.8
dig dns.google
dig gmail.com

List the DNS A records for ss64.com using Google DNS (8.8.8.8) instead of your local cache:
$ dig ss64.com @8.8.8.8

==============================Log network traffic with process ID on Mac OS
网络数据采集分析工具: tcpdump 也就是我们常说的抓包工具
与它功能类似的工具有 wireshark ，不同的是，wireshark 有图形化界面，而 tcpdump 则只有命令行。

tcpdump 使用指南:
https://www.cnblogs.com/wongbingming/p/13212306.html

tcpdump -k INP
tcpdump use the option -k to display metadata for the captured traffic.

I     interface name (or interface ID)
N     process name
P     process ID
S     service class
D     direction
C     comment


macOS 连接ajs后，dns走的是物理网卡en1
11:12:39.857611 (en1) IP 192.168.100.191.65070 > dns.google.domain: 49655+ Type65? www.youtube.com. (33)
11:12:39.857735 (en1) IP 192.168.100.191.50927 > dns.google.domain: 11883+ A? www.youtube.com. (33)
11:12:39.864212 (en1, proc mDNSResponder:23865, eproc Safari:24131) IP dns.google.domain > 192.168.100.191.50927: 11883 1/0/0 A 202.160.130.66 (49)
11:12:39.864214 (en1, proc mDNSResponder:23865, eproc Safari:24131) IP dns.google.domain > 192.168.100.191.65070: 49655 1/0/0 A 64.13.192.74 (49)
11:12:39.865774 (utun3, proc com.apple.WebKi:24133, eproc Safari:24131) IP 10.245.24.6.55897 > 202.160.130.66.https: Flags [S], seq 4292051525, win 65535, options [mss 1360,nop,wscale 6,nop,nop,TS val 20716901 ecr 0,sackOK,eol], length 0
11:12:39.865890 (utun3) IP 10.245.24.1.55897 > 10.245.24.6.socks: Flags [S], seq 4292051525, win 65535, options [mss 1360,nop,wscale 6,nop,nop,TS val 20716901 ecr 0,sackOK,eol], length 0
11:12:39.866138 (utun3, proc AJiaSuSvc:23851) IP 10.245.24.6.socks > 10.245.24.1.55897: Flags [S.], seq 2778711288, ack 4292051526, win 65535, options [mss 1360,nop,wscale 6,nop,nop,TS val 815657838 ecr 20716901,sackOK,eol], length 0
11:12:39.866181 (utun3, proc com.apple.WebKit:24133, eproc Safari:24131) IP 202.160.130.66.https > 10.245.24.6.55897: Flags [S.], seq 2778711288, ack 4292051526, win 65535, options [mss 1360,nop,wscale 6,nop,nop,TS val 815657838 ecr 20716901,sackOK,eol], length 0
11:12:39.866206 (utun3, proc com.apple.WebKi:24133, eproc Safari:24131) IP 10.245.24.6.55897 > 202.160.130.66.https: Flags [.], ack 1, win 2064, options [nop,nop,TS val 20716901 ecr 815657838], length 0

proc：表示进程名
eproc：表示 effective process name


网络上的流量、数据包，非常的多，因此要想抓到我们所需要的数据包，就需要我们定义一个精准的过滤器,把这些目标数据包，从巨大的数据包网络中抓取出来。
而在 tcpdump 的世界里，过滤器的实现，都是通过一个又一个的参数组合起来

要通过 host 参数指定 host ip 进行过滤:
CopyCopy
$ tcpdump host 192.168.10.100
主程序 + 参数名+ 参数值 这样的组合才是我们正常认知里面命令行该有的样子。
我们居然还可以在 host 前再加一个限定词，来缩小过滤的范围
$ tcpdump src host 192.168.10.100

tcpdump tcp src host 192.168.10.100

tcpdump 的各种参数:
option 可选参数：
proto 类过滤器：根据协议进行过滤，可识别的关键词有： tcp, udp, icmp, ip, ip6, arp, rarp,ether,wlan, fddi, tr, decnet
type 类过滤器：可识别的关键词有：host, net, port, portrange，这些词后边需要再接参数。
direction 类过滤器：根据数据流向进行过滤，可识别的关键字有：src, dst，同时你可以使用逻辑运算符进行组合，比如 src or dst

----------理解 tcpdump 的输出
抓取的一个 tcp 包
21:26:49.013621 IP 172.20.20.1.15605 > 172.20.20.2.5920: Flags [P.], seq 49:97, ack 106048, win 4723, length 48
第一列：时分秒毫秒 21:26:49.013621
第二列：网络协议 IP
第三列：发送方的ip地址+端口号，其中172.20.20.1是 ip，而15605 是端口号
第四列：箭头 >， 表示数据流向
第五列：接收方的ip地址+端口号，其中 172.20.20.2 是 ip，而5920 是端口号
第六列：冒号
第七列：数据包内容，包括Flags 标识符，seq 号，ack 号，win 窗口，数据长度 length，其中 [P.] 表示 PUSH 标志位为 1

----------Flags 标识符
使用 tcpdump 抓包后，会遇到的 TCP 报文 Flags，有以下几种:
[S] : SYN（开始连接）
[P] : PSH（推送数据）
[F] : FIN （结束连接）
[R] : RST（重置连接）
[.] : 没有 Flag （意思是除上面四种类型外的其他情况，有可能是 ACK 也有可能是 URG）

----------常规过滤规则
1.基于IP地址过滤：host
tcpdump host 192.168.10.100

数据包的 ip 可以再细分为源ip和目标ip两种
# 根据源ip进行过滤
$ tcpdump -i eth2 src 192.168.10.100
# 根据目标ip进行过滤
$ tcpdump -i eth2 dst 192.168.10.200

2.基于网段进行过滤：net
若你的ip范围是一个网段，可以直接这样指定
$ tcpdump net 192.168.10.0/24

网段同样可以再细分为源网段和目标网段
# 根据源网段进行过滤
$ tcpdump src net 192.168
# 根据目标网段进行过滤
$ tcpdump dst net 192.168

3.基于端口进行过滤：port
tcpdump port 8088
端口同样可以再细分为源端口，目标端口
# 根据源端口进行过滤
$ tcpdump src port 8088
# 根据目标端口进行过滤
$ tcpdump dst port 8088

如果你想要同时指定两个端口你可以这样写
$ tcpdump port 80 or port 8088
也可以简写成这样
$ tcpdump port 80 or 8088

你的想抓取的不再是一两个端口，而是一个范围,你可以这样指定一个端口段。
$ tcpdump portrange 8000-8080
$ tcpdump src portrange 8000-8080
$ tcpdump dst portrange 8000-8080

对于一些常见协议的默认端口，我们还可以直接使用协议名，而不用具体的端口号
比如 http == 80，https == 443 等
$ tcpdump tcp port http

4.基于协议进行过滤：proto
见的网络协议有：tcp, udp, icmp, http, ip,ipv6 等
若你只想查看 icmp 的包，可以直接这样写
$ tcpdump icmp
protocol 可选值：ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui

5.基本IP协议的版本进行过滤
当你想查看 tcp 的包，你也许会这样子写
$ tcpdump tcp
ip 根据版本的不同，可以再细分为 IPv4 和 IPv6 两种，如果你只指定了 tcp，这两种其实都会包含在内。
如果是 IPv4 的 tcp 包 ，就这样写（友情提示：数字 6 表示的是 tcp 在ip报文中的编号。）
$ tcpdump 'ip proto tcp'
# or
$ tcpdump ip proto 6
# or
$ tcpdump 'ip protochain tcp'
# or 
$ tcpdump ip protochain 6

而如果是 IPv6 的 tcp 包 ，就这样写
$ tcpdump 'ip6 proto tcp'
# or
$ tcpdump ip6 proto 6
# or
$ tcpdump 'ip6 protochain tcp'
# or 
$ tcpdump ip6 protochain 6

上面这几个命令示例，有两点需要注意:
跟在 proto 和 protochain 后面的如果是 tcp, udp, icmp ，那么过滤器需要用引号包含，这是因为 tcp,udp, icmp 是 tcpdump 的关键字。
跟在ip 和 ip6 关键字后面的 proto 和 protochain 是两个新面孔
proto 后面跟的 <protocol> 的关键词是固定的，只能是 ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui 这里面的其中一个。
而 protochain 后面跟的 protocol 要求就没有那么严格，它可以是任意词，只要 tcpdump 的 IP 报文头部里的 protocol 字段为 <protocol> 就能匹配上。

下面两种写法效果是一样的
$ tcpdump 'ip && tcp'
$ tcpdump 'ip proto tcp'

这两种写法也是一样的
$ tcpdump 'ip6 && tcp'
$ tcpdump 'ip6 proto tcp'

----------可选参数解析
1.设置不解析域名提升速度
-n：不把ip转化成域名，直接显示 ip，避免执行 DNS lookups 的过程，速度会快很多
-nn：不把协议和端口号转化成名字，速度也会快很多。
-N：不打印出host 的域名部分.。如果设置了此选现，tcpdump 将会打印'nic' 而不是 'nic.ddn.mil'.

2.过滤结果输出到文件
使用 tcpdump 工具抓到包后，往往需要再借助其他的工具进行分析，比如常见的 wireshark 。
而要使用wireshark ，我们得将 tcpdump 抓到的包数据生成到文件中，最后再使用 wireshark 打开它即可。
使用 -w 参数后接一个以 .pcap 后缀命令的文件名，就可以将 tcpdump 抓到的数据保存到文件中。
$ tcpdump icmp -w icmp.pcap

3.从文件中读取包数据
使用 -w 是写入数据到文件，而使用 -r 是从文件中读取数据。

读取后，我们照样可以使用上述的过滤器语法进行过滤分析。
$ tcpdump icmp -r all.pcap

4.控制详细内容的输出
-v：产生详细的输出. 比如包的TTL，id标识，数据包长度，以及IP包的一些选项。同时它还会打开一些附加的包完整性检测，比如对IP或ICMP包头部的校验和。
-vv：产生比-v更详细的输出. 比如NFS回应包中的附加域将会被打印, SMB数据包也会被完全解码。
-vvv：产生比-vv更详细的输出。比如 telent 时所使用的SB, SE 选项将会被打印, 如果telnet同时使用的是图形界面，其相应的图形选项将会以16进制的方式打印出来

5.控制时间的显示#
-t：在每行的输出中不输出时间
-tt：在每行的输出中会输出时间戳
-ttt：输出每两行打印的时间间隔(以毫秒为单位)
-tttt：在每行打印的时间戳之前添加日期的打印（此种选项，输出的时间最直观）

6.显示数据包的头部#
-x：以16进制的形式打印每个包的头部数据（但不包括数据链路层的头部）
-xx：以16进制的形式打印每个包的头部数据（包括数据链路层的头部）
-X：以16进制和 ASCII码形式打印出每个包的数据(但不包括连接层的头部)，这在分析一些新协议的数据包很方便。
-XX：以16进制和 ASCII码形式打印出每个包的数据(包括连接层的头部)，这在分析一些新协议的数据包很方便。

7.过滤指定网卡的数据包#
-i：指定要过滤的网卡接口，如果要查看所有网卡，可以 -i any

8.过滤特定流向的数据包
-Q： 选择是入方向还是出方向的数据包，可选项有：in, out, inout，也可以使用 --direction=[direction] 这种写法

9.其他常用的一些参数
-A：以ASCII码方式显示每一个数据包(不显示链路层头部信息). 在抓取包含网页数据的数据包时, 可方便查看数据
-l : 基于行的输出，便于你保存查看，或者交给其它工具分析
-q : 简洁地打印输出。即打印很少的协议相关信息, 从而输出行都比较简短.
-c : 捕获 count 个包 tcpdump 就退出
-s : tcpdump 默认只会截取前 96 字节的内容，要想截取所有的报文内容，可以使用 -s number， number 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。
-S : 使用绝对序列号，而不是相对序列号
-C：file-size，tcpdump 在把原始数据包直接保存到文件中之前, 检查此文件大小是否超过file-size. 如果超过了, 将关闭此文件,另创一个文件继续用于原始数据包的记录. 新创建的文件名与-w 选项指定的文件名一致, 但文件名后多了一个数字.该数字会从1开始随着新创建文件的增多而增加. file-size的单位是百万字节(nt: 这里指1,000,000个字节,并非1,048,576个字节, 后者是以1024字节为1k, 1024k字节为1M计算所得, 即1M=1024 ＊ 1024 ＝ 1,048,576)
-F：使用file 文件作为过滤条件表达式的输入, 此时命令行上的输入将被忽略.

10.对输出内容进行控制的参数
-D : 显示所有可用网络接口的列表
-e : 每行的打印输出中将包括数据包的数据链路层头部信息
-E : 揭秘IPSEC数据
-L ：列出指定网络接口所支持的数据链路层的类型后退出
-Z：后接用户名，在抓包时会受到权限的限制。如果以root用户启动tcpdump，tcpdump将会有超级用户权限。
-d：打印出易读的包匹配码
-dd：以C语言的形式打印出包匹配码.
-ddd：以十进制数的形式打印出包匹配码

----------过滤规则组合
and：所有的条件都需要满足，也可以表示为 &&
or：只要有一个条件满足就可以，也可以表示为 ||
not：取反，也可以使用 !

需要抓一个来自10.5.2.3，发往任意主机的3389端口的包
$ tcpdump src 10.5.2.3 and dst port 3389

当你在使用多个过滤器进行组合时，有可能需要用到括号，而括号在 shell 中是特殊符号，因为你需要使用引号将其包含。
tcpdump 'src 10.0.2.4 and (dst port 3389 or 22)'

而在单个过滤器里，常常会判断一条件是否成立，这时候，就要使用下面两个符号
=：判断二者相等
==：判断二者相等
!=：判断二者不相等

当你使用这两个符号时，tcpdump 还提供了一些关键字的接口来方便我们进行判断，比如
if：表示网卡接口名、
proc：表示进程名
pid：表示进程 id
svc：表示 service class
dir：表示方向，in 和 out
eproc：表示 effective process name
epid：表示 effective process ID

要过滤来自进程名为 nc 发出的流经 en0 网卡的数据包，或者不流经 en0 的入方向数据包，可以这样子写

----------特殊过滤规则
1.根据 tcpflags 进行过滤

tcpdump 支持我们根据数据包的标志位进行过滤
proto [ expr:size ]
proto：可以是熟知的协议之一（如ip，arp，tcp，udp，icmp，ipv6）
expr：可以是数值，也可以是一个表达式，表示与指定的协议头开始处的字节偏移量。
size：是可选的，表示从字节偏移量开始取的字节数量。

tcpflags 可以理解为是一个别名常量，相当于 13，它代表着与指定的协议头开头相关的字节偏移量，也就是标志位，所以 tcp[tcpflags] 等价于 tcp[13] 

tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg 这些同样可以理解为别名常量，分别代表 1，2，4，8，16，32，64

当下面这个表达式成立时，就代表这个包是一个 syn 包。
tcp[tcpflags] == tcp-syn

用 tcpdump 抓取到 syn 包:
1.第一种写法：使用数字表示偏移量
$ tcpdump -i eth0 "tcp[13] & 2 != 0" 
2.第二种写法：使用别名常量表示偏移量
$ tcpdump -i eth0 "tcp[tcpflags] & tcp-syn != 0" 
3.第三种写法：使用混合写法
$ tcpdump -i eth0 "tcp[tcpflags] & 2 != 0" 
# or
$ tcpdump -i eth0 "tcp[13] & tcp-syn != 0" 

同时捕获多种类型的包呢，比如 syn + ack 包
第一种写法
$ tcpdump -i eth0 'tcp[13] == 2 or tcp[13] == 16'
第二种写法
$ tcpdump -i eth0 'tcp[tcpflags] == tcp-syn or tcp[tcpflags] == tcp-ack'
第三种写法
$ tcpdump -i eth0 "tcp[tcpflags] & (tcp-syn|tcp-ack) != 0" 
第四种写法：注意这里是 单个等号，而不是像上面一样两个等号，18（syn+ack） = 2（syn） + 16（ack）
$ tcpdump -i eth0 'tcp[13] = 18'
# or
$ tcpdump -i eth0 'tcp[tcpflags] = 18'

tcp 中有 类似 tcp-syn 的别名常量，其他协议也是有的，比如 icmp 协议，可以使用的别名常量有
icmp-echoreply, icmp-unreach, icmp-sourcequench, 
icmp-redirect, icmp-echo, icmp-routeradvert,
icmp-routersolicit, icmp-timx-ceed, icmp-paramprob, 
icmp-tstamp, icmp-tstampreply,icmp-ireq, 
icmp-ireqreply, icmp-maskreq, icmp-maskreply

2.基于包大小进行过滤
若你想查看指定大小的数据包，也是可以的
$ tcpdump less 32 
$ tcpdump greater 64 
$ tcpdump <= 128

3.根据 mac 地址进行过滤
$ tcpdump ether host [ehost]
$ tcpdump ether dst	[ehost]
$ tcpdump ether src	[ehost]

4.过滤通过指定网关的数据包
tcpdump gateway [host]

----------何抓取到更精准的包
抓取 HTTP 的 POST 请求
tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4]'

tcp[n]：表示 tcp 报文里 第 n 个字节
tcp[n:c]：表示 tcp 报文里从第n个字节开始取 c 个字节，tcp[12:1] 表示从报文的第12个字节（因为有第0个字节，所以这里的12其实表示的是13）开始算起取一个字节，也就是 8 个bit。

TCP segment structure:
https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure

0xf0：是 10 进制的 240 的 16 进制表示
但对于位操作来说，10进制和16进制都将毫无意义，我们需要的是二进制，将其转换成二进制后是：11110000

注意 GET最后还有个空格）的 16进制写法（也就是 0x47455420）进行比对
0x47   -->   71    -->  G
0x45   -->   69    -->  E
0x54   -->   84    -->  T
0x20   -->   32    -->  空格

tcp[12:1] & 0xf0) >> 2 这个表达式实际是 (tcp[12:1] & 0xf0) >> 4 ) << 2 的简写形式。

tcp[12:1] & 0xf0 的值其实是一个字节，也就是 8 个bit
tcp 报文首部结构图的Data Offset，表示数据偏移量的只有 4个bit
也就是说 上面得到的值 10110000，前面 4 位（1011）才是正确的偏移量，那么为了得到 1011，只需要将 10110000 右移4位即可，也就是 tcp[12:1] & 0xf0) >> 4

Data Offset 的单位是 4个字节
除以4在位运算中相当于左移2位，也就是 <<2
与前面的 >>4 结合起来一起算的话，最终的运算可以简化为 >>2

实际数据开始的位置是 tcp[12:1] & 0xf0) >> 2 （单位是字节）
找到了数据的起点后，可别忘了我们的目的是从数据中打到 HTTP 请求的方法
tcp[((tcp[12:1] & 0xf0) >> 2):4] 从数据开始的位置再取出四个字节，然后将结果与 GET （注意 GET最后还有个空格）的 16进制写法（也就是 0x47455420）进行比对

ChatGPT:
这个表达式中 tcp[12:1] 表示提取TCP头部中的第13个字节，& 0xf0 表示将这个字节的低4位清零，只保留高4位，然后 >> 2 将结果向右移动2位，相当于将结果除以4。
TCP 头部长度又是存储在 TCP 头部的第13个字节的高4位中
TCP头部长度（以4字节为单位），因此，TCP头部长度是实际长度乘以4。
然后 >> 2 将结果向右移动2位，相当于将结果除以4。最终结果是TCP头部长度的字节数

----------抓包实战应用例子
1.提取 HTTP 的 User-Agent
tcpdump -nn -A -s1500 -l | grep "User-Agent:"

2.抓取 HTTP GET 和 POST 请求
抓取 HTTP GET 请求包
$ tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420'
# or
$ tcpdump -vvAls0 | grep 'GET'

抓取 HTTP POST 请求包
$ tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354'
# or 
$ tcpdump -vvAls0 | grep 'POST'
该方法不能保证抓取到 HTTP POST 有效数据流量，因为一个 POST 请求会被分割为多个 TCP 数据包

3.抓取 DNS 请求和响应#
DNS 的默认端口是 53，因此可以通过端口进行过滤
$ tcpdump -i any -s0 port 53

4.切割 pcap 文件
当抓取大量数据并写入文件时，可以自动切割为多个大小相同的文件。
例如，下面的命令表示每 3600 秒创建一个新文件 capture-(hour).pcap，每个文件大小不超过 200*1000000 字节：
$ tcpdump  -w /tmp/capture-%H.pcap -G 3600 -C 200
这些文件的命名为 capture-{1-24}.pcap，24 小时之后，之前的文件就会被覆盖。

