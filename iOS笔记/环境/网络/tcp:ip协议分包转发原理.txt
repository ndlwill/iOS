整个数据帧由首部、数据和尾部三部分组成，首部固定为14个字节，包含了目标MAC地址、源MAC地址和类型
数据最短为46个字节，最长为1500个字节，如果需要传输的数据很长，就必须分割成多个帧进行发送
尾部固定为4个字节，表示数据帧校验序列，用于确定数据包在传输过程中是否损坏。

以太网规协议定，接入网络的设备都必须安装网络适配器，即网卡， 数据包必须是从一块网卡传送到另一块网卡。

而网卡地址就是数据包的发送地址和接收地址，也就是帧首部所包含的MAC地址，MAC地址是每块网卡的身份标识

有了MAC地址以后，以太网采用广播形式，把数据包发给该子网内所有主机，子网内每台主机在接收到这个包以后，都会读取首部里的目标MAC地址，然后和自己的MAC地址进行对比，
如果相同就做下一步处理，如果不同，就丢弃这个包。

==================================================

TCP分片应该称为TCP分段
IP分片，TCP分片区别:
IP分片产生的原因是网络层的MTU, TCP分段产生原因是MSS
IP分片由网络层完成，也在网络层进行重组, TCP分段是在传输层完成，并在传输层进行重组
对于以太网，MSS为1460字节，而MUT往往会大于MSS

故采用TCP协议进行数据传输，是不会造成IP分片的。若数据过大，只会在传输层进行数据分段，到了IP层就不用分片
而我们常提到的IP分片是由于UDP传输协议造成的，因为UDP传输协议并未限定传输数据报的大小

源主机在发起通信之前，将Self IP与目的主机的IP进行比较，如果两者位于同一网段（用子网掩码计算后具有相同的网络号），
那么源主机直接向目的主机发送ARP请求，在接收到目的主机的ARP应答后获取对方的MAC地址，然后用对方的MAC地址作为目的MAC进行报文发送，
位于同一VLAN（网段）的主机互访时属于这种情况，这是互联的交换机做二层交换转发。

当源主机判断目的主机与自己位于不同网段时，它会通过网关来提交报文，
即发送ARP请求来获取网关IP地址对应的MAC，在得到网关的ARP应答后，用网关MAC作为报文目的MAC进行报文发送……也就是路由器的某个端口。
注意，报文的源IP是源主机IP，目的IP依然是目的主机IP。

当网关路由器接收到以太网数据帧时，发现数据帧中的目标MAC地址是自己的某一个端口的物理地址，这时路由器会把以太网数据帧的封装去掉。
路由器认为这个IP数据包是要通过自己进行转发，接着它就在匹配路由表（包含目标地址和指向目标地址的指针）。匹配到路由项后，它就将包发往下一条地址。
路由器转发数据包也是这样，它始终是不会改IP地址的，只会改源/目标MAC。

万一路由遇到目的MAC是广播地址怎么办？IP的广播有三种:
255.255.255.255叫本地广播，也叫直播，direct broadcast，不跨路由器。
172.16.33.255叫子网广播，广播给172.16.33.0这个子网，可以跨路由器。
172.16.255.255叫全子网广播，广播给172.16.0.0这个主网，可以跨路由器。

路由器是三层设备，可以隔离广播，但并不是所有广播都隔离。事实上只有本地广播路由器才不转发，对于子网广播和全子网广播，路由器是转发的。

==================================================完整的数据包传输过程
封装报文是从上层到下层(应用层 --> 传输层 --> 网络层 – > 数据链路层 --> 物理层)，解封装报文是从下层到上层。
数据包传输的过程中，源IP和目标IP不会变，除非遇到NAT，源MAC和目标MAC遇到网关会变。
二层内通过MAC寻址，三层通过IP寻址。
当一个数据包的目的地址不是本机，所以需要查询路由表，当查到路由表中的网关之后，需要获取网关的MAC地址，并将数据包的MAC地址修改成网关地址，然后发送到对应的网卡。
协议数据单元在应用层、表示层和会话层被称做数据(Data)，在传输层被称做分段(Segment)，在网络层被称做包(Packet)，在数据链路层被称做帧(Frame)，在物理层被称做比特(Bit)。
PC1或者Server上保留的arp表是：arp和ip的映射关系。而二层交换机是arp和端口的映射关系，也就是这个arp 应该由哪个端口转发。三层交换机可以保留arp和ip的映射关系。

数据包到达集线器:
这里PC1外接的是一个集线器，按理说这么古老的设备是不应该出现在这里的，但是为了能够全方位的描述一些你常见到的设备，这里有意为之，安排了一个集线器。
PC1发出的比特流到达集线器，集线器简单地对比特流转发，从除接收端口以外的所有端口转发出去。
PC2接收到这个数据包，把比特流转换成帧上传到数据链路层，PC2比较数据帧的目的MAC地址，发现与本机网卡的MAC地址不同，PC2丢弃该数据帧，放弃处理，数据到达路由器。

数据包到达路由器R1:
路由器R1收到该比特流，转换成帧上传到数据链路层，路由器R1比较数据帧的目的MAC地址，发现与路由器接收端口Fa0/0(快速以太网，简写成Fa0/0，指的是0号插槽上编号为0的接口)的MAC地址相同，路由器知道该数据帧是发往本路由器的。
路由器R1的数据链路层把数据帧进行解封装，然后上传到路由器R1的网络层，路由器R1看到数据包的目的IP地址是195.1.1.2，并不是发给本路由器的，需要路由器进行转发。
路由器R1査询自己的路由表，发现数据包应该从串行接口S1/1发出。路由器R1把数据包从Fa0/0接口交换到S1/1接口。

此时R1并不能直接把这个数据包发出去，因为在R1的Fa0/0接口被解封装，现在需要被重新再封装。
在路由器的入接口解封装，在路由器的出接口需要再封装。
网络层的封装并没有被解开，但并不意味着网络层的信息一点都没有改变，其实网络层的数据包中源和目的IP地址都没有被改变(除非在网络地址转换的情况下),但TTL(生存周期)会减1。
网络层把数据包交给下层的数据链路层，数据链路层需要封装二层的地址。串行链路不同于以太网，因为以太网是一个多路访问的网络，要定位到目的设备需要借助于MAC地址，
但串行线路一般的封装协议都是PPP(Point-to-Point Protocol,点到点协议)或HDLC(High-Level Data Link Control,高级数据链路控制协议)封装，这种封装被用于点对点线路
也就是说，一根线缆只连接两台设备，一端发出，另一端肯定可以收到
假设串行线缆上使用的是PPP协议，则数据链路层封装的源和目的地址都是PPP。
数据链路层封装后的数据帧被传到物理层，转换成二进制形式的比特流，从路由器R1的S1/1接口发送出去

数据包到达R2:
路由器R2收到这个比特流，上传至数据链路层，数据链路层去掉PPP的封装。
路由器R2査询数据包的目的IP地址，发现该IP网络直接连接在Fa0/0接口，路由器R2把数据包交换到Fa0/0接口。
路由器查看本地的ARP缓存，如果找到195.1.1.2对应的MAC地址，则直接进行封裝；如果没有找到，则发送ARP的查询包。
路由器R2发出数据帧的源地址是Fa0/0接口的MAC地址，目的地址是服务器网卡的MAC地址。

交换机处理:
路由器R2发出的比特流到达交换机，根据源MAC地址进行学习，根据目的MAC地址进行转发。
交换机根据数据帧中的目的MAC地址査询MAC地址表，把比特流从对应的端口发送出去，交换机把比特流发往服务器，并没有发往PC3。
可以看到交换机并没有像集线器那样进行广播转发，而是有针对性的进行了转发。

服务器处理:
服务器接收到这个比特流，把比特流转换成帧格式，上传到数据链路层，服务器发现数据帧中的目的MAC地址与本网卡的MAC地址相同，服务器拆除数据链路层的封装后，把数据包上传到网络层。
服务器的网络层比较数据包中的目的IP地址，发现与本机的IP地址相同，服务器拆除网络层的封装后，把数据分段上传到传输层。
传输层对数据分段进行确认、排序、重组，确保数据传输的可靠性。数据最后被传到服务器的应用层。