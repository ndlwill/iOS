1. 流式（Stream-based）
代表协议：TCP、HTTP/2、QUIC（部分）
特点：
数据以 连续字节流 的形式发送
适合数据量大、顺序敏感的应用
适用场景：视频直播、网页加载、大文件传输
举例：你在视频网站上看电影，电影数据就是流式传来的。


2. 数据报式（Datagram-based）
代表协议：UDP、QUIC（部分）
特点：
数据以一个个**独立的数据包（datagram）**传输
不保证顺序、不保证送达（无连接）
延迟更低，控制更灵活
适用场景：语音通话、游戏、视频会议、IoT
举例：你在用微信语音聊天或打王者荣耀时，背后是 datagram 式的传输


3. 消息式（Message-based / Application-layer message）
代表协议：WebSocket、MQTT、CoAP、gRPC、ZeroMQ
特点：
以“消息”为单位，封装在某个底层协议（比如 TCP）中
开发者感知的是“消息”而不是字节流
适用场景：聊天系统、实时推送、IoT、服务间通信（RPC）
举例：WebSocket 中的每一条消息都是独立完整的，客户端可以一条一条地处理。

假设你用 TCP 是一辆卡车（它是按字节流来传数据的）
你用 消息协议（WebSocket、MQTT 等） 来打包数据：
TCP：你只看到卡车在跑，但它其实不知道车上拉了几份快递、每份快递多大。
消息协议：你会在每份快递（消息）外面贴标签（比如：长度、类型、编码方式），这样收货人才能知道怎么拆包。

消息式传输 = 应用层 + 一些自定义的“边界规则”
也就是说：虽然 TCP 是个纯粹的字节流，它不知道哪里是一条消息的开始或结束，但我们可以：
自己规定“每条消息前面加4个字节表示长度”
或者像 WebSocket 那样，帧头里就有完整消息边界
或者像 gRPC 使用 Protobuf 定义每个消息结构
这样我们就能“模拟”出一条条独立、完整的“消息”。

是不是数据相当于封装在一个对象中，在 TCP 中作为一整个数据传输？
TCP 本身不理解这个“对象”是什么
是我们在应用层用消息协议来定义了这个“对象的结构”，然后把它序列化成字节流给 TCP

“消息式”通信就是在 TCP（或其他传输层）之上，人为地给字节流加上结构和边界信息，让我们可以一条条处理“消息”。


4. 文件式（File-based）
代表协议：FTP、HTTP（文件下载）
特点：
传输的最小单位是一个“文件”
通常是一段完整数据的拉取或推送
适用场景：软件包下载、图片上传、离线传输
举例：你用浏览器下载一个 .zip 文件，就是文件式的传输。


5. 块式（Block-based / Chunked）
代表协议：HTTP Chunked Encoding、BitTorrent、HLS（视频）
特点：
将大数据切分成多个 chunk（块） 分批发送
适合渐进加载、断点续传、P2P 等场景
适用场景：在线视频、文件下载器、CDN
举例：你在爱奇艺看电影，视频分成很多段，每段都是一个 chunk 加载的


形式	是否有顺序	是否可靠	适合用途	协议代表
流式	✅ 是	✅ 是	视频、文件、网页	TCP、HTTP/2、QUIC
数据报式	❌ 否	❌ 否	语音、游戏、IoT	UDP、QUIC（部分）
消息式	✅ 是	✅/❌ 视协议而定	聊天、实时推送	WebSocket、MQTT
文件式	✅ 是	✅ 是	下载、上传	FTP、HTTP
块式	✅ 是	✅ 是	视频流、断点续传	HLS、BitTorrent


流式：连续水流，源源不断（比如 TCP）
数据报：一瓶瓶水，独立的（比如 UDP）
消息式：快递包裹，有结构、有边界（比如 WebSocket）
块式：拼图一样，把大东西拆小块（比如视频片段）
文件式：一次整包处理（比如 FTP）



HTTP 是消息式协议，但它的底层传输是流式的。
从开发者角度看：你在操作「一条条 HTTP 请求 / 响应」消息，是消息式。
从底层网络角度看：HTTP 消息是通过 TCP 流 传输的，是流式传输。
层级	类型	举例
应用层（你写代码的地方）	✅ 消息式	GET / HTTP/1.1\r\n...\r\n\r\n
传输层（底层网络）	✅ 流式	HTTP 请求被当成字节流传输（TCP）


例子：
GET /hello HTTP/1.1
Host: example.com
Content-Length: 11

Hello World
这是一条完整的 HTTP 请求消息。
但它在 TCP 层是怎么传的呢？
可能会被拆成多段：
第一段 TCP 包：GET /hello HTTP/1.1\r\nHost: example.com\r\nContent-
第二段 TCP 包：Length: 11\r\n\r\nHello Wor
第三段 TCP 包：ld
TCP 是流式的，不知道哪里是一条完整的“请求”。
所以 HTTP 协议就必须自己规定哪些是 header，哪些是 body，长度是多少，以此来重构出“消息”的结构。