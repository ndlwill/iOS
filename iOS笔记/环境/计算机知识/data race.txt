What is a data race?
A data race can occur when multiple threads access the same memory without synchronization and at least one access is a write.


Using a barrier on a concurrent queue to synchronize writes
A barrier flag can be used to make access to a certain resource or value thread-safe. We synchronize write access while we keep the benefit of reading concurrently.

Adding new messages to the array is done using the barrier flag which blocks new reads until the write is finished.

final class Messenger {

    private var messages: [String] = []

    private var queue = DispatchQueue(label: "messages.queue", attributes: .concurrent)

    var lastMessage: String? {
        return queue.sync {
            messages.last
        }
    }

    func postMessage(_ newMessage: String) {
        queue.sync(flags: .barrier) {
            messages.append(newMessage)
        }
    }
}

let messenger = Messenger()
// Executed on Thread #1
messenger.postMessage("Hello SwiftLee!")
// Executed on Thread #2
print(messenger.lastMessage) // Prints: Hello SwiftLee!


==================================================


actor TestActor {
    var str: String = ""
}
let test = TestActor()
test.str // Actor-isolated property 'str' can not be referenced from the main actor;