流（Stream）

想象一条水管：水一点点流过去，你不会一次性把所有的水都倒进水管，而是边流边走。
流（Stream） 就是“数据像水流一样被顺序传输”的一种模式。
例如：
看视频时，可以边下载边播放（视频数据以流的形式传过来）。
上传大文件时，可以边读磁盘边发送，不需要一次性把整个文件放到内存。


流（Stream） = 一个按顺序读写数据的通道
不关心数据的具体大小，只关心“下一个字节”。
一旦读过了，就不一定能回退（就像水流过去了）。
常见类型：
输入流（InputStream）：从文件/网络/内存里读数据。
输出流（OutputStream）：往文件/网络/内存里写数据。


（1）文件上传时的流
如果你直接用 Data(contentsOf:) 读一个 2GB 文件，内存会爆掉。
这时你用 InputStream 读取文件，它会：
一次只读一小段数据（比如 64KB）。
每次读取后把数据交给上传任务。
不需要把整个文件一次性放进内存。
let fileURL = URL(fileURLWithPath: "/path/to/large.mp4")
let inputStream = InputStream(url: fileURL)!
request.httpBodyStream = inputStream
上传时，URLSession 会不断从 inputStream 里取数据，就像喝水时一口一口喝。

（2）网络流
当你用 URLSession 下载文件时，其实也是 数据流式到达的：
系统边接收数据，边写入缓存或文件。
不需要等整个文件下载完才给你用。
比如视频播放，音频播放就是 流式播放，而不是等完整文件下载完再开始。

和“分片”的区别
流：连续、顺序、像水管一样，数据一边读一边传。
分片：人为把一个大文件切成多块（比如每 5MB 一块），然后分开传，最后在服务器上合并。
二者可以结合：
流解决内存问题。
分片解决断点续传和并发优化问题。