8位有符号类型的数值范围是-128~127

对于有符号类型，计算机在处理的时候会把最高位当做符号位，0表示正数，1表示负数。
0000 0001即为1，1000 0001即为-1，那么很容易得到8位有符号数值的表示范围应该是1111 1111 ~ 0111 1111，也就是-127~127，问题来了，-128是怎么来的呢？

在计算机的存储和计算中，统一的是采用补码进行处理和运算的，在弄清楚采用补码的好处之前，我们需要明确如下三个概念：
原码：是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。
反码：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。
补码：正数的补码与其原码相同；负数的补码等于其反码+1。

很明显，文章开头的举例即是原码，它很符合我们的直观感觉，但是在计算的时候麻烦就来了，如果直接运算，例如1+（-1）=0，运算的时候0000 0001 + 1000 0001 = 1000 0010（-2），
很显然是错误的，因此符号位和数值位必须分开处理

这会增加计算机的硬件开销。我们换成补码试试，1的原码0000 0001，反码0000 0001，补码0000 0001（正数三者一致）；
-1的原码1000 0001，反码1111 1110，补码1111 1111（1111 1110 + 0000 0001）
因此1+（-1）用补码来运算就是0000 0001 + 1111 11111 = 0000 0000（最高位溢出舍弃）,结果是正确的。

0在原码和反码中有两种表示方式，而对应的补码只有一种表示方式
-128在原码和反码中无法表示，在补码中却可以表示（用-127的补码1000 0001减1得到1000 0000）
而计算机中数值以补码形式存储和运算，当然-128可以表示出来，因此8位有符号数值的范围是-128～127，同理其他位数（16、32、64）也可以以此类推。