Debouncing（防抖）
意思：延迟执行，只有在连续事件停止后才触发一次操作。
典型应用：搜索框输入、窗口 resize 事件。
特点：
多次触发事件，只会在最后一次触发后等待一段时间执行。
防止事件被频繁调用。
（JS 搜索框）：
function debounce(fn, delay) {
  let timer;
  return function(...args) {
    clearTimeout(timer);
    timer = setTimeout(() => {
      fn.apply(this, args);
    }, delay);
  };
}

const handleSearch = debounce((query) => {
  console.log("Searching:", query);
}, 300);

// 输入时频繁触发，但只有停止输入300ms后才执行
input.addEventListener('input', (e) => handleSearch(e.target.value));


Throttling（节流）
意思：限制执行频率，每隔固定时间只执行一次操作。
典型应用：滚动事件、窗口 resize、按钮连续点击。
特点：
在持续触发的情况下，按固定时间间隔执行。
（JS 滚动事件）：
function throttle(fn, interval) {
  let lastTime = 0;
  return function(...args) {
    const now = Date.now();
    if (now - lastTime >= interval) {
      lastTime = now;
      fn.apply(this, args);
    }
  };
}

window.addEventListener('scroll', throttle(() => {
  console.log("Scrolling...");
}, 200));