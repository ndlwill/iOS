可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ）
发布者为电气与电子工程师协会（Institute of Electrical and Electronics Engineers），简称IEEE。
POSIX是IEEE为要在各种UNIX操作系统上运行的软件而定义的一系列API标准的总称

标准线上地址:
https://unix.org/version3/online.html


Unix和Linux遵循这个标准
除此之外还有苹果的操作系统也是Unix-based的


有了这个规范，你就可以调用通用的API了，Linux提供的POSIX系统调用在Unix上也能执行


可移植性:
Linux下对文件操作有两种方式：系统调用（system call）和库函数调用（Library functions）
1. 系统调用
系统调用是通向操作系统本身的接口，是面向底层硬件的。
通过系统调用，可以使得用户态运行的进程与硬件设备(如CPU、磁盘、打印机等)进行交互，是操作系统留给应用程序的一个接口。
2. 库函数
库函数（Library function）是把函数放到库里，供别人使用的一种方式。
方法是把一些常用到的函数编完放到一个文件里，供不同的人进行调用。一般放在.lib文件中
库函数调用则是面向应用开发的，库函数可分为两类:
一类是C语言标准规定的库函数，
一类是编译器特定的库函数。
(由于版权原因，库函数的源代码一般是不可见的，但在头文件中你可以看到它对外的接口)。

glibc 是 Linux 下使用的开源的标准 C 库，它是 GNU 发布的 libc 库，即运行时库。
glibc 为程序员提供丰富的 API（Application Programming Interface），这些API都是遵循POSIX标准的，API的函数名，返回值，参数类型等都必须按照POSIX标准来定义。
POSIX兼容也就指定这些接口函数兼容

库函数是语言或应用程序的一部分，而系统调用是内核提供给应用程序的接口，属于系统的一部分
库函数在用户地址空间执行，系统调用是在内核地址空间执行，库函数运行时间属于用户时间，系统调用属于系统时间，库函数开销较小，系统调用开销较大
系统调用依赖于平台，库函数并不依赖

ANSI C: 标准C
库函数调用与系统无关，不同的系统，调用库函数，库函数会调用不同的底层函数实现，因此可移植性好。

目标代码和启动代码是怎么生成的呢？ 答案是编译器
编程语言编写的程序首先要被编译器编译成目标代码（0、1代码），然后在目标代码的前面插入启动代码，最终生成了一个完整的程序。

使用系统调用会影响系统的性能，在执行调用时的从用户态切换到内核态，再返回用户态会有系统开销。
为了减少开销，因此需要减少系统调用的次数，并且让每次系统调用尽可能的完成多的任务。

