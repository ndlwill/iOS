https://www.freecodecamp.org/news/solid-design-principles-in-software-development/

它是指导你写出“高内聚、低耦合”代码的一组 规范性建议，并不是具体的解决方案（而设计模式是具体的解决方案模板）

SOLID is a set of five design principles.
These principles help software developers design robust, testable, extensible, and maintainable object-oriented software systems.

Each of these five design principles solves a particular problem that might arise while developing the software systems.

==================================================The Single Responsibility Principle (SRP):
The single responsibility principle states that a class, module, or function should have only one reason to change, meaning it should do one thing.

For example, a class that shows the name of an animal should not be the same class that displays the kind of sound it makes and how it feeds.

class Animal {
  constructor(name, feedingType, soundMade) {
    this.name = name;
    this.feedingType = feedingType;
    this.soundMade = soundMade;
  }

  nomenclature() {
    console.log(`The name of the animal is ${this.name}`);
  }

  sound() {
    console.log(`${this.name} ${this.soundMade}s`);
  }

  feeding() {
    console.log(`${this.name} is a ${this.feedingType}`);
  }
}

let elephant = new Animal('Elephant', 'herbivore', 'trumpet');
elephant.nomenclature(); // The name of the animal is Elephant
elephant.sound(); // Elephant trumpets
elephant.feeding(); // Elephant is a herbivore

The code above violates the single responsibility principle because the class that's responsible for printing the name of the animal also shows the sound it makes and its type of feeding.

To fix this, you have to create a separate class for the sound and feeding methods like this:
class Animal {
  constructor(name) {
    this.name = name;
  }

  nomenclature() {
    console.log(`The name of the animal is ${this.name}`);
  }
}

let animal1 = new Animal('Elephant');
animal1.nomenclature(); // The name of the animal is Elephant

// Sound class
class Sound {
  constructor(name, soundMade) {
    this.name = name;
    this.soundMade = soundMade;
  }

  sound() {
    console.log(`${this.name} ${this.soundMade}s`);
  }
}

let animalSound1 = new Sound('Elephant', 'trumpet');
animalSound1.sound(); //Elephant trumpets

// Feeding class
class Feeding {
  constructor(name, feedingType) {
    this.name = name;
    this.feedingType = feedingType;
  }

  feeding() {
    console.log(`${this.name} is a/an ${this.feedingType}`);
  }
}

let animalFeeding1 = new Feeding('Elephant', 'herbivore');
animalFeeding1.feeding(); // Elephant is a/an herbivore

This way, each of the classes is doing only one thing:
the first one prints the name of the animal
the second prints the kind of sound it makes
and the third one prints its kind of feeding.

That’s more code, but better readability and maintainability. 
A developer who didn’t write the code can come to it and understand what’s going on quicker than having it all in one class.

强调一个类应该只有一个引起它变化的原因，换句话说，一个类应该只负责一件事情。

假设我们需要设计一个用户管理系统，其中包含用户信息的处理和用户信息的保存。

不符合SRP的例子
展示一个不符合单一职责原则的设计，其中一个类同时负责用户信息的处理和保存。
class UserManager {
    var users: [String] = []
    
    func addUser(name: String) {
        users.append(name)
    }
    
    func removeUser(name: String) {
        if let index = users.firstIndex(of: name) {
            users.remove(at: index)
        }
    }
    
    func saveUsersToFile() {
        // 模拟将用户信息保存到文件
        print("Saving users to file: \(users)")
    }
}

符合SRP的例子
为了符合单一职责原则，我们可以将用户信息的处理和保存分离到不同的类中。

定义用户管理类
class UserManager {
    var users: [String] = []
    
    func addUser(name: String) {
        users.append(name)
    }
    
    func removeUser(name: String) {
        if let index = users.firstIndex(of: name) {
            users.remove(at: index)
        }
    }
}

定义用户保存类
class UserSaver {
    func saveUsersToFile(users: [String]) {
        // 模拟将用户信息保存到文件
        print("Saving users to file: \(users)")
    }
}

使用示例
let userManager = UserManager()
userManager.addUser(name: "Alice")
userManager.addUser(name: "Bob")

let userSaver = UserSaver()
userSaver.saveUsersToFile(users: userManager.users)

在这个符合单一职责原则的例子中，我们将用户信息的处理（UserManager类）和用户信息的保存（UserSaver类）分离到不同的类中。每个类只有一个职责，这样可以使代码更加模块化，便于维护和扩展。
如果将来需要更改保存用户信息的方式（例如，保存到数据库而不是文件），只需修改UserSaver类，而无需影响UserManager类的代码。



Each an every class you create/change should have only one responsibility. 
We have one class which has many methods having different responsibility. 
If we add all methods in one class then this class looks monster.
不符合SRP的例子:
class ViewClaimDetailController {
    
  func getAllClaimDetail() {
    let jsonData = getDataFromAPI()
    let claims = parseJsonAndFillToArray(data : jsonData)
    saveDataToLocalDB(claims: claims)
  }

  private func getDataFromAPI(){
      
  }

  private func parseJsonAndFillToArray(data : Any) {
      
  }

  private func saveDataToLocalDB(claims: [Any]) {
      
  }
}
there are 3  private methods having different responsibility
It is very difficult for testing this class and methods as its private.

符合SRP的例子
class ViewClaimDetailController {
    
    let netcore = NetCore()
    let conversationFactory = ConversationFactory()
    let coredata = coredataController()
    
    func getAllClaimDetail() {
        let jsonData = netcore.getDataFromAPI()
        let claims = conversationFactory.parseJsonAndFillToArray(data : jsonData)
        coredata.saveDataToLocalDB(claims: claims)
    }
}

class NetCore {
    func getDataFromAPI() {
        
    }
}

class ConversationFactory {
    func parseJsonAndFillToArray(data: Any) {
        
    }
}

class coredataController {
    func saveDataToLocalDB(claims: [Any]) {
        
    }
}

==================================================The Open-Closed Principle (OCP):
The open-closed principle states that classes, modules, and functions should be open for extension but closed for modification.

This principle might seem to contradict itself, but you can still make sense of it in code. 
It means you should be able to extend the functionality of a class, module, or function by adding more code without modifying the existing code.

Here’s some code that violates the open-closed principle in JavaScript:
class Animal {
  constructor(name, age, type) {
    this.name = name;
    this.age = age;
    this.type = type;
  }

  getSpeed() {
    switch (this.type) {
      case 'cheetah':
        console.log('Cheetah runs up to 130mph ');
        break;
      case 'lion':
        console.log('Lion runs up to 80mph');
        break;
      case 'elephant':
        console.log('Elephant runs up to 40mph');
        break;
      default:
        throw new Error(`Unsupported animal type: ${this.type}`);
    }
  }
}

const animal1 = new Animal('Lion', 4, 'lion');
animal1.getSpeed(); // Lion runs up to 80mph

The code above violates the open-closed principle because if you want to add a new animal type, 
you have to modify the existing code by adding another case to the switch statement.

Normally, if you’re using a switch statement, then it’s very likely you will violate the open-closed principle.

Here’s how I refactored the code to fix the problem:
class Animal {
  constructor(name, age, speedRate) {
    this.name = name;
    this.age = age;
    this.speedRate = speedRate;
  }

  getSpeed() {
    return this.speedRate.getSpeed();
  }
}

class SpeedRate {
  getSpeed() {}
}

class CheetahSpeedRate extends SpeedRate {
  getSpeed() {
    return 130;
  }
}

class LionSpeedRate extends SpeedRate {
  getSpeed() {
    return 80;
  }
}

class ElephantSpeedRate extends SpeedRate {
  getSpeed() {
    return 40;
  }
}

const cheetah = new Animal('Cheetah', 4, new CheetahSpeedRate());
console.log(`${cheetah.name} runs up to ${cheetah.getSpeed()} mph`); // Cheetah runs up to 130 mph

const lion = new Animal('Lion', 5, new LionSpeedRate());
console.log(`${lion.name} runs up to ${lion.getSpeed()} mph`); // Lion runs up to 80 mph

const elephant = new Animal('Elephant', 10, new ElephantSpeedRate());
console.log(`${elephant.name} runs up to ${elephant.getSpeed()} mph`); // Elephant runs up to 40 mph

This way, if you want to add a new animal type, you can create a new class that extends SpeedRate and pass it to the Animal constructor without modifying the existing code.
For example, I added a new GoatSpeedRate class like this:
class GoatSpeedRate extends SpeedRate {
  getSpeed() {
    return 35;
  }
}

// Goat
const goat = new Animal('Goat', 5, new GoatSpeedRate());
console.log(`${goat.name} runs up to ${goat.getSpeed()} mph`); // Goat runs up to 354 mph

This conforms to the open-closed principle.

强调软件实体（类、模块、函数等）应该对扩展开放，对修改封闭。这意味着我们应该通过扩展功能来实现新需求，而不是修改已有的代码。
假设我们有一个银行账户类BankAccount，它可以计算利息收入。现在，我们需要支持不同类型的账户（如定期存款账户和储蓄账户），它们有不同的利率计算方法。

我们可以使用协议和继承，通过扩展来实现不同的利率计算方法，而不修改已有的代码。
定义协议和类
protocol InterestCalculatable {
    func calculateInterest(for balance: Double) -> Double
}

class BankAccount {
    var balance: Double
    var interestCalculator: InterestCalculatable
    
    init(balance: Double, interestCalculator: InterestCalculatable) {
        self.balance = balance
        self.interestCalculator = interestCalculator
    }
    
    func calculateInterest() -> Double {
        return interestCalculator.calculateInterest(for: balance)
    }
}

class SavingsAccountInterestCalculator: InterestCalculatable {
    func calculateInterest(for balance: Double) -> Double {
        return balance * 0.01
    }
}

class FixedDepositInterestCalculator: InterestCalculatable {
    func calculateInterest(for balance: Double) -> Double {
        return balance * 0.05
    }
}

使用示例
let savingsCalculator = SavingsAccountInterestCalculator()
let fixedDepositCalculator = FixedDepositInterestCalculator()

let savingsAccount = BankAccount(balance: 1000, interestCalculator: savingsCalculator)
let fixedDepositAccount = BankAccount(balance: 1000, interestCalculator: fixedDepositCalculator)

print("Savings Account Interest: \(savingsAccount.calculateInterest())") // 输出: 10.0
print("Fixed Deposit Account Interest: \(fixedDepositAccount.calculateInterest())") // 输出: 50.0

我们通过定义一个InterestCalculatable协议，并为不同类型的账户创建具体的实现类，使得BankAccount类不需要修改即可支持不同的利率计算方法。
这样，当我们需要添加新的账户类型时，只需创建新的实现类，而不需要修改现有的代码，从而实现了对扩展开放，对修改封闭。



Open Closed Principle : Classes and Module should be open for extension and closed for modification. 
According to this principle, we should write such a class or code that should not be change when new requirement comes.
class Rectangle {
    var width : Double = 0
    var height : Double = 0
    
    init(inWidth: Double, inHeight: Double) {
        self.width = inWidth
        self.height = inHeight
    }
}

class AreaCalc {
    
    func calculateArea(rectangel: Rectangle) -> Double {
        return rectangel.width  * rectangel.height
    }

}
If we want to calculate area for new shape, then we have to modify existing calculateArea() method like following :
class AreaCalc {
    
    func calculateArea(shape: AnyObject) -> Double {
        if (shape is Rectangle) {
            return shape.width  * shape.height
        } else if (shape is Square) {
            return shape.width * shape.width
        }
    }

}
Again, if want to add area of circle, triangle, we modify method and expand our if....else if... condition.
This is not good according open-closed principle. According to open-closed principle above code should be like following : 
protocol Shape {
    func calculateArea() -> Double
}

class Rectangle: Shape {
    
    var width : Double = 0
    var height : Double = 0
    
    init(inWidth: Double, inHeight: Double) {
        self.width = inWidth
        self.height = inHeight
    }
    
    internal func calculateArea() -> Double {
        return self.width * self.height
    }
}

class Circle: Shape {
    let radius : Double = 0
   
    internal func calculateArea() -> Double {
        return M_PI * radius * radius
    }
}

class AreaCalc {
    
    func area(shape: Shape) -> Double {
        return shape.calculateArea()
    }
}

==================================================The Liskov Substitution Principle (LSP):
The Liskov substitution principle is one of the most important principles to adhere to in object-oriented programming (OOP).

The principle states that child classes or subclasses must be substitutable for their parent classes or super classes. 
In other words, the child class must be able to replace the parent class.

Here’s an example of a code that does not violate the Liskov substitution principle:
class Animal {
  constructor(name) {
    this.name = name;
  }

  makeSound() {
    console.log(`${this.name} makes a sound`);
  }
}

class Dog extends Animal {
  makeSound() {
    console.log(`${this.name} barks`);
  }
}

class Cat extends Animal {
  makeSound() {
    console.log(`${this.name} meows`);
  }
}

function makeAnimalSound(animal) {
  animal.makeSound();
}

const cheetah = new Animal('Cheetah');
makeAnimalSound(cheetah); // Cheetah makes a sound

const dog = new Dog('Jack');
makeAnimalSound(dog); // Jack barks

const cat = new Cat('Khloe');
makeAnimalSound(cat); // Khloe meows

The Dog and Cat classes can successfully replace the parent Animal class.
On the other hand, let’s look at how the code below does violate the Liskov substitution principle:
class Bird extends Animal {
  fly() {
    console.log(`${this.name} flaps wings`);
  }
}

const parrot = new Bird('Titi the Parrot');
makeAnimalSound(parrot); // Titi the Parrot makes a sound
parrot.fly(); // Titi the Parrot flaps wings

The Bird class violates the Liskov substitution principle because it’s not implementing its own makeSound from the parent Animal class. 
Instead, it’s inheriting the generic sound.

To fix this, you have to make it use the makeSound method too:
class Bird extends Animal {
  makeSound() {
    console.log(`${this.name} chirps`);
  }

  fly() {
    console.log(`${this.name} flaps wings`);
  }
}

const parrot = new Bird('Titi the Parrot');
makeAnimalSound(parrot); // Titi the Parrot chirps
parrot.fly(); // Titi the Parrot flaps wings

强调基类对象可以被其子类对象替换，而不会导致程序行为发生变化。换句话说，子类应当可以替换其基类而不影响客户端的行为。
在Swift中，我们可以通过继承和多态性来实现LSP。
假设我们有一个基类Bird，以及两个子类Sparrow和Penguin。Bird类具有一个飞行的方法fly，但企鹅不能飞。我们需要确保子类的行为符合LSP。

错误示例:
class Bird {
    func fly() {
        print("Flying")
    }
}

class Sparrow: Bird {
    override func fly() {
        print("Sparrow flying")
    }
}

class Penguin: Bird {
    override func fly() {
        // Penguins can't fly, so this implementation is problematic
        print("Penguins can't fly")
    }
}

func letBirdFly(bird: Bird) {
    bird.fly()
}

let sparrow = Sparrow()
let penguin = Penguin()

letBirdFly(bird: sparrow)  // 正常输出 "Sparrow flying"
letBirdFly(bird: penguin)  // 错误输出 "Penguins can't fly"
Penguin类违反了LSP，因为企鹅不能飞，但它仍然继承了Bird类的fly方法，并提供了一个不符合预期的实现。


正确示例:
为了解决这个问题，我们可以引入一个协议Flyable，并让能够飞的鸟类实现该协议。这样，我们可以确保只有能够飞的鸟类才具有飞行行为。
protocol Flyable {
    func fly()
}

class Bird {
    // Bird class has common properties and methods for all birds
}

class Sparrow: Bird, Flyable {
    func fly() {
        print("Sparrow flying")
    }
}

class Penguin: Bird {
    // Penguin does not conform to Flyable protocol, as it can't fly
}

func letBirdFly(bird: Flyable) {
    bird.fly()
}

let sparrow = Sparrow()
let penguin = Penguin()

letBirdFly(bird: sparrow)  // 正常输出 "Sparrow flying"
// letBirdFly(bird: penguin)  // 编译错误，Penguin 不符合 Flyable 协议

这种设计符合里氏替换原则，因为我们可以在不影响客户端行为的情况下，用实现了Flyable协议的任何类替换基类对象。


Liknov's substitution Principle : New derived classes should extend the base classes without changing the base class behaviour. 
Subclass should override the parent class methods in a way that doesn't break the functionality of base class from client point of view. 
We have rectangle class in open-closed principle. Assume there it is not confirming Shape protocol.
Now we make square class

class square : Rectangle {
    
    override var width: Double {
        didSet {
            height = width
        }
    }
    
    override var height: Double {
        didSet {
            width = height
        }
    }
}
Now we write test cases :

func testAreaOfRectang1eFor4X3()
{
    let rectangle: Rectangle = Square()
    rectangle.height = 3
    rectangle.width = 4
    let areaCa1cu1ator = AreaCalc()
    let areaOfRectang1e = areaCa1cu1ator.area(rectang1e: rectangle)
    XCTAssertEqua1(areaOfRectang1e , 12, "Area of Rectangle not matching" )
}

Here, rectangle is of square type finding area of rectangle. 
As we saw override property of square, 
we can not lost rectangle (base) class definition and we violate liknov principle of Derived class (Square) breaking the parent class (Rectangle) funtionality of caluculating the area. 


Solution of this is only to make protocol and confirm that. 
That means, we can conclude that violating Liskov’s Principle violates Open Close Principle as well. 


==================================================The Interface Segregation Principle (ISP):
The interface segregation principle states that clients should not be forced to implement interfaces or methods they do not use.

More specifically, the ISP suggests that software developers should break down large interfaces into smaller, more specific ones, so that clients only need to depend on the interfaces that are relevant to them. 
This can make the codebase easier to maintain.

This principle is fairly similar to the single responsibility principle (SRP). 
But it’s not just about a single interface doing only one thing – it’s about breaking the whole codebase into multiple interfaces or components.

Here’s an example of code that violates the interface segregation principle:
class Animal {
  constructor(name) {
    this.name = name;
  }

  eat() {
    console.log(`${this.name} is eating`);
  }

  swim() {
    console.log(`${this.name} is swimming`);
  }

  fly() {
    console.log(`${this.name} is flying`);
  }
}

class Fish extends Animal {
  fly() {
    console.error("ERROR! Fishes can't fly");
  }
}

class Bird extends Animal {
  swim() {
    console.error("ERROR! Birds can't swim");
  }
}

const bird = new Bird('Titi the Parrot');
bird.swim(); // ERROR! Birds can't swim

const fish = new Fish('Neo the Dolphin');
fish.fly(); // ERROR! Fishes can't fly

The code above violates the interface segregation principle because the Fish class doesn’t need the fly method. 
A fish cannot fly. Birds can’t swim too, so the Bird class doesn’t need the swim method.

Also, the Bird and Fish classes both extend the Animal class, and that violates the ISP since the Animal class has methods that either class does not need.

The goal is to create interfaces that are tailored to the specific needs of each class/functionality.

This is how I fixed the code to conform to the interface segregation principle:
// Define interfaces for different types of animals

class Swimmer {
  constructor(name) {
    this.name = name;
  }

  swim() {
    console.log(`${this.name} is swimming`);
  }
}

class Flyer {
  constructor(name) {
    this.name = name;
  }

  fly() {
    console.log(`${this.name} is flying`);
  }
}

// Implement interfaces for specific types of animals

class Bird extends Flyer {
  constructor(name) {
    super(name);
  }

  eat() {
    console.log(`${this.name} is eating`);
  }
}

class Fish extends Swimmer {
  constructor(name) {
    super(name);
  }

  eat() {
    console.log(`${this.name} is eating`);
  }
}

// Usage

const bird = new Bird('Titi the Parrot');
bird.fly(); // Titi the Parrot is flying
bird.eat(); // Titi the Parrot is eating

console.log('\n');

const fish = new Fish('Neo the Dolphin');
fish.swim(); // Neo the Dolphin is swimming
fish.eat(); // Neo the Dolphin is eating

In the code above, we have a class specifically for animals that swim and another for animals that fly.
The Fish and Bird classes only extend classes with methods specific to their needs.

强调应将臃肿的接口拆分为多个专门的接口，使得客户端只需知道它们使用的接口即可。这个原则旨在减少类之间的耦合，提高代码的可维护性和灵活性。
假设我们有一个多功能设备（如一台多功能打印机），它可以打印、扫描和传真。
我们希望通过接口隔离原则，将这些功能拆分成多个协议，使得客户端只依赖于它们需要的功能。

第一步：定义多个专门的协议
protocol Printer {
    func printDocument(document: String)
}

protocol Scanner {
    func scanDocument() -> String
}

protocol Fax {
    func sendFax(document: String, toNumber: String)
}

第二步：创建实现这些协议的类
class SimplePrinter: Printer {
    func printDocument(document: String) {
        print("Printing document: \(document)")
    }
}

class SimpleScanner: Scanner {
    func scanDocument() -> String {
        print("Scanning document...")
        return "Scanned Document"
    }
}

class SimpleFax: Fax {
    func sendFax(document: String, toNumber: String) {
        print("Sending fax of document: \(document) to number: \(toNumber)")
    }
}

第三步：创建多功能设备实现多个协议（如果需要）
class MultiFunctionDevice: Printer, Scanner, Fax {
    func printDocument(document: String) {
        print("Printing document: \(document)")
    }
    
    func scanDocument() -> String {
        print("Scanning document...")
        return "Scanned Document"
    }
    
    func sendFax(document: String, toNumber: String) {
        print("Sending fax of document: \(document) to number: \(toNumber)")
    }
}

第四步：创建只需要某些功能的客户端类
class OfficePrinter {
    private let printer: Printer
    
    init(printer: Printer) {
        self.printer = printer
    }
    
    func printDocument(document: String) {
        printer.printDocument(document: document)
    }
}

class HomeScanner {
    private let scanner: Scanner
    
    init(scanner: Scanner) {
        self.scanner = scanner
    }
    
    func scanDocument() -> String {
        return scanner.scanDocument()
    }
}

使用示例
// 创建具体的设备实例
let simplePrinter = SimplePrinter()
let simpleScanner = SimpleScanner()

// 创建客户端，并注入具体的服务
let officePrinter = OfficePrinter(printer: simplePrinter)
officePrinter.printDocument(document: "Office Document")

let homeScanner = HomeScanner(scanner: simpleScanner)
let scannedDocument = homeScanner.scanDocument()
print("Scanned document: \(scannedDocument)")

在这个例子中，我们为每个功能定义了单独的协议（Printer, Scanner, Fax），并为每个功能创建了具体的实现类。
客户端类只依赖于它们需要的协议，而不是多功能设备。这更好地遵循了接口隔离原则，避免了客户端依赖不需要的功能。


This principle solves FAT interface problems of Object Oriented Programming. 
A interface is called FAT when it has too many methods which contains more information than we really want.
protocol Gesture {
    func didTap()
    func didDoubleTap()
}

class View1 : Gesture {
    
    func didTap() {
        //required this method
    }
    
    func didDoubleTap() {
        // not required this method
    }
}

class View2 : Gesture {
    
    func didTap() {
        // not required this method
    }
    
    func didDoubleTap() {
        //required this method
    }
}
Here view1 required only didTap() method and view2 require only didDoubleTap() method still both class has to implement both methods. 
So solution, to make 2 protocol and define each method in in each protocol. 
Class can confirm multiple protocol to achieve functionality. This is rule of interface seggregation. 
Or we can use @objc to make optional method.


class User {
    
    var firstName : String
    var lastName : String
    var imageURL : String
    
    init(firstName : String, lastName: String, imageURL : String) {
        self.firstName = firstName
        self.lastName = lastName
        self.imageURL = imageURL
    }
}

class UserProfileImageView {
    func loadProfilePhoto(user: User) {
        //load user.imageURL
    }
}
Here in loadProfilePhoto method, User instance is passed so all other information except imageURL are also passed. It is not good.

Solution : Use protocol 
protocol UserProfileViewDetails {
    var imageURL: String { get }
}

class User : UserProfileViewDetails {
    
    var firstName : String
    var lastName : String
    var imageURL : String
    
    init(firstName : String, lastName: String, imageURL : String) {
        self.firstName = firstName
        self.lastName = lastName
        self.imageURL = imageURL
    }
}

class UserProfileImageView {
    func loadProfilePhoto(user: UserProfileViewDetails) {
        //load user.imageURL
    }
}
Now the UserProfileImageView’s loadProfileFor(user:UserProfileViewDetails) which is the client has only the imageURL information with it to display the User Profile Image, which agrees with the Interface Segregation Principle.


==================================================The Dependency Inversion Principle (DIP):
The dependency inversion principle is about decoupling software modules. That is, making them as separate from one another as possible.

The principle states that high-level modules should not depend on low-level modules. 
Instead, they should both depend on abstractions. Additionally, abstractions should not depend on details, but details should depend on abstractions.

In simpler terms, this means instead of writing code that relies on specific details of how lower-level code works, 
you should write code that depends on more general abstractions that can be implemented in different ways.

This makes it easier to change the lower-level code without having to change the higher-level code.

Here’s a code that violates the dependency inversion principle:
class Animal {
  constructor(name) {
    this.name = name;
  }
}

class Dog extends Animal {
  bark() {
    console.log('woof! woof!! woof!!');
  }
}

class Cat extends Animal {
  meow() {
    console.log('meooow!');
  }
}

function printAnimalNames(animals) {
  for (let i = 0; i < animals.length; i++) {
    const animal = animals[i];
    console.log(animal.name);
  }
}

const dog = new Dog('Jack');
const cat = new Cat('Zoey');

const animals = [dog, cat];

printAnimalNames(animals);

The code above violates dependency inversion principle because the printAnimalNames function depends on the concrete implementations of Dog and Cat.

If you wanted to add another animal like an ape, you’d have to modify the printAnimalNames function to handle it.

Here’s how to fix it:
class Animal {
  constructor(name) {
    this.name = name;
  }

  getName() {
    return this.name;
  }
}

class Dog extends Animal {
  bark() {
    console.log('woof! woof!! woof!!!');
  }
}

class Cat extends Animal {
  meow() {
    console.log('meooow!');
  }
}

function printAnimalNames(animals) {
  for (let i = 0; i < animals.length; i++) {
    const animal = animals[i];
    console.log(animal.getName());
  }
}

const dog = new Dog('Jack');
const cat = new Cat('Zoey');

const animals = [dog, cat, ape];

printAnimalNames(animals);

In the code above, I created a getName method inside the Animal class. 
This provides an abstraction that the printAnimalNames function can depend on. 
Now, the printAnimalNames function only depends on the Animal class, not the concrete implementations of Dog and Cat.

If you wan to add an Ape class, you can do so without modifying the printAnimalNames function:
class Animal {
  constructor(name) {
    this.name = name;
  }

  getName() {
    return this.name;
  }
}

class Dog extends Animal {
  bark() {
    console.log('woof! woof!! woof!!!');
  }
}

class Cat extends Animal {
  meow() {
    console.log('meooow!');
  }
}

// Add Ape class
class Ape extends Animal {
  meow() {
    console.log('woo! woo! woo!');
  }
}

function printAnimalNames(animals) {
  for (let i = 0; i < animals.length; i++) {
    const animal = animals[i];
    console.log(animal.getName());
  }
}

const dog = new Dog('Jack'); // Jack
const cat = new Cat('Zoey'); // Zoey

// Use the Ape class
const ape = new Ape('King Kong'); // King Kong

const animals = [dog, cat, ape];

printAnimalNames(animals);


旨在减少高层模块对低层模块的依赖，通过依赖抽象而不是具体实现来实现更灵活和可扩展的系统。
在Swift中，我们可以通过协议和依赖注入来实现依赖倒置原则

假设我们有一个应用程序，需要发送通知。最初，我们有一个具体的EmailService来发送电子邮件通知。为了遵循DIP，我们将引入一个抽象层（协议），然后让具体的服务实现该抽象层。

定义一个协议来表示通知服务。
创建一个具体的服务实现该协议。
在需要使用通知服务的地方依赖于协议，而不是具体的实现。

第一步：定义通知服务协议
protocol NotificationService {
    func sendNotification(message: String)
}

第二步：创建具体的服务实现协议
class EmailService: NotificationService {
    func sendNotification(message: String) {
        print("Sending email with message: \(message)")
    }
}

class SMSService: NotificationService {
    func sendNotification(message: String) {
        print("Sending SMS with message: \(message)")
    }
}

第三步：在需要使用通知服务的地方依赖于协议
class NotificationManager {
    private let notificationService: NotificationService
    
    init(notificationService: NotificationService) {
        self.notificationService = notificationService
    }
    
    func notifyUser(message: String) {
        notificationService.sendNotification(message: message)
    }
}

// 创建具体的服务实例
let emailService = EmailService()
let smsService = SMSService()

// 创建通知管理器，并注入具体的服务
let emailNotificationManager = NotificationManager(notificationService: emailService)
let smsNotificationManager = NotificationManager(notificationService: smsService)

// 发送通知
emailNotificationManager.notifyUser(message: "Hello via Email!")
smsNotificationManager.notifyUser(message: "Hello via SMS!")

在这个例子中，我们定义了一个NotificationService协议，具体的EmailService和SMSService实现了该协议。
NotificationManager依赖于NotificationService协议，而不是具体的实现。
这样，我们可以轻松地切换不同的通知服务实现，而不需要修改NotificationManager的代码，从而实现了依赖倒置原则。


Dependency Inversion Principle  : High level modules should not depend on low level modules both should depend on Abstractions.
protocol Database {
    func saveDataToLocalDB(claims : [Any])
}

class ViewClaimDetailController {
    
    let database : Database
    
    init(indatabase: Database) {
        database = indatabase
    }
    
    func getAllClaimDetail() {
        let jsonData = getDataFromAPI()
        let claims = parseJsonAndFillToArray(data : jsonData)
        database.saveDataToLocalDB(claims: claims)
    }
}

class coredataController : Database {
    func saveDataToLocalDB(claims: [Any]) {
        // save to coredata
    }
}

class FileSystemController : Database {
    func saveDataToLocalDB(claims: [Any]) {
        // save to coredata
    }
}