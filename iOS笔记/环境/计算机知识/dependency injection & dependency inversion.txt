Dependency Injection（依赖注入） 和 Dependency Inversion（依赖倒置） 是软件开发中两个相关但不同的概念，通常都与 依赖管理 和 解耦 相关。


1. Dependency Injection（依赖注入）:
依赖注入 是一种设计模式，旨在通过将依赖项的创建和管理移交给外部框架或容器来解耦组件。
依赖注入的核心思想是，将对象的创建和依赖管理从使用者代码中提取出来，通过外部的机制（如注入容器）来管理这些依赖。

实现方式
构造器注入：通过构造函数传递依赖。
属性注入：通过公共属性或方法注入依赖。
接口注入：通过接口注入依赖。

class Service {
    func performTask() {
        // 任务逻辑
    }
}

class Client {
    private let service: Service

    init(service: Service) {
        self.service = service
    }

    func doWork() {
        service.performTask()
    }
}

// 使用依赖注入创建 Client 实例
let service = Service()
let client = Client(service: service)
client.doWork()

Client 类依赖于 Service 类，依赖注入通过构造函数将 Service 实例注入到 Client 中。


2. Dependency Inversion（依赖倒置）
依赖倒置 是一个设计原则，是 SOLID 原则中的一部分。它的核心思想是将高层模块（业务逻辑）与低层模块（具体实现）之间的依赖关系进行反转，从而减少模块之间的耦合。

主要原则
高层模块不应该依赖于低层模块。两者都应该依赖于抽象（接口或协议）。
抽象不应该依赖于细节。细节（具体实现）应该依赖于抽象。

依赖倒置原则通常通过接口或抽象类来实现，使得高层模块依赖于接口而不是具体实现，低层模块实现这些接口。

protocol ServiceProtocol {
    func performTask()
}

class Service: ServiceProtocol {
    func performTask() {
        // 任务逻辑
    }
}

class Client {
    private let service: ServiceProtocol

    init(service: ServiceProtocol) {
        self.service = service
    }

    func doWork() {
        service.performTask()
    }
}

// 使用依赖倒置创建 Client 实例
let service: ServiceProtocol = Service()
let client = Client(service: service)
client.doWork()


Client 依赖于 ServiceProtocol（抽象接口），而不是具体的 Service 实现。这样做使得 Client 与 Service 的具体实现解耦，并且允许更灵活的实现方式。



依赖注入 是实现 依赖倒置 的一种常见方法。通过依赖注入，你可以将具体的实现注入到需要依赖的地方，从而符合依赖倒置原则。
依赖倒置 是一个设计原则，而 依赖注入 是一个设计模式或技术手段，用于帮助实现该设计原则。

总结
依赖注入 是将对象的依赖项通过外部机制注入到对象中的技术。
依赖倒置 是一个设计原则，旨在通过抽象化来减少高层模块与低层模块之间的耦合。


它们虽然是不同的概念，但在实践中通常是结合使用的，依赖注入是实现依赖倒置原则的一种有效手段。