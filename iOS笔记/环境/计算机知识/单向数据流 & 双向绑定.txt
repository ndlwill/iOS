“自动” 和 “手动控制” 的区别，这正是 React 和 Vue 的核心差别

1. React 的数据流
React 默认是 单向数据流（Data → View）
数据改变 → UI 更新（自动）
UI 改变 → 数据：必须通过事件回调显式修改状态（手动）。

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
用户点击按钮修改状态 → 你显式调用 setCount → React 才重新渲染。
React 不会自动把 UI 的变化同步回数据。
比如 <input> 默认不是双向绑定，需要写成 controlled component：
function NameInput() {
  const [name, setName] = useState("");
  return <input value={name} onChange={e => setName(e.target.value)} />;
}
这里你手动写了 onChange 去更新状态 → 才实现了“类似双向绑定”的效果。


2. Vue 的数据流
Vue 默认在表单交互组件上，提供 v-model：自动把 UI 改变同步回数据，你不用手动写事件回调
<input v-model="name">
Vue 内部已经帮你生成了事件监听和数据更新逻辑 → 自动双向绑定。


单向数据流（One-way Data Flow）：React 
数据只能从上游流向下游（通常是从父组件到子组件，或者从状态管理到视图）。
双向绑定（Two-way Binding）：Vue 2 默认双向绑定 // Vue 3 默认单向数据流，使用 v-model 时才会有双向绑定。
数据和视图是绑定的，数据变了视图自动更新，视图操作也会自动更新数据。
Vue 3、React 等越来越推崇单向数据流：大型应用中单向数据流更可维护


SwiftUI 是单向数据流框架，但可以通过 Binding 在局部实现双向绑定效果。