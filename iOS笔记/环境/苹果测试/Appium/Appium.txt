EarlGrey:
https://github.com/google/EarlGrey/tree/earlgrey2

==================================================
appium英文官方：https://appium.io/docs/en/drivers/ios-xcuitest/index.html

XCUITest:
https://developer.apple.com/documentation/xctest

WebDriver:  (aka "Selenium WebDriver")
https://www.selenium.dev/projects/

Appium Client Libraries:
http://appium.io/downloads
https://appium.io/docs/en/about-appium/appium-clients/index.html

// Appium Desired Capabilities
https://appium.io/docs/en/writing-running-appium/caps/index.html
// an additional set of capabilities: appium-xcuitest-driver
https://github.com/appium/appium-xcuitest-driver#desired-capabilities

// Appium API Documentation
https://appium.io/docs/en/about-appium/api/

// The XCUITest Driver for iOS
https://appium.io/docs/en/drivers/ios-xcuitest/index.html

// Appium server arguments
https://appium.io/docs/en/writing-running-appium/server-args/index.html

appium是一款开源的，跨平台的UI自动化测试工具

Client/Server Architecture

Appium实现APP自动化测试的脚本开发环境一般包括：
appium 服务端
appium客户端
手机或者模拟器

appium服务端版本:
appium 命令行版本，不管是win还是mac，安装这种形式的就没有界面
appium desktop版本，属于新的桌面形式的appium版本，有界面，可以配置各项参数，可以启动inspect查看手机界面元素  #####强烈推荐这种#####

appium客户端:
不同语言对应不同的客户端

==================================================saucelabs
https://saucelabs.com/
云测试平台

==================================================Appium-Python环境部署

brew安装	安装路径: /usr/local/Cellar

MAC上默认内置安装了Python 2.7
通过brew安装Python 3.X

###
Appium is just an HTTP server
It sits and waits for connections from a client, which then instructs Appium what kind of session to start and what kind of automation behaviors to enact once a session is started. 

Appium speaks the same protocol as Selenium, called the WebDriver Protocol. 
###

brew install node

brew doctor // 查看是有有问题需要修复
You have unlinked kegs in your Cellar
Leaving kegs unlinked can lead to build-trouble and cause formulae that depend on
those kegs to fail to run properly once built. Run `brew link` on these:
  git
原因
Note also that OS X comes with git in /usr/bin, so you don't really need the brewed Git.

brew info python

Homebrew 会把软件安装到 /usr/local/Cellar，并且通过软链链接到 /usr/local/bin。我们可以通过 brew unlink 和 brew link 删除或创建链接。
为log2013.log文件创建软链接link2013,如果log2013.log丢失，link2013将失效
ln -s log2013.log link2013
link2013 -> log2013.log

brew link --overwrite --dry-run python
List files which would be linked or deleted
by brew link --overwrite without actually
linking or deleting any files.

// -g: 全局安装
npm install -g appium
npm install -g appium-doctor
npm list -g # /usr/local/lib
npm list # /Users/youdone-ndl

npm search XXX
npm uninstall XXX

appium-doctor --ios

pip3 install Appium-Python-Client

appium

If everything is set up correctly, you'll see Appium begin spitting out lots of logs and eventually the app will pop up on the screen and start behaving as if an invisible user were tapping on it!

==================================================Appium Desired Capabilities
Desired Capabilities are keys and values encoded in a JSON object, sent by Appium clients to the server when a new automation session is requested. 
They tell the Appium drivers all kinds of important things about how you want your test to work.

==================================================Appium Platform Support
iOS Support

iOS automation is supported with two drivers:
The XCUITest Driver
The safaridriver for Apple's safaridriver

Please refer to these driver docs for setup instructions:
Versions: 12.2 and up (as a rule, Appium supports the latest two iOS versions)
Devices: Simulator and real device for iPhone, iPad and tvOS
Native app support: Yes, with debug version of .app (simulator), or correctly-signed .ipa (real devices). Underlying support is provided by Apple's XCUITest (or UIAutomation for older versions) framework.
Mobile web support: Yes, via automation of mobile Safari. See the mobile web doc for instructions.
Hybrid support: Yes. See the hybrid doc for instructions.
Support for automating multiple apps in one session: No
Support for automating multiple devices simultaneously: Yes
Support for automating vendor-provided or third-party apps: Yes, apps which are already installed on the device
Support for automating custom, non-standard UI controls: Minimal. You need to set accessibility information on the control which enables some basic automation.

==================================================The XCUITest Driver for iOS
Appium's primary support for automating iOS apps is via the XCUITest driver.
This access to XCUITest is mediated by the WebDriverAgent server.
WebDriverAgent (also referred to as "WDA") is a project managed by Facebook

Requirements and Support:
In addition to Appium's general requirements:

Apple's XCUITest library is only available on iOS simulators and devices that are running iOS 9.3 or higher.
A Mac computer with macOS 10.11 or 10.12 is required.
Xcode 7 or higher is required.
The XCUITest driver was available in Appium starting with Appium 1.6.
For correct functioning of the driver, additional system libraries are required 

iOS json { "automationName": "XCUITest", "platformName": "iOS", "platformVersion": "12.2", "deviceName": "iPhone 8", ... }

Some important capabilities are demonstrated in the following example:
{
    "platformName": "iOS",
    "platformVersion": "11.0",
    "deviceName": "iPhone 7",
    "automationName": "XCUITest",
    "app": "/path/to/my.app"
}

To automate Safari instead of your own application, leave the app capability empty and instead set the browserName capability to Safari.

Basic Setup:
To automate an app on the simulator, the app capability should be set to an absolute path or url pointing to your .app or .app.zip file, built for the sim.

Files generated by test runs:
Generally the following locations are where they are found, should they need to be deleted:
$HOME/Library/Logs/CoreSimulator/*
$HOME/Library/Developer/Xcode/DerivedData/*


==================================================Appium XCUITest Driver Real Device Setup
Real Device Setup:
app or bundleId - specifies the application (local path or url referencing your signed .ipa file) , 
or, if it is already installed, simply the bundle identifier of the app so that Appium can launch it.
udid - the specific id of the device to test on. This can also be set to auto if there is only a single device, 
in which case Appium will determine the device id and use it.

总结:
无需配置，只需要
"bundleId": "com.test.TestAppium",
"udid": "00008030-001D744A0183802E"
就能调起真机跑测试用例脚本

#####
From Appium 1.15.0, Appium communicates with a real device via appium-ios-device. You no longer install extra dependencies.
// npm install -g appium-ios-device // 这个好像不需要安装
#####

XCUITest driver installs a helper application called WebDriverAgent-Runner onto the device, and handles the application under test via it. While this is simple in theory, 
the hoops of code signing and provisioning applications for development and testing can make this a bit of a headache.

REAL_IOS_DEVICE_BASE_CAPS = {
    "platformName": "iOS",
    "platformVersion": "14.6",
    "deviceName": "iPhone SE",
    "automationName": "XCUITest",
    # "app": os.path.abspath('../../../../TestAppium.app')
    "bundleId": "com.test.TestAppium",
    "udid": "00008030-001D744A0183802E",
    "xcodeSigningId": "iPhone Developer",
    "xcodeOrgId": "N82WKSN6R7"
}

// 下面基本都是针对免费开发者账号的问题
Basic (automatic) configuration:
Use the xcodeOrgId and xcodeSigningId desired capabilities:
{
    "xcodeOrgId": "<Team ID>",
    "xcodeSigningId": "iPhone Developer" // Apple Development
}

Once this configuration is done, it should just be a matter of starting your test specifying a real device in your udid desired capability.

Basic (manual) configuration:
There are many cases in which the basic automatic configuration is not enough. 
This usually has to do with code signing and the configuration of the project to be able to be run on the real device under test. 
Often this happens when the development account being used is a "Free" one, 
in which case it is not possible to create a wildcard provisioning profile, and will often not create one for the default application bundle.

At this point you have a valid provisioning profile. Make note of the bundle id you associated with it, and add that in the updatedWDABundleId desired capability for your tests. 

Full manual configuration:
全手动配置
Alternatively, the provisioning profile can be manually associated with the project 
(keep in mind that this will have to be done each time the WebDriverAgent is updated, which includes every time a new version of Appium is installed, and is not recommended)
1.Find out where your Appium installation is:
$ which appium
/path/where/installed/bin/appium

2.Given this installation location, /path/where/installed/bin/appium, 
WebDriverAgent project will be found in /path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent. 
Open a terminal and go to the location, then run the next script.
mkdir -p Resources/WebDriverAgent.bundle

3.
Open WebDriverAgent.xcodeproj in Xcode. For both the WebDriverAgentLib and WebDriverAgentRunner targets, select "Automatically manage signing" in the "General" tab, and then select your Development Team. This should also auto select Signing Ceritificate.
This necessitates manually changing the bundle id for the target by going into the "Build Settings" tab, and changing the "Product Bundle Identifier" from com.facebook.WebDriverAgentRunner to something that Xcode will accept

4.
Build the project:
xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=<udid>' test

export DEVICE_URL='http://<device IP>:8100'
export JSON_HEADER='-H "Content-Type: application/json;charset=UTF-8, accept: application/json"'
curl -X GET $JSON_HEADER $DEVICE_URL/status
或者
网页打开http://169.254.151.179:8100/status
{
  "value" : {
    "message" : "WebDriverAgent is ready to accept commands",
    "state" : "success",
    "os" : {
      "testmanagerdVersion" : 28,
      "name" : "iOS",
      "sdkVersion" : "14.5",
      "version" : "14.6"
    },
    "ios" : {
      "ip" : "169.254.151.179"
    },
    "ready" : true,
    "build" : {
      "time" : "Aug 11 2021 18:00:39",
      "productBundleIdentifier" : "com.facebook.WebDriverAgentRunner"
    }
  },
  "sessionId" : null
}

==================================================自动化脚本
1、测试用例
实现QQ轻聊版本应用的登录业务脚本的开发和运行:

打开模拟器上的qq应用
点击首页上的登录按钮
在登录页面输入用户名和密码
点击登录按钮
滑动条状验证码进行验证（如果有的话）
登录qq账号成功

2、脚本开发步骤
新建Python文件
创建unittest单元测试类，并添加setup及teardown函数
对类MyTestCase添加setUp函数（这是测试用例执行前的准备动作，负责告诉appium监听那个端口、与那个手机连接、安装那个应用等信息）
对类MyTestCase添加TearDown函数（这是测试用例执行结束后的动作，可以执行保存执行结果等操作）
添加test开头的方法，编写自动化测试用例

3、实现的脚本
import unittest
import selenium
import time
from appium import webdriver
 
class MyTestCase(unittest.TestCase):

    def setUp(self):
        # super().setUp()
        print('selenium version = ', selenium.__version__)
        desired_caps = {}
        desired_caps['platformName'] = 'Android'
        desired_caps['platformVersion'] = '5.1.1'
        desired_caps['deviceName'] = 'Android Emulator'
        desired_caps['appPackage'] = 'com.tencent.qqlite'
        desired_caps["noReset"]=True
        desired_caps['appActivity'] = 'com.tencent.mobileqq.activity.SplashActivity'
        self.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
 
 
    def testQQLogin(self):

        time.sleep(2)
        self.driver.find_element_by_id("com.tencent.qqlite:id/btn_login").click()

        time.sleep(5)
        self.driver.find_element_by_xpath('//android.widget.EditText[@content-desc="请输入QQ号码或手机或邮箱"]').send_keys("2572652583")
        time.sleep(5)
        self.driver.find_element_by_id('com.tencent.qqlite:id/password').send_keys("123456789")
        time.sleep(5)
        self.driver.find_element_by_id('com.tencent.qqlite:id/login').click()

    def tearDown(self):
        self.driver.quit()
 
 
if __name__ == '__main__':
    unittest.main()