blueView 盖在 redView 上面，有一部分共同部分

1.
class EventView: UIView {

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        print("touchesBegan", self.tag)
        super.touchesBegan(touches, with: event)
    }

}
(1)
redView & blueView 同级关系
点击redView，redView响应
点击blueView，blueView响应
点击共同部分，blueView响应

(2)
blueView是redView的子元素
点击redView，redView响应
点击blueView，blueView什么也不响应
点击共同部分，blueView先响应，redView再响应

如果这个基础上又有vc 的 touchesBegan
override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
    print("vc touchesBegan")
    super.touchesBegan(touches, with: event)
}
view响应好后会传递给vc

2.
class EventView: UIView {

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        print("touchesBegan", self.tag)
    }

}

(1)
redView & blueView 同级关系
点击redView，redView响应
点击blueView，blueView响应
点击共同部分，blueView响应

(2)
blueView是redView的子元素
点击redView，redView响应
点击blueView，blueView什么也不响应
点击共同部分，只有blueView响应（不写super.touchesBegan，阻断了事件，不再传递给父元素）