https://www.jianshu.com/p/74e278cabf47

目前单元测试主要分为TDD和BDD两种思维模式:
TDD是 Test Drive Development，指的是测试驱动开发
BDD是Behavior Drive Development ，指的是行为驱动开发，常用于敏捷开发中使用的测试方法.其主要是为了解决XCTest苹果官方测试框架测试时难以mock和stub的问题
在objc中，现在比较流行的BDD框架有specta、Kiwi、ceder，github上start较多的是Kiwi，在swift中，专用的 BDD 测试框架是Quick和Sleipnir

Stub:
Stub是指人为地让一个对象对某个方法返回我们事先规定好的值
Stub运用的主要场景是你需要和别的开发人员协同开发时，别人的模块尚未完成，而你的模块需要用到别人的模块，这时就需要Stub
例如，后端的接口未完成，你的代码已经完成了，Stub可以伪造一个调用的返回。
ojbc下可以使用OHHTTPStubs来伪造网络的数据返回。swift下，仍要手动写stub。

Mock:
Mock是一个非常容易和stub混淆的概念，简单来说，我们可以将Mock看做是一种更全面和更智能的Stub
Mock其实是一个对象，它是对现有类行为的一种模拟（或是对现有接口实现的模拟）
Mock和Stub最大的区别在于Stub只是简单的方法替换，不涉及新的对象，被stub的对象可以是业务代码中真正的对象，而Mock行为本身产生新的（不可能在业务代码中出现）的对象，并遵循类的定义响应某些方法。
Mock让你可以检查某种情况下，一个方法是否被调用，或者一个属性是否被正确设值。objc下可以使用OCMock来mock对象。但是，由于swift的runtime比较弱，所以，swift上一般要手动写mock。

==================================================XCTest框架之单元测试UnitTest
XCTestCase是苹果官方提供的一个单元测试工具，它的初始化不是用户控制的，开发者无需手动针对XCTestCase的subclass进行alloc和init或者调用静态方法初始化的操作

XCTFail(format…) 生成一个失败的测试；

XCTAssertNil(a1, format...)为空判断，a1为空时通过，反之不通过；

XCTAssertNotNil(a1, format…)不为空判断，a1不为空时通过，反之不通过；

XCTAssert(expression, format...)当expression求值为TRUE时通过；

XCTAssertTrue(expression, format...)当expression求值为TRUE时通过；

XCTAssertFalse(expression, format...)当expression求值为False时通过；

XCTAssertEqualObjects(a1, a2, format...)判断相等，[a1 isEqual:a2]值为TRUE时通过，其中一个不为空时，不通过；

XCTAssertNotEqualObjects(a1, a2, format...)判断不等，[a1 isEqual:a2]值为False时通过；

XCTAssertEqual(a1, a2, format...)判断相等（当a1和a2是 C语言标量、结构体或联合体时使用, 判断的是变量的地址，如果地址相同则返回TRUE，否则返回NO）；

XCTAssertNotEqual(a1, a2, format...)判断不等（当a1和a2是 C语言标量、结构体或联合体时使用）；

XCTAssertEqualWithAccuracy(a1, a2, accuracy, format...)判断相等，（double或float类型）提供一个误差范围，当在误差范围（+/-accuracy）以内相等时通过测试；

XCTAssertNotEqualWithAccuracy(a1, a2, accuracy, format...) 判断不等，（double或float类型）提供一个误差范围，当在误差范围以内不等时通过测试；

XCTAssertThrows(expression, format...)异常测试，当expression发生异常时通过；反之不通过；（很变态） XCTAssertThrowsSpecific(expression, specificException, format...) 异常测试，当expression发生specificException异常时通过；反之发生其他异常或不发生异常均不通过；

XCTAssertThrowsSpecificNamed(expression, specificException, exception_name, format...)异常测试，当expression发生具体异常、具体异常名称的异常时通过测试，反之不通过；

XCTAssertNoThrow(expression, format…)异常测试，当expression没有发生异常时通过测试；

XCTAssertNoThrowSpecific(expression, specificException, format...)异常测试，当expression没有发生具体异常、具体异常名称的异常时通过测试，反之不通过；

XCTAssertNoThrowSpecificNamed(expression, specificException, exception_name, format...)异常测试，当expression没有发生具体异常、具体异常名称的异常时通过测试，反之不通过

#####XCTAssert(expression, format...)当expression求值为TRUE时通过#####

==================================================XCTest之UI测试UITest
UI Tests是一个自动测试UI与交互的Testing组件
UI testing允许你找到UI元素并与之交互,还能检查属性和状态.可以和单元测试一起执行. UITest使用的OC/Swift语言的自动化测试。

常用基本操作：
（1）点击按钮：app.buttons["登录"].tap()
（2）输入框输入文本

app.textFields["手机号"].tap()    //要先聚焦文本框，才能继续输入
app.textFields["手机号"].typeText("13038865629")

代码中控件的获取方式
类似于 app.buttons["TDD驱动测试界面"] 这样的，如果我们需要人为手写操作代码，如何获取控件，可以通过button的title或者设置的identifer获取button,
类似的还有app.tables, app.textFields,app.staticTexts等等
xcode也有一个帮助工具 Accessibility Inspector 来获取控件的属性

==================================================三方测试框架Quick+Nimble的使用
oc中：kiwi 、specta、cedar
swift：quick+nimble、Sleipnir

项目是使用的swift语言，所以主要采用quick+nimble，用于单元测试和断言
如果你的项目是OC的，推荐使用kiwi，目前是start最多的三方框架

Nimble 就像是Quick 的搭档，它提供了匹配器作为断言，用于编写匹配模式

Quick:
The Swift (and Objective-C) testing framework.

public struct Click{
    
    public var isLoud = true
    public var hasHighFrequency = true
    
    public func count()->Int{
        return 1
    }
}
 
class Dolphin {
 
    public var isFriendly = true
    public var isSmart = true
    public var isHappy = false
    
    public init(){
        
    }
    public init(_ happy : Bool){
        isHappy = happy
    }
    
    public func click()->Click{
        return Click()
    }
    
    public func eat(_ food : AnyObject){
        isHappy = true
    }
}

given--when--then

首先使用苹果官方XCTest
func testA_Dolphin_its_click_whenTheDolphinIsNearSomethingInteresting(){
    //given / arrange
    let dolphin : Dolphin = Dolphin()
    
    //when / act
    let click = dolphin.click()
    
    //then / assert
    XCTAssertEqual(click.count(), 3)

    // 再将断言替换成 nimble框架的
    // expect(click.count()).to(equal(3))
}

func testA_Dolphin_its_click_whenTheDolphinIsNotNearAnythingInteresting(){
    //given / arrange
    let dolphin : Dolphin = Dolphin()
    
    //when / act
    let click = dolphin.click()
    
    //then / assert
    XCTAssertEqual(click.count(), 1)
    
}

最后使用quick+nimble

import Quick
import Nimble
@testable import MyMainTarget
 
class DolphinQuickTests: QuickSpec {
    
    override func spec(){
        //所有测试放在这里
       
        // describe用于描述类和方法
        describe("a dolphin", closure: {
            var dolphin : Dolphin!
            
             // beforeEach/afterEach相当于setUp/tearDown,beforeSuite/afterSuite相当于全局setUp/tearDown
            beforeEach {
                dolphin = Dolphin()
            }
            
            describe("its click", closure: {
                var click : Click!
                beforeEach {
                    click = dolphin.click()
                }
                
                // context用于指定条件或状态
                context("when the dolphin is not near anything interesting", closure: {
                    
                    // it用于描述测试的方法名
                    it("it only emited once", closure: {
                        expect(click.count()).to(equal(1))
                    })
                })
                
                context("when the dolphin is near something interesting", closure: {
                    it("it emited three times", closure: {
                        expect(click.count()).to(equal(3))
                    })
                })
            })
        })
    }
    
}

Quick关键字说明:

关键字	用途
describe 	描述类和类的方法
context	用于指定条件或状态
it	用于描述测试的方法名
beforeEach/afterEach	相当于setUp/tearDown
beforeSuite/afterSuite	相当于全局setUp/teardown
在describe 、context、it前加“x”	表示可以屏蔽此方法的测试
在describe 、context、it前加“f”	表示可以只测试这些带f的测试

Nimble:
A Matcher Framework for Swift and Objective-C

Nimble关键字说明:
Nimble一般使用 expect(...).to 和 expect(...).notTo的写法
1.支持异步测试
2.使用waitUntil来进行等待

列举Nimble中的匹配函数:
用途	函数
等值判断	

使用equal函数
expect(actual).to(equal(expected))
expect(actual) == expected
expect(actual) != expected

是否是同一个对象

使用beIdenticalTo函数
expect(actual).to(beIdenticalTo(expected))
expect(actual) === expected
expect(actual) !== expected

比较	
expect(actual).to(beLessThan(expected))
expect(actual) < expected
expect(actual).to(beLessThanOrEqualTo(expected))
expect(actual) <= expected
expect(actual).to(beGreaterThan(expected))
expect(actual) > expected
expect(actual).to(beGreaterThanOrEqualTo(expected)) expect(actual) >= expected

比较浮点数	
expect(10.01).to(beCloseTo(10, within: 0.1))

类型检查
expect(instance).to(beAnInstanceOf(aClass)) expect(instance).to(beAKindOf(aClass))

是否为真
// Passes if actual is not nil, true, or an object with a boolean value of true:
expect(actual).to(beTruthy())
// Passes if actual is only true (not nil or an object conforming to BooleanType true):
expect(actual).to(beTrue())
// Passes if actual is nil, false, or an object with a boolean value of false:
expect(actual).to(beFalsy())
// Passes if actual is only false (not nil or an object conforming to BooleanType false):
expect(actual).to(beFalse())
// Passes if actual is nil:
expect(actual).to(beNil())

是否有异常
// Passes if actual, when evaluated, raises an exception: expect(actual).to(raiseException())
// Passes if actual raises an exception with the given name:
expect(actual).to(raiseException(named: name))
// Passes if actual raises an exception with the given name and reason:
expect(actual).to(raiseException(named: name, reason: reason))
// Passes if actual raises an exception and it passes expectations in the block
// (in this case, if name begins with 'a r')
expect { exception.raise() }.to(raiseException { (exception: NSException) in
     expect(exception.name).to(beginWith("a r"))
})

集合关系
// Passes if all of the expected values are members of actual:
expect(actual).to(contain(expected...))
expect(["whale", "dolphin", "starfish"]).to(contain("dolphin", "starfish"))
// Passes if actual is an empty collection (it contains no elements):
expect(actual).to(beEmpty())


字符串
// Passes if actual contains substring expected: expect(actual).to(contain(expected))
// Passes if actual begins with substring: expect(actual).to(beginWith(expected))
// Passes if actual ends with substring: expect(actual).to(endWith(expected))
// Passes if actual is an empty string, "": expect(actual).to(beEmpty())
// Passes if actual matches the regular expression defined in expected:
expect(actual).to(match(expected))

检查集合中的所有元素是否符合条件
// with a custom function:
expect([1,2,3,4]).to(allPass({$0 < 5}))
// with another matcher: expect([1,2,3,4]).to(allPass(beLessThan(5)))

检查集合个数
expect(actual).to(haveCount(expected))

匹配任意一种检查
// passes if actual is either less than 10 or greater than 20 expect(actual).to(satisfyAnyOf(beLessThan(10), beGreaterThan(20)))
// can include any number of matchers -- the following will pass
expect(6).to(satisfyAnyOf(equal(2), equal(3), equal(4), equal(5), equal(6), equal(7)))
// in Swift you also have the option to use the || operator to achieve a similar function expect(82).to(beLessThan(50) || beGreaterThan(80))

# Podfile
use_frameworks!

target "MyApp" do
  # Normal libraries

  abstract_target 'Tests' do
    inherit! :search_paths
    target "MyAppTests"
    target "MyAppUITests"

    pod 'Quick'
    pod 'Nimble'
  end
end

==================================================三方UI测试框架KIF
KIF的全称是Keep it functional。它是一个建立在XCTest的UI测试框架，通过accessibility来定位具体的控件，再利用私有的API来操作UI。

==================================================三方网络请求框架OHHTTPStubs
在你的服务器没有准备妥当或者在你需要模拟数据进行本地开发时，OHHTTPStubs是一个很好的可以加速测试和开发的工具。
OHHTTPStubs可使用伪造的网络数据和模拟的缓慢网络来测试你的应用程序，从而检测你的应用程序在不佳的网络环境中的行为，并使用伪造的网络数据编写单元测试
OHHTTPStubsResponse可以指定为文件，图片，data数据，或者json对象。

OHHTTPStubs的主要功能有两点：
伪造网络请求返回的数据
模拟网络请求时的慢网环境

pod 'OHHTTPStubs/Swift', :configurations => ['Debug']
#debug的配置意思是只用于debug环境，在代码中也需要进行debug判断

import OHHTTPStubs

案例是利用Alamofire网络框架+ SwiftyJSON解析 解析数据，编写一个请求及响应的处理
所以需要同时利用pod导入 Alamofire 和 SwiftyJSON

func StubDataClick(_ sender: Any) {
        Alamofire.request("http://mywebservice.com", method: .get, parameters: nil, encoding: JSONEncoding.default).responseJSON { (respons) in
            print("response: ", respons.response as Any)
            print("result: ",respons.result)
 
            switch respons.result{
            case .success(let value):
                let json = JSON(value)
                 self.textView.text = json.rawString()
                print("JSON: ", json)
            case .failure(let error):
                 print("error: ",error)
                 self.textView.text = (error as! NSError).description
            }
 
        }
}

在网络请求执行前，需要配置拦截请求的响应
有如下几种情况的配置：
（1）自定义返回的结果数据
OHHTTPStubs.stubRequests(passingTest: { (request) -> Bool in
    return request.url?.host == "mywebservice.com"
}) { (request) -> OHHTTPStubsResponse in
    let array = ["hello", "world"]
    return OHHTTPStubsResponse.init(jsonObject: array, statusCode: 200, headers: nil)
}

（2）返回项目中配置的json格式文件（可以自己任意配以一个json格式的文件）
OHHTTPStubs.stubRequests(passingTest: { (request) -> Bool in
    return request.url?.host == "mywebservice.com"
}) { (request) -> OHHTTPStubsResponse in
    let stubPath = OHPathForFile("abbaData.json", type(of: self))
    return fixture(filePath: stubPath!, status: 200, headers: ["Content-Type":"application/json"])
}
（3）模拟网络慢的情况
慢网络的情况就是请求响应的时间长，返回数据慢
/*
responseTime 可以指定具体的数值 例如3.0
你也可以用枚举值来定义responseTime

OHHTTPStubsDownloadSpeedGPRS   =    -7 =    7 KB/s =    56 kbps
OHHTTPStubsDownloadSpeedEDGE   =   -16 =   16 KB/s =   128 kbps
OHHTTPStubsDownloadSpeed3G     =  -400 =  400 KB/s =  3200 kbps
OHHTTPStubsDownloadSpeed3GPlus =  -900 =  900 KB/s =  7200 kbps
OHHTTPStubsDownloadSpeedWifi   = -1500 = 1500 KB/s = 12000 kbps
*/
OHHTTPStubs.stubRequests(passingTest: { (request) -> Bool in
    return request.url?.host == "mywebservice.com"
}) { (request) -> OHHTTPStubsResponse in
    let stubPath = OHPathForFile("abbaData.json", type(of: self))
    return fixture(filePath: stubPath!, status: 200, headers: ["Content-Type":"application/json"]).requestTime(1.0, responseTime: OHHTTPStubsDownloadSpeedWifi)
}

（4）模拟网络错误的情况
OHHTTPStubs.stubRequests(passingTest: { (request) -> Bool in
    return request.url?.host == "mywebservice.com"
}) { (request) -> OHHTTPStubsResponse in
    let error : NSError = NSError.init(domain: NSURLErrorDomain, code: 500, userInfo: ["describe":"netwoek is error"])
    return OHHTTPStubsResponse.init(error: error)
}

==================================================三方模拟框架OCMock的使用
其实现思想就是根据要mock的对象的class来创建一个对应的对象，并且设置好该对象的属性和调用预定方法后的动作（例如返回一个值，调用代码块，发送消息等等），
然后将其记录到一个数组中，接下来开发者主动调用该方法，最后做一个verify（验证），从而判断该方法是否被调用，或者调用过程中是否抛出异常等。

其实就是可以把它当做我们伪造的一个对象，我们给它一些预设的值之类的，然后就可以进行对应的验证了。
使用mock的原因：可以模拟返回数据来验证方法是否调用。

配置OCMock
（1）在github下载OCMock，打开其中的/Examples/SwiftExamples，拷贝里面的usr文件夹到你所在的项目中
（2）在targets中选中测试target-->Build Phases -->Link Binary With Libraries中导入usr->lib->libOCMock.a文件
（3）设置Build Settings-->搜索 other_ld，找到Other Linker Flags -->添加 -ObjC
（4）设置Build Settings-->搜索 header search，找到Header Search Paths -->添加 $(PROJECT_DIR)/usr/include
（5）创建一个VC类和Connection类，用于mock测试
（6）由于是在swift项目中使用OCMock，其许多语法在swift中无法实现，所以测试文件使用OC语言书写

import Foundation
 
@objcMembers
class TwitterViewController: NSObject {
 
    var connection: Connection
    var data: String
    
    class func newController() -> TwitterViewController {
        return TwitterViewController()
    }
    
    override init() {
        self.connection = TwitterConnection()
        self.data = ""
    }
    
    func redisplay() {
        data = connection.fetchData()
    }
 
}

import Foundation
//网络连接类
@objc
protocol Connection {
    func fetchData()->String
}
 
@objcMembers
class TwitterConnection: NSObject, Connection{
 
    func fetchData() -> String {
        return "real data returned from other system"
    }
}


测试一个简单的模型类:
import UIKit
@objcMembers
class Person: NSObject {
    func getPersonName()->String{
        return "小李"
    }
}
在测试文件中创建测试方法:
- (void)testPersonNameEqual{
    Person *person = [[Person alloc] init];
    //创建一个mock对象
    id mockClass = OCMClassMock([Person class]);
    //可以给这个mock对象的方法设置预设的参数和返回值
    OCMStub([mockClass getPersonName]).andReturn(@"小李");
    
    //用这个预设的值和实际的值进行比较
    XCTAssertEqualObjects([mockClass getPersonName], [person getPersonName],@"值相等");
}

mock类:
使用OCMClassMock（类mock）来mock一个类对象

- (void)testMockingAnObject{
    
    //模拟出来一个网络请求链接的数据类
    id mockConnection = OCMClassMock([TwitterConnection class]);
    //模拟fetchdata方法返回预设置
    OCMStub([mockConnection fetchData]).andReturn(@"stubbed!");
    
    TwitterViewController *controller = [TwitterViewController newController];
    controller.connection = mockConnection;
 
    //这里执行redisplay之后，返回 stubbed
    [controller redisplay];
    
    //-------验证使用对应参数的方法是否被调用------
    
    //成功
    OCMVerify([mockConnection fetchData]);
    XCTAssertEqualObjects(@"stubbed!", controller.data, @"Excpected stubbed data in controller.");
    
    //失败
//    XCTAssertEqualObjects(@"real data returned from other system", controller.data, @"unExcpected stubbed data in controller.");
}

使用OCMPartialMock（部分mock）将新建的connection作为mock对象:
- (void)testPartiallyMockingAnObject
{
    //新建一个connection用来mock
    TwitterConnection * testConnection = [TwitterConnection new];
    id mockConnection = OCMPartialMock(testConnection);
    OCMStub([mockConnection fetchData]).andReturn(@"stubbed!");
    
    TwitterViewController *controller = [TwitterViewController newController];
    [controller redisplay];
    
    //-------验证使用对应参数的方法是否被调用------
    //失败
    OCMVerify([mockConnection fetchData]);
    XCTAssertEqualObjects(@"stubbed!", controller.data, @"Excpected stubbed data in controller.");
}

使用OCMPartialMock（部分mock）将使用的是controller的connection作为mock对象
- (void)testPartiallyMockingAnObject2
{
    TwitterViewController *controller = [TwitterViewController newController];
    
    //从controller中获取mock对象
    id mockConnection = OCMPartialMock((NSObject *)controller.connection);
    OCMStub([mockConnection fetchData]).andReturn(@"stubbed!");
    
    [controller redisplay];
    
     //-------验证使用对应参数的方法是否被调用------
    //成功
    OCMVerify([mockConnection fetchData]);
    XCTAssertEqualObjects(@"stubbed!", controller.data, @"Excpected stubbed data in controller.");
}

在swift项目中使用OCMock，测试用例的编写必须使用OC语言