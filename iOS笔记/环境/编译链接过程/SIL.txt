SIL（Swift Intermediate Language）是 Swift 编译器中的一种中间表示（Intermediate Representation，IR）。
它是 Swift 编译过程中的一种中间语言，位于源代码和机器码之间。

SIL 的作用:
优化：SIL 允许编译器在一个较为高层次的抽象中对代码进行优化。编译器会基于 SIL 进行一系列优化，包括常见的内联（inlining）、死代码消除（dead code elimination）、公共子表达式消除（CSE）等优化。它能让编译器更加灵活和高效地处理代码。
目标平台无关：SIL 与目标平台无关，它是一种中立的表示形式，不依赖于具体的硬件或操作系统。这使得编译器在不同平台之间迁移时更加方便。
生成目标代码：最终，SIL 会被编译成底层代码（如 LLVM IR 或机器代码），从而生成最终的可执行文件。
类型检查和错误检查：SIL 还可以用于执行类型检查和其他类型安全检查。它是 Swift 编译器的一部分，帮助确保代码的类型正确性。

在 Swift 编译过程中，源代码首先会被转化为 SIL，然后再进一步被编译成更低层次的 LLVM IR，最后生成目标机器代码。
SIL 的设计比 LLVM IR 更加接近于 Swift 语言的结构，因此可以进行更加针对性和优化的分析。


在 Swift 代码中启用了编译器的调试选项（比如 -emit-sil），你可以看到类似这样的 SIL 输出:
// Swift 代码:
func add(x: Int, y: Int) -> Int {
    return x + y
}

// SIL 输出：
sil @add(x:y:) : $@convention(thin) (Int, Int) -> Int {
  bb0(%0 : $Int, %1 : $Int):
    %2 = apply %0, %1
    return %2
}



Swfit使用前端编译器swiftc编译成IR，再通过后端编译器LLVM生成.o可执行文件。
OC使用前端编译器Clang编译成IR，再通过后端编译器LLVM生成.o可执行文件。


Swift编译流程:
SwiftCode
->通过词法分析、语法分析(-dump-parse)
->生成AST抽象语法树(-dump-ast)
->通过SILGen生成未优化代码量巨大的RawSIL文件(-emit-silgen)
->再拿到优化后更简洁的Canonical SIL(-emit-sil)
->通过IRGen生成IR(-emit-ir)
->最终生成二进制代码


swiftc -h

MODES:
-dump-ast               Parse and type-check input file(s) and dump AST(s)
-dump-parse             Parse input file(s) and dump AST(s)
-dump-pcm               Dump debugging information about a precompiled Clang module
-dump-scope-maps <expanded-or-list-of-line:column>
                        Parse and type-check input file(s) and dump the scope map(s)
-dump-type-info         Output YAML dump of fixed-size types from all imported modules
-dump-type-refinement-contexts
                        Type-check input file(s) and dump type refinement contexts(s)
-emit-assembly          Emit assembly file(s) (-S)
-emit-bc                Emit LLVM BC file(s)
-emit-executable        Emit a linked executable
-emit-imported-modules  Emit a list of the imported modules
-emit-irgen             Emit LLVM IR file(s) before LLVM optimizations
-emit-ir                Emit LLVM IR file(s) after LLVM optimizations
-emit-library           Emit a linked library
-emit-object            Emit object file(s) (-c)
-emit-pcm               Emit a precompiled Clang module from a module map
-emit-sibgen            Emit serialized AST + raw SIL file(s)
-emit-sib               Emit serialized AST + canonical SIL file(s)
-emit-silgen            Emit raw SIL file(s)
-emit-sil               Emit canonical SIL file(s)
-emit-supported-features
                        Emit a JSON file including all supported compiler features
-index-file             Produce index data for a source file
-parse                  Parse input file(s)
-print-ast-decl         Parse and type-check input file(s) and pretty print declarations from AST(s)
-print-ast              Parse and type-check input file(s) and pretty print AST(s)
-resolve-imports        Parse and resolve imports in input file(s)
-scan-dependencies      Scan dependencies of the given Swift sources
-typecheck              Parse and type-check input file(s)



AST（Abstract Syntax Tree，抽象语法树）是编译器中的一种数据结构，用来表示源代码的语法结构。


https://www.youtube.com/watch?v=Ntj8ab-5cvE


LLVM IR → 汇编语言（通过 -emit-assembly）
汇编语言 → 机器代码（通过汇编器生成特定平台的机器码）