-X<target> 中的 X 是“扩展参数”的意思，表示：
“把后面的参数转发给指定子工具（如 frontend、linker、clang）”


framework中optional和required的区别:
（1）Require：强引用，一定会被加载到内存中，即使不使用也会被加载到内存中。
（2）Optional：弱引用，开始的并不会加载，在使用的时候才会加载，会节省加载时的时间。
有一些库，如Social.framework和AdSupport.framework，是在IOS6之后才被引入的，更新了一些新的特性，如果运行在5.0甚至更低的设备上，这些库不支持，会编译通不过，这时候就要使用弱引用了。

==================================================Frameworks and Weak Linking
https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html

One challenge faced by developers is that of taking advantage of new features introduced in new versions of OS X while still supporting older versions of the system. 
Normally, if an application uses a new feature in a framework, it is unable to run on earlier versions of the framework that do not support that feature. 
Such applications would either fail to launch or crash when an attempt to use the feature was made. 
Apple has solved this problem by adding support for weakly-linked symbols.


Marking Symbols for Weak Linking
If you define your own frameworks, you can mark symbols as weakly linked using the weak_import attribute.

To mark symbols as weakly linked, you must make sure your environment is configured to support weak linking:
You must be using GCC version 3.1 or later. Weak linking is not supported in GCC version 2.95
You must set the OS X Deployment Target build option of your Xcode project to OS X v10.2 or later.

The linker marks symbols as strongly linked unless you explicitly tell it otherwise. To mark a function or variable as weakly linked, add the weak_import attribute to the function prototype or variable declaration, as shown in the following example:
extern int MyFunction() __attribute__((weak_import));
extern int MyVariable __attribute__((weak_import));


Using Weakly Linked Symbols
If your framework relies on weakly linked symbols in any Apple or third-party frameworks, you must check for the existence of those symbols before using them. 
If you attempt to use a non-existent symbol without first checking, the dynamic linker may generate a runtime binding error and terminate the corresponding process.

If a weakly linked symbol is not available in a framework, the linker sets the address of the symbol to NULL. You can check this address in your code using code similar to the following:

extern int MyWeakLinkedFunction() __attribute__((weak_import));
int main()
{
    int result = 0;
 
    if (MyWeakLinkedFunction != NULL)
    {
        result = MyWeakLinkedFunction();
    }
 
    return result;
}


Weak Linking to Entire Frameworks
When you reference symbols in another framework, most of those symbols are linked strongly to your code. In order to create a weak link to a symbol, the framework containing the symbol must explicitly add the weak_import attribute to it (see Marking Symbols for Weak Linking). However, if you do not maintain a framework and need to link its symbols weakly, you can explicitly tell the compiler to mark all symbols as weakly linked. To do this, you must open your project in Xcode and modify the way your targets link to the framework as follows:

1.Select the target you want to modify and reveal its build phases.
2.Expand the Link Binary With Libraries build phase to view the frameworks currently linked by the target.
3.If the framework you want to weakly link to is listed in the Link Binary With Libraries build phase, select it, and choose Edit > Delete to remove it.
Now you can tell the linker to use weak linking for that framework.

4.Select the target, open its Info window, and click Build.
5.To the Other Linker Flags build setting, add the following command-line option specification, where <framework_name> is the name of the framework you want to weakly link to:
-weak_framework <framework_name>
6.Build your product.
The -weak_framework option tells the linker to weakly link all symbols in the named framework. If you need to link to a library instead of a framework, you can use the -weak_library linker command instead of -weak_framework