UIResponder类可以接收并处理事件
UIApplication、AppDelegate、UIViewController、UIView均继承UIResponder类。
UIResponder类的nextResponser:
Return value：UIView implements this method by returning the UIViewController object that manages it (if it has one) or its superview (if it doesn’t)
UIViewController implements the method by returning its view’s superview; 
UIWindow returns the application object, 
and UIApplication returns nil.


@MainActor open class UIResponder : NSObject, UIResponderStandardEditActions {

    
    open var next: UIResponder? { get }

    
    open var canBecomeFirstResponder: Bool { get } // default is NO

    open func becomeFirstResponder() -> Bool

    
    open var canResignFirstResponder: Bool { get } // default is YES

    open func resignFirstResponder() -> Bool

    
    open var isFirstResponder: Bool { get }

    
    // Generally, all responders which do custom touch handling should override all four of these methods.
    // Your responder will receive either touchesEnded:withEvent: or touchesCancelled:withEvent: for each
    // touch it is handling (those touches it received in touchesBegan:withEvent:).
    // *** You must handle cancelled touches to ensure correct behavior in your application.  Failure to
    // do so is very likely to lead to incorrect behavior or crashes.
    open func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?)

    open func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?)

    open func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?)

    open func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?)

    @available(tvOS 9.0, *)
    open func touchesEstimatedPropertiesUpdated(_ touches: Set<UITouch>)

    
    // Generally, all responders which do custom press handling should override all four of these methods.
    // Your responder will receive either pressesEnded:withEvent or pressesCancelled:withEvent: for each
    // press it is handling (those presses it received in pressesBegan:withEvent:).
    // pressesChanged:withEvent: will be invoked for presses that provide an analog value
    // (like thumbsticks or analog push buttons)
    // *** You must handle cancelled presses to ensure correct behavior in your application.  Failure to
    // do so is very likely to lead to incorrect behavior or crashes.
    @available(tvOS 9.0, *)
    open func pressesBegan(_ presses: Set<UIPress>, with event: UIPressesEvent?)

    @available(tvOS 9.0, *)
    open func pressesChanged(_ presses: Set<UIPress>, with event: UIPressesEvent?)

    @available(tvOS 9.0, *)
    open func pressesEnded(_ presses: Set<UIPress>, with event: UIPressesEvent?)

    @available(tvOS 9.0, *)
    open func pressesCancelled(_ presses: Set<UIPress>, with event: UIPressesEvent?)

    
    @available(tvOS)
    open func motionBegan(_ motion: UIEvent.EventSubtype, with event: UIEvent?)

    @available(tvOS)
    open func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?)

    @available(tvOS)
    open func motionCancelled(_ motion: UIEvent.EventSubtype, with event: UIEvent?)

    
    @available(tvOS)
    open func remoteControlReceived(with event: UIEvent?)

    
    @available(tvOS)
    open func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool

    // Allows an action to be forwarded to another target. By default checks -canPerformAction:withSender: to either return self, or go up the responder chain.
    @available(tvOS)
    open func target(forAction action: Selector, withSender sender: Any?) -> Any?

    
    // Overrides for menu building and validation
    @available(tvOS 13.0, *)
    open func buildMenu(with builder: UIMenuBuilder)

    @available(tvOS 13.0, *)
    open func validate(_ command: UICommand)

    
    @available(tvOS)
    open var undoManager: UndoManager? { get }

    
    // Productivity editing interaction support for undo/redo/cut/copy/paste gestures
    @available(tvOS 13.0, *)
    open var editingInteractionConfiguration: UIEditingInteractionConfiguration { get }
}


open var next: UIResponder? { get }
Return Value
The next object in the responder chain, or nil if this is the last object in the chain.

Discussion
The UIResponder class doesn’t store or set the next responder automatically, so this method returns nil by default. 
Subclasses must override this method and return an appropriate next responder. 
For example, UIView implements this method and returns the UIViewController object that manages it (if it has one) or its superview (if it doesn’t). 
UIViewController similarly implements the method and returns its view’s superview. 
UIWindow returns the application object. 
The shared UIApplication object normally returns nil, but it returns its app delegate if that object is a subclass of UIResponder and hasn’t already been called to handle the event.


