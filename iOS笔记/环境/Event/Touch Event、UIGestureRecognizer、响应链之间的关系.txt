
第一步：系统会将所有的Touch message优先发送给关联在响应链上的全部手势。
手势根据Touch序列消息和手势基本规则更改自己的状态（有的可能失败，有的可能识别等等）。
如果某个手势对Touch message成功拦截（被拦截时，系统不会将Touch message 发送给响应链顶部响应者)，顶部视图控件调用touchesCancelled:withEvent方法，否则系统会进入第二步。

第二步：系统将Touch message发送给响应链顶部的视图控件，顶部视图控件这个时候就会调用Touch相关的四个方法中的某一个。


拦截:
- (void)viewDidLoad {
    [super viewDidLoad];
    
    UITapGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleClick)];
    gesture.numberOfTapsRequired = 2;
    self.view.userInteractionEnabled = YES;

    [self.view addGestureRecognizer:gesture];
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    NSLog(@"touchesBegan");
}

- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    NSLog(@"touchesEnded");
}

- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    NSLog(@"touchesMoved");
}

- (void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    NSLog(@"touchesCancelled");
}

- (void)doubleClick {
    NSLog(@"双击拉");
}

1）如果单击屏幕(拦截失败)，打印
TestForMoreGesture[26097:18114462] touchesBegan
TestForMoreGesture[26097:18114462] touchesEnded
2）如果双击屏幕(拦截成功)，打印
TestForMoreGesture[26097:18114462] touchesBegan
TestForMoreGesture[26097:18114462] 双击拉
TestForMoreGesture[26097:18114462] touchesCancelled

手势是否拦截该Touch Message,主要由UIGestureRecognizer类的三个属性控制。
// 默认为YES,表明当手势成功识别事件后，系统会将Touch cancel消息发送给hitTestView ，并调用hitTestView的TouchCancel。设置为NO，不会再收到TouchCancel
@property(nonatomic) BOOL cancelsTouchesInView;
// 默认为YES, 表明无论什么情况下，不会拦截Touch began消息。如果设置为NO，只要有一个手势不识别失败，都不会发送Touch began到响应链的第一响应者。
@property(nonatomic) BOOL delaysTouchesBegan; 
// 默认为NO, 和delaysTouchesBegan类似，不过它是用来控制TouchEnd message的拦截
@property(nonatomic) BOOL delaysTouchesEnded; 