==================================================Personal VPN
Create and manage a VPN configuration that uses one of the built-in VPN protocols (IPsec or IKEv2).

The user must explicitly authorize your app the first time it saves a VPN configuration.

Note:
Personal VPN only supports recommended VPN protocols; it doesn’t support legacy VPN protocols, like PPTP and L2TP.

Before starting with Personal VPN, verify that the client is compatible with your VPN server. 
Use Apple Configurator to create a configuration profile with a VPN payload for your server. 
If you can connect using the VPN configuration from your configuration profile, you should be able to connect using Personal VPN.

To get started, call the shared() class method to access the NEVPNManager singleton. 
Then load the VPN configuration by calling loadFromPreferences(completionHandler:); 
if you haven’t previously saved a configuration, this call returns an empty configuration. 
Modify this configuration as you see fit, and save it using saveToPreferences(completionHandler:).

Once you’ve set up a Personal VPN configuration, you can connect and disconnect the VPN using the NEVPNConnection class. 
Use the connection property of NEVPNManager to get the correct instance of that class.

Both iOS and macOS also support managed VPN, meaning VPN configurations installed by a configuration profile. 
Managed VPN configurations take precedence over Personal VPN configurations. 
If there’s simultaneously a managed VPN configuration and Personal VPN configuration, both configured to act as the default route, the managed tunnel serves as the default route.

Note：
When a VPN configuration is active, connections use the VPN instead of iCloud Private Relay. 
Network Extension providers also don’t use iCloud Private Relay.

VPN Configuration:
class NEVPNManager
An object to create and manage a Personal VPN configuration.
class NEVPNProtocolIKEv2
Settings for an IKEv2 VPN configuration.
class NEVPNProtocolIPSec
Settings for an IPsec VPN configuration.
class NEVPNProtocol
Settings common to both IKEv2 and IPsec VPN configurations.
VPN On Demand Rules
Set up VPN On Demand.

VPN Control:
class NEVPNConnection
An object to start and stop a Personal VPN connection and get its status.

==================================================Virtual Private Networks
Packet Tunnel Provider
Implement a VPN client for a packet-oriented, custom VPN protocol.

App Proxy Provider
Implement a VPN client for a flow-oriented, custom VPN protocol.

==================================================Packet Tunnel Provider
Implement a VPN client for a packet-oriented, custom VPN protocol.

A virtual private network (VPN) is a form of network tunnel where a VPN client uses the public Internet to create a connection to a VPN server and then passes private network traffic over that connection. 
If you want to build a VPN client that implements a packet-oriented, custom VPN protocol, create a packet tunnel provider app extension.

When the system starts a VPN configuration that uses your packet tunnel provider, it performs the following steps:
Launches your app extension.
Instantiates your packet tunnel provider subclass within that app extension.
Starts forwarding packets to your provider.

Your provider should open a tunnel to a VPN server and send those packets over that tunnel. 
Similarly, if your provider receives packets from the tunnel, it should pass them back to the system.
Packet tunnel providers can run in destination IP mode or source-application mode. The latter is one form of per-app VPN (the other form is an App Proxy Provider).

You can use packet tunnel providers on apps distributed with Developer ID 10.15+, Mac App Store 10.15+, and iOS App Store. 
You can also use Network System Extension Packet Tunnel Providers when distributing with Developer ID and the Mac App Store.


Packet Tunnel Provider:
class NEPacketTunnelProvider
The principal class for a packet tunnel provider app extension.
class NETunnelProvider
An abstract base class shared by NEPacketTunnelProvider and NEAppProxyProvider.
class NEProvider
An abstract base class for all NetworkExtension providers.
class NEPacketTunnelNetworkSettings
The configuration for a packet tunnel provider’s virtual interface.
class NETunnelNetworkSettings
The configuration for a tunnel provider’s virtual interface.

Packet Handling:
class NEPacketTunnelFlow
An object you use to read and write packets to and from the tunnel’s virtual interface.
class NEPacket
A network packet and its associated properties.
In-Provider Networking
Network APIs for use by all types of NetworkExtension providers and by hotspot helpers.

VPN Configuration:
class NETunnelProviderManager
An object to create and manage the tunnel provider’s VPN configuration.
class NEVPNManager
An object to create and manage a Personal VPN configuration.
class NETunnelProviderProtocol
Configuration parameters for a VPN tunnel.
class NEAppRule
The identity of an app whose traffic is to be routed through the tunnel.
VPN On Demand Rules
Set up VPN On Demand.

VPN Control:
class NETunnelProviderSession
An object to start and stop a tunnel connection and get its status.
class NEVPNConnection
An object to start and stop a Personal VPN connection and get its status.

==================================================NEVPNManager
An object to create and manage a Personal VPN configuration.

Personal VPN：
The NEVPNManager API gives apps the ability to create and manage a Personal VPN configuration on iOS and macOS. 
Personal VPN configurations are typically used to provide a service to users that protects their Internet browsing activity on insecure networks such as public Wi-Fi networks.

Managing VPN Configurations：
class func shared() -> NEVPNManager
Access the single instance of NEVPNManager.
func loadFromPreferences(completionHandler: (Error?) -> Void)
Load the VPN configuration from the Network Extension preferences.
func saveToPreferences(completionHandler: ((Error?) -> Void)?)
Save the VPN configuration in the Network Extension preferences.
func setAuthorization(AuthorizationRef)
func removeFromPreferences(completionHandler: ((Error?) -> Void)?)
Remove the VPN configuration from the Network Extension preferences.

Accessing VPN Configuration Properties：
var isEnabled: Bool
A Boolean used to toggle the enabled state of the VPN configuration.
var protocolConfiguration: NEVPNProtocol?
An NEVPNProtocol object containing the configuration settings of the VPN tunneling protocol.
var localizedDescription: String?
A string containing the display name of the VPN configuration.
var isOnDemandEnabled: Bool
A Boolean used to toggle the Connect On Demand capability.
var onDemandRules: [NEOnDemandRule]?
An ordered list of Connect On Demand rules.

Connecting and Disconnecting VPN：
var connection: NEVPNConnection
An NEVPNConnection object that is used to control the VPN tunnel specified by the VPN configuration.

Errors：
struct NEVPNError
Information about an error encountered while configuring or using a VPN.
let NEVPNErrorDomain: String
enum NEVPNError.Code

Notifications：
static let NEVPNConfigurationChange: NSNotification.Name
Posted after the VPN configuration stored in the Network Extension preferences changes.