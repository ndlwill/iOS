https://help.apple.com/app-store-connect/#/dev0067a330b

App Store 服务器通知提供有关您 App 内购买项目的关键事件的信息，例如订阅状态变更或 App 内购买项目退款。

Enabling App Store Server Notifications
https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/subscriptio


App Store Server Notifications
https://developer.apple.com/documentation/appstoreservernotifications


In-App Purchase
https://developer.apple.com/documentation/storekit/in-app_purchase


Choosing a Receipt Validation Technique
https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/choosing


Consumable in-app purchases remain in the receipt until you call finishTransaction(_:). 
Non-consumables, auto-renewing subscription items, and non-renewing subscription items remain in the receipt indefinitely.


Notifications cover events in the in-app purchase lifecycle, including new subscription purchases and renewals, refunds, and more.

For a complete list of notification types, see notificationType for version 2, 
https://developer.apple.com/documentation/appstoreservernotifications/notificationtype
and notification_type for version 1.
https://developer.apple.com/documentation/appstoreservernotifications/notification_type

Version 2 notifications cover more events in the in-app purchase lifecycle, 
including subscription expirations, offer redemptions, and more.

==================================================

Receiving App Store Server Notifications
https://developer.apple.com/documentation/appstoreservernotifications/receiving_app_store_server_notifications

responseBodyV2
https://developer.apple.com/documentation/appstoreservernotifications/responsebodyv2
JSON Web Signature (JWS)
The version 2 response body, responseBodyV2, contains a signedPayload that’s cryptographically signed by the App Store in JSON Web Signature (JWS) format. 
The JWS format increases security and enables you to decode and validate the signature on your server.

The App Store Server API and the StoreKit In-App Purchase API use the same JWS-signed format for transaction and subscription status information.

For more information about JWS, see the IETF RFC 7515 specification.
https://datatracker.ietf.org/doc/html/rfc7515

The signedPayload object is a JWS representation. 
To get the transaction and subscription renewal details from the notification payload
process the signedPayload as follows:
1.Parse signedPayload to identify the JWS header, payload, and signature representations.

2.Base64 URL-decode the payload to get the responseBodyV2DecodedPayload. The decoded payload contains the notificationType , subtype, other notification metadata, and a data object.

3.The data object contains a signedTransactionInfo (JWSTransaction) and depending on the notification type, a signedRenewalInfo (JWSRenewalInfo). Parse and Base64 URL-decode these signed JWS representations to get transaction and subscription renewal details.


notificationType
https://developer.apple.com/documentation/appstoreservernotifications/notificationtype
The type that describes the in-app purchase event for which the App Store sends the version 2 notification.

==================================================

Responding to App Store Server Notifications
https://developer.apple.com/documentation/appstoreservernotifications/responding_to_app_store_server_notifications

When you set up the endpoints on your server to receive notifications, configure your server to send a response. 
Use HTTP status codes to indicate whether the App Store server notification post succeeded. 
Send HTTP 200 if the post was successful. If the post didn’t succeed, send HTTP 50x or 40x to have the App Store retry the notification. 
Your server isn’t required to return a data value.

If the App Store server doesn’t receive a 200 response from your server after the initial notification attempt, it retries as follows:

For version 1 notifications, it retries three times; at 6, 24, and 48 hours after the previous attempt.

For version 2 notifications, it retries five times; at 1, 12, 24, 48, and 72 hours after the previous attempt.

If your server misses notifications due to an outage, you can always get up-to-date transaction information by calling App Store Server API endpoints including Get Transaction History and Get All Subscription Statuses.

Note
Retry notifications are available only in the production environment. 
In the sandbox environment, the App Store server attempts to send the notification one time.bn 

App Store Server API
https://developer.apple.com/documentation/appstoreserverapi

Get Transaction History:
https://developer.apple.com/documentation/appstoreserverapi/get_transaction_history
Get a customer’s in-app purchase transaction history for your app.
Get Transaction History returns results for the following product types:
Auto-renewable subscriptions
Non-renewing subscriptions
Non-consumable in-app purchases
Consumable in-app purchases if the transaction is refunded, revoked, or if the app hasn't finished processing the transaction
The results don't include consumable in-app purchases that the app has marked as finished. For more information about finishing transactions, see finish() and finishTransaction(_:).


Get All Subscription Statuses:
https://developer.apple.com/documentation/appstoreserverapi/get_all_subscription_statuses
Get the statuses for all of a customer’s subscriptions in your app.