Manage your customers’ App Store transactions from your server.
https://developer.apple.com/documentation/appstoreserverapi


The App Store Server API is a REST API that you call from your server to request and provide information about your customers' in-app purchases. 
The App Store signs the transaction and subscription renewal information that this API returns using the JSON Web Signature (JWS) specification.
https://datatracker.ietf.org/doc/html/rfc7515

The App Store server returns information based on a customer’s in-app purchase history regardless of whether the customer installs, removes, or reinstalls the app on their devices.

To request transaction and subscription status information with this API, provide any original transaction identifier that belongs to the customer. The transaction history API responds with a complete list of transactions, 20 at a time, starting with the oldest first. 
The subscription status API returns the status for all of the customer’s subscriptions, organized by their subscription group identifier.


==================================================JWT 签名验证
https://www.6hu.cc/archives/24404.html

验证 JWT,最重要的是验证 verify_signature
当验证签名的时候，利用公钥或者密钥来解密 Sign，和 base64UrlEncode(header) + “.” + base64UrlEncode(payload) 的内容完全一样的时候，表示验证通过。

JWS 的 x5c 头字段中包含一个证书链（x509），第一个证书包含用于验证 JWS 签名的公钥。

证书可以从苹果 Apple PKI 页面下载
https://www.apple.com/certificateauthority/

x5c 证书链中最后一个证书，对应苹果的证书 Apple Root CA – G3 Root，但我们需要把 .cer 转换成 .pem 格式
openssl x509 -inform der -in AppleRootCA-G3.cer -out AppleRootCA-G3.pem

X.509：是一种证书标准，主要定义了证书中应该包含哪些内容。其详情可以参考 RFC5280，SSL 使用的就是这种证书标准。 同样的 X.509 证书，可能有不同的编码格式，目前有以下两种编码格式:
DER：Distinguished Encoding Rules，打开看是二进制格式，不可读.
PEM：Privacy Enhanced Mail，打开看文本格式，以”—–BEGIN…”开头，”—–END…”结尾,内容是BASE64编码。
AppleRootCA-G3.pem 内容，和 x5c 证书链中最后一个证书的内容一样

验证的逻辑是:
用苹果提供的 AppleRootCA-G3.cer 证书内容验证 JWT x5c 证书链中最后一个证书，然后利用 x509 证书链规范，验证剩下的每个证书链，最后用x5c 证书链中的第一个证书的公钥，来验证 JWT。