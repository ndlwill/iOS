静态库:
链接时会被完整的复制到可执行文件中，被多次使用就有多分拷贝。
抖音和微信的可执行文件加载静态库时，每个可执行文件链接时都要加载这份静态库。

动态库:
系统的动态库与我们自己打包的动态库还不大一样，先来看一下系统的动态库。
系统动态库：
链接时不复制，程序运行时由系统动态加载到内存，系统只加载一次，多个程序共用，节省内存。
抖音和微信的可执行文件加载动态库时，内存中只有一份动态库，不用加载到可执行文件。
自己打包的动态库：
自己打包的动态库，则是在应用程序里的，但是与静态库不同，它不在可执行文件中。

制作 .a 静态库
（1）创建
首先创建一个工程，选择为 Static Library 类型。
（2）编译
然后我们在 Products 下就可以看到一个 .a 文件，但是现在它还是不存在的，需要我们 command+B 编译一下，就可以找到它了，由于我们是在模拟器下编译的，所以它生成在 “Debug-iphonesimulator” 文件夹下。

制作 .framework 静态库
（1）首先创建一个工程，选择为 Framework 类型。
（2）这里要设置一下，因为默认是动态库，要改为静态库。Build Settings =>Linking=> Mach-O Type 改为 Static Library：


制作动态库
（1）制作步骤
动态库有很多种，目前像 .tbd .dylib 这种的动态库我们无法打包，只能打包 .framework 格式的动态库。
系统默认设置的就是动态类型，然后就是将新添加的头文件公开，整个流程和 .framework 静态库一样
（2）测试
创建一个项目来测试一下这个动态库，直接拖入工程，引入头文件，调用动态库中的方法，然后编译，编译通过没问题。
但是当我们运行的时候，会报下面的错误：
dylb：__abort_with_payload
其实这是因为没有将它添加到 Embedded 中，在老板的 Xocde 中，Embedded 是单独设置的，但是不知道从那一版 Xocde 开始，Embedded和其他设置合并在一起了。现在我们只需要在 "General => Frameworks, Libraries, and Embedded Content" 中，把 "Do Not Embed" 改为 "Embed & Sign" 即可
