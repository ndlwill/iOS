用Xcode 11创建一个Single View App项目，会多生成一些文件和代码:
多了SceneDelegate代理
Info.plist里面多了Application Scene Manifest配置

适配方案——不支持多场景窗口:
将多出来的文件和代码删除就好了
删除SceneDelegate代理文件 (可选)
删除 Info.plist里面的Application Scene Manifest配置（一定要删除）
删除 AppDelegate代理的两个方法：
application:configurationForConnectingSceneSession:options:
application: didDiscardSceneSessions:
这两个方法一定要删除，否则使用纯代码创建的Window和导航控制器UINavigationController不会生效。

适配方案——支持多场景窗口:
//AppDelegate
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    //在Xcode11创建的项目中，需要自行给AppDelegate添加属性window
    //自定义Window
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    //自定义导航控制器
    UINavigationController *rootNavgationController = [[UINavigationController alloc] initWithRootViewController:[ViewController new]];
    //导航控制是rootViewController
    self.window.rootViewController = rootNavgationController;
    //现实Window
    [self.window makeKeyAndVisible];
    return YES;
}

Xcode 11创建的项目中，写入上述代码运行App，结果发现这部分代码虽然执行了，但是通过UIViewController的self.navigationController获取的导航竟然是nil。
从现象反推过程，既然代码执行了，那么很大可能是self.window没有显示在屏幕上。
查看iOS13下UIWindow的定义，有这么一条
// If nil, window will not appear on any screen.
// changing the UIWindowScene may be an expensive operation and should not be done in performance-sensitive code
@property(nullable, nonatomic, weak) UIWindowScene *windowScene API_AVAILABLE(ios(13.0));
如果UIWindow的属性windowScene为nil，那么这个UIWindow则不会显示在任何屏幕上。

解决办法是在SceneDelegate的方法scene:willConnectToSession:options:中创建UIWindow和UINavigationController
//SceneDelegate
- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    self.window.windowScene = (UIWindowScene*)scene;
    UINavigationController *rootNavgationController = [[UINavigationController alloc] initWithRootViewController:[ViewController new]];
    self.window.rootViewController = rootNavgationController;
    [self.window makeKeyAndVisible];
}

#####同时兼容iOS13和iOS12及以下#####
AppDelegate部分代码
//AppDelegate.h

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end

//AppDelegate.m
@implementation AppDelegate
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    if (@available(iOS 13,*)) {
        return YES;
    } else {
        self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
        UINavigationController *rootNavgationController = [[UINavigationController alloc] initWithRootViewController:[ViewController new]];
        self.window.rootViewController = rootNavgationController;
        [self.window makeKeyAndVisible];
        return YES;
    }
}

#pragma mark - UISceneSession lifecycle

- (UISceneConfiguration *)application:(UIApplication *)application configurationForConnectingSceneSession:(UISceneSession *)connectingSceneSession options:(UISceneConnectionOptions *)options {
    return [[UISceneConfiguration alloc] initWithName:@"Default Configuration" sessionRole:connectingSceneSession.role];
}

@end

SceneDelegate部分代码
//SceneDelegate.h
@interface SceneDelegate : UIResponder <UIWindowSceneDelegate>

@property (strong, nonatomic) UIWindow * window;

@end

//SceneDelegate.m
@implementation SceneDelegate
- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {
- 
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    self.window.windowScene = (UIWindowScene*)scene;
    UINavigationController *rootNavgationController = [[UINavigationController alloc] initWithRootViewController:[ViewController new]];
    self.window.rootViewController = rootNavgationController;
    [self.window makeKeyAndVisible];
}

@end

==========KVC
部分方法属性不允许使用 valueForKey、setValue:forKey:  来获取或者设置私有属性，具体表现为在运行时会直接崩溃

如:
[textField setValue:[UIColor red] forKeyPath:@"_placeholderLabel.textColor"];
//替换为
textField.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@"输入" attributes:@{NSForegroundColorAttributeName: [UIColor red]}];

// 崩溃 api
UITextField *textField = [searchBar valueForKey:@"_searchField"];

// 替代方案 1，使用 iOS 13 的新属性 searchTextField
searchBar.searchTextField.placeholder = @"search";

// #####替代方案 2，遍历获取指定类型的属性#####
- (UIView *)findViewWithClassName:(NSString *)className inView:(UIView *)view{
    Class specificView = NSClassFromString(className);
    if ([view isKindOfClass:specificView]) {
        return view;
    }
    
    if (view.subviews.count > 0) {
        for (UIView *subView in view.subviews) {
            UIView *targetView = [self findViewWithClassName:className inView:subView];
            if (targetView != nil) {
                return targetView;
            }
        }
    }
    
    return nil;
}

// 调用方法
 UITextField *textField = [self findViewWithClassName:@"UITextField" inView:_searchBar];

==========Dark Mode
如果不打算适配 Dark Mode，可以直接在 Info.plist 中添加一栏：User Interface Style : Light，即可在应用内禁用暗黑模式。

DarkMode 主要从两个方面来适配，一是颜色，二是图片

iOS 13 之前 UIColor 只能表示一种颜色，从 iOS 13 开始 UIColor 是一个动态的颜色，它可以在 LightMode 和 DarkMode 拥有不同的颜色。
// UIColor 增加的颜色
@available(iOS 13.0, *)
open class var systemBackground: UIColor { get }
@available(iOS 13.0, *)
open class var label: UIColor { get }
@available(iOS 13.0, *)
open class var placeholderText: UIColor { get }
...

view.backgroundColor = UIColor.systemBackground
label.textColor = UIColor.label
placeholderLabel.textColor = UIColor.placeholderText

自己创建一个动态的 UIColor:
iOS 13 下 UIColor 增加了一个初始化方法，我们可以用这个初始化方法来创建动态颜色。
@available(iOS 13.0, *)
public init(dynamicProvider: @escaping (UITraitCollection) -> UIColor)
当系统从 LightMode 和 DarkMode 之间切换的时候就会触发这个回调。
这个闭包返回一个 UITraitCollection 类，我们要用这个类的 userInterfaceStyle 属性。 userInterfaceStyle 是一个枚举
@available(iOS 12.0, *)
public enum UIUserInterfaceStyle : Int {
    case unspecified
    case light
    case dark
}
这个枚举会告诉我们当前是 LightMode or DarkMode

let backgroundColor = UIColor { (trainCollection) -> UIColor in
    if trainCollection.userInterfaceStyle == .dark {
        return UIColor.black
    } else {
        return UIColor.white
    }
}
view.backgroundColor = backgroundColor

let labelColor = UIColor { (trainCollection) -> UIColor in
    if trainCollection.userInterfaceStyle == .dark {
        return UIColor.white
    } else {
        return UIColor.black
    }
}
label.textColor = labelColor

图片适配：
在右侧工具栏中点击最后一栏，点击 Appearances 选择 Any, Dark

如何获取当前模式 (Light or Dark)：
我们可以在 UIViewController 或 UIView 中调用 traitCollection.userInterfaceStyle 来获取当前视图的样式
if trainCollection.userInterfaceStyle == .dark {
    // Dark
} else {
    // Light
}
那么我们什么时候需要用这样的方法做适配呢，比如说当我们使用 CGColor 的时候，上面说到 UIColor 在 iOS 13 下变成了一个动态颜色，
但是 CGColor 仍然只能表示单一的颜色，所以当我们使用到 CGColor 的时候，我们就可以用上面的方法做适配。

对于 CGColor 我们还有还有另一种适配方法
let resolvedColor = labelColor.resolvedColor(with: traitCollection)
layer.borderColor = resolvedColor.cgColor
resolvedColor 方法会根据传递进去的 traitCollection 返回对应的颜色。

对于 UIImage 我们也有类似的方法
let image = UIImage(named: "icon")
let resovledImage = image?.imageAsset?.image(with: traitCollection)

监听模式变化：
上面我们说了如何获取当前模式，但是我们要搭配监听方法一起使用
当 light dark 模式切换的时候，要把上面的代码再执行一遍。系统为我们提供了一个回调方法，当 light dark 切换时就会触发这个方法。
override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
    super.traitCollectionDidChange(previousTraitCollection)
    if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {
        // 适配代码
    }
}

如何改变当前模式:
我们可以看到在动图中是直接改系统的模式，从而让 App 的模式修改，但是对于某些有夜间模式功能的 App 来说，如果用户打开了夜间模式，那么即使现在系统是 light 模式，也要强制用 dark 模式。
我们可以用以下代码将当前 UIViewController 或 UIView 的模式。
overrideUserInterfaceStyle = .dark
print(traitCollection.userInterfaceStyle)  // dark
我们可以看到设置了 overrideUserInterfaceStyle 之后，traitCollection.userInterfaceStyle 就是我们设置后的模式了

需要给每一个 Controller 和 View 都设置一遍吗?
答案是不需要
当我们设置一个 controller 为 dark 之后，这个 controller 下的 view，都会是 dark mode，但是后续推出的 controller 仍然是跟随系统的样式。

因为苹果对 overrideUserInterfaceStyle 属性的解释是这样的。
当我们在一个普通的 controlle, view 上重写这个属性，只会影响当前的视图，不会影响前面的 controller 和后续推出的 controller。

但是当我们在 window 上设置 overrideUserInterfaceStyle 的时候，就会影响 window 下所有的 controller, view，包括后续推出的 controller。

如果 App 打开夜间模式，那么很简单我们只需要设置 window 的 overrideUserInterfaceStyle 属性就好了。

当我们用 Xcode11 创建项目，我们会发现项目结构发生了变化，window 从 AppDelegate 移到 SceneDelegate 中。那么如何获取 SceneDelegate 中的 window 呢，代码如下:
// 这里就简单介绍一下，实际项目中，如果是iOS应用这么写没问题，但是对于iPadOS应用还需要判断scene的状态是否激活
let scene = UIApplication.shared.connectedScenes.first?.delegate as? SceneDelegate
scene?.window?.overrideUserInterfaceStyle = .dark

Status Bar:
之前 Status Bar 有两种状态，default 和 lightContent
现在 Status Bar 有三种状态，default,  darkContent 和 lightContent
现在的 darkContent 对应之前的 default，现在的 default 会根据情况自动选择 darkContent 和 lightContent

UIActivityIndicatorView:
之前的 UIActivityIndicatorView 有三种 style 分别为 whiteLarge, white 和 gray，现在全部废弃。
增加两种 style 分别为 medium 和 large，指示器颜色用 color 属性修改

如何在模式切换时打印日志
在 Arguments 中的 Arguments Passed On Launch 里面添加下面这行命令。
-UITraitCollectionChangeLoggingEnabled YES

https://mp.weixin.qq.com/s/qliFbqRdkkE30vslojfJCA
使用 QMUITheme 实现换肤并适配 iOS 13 Dark Mode

https://juejin.im/post/6844903859739967495


==========Sign In with Apple
如果你的应用使用了第三方或社交账号登录服务（如Facebook、Google、Twitter、LinkedIn、Amazon、微信等）来设置或验证用户的主账号，就必须把 Sign In With Apple 作为同等的选项添加到应用上。

==========presentViewController

==========UISegmentedControl 默认样式改变
原本设置选中颜色的 tintColor 已经失效，新增了 selectedSegmentTintColor 属性用以修改选中的颜色。

==========h5的适配
https://blog.csdn.net/u012413955/article/details/92198556

==========推送的 deviceToken 获取到的格式发生变化
#include <arpa/inet.h>
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    if (![deviceToken isKindOfClass:[NSData class]]) return;
    const unsigned *tokenBytes = [deviceToken bytes];
    NSString *hexToken = [NSString stringWithFormat:@"%08x%08x%08x%08x%08x%08x%08x%08x",
                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),
                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),
                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];
    NSLog(@"deviceToken:%@", hexToken);
}

==========UISearchBar 黑线处理
for (UIView *view in _searchBar.subviews.lastObject.subviews) {
    if ([view isKindOfClass:NSClassFromString(@"UISearchBarBackground")]) {
        view.layer.contents = nil;
        break;
    }
} 

==========UITabBarButton 不同状态下结构不同
在 iOS 13 中，UITabBarButton 的控件结构会随着其选中状态的变化而变化，主要体现为 UITabBarSwappableImageView 和 UITabBarButtonLabel 的位置变化。
在选中时和以前一样，是 UITabBarButton 的子控件。
而在未选中状态下放到了 UIVisualEffectView 的 _UIVisualEffectContentView 里面。

把红点添加到 UITabBarButton 上，位置再根据 UITabBarSwappableImageView 调整即可。

==========UINavigationBar
从 iOS 11 开始，UINavigationBar 使用了自动布局，左右两边的按钮到屏幕之间会有 16 或 20 的边距。

为了避免点击到间距的空白处没有响应，通常做法是：定义一个 UINavigationBar 子类，重写 layoutSubviews 方法，在此方法里遍历 subviews 获取 _UINavigationBarContentView，并将其 layoutMargins 设置为 UIEdgeInsetsZero。
- (void)layoutSubviews {
    [super layoutSubviews];
    
    for (UIView *subview in self.subviews) {
        if ([NSStringFromClass([subview class]) containsString:@"_UINavigationBarContentView"]) {
            subview.layoutMargins = UIEdgeInsetsZero;
            break;
        }
    }
}
然而，这种做法在 iOS 13 中会导致崩溃:
*** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Client error attempting to change layout margins of a private view'

解决方案:
使用设置 frame 的方式，让 _UINavigationBarContentView 向两边伸展，从而抵消两边的边距。

- (void)layoutSubviews {
    [super layoutSubviews];
    
    for (UIView *subview in self.subviews) {
        if ([NSStringFromClass([subview class]) containsString:@"_UINavigationBarContentView"]) {
            if ([UIDevice currentDevice].systemVersion.floatValue >= 13.0) {
                UIEdgeInsets margins = subview.layoutMargins;
                subview.frame = CGRectMake(-margins.left, -margins.top, margins.left + margins.right + subview.frame.size.width, margins.top + margins.bottom + subview.frame.size.height);
            } else {
                subview.layoutMargins = UIEdgeInsetsZero;
            }
            break;
        }
    }
}

==========UISearchDisplayController
在 iOS 8 之前，我们在 UITableView 上添加搜索框需要使用 UISearchBar + UISearchDisplayController 的组合方式，
而在 iOS 8 之后，苹果就已经推出了 UISearchController 来代替这个组合方式
在 iOS 13 中，如果还继续使用 UISearchDisplayController 会直接导致崩溃

在 iOS 13 中终于可以获取直接获取搜索的文本框：
_searchBar.searchTextField.text = @“search";

==========CNCopyCurrentNetworkInfo
从 iOS 12 开始，CNCopyCurrentNetworkInfo 函数需要开启 Access WiFi Information 的功能后才会返回正确的值。
在 iOS 13 中，这个函数的使用要求变得更严格，根据 CNCopyCurrentNetworkInfo 文档说明，应用还需要符合下列三项条件中的至少一项才能得到正确的值：
使用 Core Location 的应用， 并获得定位服务权限。
使用 NEHotspotConfiguration 来配置 WiFi 网络的应用。
目前正处于启用状态的 VPN 应用。

iOS13 以后只有开启了 Access WiFi Information capability，才能获取到 SSID 和 BSSID wi-fi or wlan 相关使用变更
可以先获取用户位置权限才能返回SSID。

==========蓝牙权限需要申请
iOS13以前，使用蓝牙时可以直接用，不会出现权限提示，iOS13后，再使用就会提示了。 在info.plist里增加
<key>NSBluetoothAlwaysUsageDescription</key> 
<string>我们要一直使用您的蓝牙</string>

在 iOS 13 中，苹果将原来蓝牙申请权限用的 NSBluetoothPeripheralUsageDescription 字段，替换为 NSBluetoothAlwaysUsageDescription 字段。

根据 MAC 地址容易推算出用户当前所处的地理位置。

解决方案：
官网文档也有说明，就是在 Info.plist 中把两个字段都加上。
For deployment targets earlier than iOS 13, add both NSBluetoothAlwaysUsageDescription and NSBluetoothPeripheralUsageDescription to your app’s Information Property List file.

==========AppDelegate和SceneDelegate
这是为了 iPadOS 的多进程准备的

在iOS 13（及以后版本）上，SceneDelegate将负责AppDelegate的某些功能。 
最重要的是，window（窗口）的概念已被scene（场景）的概念所代替。 一个应用程序可以具有不止一个场景，而一个场景现在可以作为您应用程序的用户界面和内容的载体（背景）。

尤其是一个具有多场景的App的概念很有趣，因为它使您可以在iOS和iPadOS上构建多窗口应用程序。
例如，文档编辑器App中的每个文本文档都可以有自己的场景。 用户还可以创建场景的副本，同时运行一个应用程序的多个实例（类似多开）。

现在，一个新的iOS项目会自动创建一个SceneDelegate类，其中包括我们熟悉的生命周期事件，例如active，resign和disconnect。
AppDelegate类中多了两个与“scene sessions”相关的新方法：application(_:configurationForConnecting:options:) 和 application(_:didDiscardSceneSessions:)
Info.plist文件中提供了”Application Scene Manifest“配置项，用于配置App的场景，包括它们的场景配置名，delegate类名和storyboard

iOS12及之前生命周期的各方法：
application:(UIApplication *)application didFinishLaunchingWithOptions
// 初始化
application:(UIApplication *)applicationDidBecomeActive
// 已经被激活
application:(UIApplication *)applicationWillResignActive
// 即将被挂起
application:(UIApplication *)applicationDidEnterBackground
// 已经进入后台
application:(UIApplication *)applicationWillEnterForeground
// 即将回到前台
application:(UIApplication *)applicationWillTerminate
// 即将被杀死

iOS13之后生命周期的各方法：
scene:(UIScene *)scene willConnectToSession
// 初始化
sceneDidBecomeActive:(UIScene *)scene
// 已经被激活
sceneWillResignActive:(UIScene *)scene
// 即将被挂起
sceneDidEnterBackground:(UIScene *)scene
// 已经进入后台
sceneWillEnterForeground:(UIScene *)scene
// 即将回到前台
sceneDidDisconnect:(UIScene *)scene
// 即将被杀死

Windows在ios13之前就已经出现了，它们代表应用程序运行的视口（viewport）。UISceneSession控制用户看到的可见窗口，你创建的UIWindow是你的应用的容器视图(container view)。

iOS13之前，appDelegate的职责全权处理App生命周期和UI生命周期
iOS13之后，appDelegate的职责是处理App生命周期和新的SceneSession生命周期。
所有UI生命周期交给SceneDelegate处理，appDelegate不在负责UI生命周期。

Scene Sessions:
在iOS13中AppDelegate中有两个管理Senen Session的代理函数。在您的应用创建scene（场景）后，“scene session”对象将跟踪与该场景相关的所有信息。
这两个函数是:
application(_:configurationForConnecting:options:), 会返回一个创建场景时需要的UISceneConfiguration对象
application(_:didDiscardSceneSessions:), 当用户通过“应用切换器”关闭一个或多个场景时会被调用

application(_:didDiscardSceneSessions:)很简单。 当用户通过“应用程序切换器”关闭一个或多个场景时，即会调用该方法。 您可以在该函数中销毁场景所使用的资源，因为不会再需要它们。
了解application(_:didDiscardSceneSessions:)与sceneDidDisconnect（_ :)的区别很重要，
后者仅在场景断开连接时调用，不会被丢弃，它可能会重新连接。而application（_：didDiscardSceneSessions：）发生在使用【应用程序切换器】退出场景时。