https://github.com/fastlane/fastlane
https://docs.fastlane.tools/

https://www.jianshu.com/p/1e26a6688b8a

export:
显示所有的环境变量

export 可新增，修改或删除环境变量，供后续执行的程序使用
export 的效力仅限于该次登陆操作
# export -p //列出当前的环境变量值
# export MYENV //定义环境变量
定义环境变量赋值
# export MYENV=7 //定义环境变量并赋值


https://docs.fastlane.tools/actions


======================================================================bundle
bundle --help

bundle exec [OPTIONS]          # Run the command in context of the bundle

bundle install [OPTIONS]       # Install the current environment to the system

bundle update [OPTIONS]        # Update the current environment
// ###bundle命令操作 可以联想cocoapods的pod 两者类似###
处于Gemfile文件夹的路径：bundle env
// 更新fastlane
bundle update fastlane

Update your plugins:
Run fastlane update_plugins to make sure to have all the latest plugins and their dependencies installed.

Use bundle exec:
Run fastlane using bundle exec fastlane [lane] to make sure your plugins are properly loaded.
This is required when you use plugins from a local path or a git remote.

======================================================================environment variables

Set up environment variables:
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
You can find your shell profile at ~/.bashrc, ~/.bash_profile, ~/.profile or ~/.zshrc depending on your system

检查Ruby版本，需要2.0及以上版本:
ruby -v

检查Xcode命令行工具是否安装:
xcode-select --install

-------------------------------------------Install Start
Install fastlane using:
# Using RubyGems
sudo gem install fastlane -NV // ##推荐## 推荐用RubyGems安装
# Alternatively using Homebrew
brew install fastlane
或者
通过bundle来管理Gemfile来安装fastlane && cocoapods
Use a Gemfile
It is recommended that you use a Gemfile to define your dependency on fastlane
Create a ./Gemfile in the root directory of your project with the content
source "https://rubygems.org"
gem "fastlane"

Run [sudo] bundle update and add both the ./Gemfile and the ./Gemfile.lock to version control
Every time you run fastlane, use bundle exec fastlane [lane]
On your CI, add [sudo] bundle install as your first build step
To update fastlane, just run [sudo] bundle update fastlane
-------------------------------------------Install End

============================================================fastlane 命令
fastlane -v
fastlane -h

cd /Users/youdone-ndl/Desktop/fv-app-apple/AiJiaSuClientIos/fastlane
cd /Users/youdone-ndl/Desktop/fv-app-apple/AiJiaSuClientIos
fastlane lanes // 查看所有的lanes

fastlane [lane] --verbose # will show a lot more information that might be useful to resolve the issue.

identifier = get_info_plist_value(path: "./Info.plist", key: "CFBundleIdentifier")
fastlane action get_info_plist_value
fastlane run get_info_plist_value

Actions:
http://docs.fastlane.tools/advanced/actions/

Lanes:
http://docs.fastlane.tools/advanced/lanes/

============================================================fastlane init
ADC为开发者网站，ITC是ItunesConnect网站

在证书都配置好的情况下
Navigate your terminal to your project's directory and run:
fastlane init

Multiple App Store Connect teams found, please enter the number of the team you want to use:
1) "FLYVPN LIMITED" (118783449)
2) "Shanghai Youdun Network Technology Co., Ltd" (118361933)
Multiple teams found on the Developer Portal, please enter the number of the team you want to use:
1) YVJM8BZ3H5 "FLYVPN LIMITED" (Company/Organization)
2) N82WKSN6R7 "Shanghai Youdun Network Technology Co., Ltd" (Company/Organization)

Logging in with your Apple ID was successful
Your app 'com.aijiasuinc.AiJiaSuClient' is available in your Apple Developer Portal
Your app 'com.aijiasuinc.AiJiaSuClient' is available on App Store Connect

选择允许fastlane管理ITC上的元数据后，会将ITC上的所有元数据与截图下载到metadata和screenshots文件夹
Would you like fastlane to manage your app's metadata?
y

如果Deliverfile，screenshots和metadata目录没被创建，可以运行deliver init来创建。
下载iTC上的截图deliver download_screenshots,下载iTC上的元数据 deliver download_metadata

Successfully created new configuration files.
Successfully downloaded large app icon
Successfully downloaded all existing screenshots
Successfully created new Deliverfile at path './fastlane/Deliverfile'
Successfully generated fastlane configuration
fastlane lanes
How to customize your Fastfile：https://docs.fastlane.tools/actions

============================================================文件配置
1、配置.env
https://docs.fastlane.tools/advanced/other/#environment-variables
2、配置Appfile
Appfile文件用于指定 app_identifier, apple_id, team_id, itc_team_id等一些fastlane需要用到的信息
https://docs.fastlane.tools/advanced/Appfile/

The Appfile stores useful information that are used across all fastlane tools like your Apple ID or the application Bundle Identifier, 
to deploy your lanes faster and tailored on your project needs.
ex:
app_identifier "net.sunapps.1" # The bundle identifier of your app
apple_id "felix@krausefx.com"  # Your Apple email address
3、配置Deliverfile
https://docs.fastlane.tools/actions/deliver/
用于配置应用在 ITC 中的元数据信息
4、配置Fastfile
fastlane 中的块和lane
我们打包、发布等操作都是通过这个文件来执行

Fastfile里面包含的块类型有以下几种：
before_all 用于执行任务之前的操作，比如使用cocopods更新pod库，只执行一次
before_each 每次执行 lane 之前都会执行一次
lane 定义用户的主要任务流程。例如打包ipa，执行测试等等
after_each 每次执行 lane 之后都会执行一次
after_all 用于执行任务之后的操作，比如发送邮件，通知之类的
error 在执行上述情况任意环境报错都会中止并执行一次

lane的组成:


============================================================ENV用法
https://docs.fastlane.tools/advanced/other/#environment-variables

You can define environment variables in a .env or .env.default file in the same directory as your Fastfile
Environment variables are loaded using dotenv：https://github.com/bkeepers/dotenv

ex:
WORKSPACE=YourApp.xcworkspace

我们可以在fastlane下创建一个名为.env 的文件，自定义所需的临时变量
然后Fastlane的三个配置文件（Appfile、Deliverfile和Fastfile）分别从.env文件中通过ENV['xxxx']读取配置信息。

.env文件为隐藏文件，可使用如下命令查看：
$ defaults write com.apple.finder AppleShowAllFiles -boolean true;
$ killall Finder

fastlane also has a --env option that allows loading of environment specific dotenv files
.env and .env.default will be loaded before environment specific dotenv files are loaded
The naming convention for environment specific dotenv files is .env.<environment>
For example, fastlane <lane-name> --env development will load .env, .env.default, and .env.development
Alternatively, as environment variables are not a fastlane specific thing, you can also use standard methods to set them:
DELIVER_USER="felix@krausefx.com" fastlane test
or
export DELIVER_USER="felix@krausefx.com";
fastlane test
Although it kind of defeats the purpose of using them in the first place (not to have their content in any files), you can also set them in your Fastfile:
ENV["DELIVER_USER"] = "felix@krausefx.com"

  #APP唯一标识符
  APP_IDENTIFIER = "com.xxx.xx"

  #苹果开发者账号
  APPLE_ID = "xx@xxx.com"
  
  #ADC Team ID
  TEAM_ID = "CN*****SEU"

  #ITC Team ID
  ITC_TEAM_ID = "11*****89"

  #设置shell的语言环境
  LANG = "en_US.UTF-8"
  LC_ALL = "en_US.UTF-8"

  #工程名称
  SCHEME_NAME = "YourProjectName"

  #App 元数据及截图存放路径
  METADATA_PATH = "./metadata"
  SCREENSHOTS_PATH = "./screenshots"

  #ipa输出文件夹路径
  OUTPUT_DIRECTORY = "/Users/xx/Desktop/xxx/ipa"

  #App 元数据及截图下载时 直接覆盖 不询问
  DELIER_FORCE_OVERWRITE= true

  #更新描述
  UPDATE_DESCRIPTION = "fastlane自动打包上传测试"

  #自动提交审核
  SUBMIT_FOR_REVIEW = false

  #审核通过后立刻发布
  AUTOMATIC_RELEASE = false

  #PP文件
  PP_ADHOC = "xxxxxx_ADHoc"
  PP_APPSTORE = "xxxxxx_Distribution"

============================================================配置Deliverfile
# The Deliverfile allows you to store various App Store Connect metadata
# For more information, check out the docs
# https://docs.fastlane.tools/actions/deliver/

############################# 基本信息 ####################################

# bundle identifier
app_identifier ENV['APP_IDENTIFIER']

# Apple ID用户名
username ENV['APPLE_ID']

# 版权声明
# copyright "2019 xxx Inc"

# 支持语言
supportedLanguages = {
  "cmn-Hans" => "zh-Hans"
}

# app 名称
# name({
# 'zh-Hans' => "APPDemo"
# })

# 副标题
# subtitle(
#   'zh-Hans' => "小鱼小鱼，虾米虾米"
# )

# App价格
#price_tier 0

# 应用程序图标的路径 1024*1024
app_icon './fastlane/metadata/app_icon.jpg'

# 屏幕截图的文件夹的路径
screenshots_path ENV['SCREENSHOTS_PATH']

# 元数据的路径
metadata_path ENV['METADATA_PATH']


###################################  类别配置 ###################################

# 参考网站https://docs.fastlane.tools/actions/upload_to_app_store/#reference
# 设置 App 的类别.这里可以设置一个主要类别,一个次要类别.

# 主要类别 
primary_category "MZGenre.Lifestyle"
# 主要类别第一个子类别 无
# primary_first_sub_category
# 主要类别第二个子类别 无
# primary_second_sub_category

# 要设置的次要类别
secondary_category "MZGenre.Utilities"
# 设置的次要第一个子类别 无
# secondary_first_sub_category  
# 设置的次要第二个子类别 无
# secondary_second_sub_category


################################## 关键字\描述等信息 ###################################

# 搜索关键字
# keywords(
#  "zh-Hans" => "FastLane, 美女"
# )

# 技术支持网址
# support_url({
#  'zh-Hans' => "http://www.baidu.com"
# })

# 营销网址
#marketing_url({ 
#  'zh-Hans' => "http://www.baidu.com"
#})

# 隐私政策网址
#privacy_url({
#  'zh-Hans' => "http://www.baidu.com"
#})

# 本地化宣传文本信息介绍
#promotional_text( 
#  "zh-Hans" => "本地化宣传文本信息介绍",
#)

# app描述信息
#description({ 
#  'zh-Hans' => "APP的描述信息,用于APP功能的描述和介绍不能少于10个字符"
#})

# 版本描述
#release_notes({
#  'zh-Hans' => "这是第一个版本哦"
#})


################################## 分级 ########################################

#年龄分级配置
#app_rating_config_path "./fastlane/metadata/itunes_rating_config.json" 


################################# 提交审核信息等 #########################################

# 提交审核信息:加密, idfa 等
submission_information({    
    export_compliance_encryption_updated: false,
    export_compliance_uses_encryption: false,
    content_rights_contains_third_party_content: false,
    add_id_info_uses_idfa: false
})

# # 应用审核小组的联系信息 app 审核信息
# app_review_information(
#   first_name: "name",
#   last_name: "name",
#   phone_number: "手机号",
#   email_address: "email",
#   demo_user: "测试账号用户名",
#   demo_password: "测试账号密码",
#   notes: "noting"
# )

# run_precheck_before_submit true

# 在上传新截图之前，先清除所有之前上传的截图
overwrite_screenshots true

# 下载 metadata 及 screenshots 时直接覆盖，不询问
force true

# 不上传截图
skip_screenshots true

# 是否自动提交审核,true表示立马提交审核
submit_for_review ENV['SUBMIT_FOR_REVIEW']

# 审核通过后是否立刻发布,false表示需要手动发布
automatic_release ENV['AUTOMATIC_RELEASE']

============================================================配置Fastfile
Fastfile里面包含的块类型有以下几种：
before_all 用于执行任务之前的操作，比如使用cocopods更新pod库，只执行一次
before_each 每次执行 lane 之前都会执行一次
lane 定义用户的主要任务流程。例如打包ipa，执行测试等等
after_each 每次执行 lane 之后都会执行一次
after_all 用于执行任务之后的操作，比如发送邮件，通知之类的
error 在执行上述情况任意环境报错都会中止并执行一次


我们通俗的把一个lane理解为一个任务，每个任务都负责一个功能。 
然后我们调用不同的任务，来实现打包、上传到testFlight、上传到app store等功能。 
每个任务里可以调用其他的小任务，可以理解为函数，gym、deliver这些Action则是已经给我们封装好的函数。

============================================================action
https://docs.fastlane.tools/actions/

fastlane actions:
To get a list of all available parameters for build_app,run: fastlane action build_app
gym	编译打包生成ipa文件,又名build_ios_app或build_app
building your app using an action called build_app

upload_to_testflight:
To get a list of all available options, run: fastlane action upload_to_testflight

============================================================Fastlane插件管理
https://docs.fastlane.tools/plugins/available-plugins/
https://docs.fastlane.tools/plugins/plugins-troubleshooting/

查找插件:
使用fastlane search_plugins查找所有插件，使用fastlane search_plugins [query]查找指定插件

安装插件:
使用fastlane add_plugin [name]安装插件

会用到的两个插件:
fastlane-plugin-versioning：用来修改build版本号和version版本号。
fastlane-plugin-pgyer：用来上传ipa包到蒲公英。

插件使用方法:
使用fastlane action pgyer 查找某个action的使用方法和参数

Allows to set/get app version and build number directly to/from Info.plist:
fastlane add_plugin versioning

{
Gemfile and Pluginfile:
Your Gemfile should look something like this:
gem "fastlane"

plugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')
eval_gemfile(plugins_path) if File.exist?(plugins_path)

Your Pluginfile should look something like this:
# Autogenerated by fastlane
gem 'fastlane-plugin-ruby'
}

cd到fastlane文件夹的路径
查看fastlane-plugin-versioning里面action的用法:
fastlane action get_version_number_from_xcodeproj

============================================================两步验证
如果你的苹果账户开启了两步验证，将会自动询问你使用手机进行验证。
结果会话将会存储在 ~/.spaceship/[email]/cookie中。这个会话在一个月内是有效的

使用以下命令生成一个web session：
fastlane spaceauth -u user@example.org

这个将会给你授权，并提供一个会话字符串：
export FASTLANE_SESSION='---\n- !ruby/object:HTTP::Cookie\n  name: DES5c148586dfd451e55afbaaa5f62418f91\n  value: HSARMTKNSRVTWFla1+yO4gVPowH17VaaaxPFnUdMUegQZxqy1Ie1c2v6bM1vSOzIbuOmrl/FNenlScsd/NbF7/Lw4cpnL15jsyg0TOJwP32tC/NguPiyOaaaU+jrj4tf4uKdIywVaaaFSRVT\n  domain: idmsa.apple.com\n  for_domain: true\n  path: "/"\n  secure: true\n  httponly: true\n  expires: 2016-04-27 23:55:56.000000000 Z\n  max_age: \n  created_at: 2016-03-28 16:55:57.032086000 -07:00\n  accessed_at: 2016-03-28 19:11:17.828141000 -07:00\n'


============================================================fastlane lane
desc "新创建一个app"
lane :create_app do
​    produce(
      username: 'test@qq.com',
      app_identifier: 'com.company.TestProject',
      app_name: '测试工程',
      language: 'Simplified Chinese',
      app_version: '1.0',
      sku: '123', # 注意，sku必须大于2个字符
      team_name: 'DNxxxx', # only necessary when in multiple teams
      #如果只在AppleDeveloper创建app，不在iTunesConnect创建app的话
      #skip_itc: true,

      # Optional
      # App services can be enabled during app creation
      enable_services: {
        # access_wifi: "on",             # Valid values: "on", "off"
        # app_group: "on",               # Valid values: "on", "off"
        # apple_pay: "on",               # Valid values: "on", "off"
        # associated_domains: "on",      # Valid values: "on", "off"
        # auto_fill_credential: "on",    # Valid values: "on", "off"
        # data_protection: "complete",   # Valid values: "complete", "unlessopen", "untilfirstauth",
        # game_center: "on",             # Valid values: "on", "off"
        # health_kit: "on",              # Valid values: "on", "off"
        # home_kit: "on",                # Valid values: "on", "off"
        # hotspot: "on",                 # Valid values: "on", "off"
        # icloud: "cloudkit",            # Valid values: "legacy", "cloudkit"
        # in_app_purchase: "on",         # Valid values: "on", "off"
        # inter_app_audio: "on",         # Valid values: "on", "off"
        # passbook: "on",                # Valid values: "on", "off"
        # multipath: "on",               # Valid values: "on", "off"
        # network_extension: "on",       # Valid values: "on", "off"
        # nfc_tag_reading: "on",         # Valid values: "on", "off"
        # personal_vpn: "on",            # Valid values: "on", "off"
        # passbook: "on",                # Valid values: "on", "off" (deprecated)
        # siri_kit: "on",                # Valid values: "on", "off"
        # vpn_configuration: "on",       # Valid values: "on", "off" (deprecated)
        # wallet: "on",                  # Valid values: "on", "off"
        # wireless_accessory: "on",      # Valid values: "on", "off"
        push_notification: "on",       # Valid values: "on", "off"
      }
  )
end

error do |lane, exception|
    #slack(
    #  message: exception.message,
    #  success: false
    #)
end

============================================================fastlane UI Testing使用snapshot与frameit进行自动截屏、加壳
snapshot是基于UI Testing(自动化测试)来实现的

新建一个UI Testing 的 target(如果项目中已经存在，这一步可以略过)
点击左上角的Scheme，选择New Scheme，选择新建的UITests
选择新建的Scheme，选择Edit Scheme，选择Build，勾选Shared和Run

如果你运行自动测试出现Pods库头文件找不到的错
前往PROJECT->Configurations的配置里将UITests在Debug和Release下改成Pod-xx.debug和Pod-xx.release(默认都为None)

https://docs.fastlane.tools/getting-started/ios/screenshots/

fastlane action snapshot
进入项目目录，输入以下命令，会在fastlane目录下生成两个文件:Snapfile和SnapshotHelper.swift
fastlane snapshot init

Open your Xcode project and make sure to do the following:
1) Add a new UI Test target to your project
2) Add the ./fastlane/SnapshotHelper.swift to your UI Test target
   You can move the file anywhere you want
3) Call `setupSnapshot(app)` when launching your app

  let app = XCUIApplication()
  setupSnapshot(app)
  app.launch()

4) Add `snapshot("0Launch")` to wherever you want to trigger screenshots // 在测试用例方法适当位置放入截图代码
5) Add a new Xcode scheme for the newly created UITest target
6) Add a Check to enable the `Shared` box of the newly created scheme

运行fastlane snapshot即可自动截图

Frameit:
使用frameit需要安装依赖库ImageMagick，官方推荐安装方式:
brew install libpng jpeg imagemagick

通过命令fastlane frameit setup或者fastlane frameit download_frames更新最近的设备外壳

简单使用:
# 默认为黑色外壳 支持颜色有white、silver、rose_gold、gold 
frame_screenshots(white: true) #外壳为白色

进阶使用:
如果你需要弄些背景和文字描述，那么你需要通过配置Framefile.json文件去定制化需求。
首先需要你在screenshots文件目录下创建Framefile.json，cd到screenshots目录输入touch Framefile.json

然后进入你的截图多语言zh-Hans目录下，新建title.strings和keyword.strings文件，这两个文件是放标题和关键字的。
这两个.strings文件一定要是UTF-8或者UTF-16 BE with BOM编码，或者直接由Xcode生成，第一行必须是空行

将背景图放在screenshots目录下，新建一个fonts文件夹，里面放你需要用到的字体文件,这里是官方的一个demo:
https://github.com/fastlane/examples/tree/master/MindNode/screenshots

Framefile.json文件：
{
  "default": {
    "keyword": {
      "fonts": [
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["en-US"]
        },
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["zh-Hans"]
        }
      ]
    },
    "title": {
      "fonts": [
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["en-US"]
        },
        {
          "font": "./fonts/PingFang.ttc",
          "supported": ["zh-Hans"]
        }
      ],
      "color": "#545454" // 标题颜色
    },
    // 自定义背景图片
    "background": "./background.jpg",
    // 图的内边距
    "padding": 60,
    // 是否完全显示手机框 false 为底部会被隐藏部分视图
    "show_complete_frame": false,
    // 关键字是否在标题上面 false表示关键字与标题在同一行
    "stack_title" : true,
    // 标题在屏幕下方还是上方 false 为上方
    "title_below_image": false,
    // 外壳颜色 优先级更高 (Valid values are BLACK,WHITE,GOLDandROSE_GOLD`)
    "frame": "GOLD"
  },


  "data": [
    {
      "filter": "1",  // 这是图片名
      "keyword": {
        "color": "#d21559"  // 关键字颜色
      }
    },
    {
      "filter": "2",
      "keyword": {
        "color": "#feb909"
      }
    },
    {
      "filter": "3",
      "keyword": {
        "color": "#aa4dbc"
      }
    },
    {
      "filter": "4",
      "keyword": {
        "color": "#31bb48"
      }
    }
  ]
}


title.strings文件：
"1" = "第一张图标题";
"2" = "第二张图标题";
"3" = "第三张图标题";
"4" = "第四张图标题";

keyword.strings文件：
"1" = "自动";
"2" = "打包";
"3" = "截图";
"4" = "证书";

在Fastfile文件里写个任务：
desc "给截图套壳"
lane :framePic do
  frameit(
    # 白色
    white: true,
    # 使用iPhone 5s替代iPhone SE框架
    use_legacy_iphone5s: true,
    # 使用iPhone 6s替代iPhone 7框架
    use_legacy_iphone6s: true,
    # 使用iPhone X 替代iPhone XS框架
    use_legacy_iphonex: true,
    # 截图所在路径
    path: "./fastlane/screenshots"
  )
end

运行fastlane framePic

snapshot:
Alias for the `capture_ios_screenshots` action
http://docs.fastlane.tools/actions/snapshot/#snapshot

frameit:
Alias for the `frame_screenshots`
https://docs.fastlane.tools/actions/frameit/

============================================================match
https://codesigning.guide/
http://docs.fastlane.tools/actions/match/#match

match:
Alias for the sync_code_signing action

Easily sync your certificates and profiles across your team

A new approach to iOS and macOS code signing: Share one code signing identity across your development team to simplify your codesigning setup and prevent code signing issues.
match creates all required certificates & provisioning profiles and stores them in a separate git repository
Every team member with access to the selected storage can use those credentials for code signing. 
match also automatically repairs broken and expired credentials. It's the easiest way to share signing credentials across teams

match是一种全新的证书和配置文件管理工具，它会把所有需要用到的证书传到git私有库上，
任何需要配置的机器直接用match同步证书。团队所有成员共享一份代码签名，以减免不必要的证书创建。


To get started, create a new private Git repo and run:
match init
To generate and store new certificates and provisioning profiles run:
match appstore
Or:
match development

On a new machine, just run match appstore to install the existing certificates.
If you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, expired or Xcode managed profiles/certificates, 
you can use the match nuke command to completely clear your developer portal.
This command will revoke all certificates and provisioning profiles for a specific environment.
Simply run:
match nuke development
match nuke distribution

建议使用这种方式管理证书，在使用match管理证书前,要先注册一个私有仓库，名字官方建议为certificates
进入项目目录执行:
fastlane match init

官方建议通过命令清除之前的证书和描述文件
删除旧证书和pp文件:
企业账号慎用，销毁描述文件可能会导致App无法打开
fastlane match nuke development  ---开发证书
fastlane match nuke distribution ---apple store 和 adhoc使用此命令  ​
# fastlane match nuke enterprise  ---企业证书

生成证书和pp文件：
lane :manageCert do
    match(
      git_url: "path",  # 指定包含所有证书的git私有仓库地址
      #git_branch: "branch", # 指定所使用的git分支
      type: "appstore",  # 指定创建证书的类型，可用选项：appstore, adhoc, development, enterprise
      username: ENV['APPLE_ID'], # APPle ID
      team_id: ENV['TEAM_ID'], # team ID
      app_identifier: ["tools.fastlane.app", "tools.fastlane.sleepy"],  # 程序的bundle identifier(s)，多个时用逗号分隔
      readonly: true,  # true：仅获取已经存在的证书和描述文件，而不生成新的
      force: true,  # 每次执行match时，是否更新描述文件
      force_for_new_devices: true,  # 当Apple Developer Portal上的设备数量发生变化时，是否更新描述文件
      output_path: "./certs/development", # 导出的证书密钥以及profile文件路径
      verbose: true # 打印详细信息
    )
end

团队管理
关掉Automatically manage signing,使用手动管理证书。
新成员接入时，执行以下命令获取对应的证书文件:
fastlane match development --readonly
fastlane match adhoc --readonly
fastlane match appstore --readonly

首次执行时，会要求输入一个密码，用来对证书进行加密，后续其他机器获取证书时使用该密码进行解密，输入密码后继续按照终端提示进行下一步操作，
match会创建新的证书和描述文件，之后执行会拉取仓库已经存在的。
完成后，git仓库就会生成对应的certs及profiles文件夹来存放证书和配置文件。

Usage:
Setup
1.Optional: Create a new, shared Apple Developer Portal account, something like office@company.com, that will be shared across your team from now on
2.Run the following in your project folder to start using match:
fastlane match init

Git Storage:
Use Git Storage to store all code signing identities in a private git repo, owned and operated by you. The files will be encrypted using OpenSSL.

Multiple teams：
match can store the codesigning files for multiple development teams:

Git Storage：
Use one git branch per team. match also supports storing certificates of multiple teams in one repo, by using separate git branches.
If you work in multiple teams, make sure to set the git_branch parameter to a unique value per team. 
From there, match will automatically create and use the specified branch for you.
match(git_branch: "team1", username: "user@team1.com")
match(git_branch: "team2", username: "user@team2.com")

#####这个注意：要先清除所有的证书和PP
Run:
fastlane match --help
Before running match for the first time, you should consider clearing your existing profiles and certificates using the match nuke command.
After running fastlane match init you can run the following to generate new certificates and profiles:
fastlane match appstore
fastlane match development
This will create a new certificate and provisioning profile (if required) and store them in your selected storage.
If you previously ran match with the configured storage it will automatically install the existing profiles from your storage.
The provisioning profiles are installed in ~/Library/MobileDevice/Provisioning Profiles while the certificates and private keys are installed in your Keychain.

To get a more detailed output of what match is doing use:
fastlane match --verbose
For a list of all available options run:
fastlane action match

Handle multiple targets:
match can use the same one Git repository, Google Cloud, or Amazon S3 Storage for all bundle identifiers.
If you have several targets with different bundle identifiers, supply them as a comma-separated list:
fastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp
You can make this even easier using fastlane by creating a certificates lane like this:
lane :certificates do
  match(app_identifier: ["tools.fastlane.app", "tools.fastlane.app.watchkitapp"])
end

Handle multiple apps per developer/distribution certificate:
If you want to use a single developer and/or distribution certificate for multiple apps belonging to the same development team, 
you may use the same signing identities repository and branch to store the signing identities for your apps:
Matchfile example for both App #1 and #2:
git_url("https://github.com/example/example-repo.git")
git_branch("master")
match will reuse certificates and will create separate provisioning profiles for each app.

Passphrase:
Git Repo storage only

// 第一次match 输入mac登录密码 去访问钥匙串
Enter the password for /Users/youdone-ndl/Library/Keychains/login.keychain-db
This passphrase will be stored in your local keychain with the name fastlane_keychain_login and used in future runs
This prompt can be avoided by specifying the 'keychain_password' option or 'MATCH_KEYCHAIN_PASSWORD' environment variable
Password for login keychain:
Type passphrase again:

When running match for the first time on a new machine, it will ask you for the passphrase for the Git repository. 
This is an additional layer of security: each of the files will be encrypted using openssl. Make sure to remember the password, 
as you'll need it when you run match on a different machine.
To set the passphrase to decrypt your profiles using an environment variable (and avoid the prompt) use MATCH_PASSWORD

New machine:
To set up the certificates and provisioning profiles on a new machine, you just run the same command using:
fastlane match development
You can also run match in a readonly mode to be sure it won't create any new certificates or profiles.
fastlane match development --readonly
We recommend to always use readonly mode when running fastlane on CI systems. This can be done using：
lane :beta do
  match(type: "appstore", readonly: is_ci)

  gym(scheme: "Release")
end

Access Control:
A benefit of using match is that it enables you to give the developers of your team access to the code signing certificates without having to give everyone access to the Developer Portal:
1.Run match to store the certificates in a Git repo or Google Cloud Storage
2.Grant access to the Git repo / Google Cloud Storage Bucket to your developers and give them the passphrase (for git storage)
3.The developers can now run match which will install the latest code signing profiles so they can build and sign the application without having to have access to the Apple Developer Portal
4.Every time you run match to update the profiles (e.g. add a new device), all your developers will automatically get the latest profiles when running match
If you decide to run match without access to the Developer Portal, make sure to use the --readonly option so that the commands don't ask you for the password to the Developer Portal.
The advantage of this approach is that no one in your team will revoke a certificate by mistake, while having all code signing secrets in one location.

Folder structure:
After running match for the first time, your Git repo or Google Cloud bucket will contain 2 directories:
The certs folder contains all certificates with their private keys
The profiles folder contains all provisioning profiles

Registering new devices:
By using match, you'll save a lot of time every time you add new device to your Ad Hoc or Development profiles. Use match in combination with the register_devices action.
lane :beta do
  register_devices(devices_file: "./devices.txt")
  match(type: "adhoc", force_for_new_devices: true)
end
By using the force_for_new_devices parameter, match will check if the device count has changed since the last time you ran match, and automatically re-generate the provisioning profile if necessary. 
You can also use force: true to re-generate the provisioning profile on each run.
Important: The force_for_new_devices parameter is ignored for App Store provisioning profiles since they don't contain any device information.

If you're not using fastlane, you can also use the force_for_new_devices option from the command line:
fastlane match adhoc --force_for_new_devices

###important to use gym && match###
Setup Xcode project:
http://docs.fastlane.tools/codesigning/xcode-project/
Xcode 9 and up:
In most cases, fastlane will work out of the box with Xcode 9 and up if you selected manual code signing and choose a provisioning profile name for each of your targets
If you don't use match, we recommend defining a mapping of app target to provisioning profile in your Fastfile. By defining those profiles, you can guarantee reproducible builds every time you run it.
lane :beta do
  build_app(
    export_method: "app-store",
    export_options: {
      provisioningProfiles: { 
        "com.example.bundleid" => "Provisioning Profile Name",
        "com.example.bundleid2" => "Provisioning Profile Name 2"
      }
    }
  )
end
You can also use Xcode’s Automatically Manage Signing feature. By default, automatic signing via xcodebuild is disabled. To enable it, pass -allowProvisioningUpdates via the export_xcargs option:
lane :beta do
  build_app(export_xcargs: "-allowProvisioningUpdates")
end


To build from the command line using fastlane:
match automatically pre-fills environment variables with the UUIDs of the correct provisioning profiles, ready to be used in your Xcode project.
To build from Xcode manually:
This is useful when installing your application on your device using the Development profile.
You can statically select the right provisioning profile in your Xcode project (the name will be match Development tools.fastlane.app)

match development or Xcode Automatic Provisioning:
Apple's Automatic Provisioning will automatically generate a private key, development certificate, and managed development provisioning profile for each computer used to build a project. Since Xcode can auto-generate these for you, there is no need to share them between teammates' computers. 
As such, when using Xcode Automatic Provisioning, there is no need to use match development to keep development keys, certificates, and provisioning profiles in sync.
If you are already using match to manage development code signing, Automatic Provisioning will use the match-generated key and certificate. However, Xcode will create and manage its own provisioning profile and will not use the match-generated profile.

match appstore and Xcode Automatic Provisioning:
Xcode Automatic Provisioning doesn't sync your private keys across machines (if you have multiple computers or share them between teammates). 
To securely store your private key and have access to it from all your devices, use match appstore or match adhoc. 
This will sync your keys, certificates and provisioning profiles via git, encrypted using OpenSSL.


Advanced Git Storage features:
Change Password:
To change the password of your repo and therefore decrypting and encrypting all files run:
fastlane match change_password
You'll be asked for the new password on all your machines on the next run.

Import:
To import and encrypt a certificate (.cer), the private key (.p12) and the provisioning profiles (.mobileprovision or .provisionprofile) into the match repo run:
fastlane match import

Git repo encryption password:
Once you've decided which approach to take, all that's left to do is to set your encryption password as secret environment variable named MATCH_PASSWORD. match will pick this up when it's run.

Nuke:
If you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, 
expired or Xcode managed profiles/certificates, you can use the match nuke command to revoke your certificates and provisioning profiles. 
Don't worry, apps that are already available in the App Store / TestFlight will still work. 
Builds distributed via Ad Hoc or Enterprise will be disabled after nuking your account, so you'll have to re-upload a new build.
After clearing your account you'll start from a clean state, and you can run match to generate your certificates and profiles again.
To revoke all certificates and provisioning profiles for a specific environment:

fastlane match nuke development
fastlane match nuke distribution
fastlane match nuke enterprise

============================================================CredentialsManager
CredentialsManager凭据管理工具:
这个工具主要是提供登录iTunes connect 的凭证

How is my password stored:
pilot uses the CredentialsManager from fastlane.

Storing in the keychain:
By default, your Apple credentials are stored in the macOS Keychain.
Your password is only stored locally on your computer.

Using environment variables:
Pass the user credentials via the following environment variables:
FASTLANE_USER
FASTLANE_PASSWORD
If you don't want to have your password stored in the Keychain set the FASTLANE_DONT_STORE_PASSWORD environment variable to "1".

如果你不想存入“钥匙链”可以通过设置环境变量”FASTLANE_DONT_STORE_PASSWORD”为”1”
在.env文件中加入:
#iTunes connect登录用户名
FASTLANE_USER = "felix@krausefx.com"
#iTunes connect登录密码
FASTLANE_PASSWORD = "xxxxxxx"
#不存入“钥匙链”
FASTLANE_DONT_STORE_PASSWORD = "1"

这个工具主要是提供登录iTunes connect 的凭证，一般在fastlane初始化的时候，如果选择打包到appstore，会提示你添加登录凭证

Adding Credentials:
You can add credentials for use by fastlane to your keychain using the CredentialsManager command line interface. This is useful for situations like CI environments.

Adding a Credential
fastlane fastlane-credentials add --username felix@krausefx.com
Password: *********
Credential felix@krausefx.com:********* added to keychain.

Removing a Credential
fastlane fastlane-credentials remove --username felix@krausefx.com
password has been deleted.


============================================================pilot
http://docs.fastlane.tools/actions/pilot/#how-is-my-password-stored

The best way to manage your TestFlight testers and builds from your terminal:
Upload & distribute builds
Add & remove testers
Retrieve information about testers & devices
Import/export all available testers

Alias for the upload_to_testflight action

前提：cd到fastlane所处的路径

fastlane pilot upload
This will automatically look for an ipa in your current directory and tries to fetch the login credentials

fastlane action pilot

You can also skip the submission of the binary, which means, the ipa file will only be uploaded and not distributed to testers:
fastlane pilot upload --skip_submission

pilot uses spaceship to submit the build metadata and the iTunes Transporter to upload the binary. 
Because iTunes Transporter's upload capability is only supported on OS X

To list all builds for specific application use:
fastlane pilot builds

List of Testers:
fastlane pilot list

Add a new tester：
To add a new tester to both your App Store Connect account and to your app (if given), 
use the pilot add command. This will create a new tester (if necessary) or add an existing tester to the app to test.
fastlane pilot add email@invite.com
Additionally you can specify the app identifier (if necessary):
fastlane pilot add email@email.com -a com.krausefx.app

Find a tester：
fastlane pilot find felix@krausefx.com

Remove a tester:
fastlane pilot remove felix@krausefx.com

Export testers:
To export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.
fastlane pilot export

Import testers:
Add external testers from a CSV file. Create a file (ex: testers.csv) and fill it with the following format:
John,Appleseed,appleseed_john@mac.com,group-1;group-2
fastlane pilot import

You can also specify the directory using:
fastlane pilot export -c ~/Desktop/testers.csv
fastlane pilot import -c ~/Desktop/testers.csv

Debug information:
fastlane pilot upload --verbose


upload_to_testflight:
testflight # alias for "upload_to_testflight"
pilot # alias for "upload_to_testflight"


It is recommended to add the above action into your Fastfile, 
however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal
fastlane run pilot
To pass parameters, make use of the : symbol, for example
fastlane run pilot parameter1:"value1" parameter2:"value2"

============================================================Environment Variables
Alternatively, as environment variables are not a fastlane specific thing, you can also use standard methods to set them:

DELIVER_USER="felix@krausefx.com" fastlane test
or
export DELIVER_USER="felix@krausefx.com";
fastlane test

Although it kind of defeats the purpose of using them in the first place (not to have their content in any files), 
you can also set them in your Fastfile:
ENV["DELIVER_USER"] = "felix@krausefx.com"

============================================================spaceship
https://github.com/fastlane/fastlane/tree/master/spaceship
spaceship暴露了 Apple Developer Center 和 iTunes Connect API。
这些快速和强大的API已经是 fastlane 的一部分，能够实现更多 fastlane 的高级功能

spaceship已经是fastlane的一部分了，很多 fastlane tools 已经使用了 spaceship，比如 sigh， cert， produce， pilot 和 boarding


在命令行中尝试运行 fastlane spaceship ，然后就会自动启动 spaceship playground。这要求你使用 sudo gem install pry 安装 pry 。
pry 不会默认安装，因为大部分的fastlane用户不需要 spaceship playground 。你可以在 Gemfile 文件里添加 pry 依赖。


两步验证：
如果你的苹果账户开启了两步验证，将会自动询问你使用手机进行验证。结果会话将会存储在 ~/.spaceship/[email]/cookie中。
The session should be valid for about one month, however there is no way to test this without actually waiting for over a month.

使用以下命令生成一个web session：
fastlane spaceauth -u user@example.org

这个将会给你授权，并提供一个会话字符串：
export FASTLANE_SESSION='---\n- !ruby/object:HTTP::Cookie\n  name: DES5c148586dfd451e55afbaaa5f62418f91\n  value: HSARMTKNSRVTWFla1+yO4gVPowH17VaaaxPFnUdMUegQZxqy1Ie1c2v6bM1vSOzIbuOmrl/FNenlScsd/NbF7/Lw4cpnL15jsyg0TOJwP32tC/NguPiyOaaaU+jrj4tf4uKdIywVaaaFSRVT\n  domain: idmsa.apple.com\n  for_domain: true\n  path: "/"\n  secure: true\n  httponly: true\n  expires: 2016-04-27 23:55:56.000000000 Z\n  max_age: \n  created_at: 2016-03-28 16:55:57.032086000 -07:00\n  accessed_at: 2016-03-28 19:11:17.828141000 -07:00\n'

从 ---\n 开始复制所有的东西，然后当做环境变量提供，配置环境变量vim ~/.bash_profile，变量名是 FASTLANE_SESSION，你也可以放在.env里，不过需要去掉export，效果一样
FASTLANE_SESSION='---\n- !ruby/object:HTTP::Cookie\n  name: myacinfo\n  value: xxx\n'


============================================================Cert
https://docs.fastlane.tools/actions/cert/

Alias for the get_certificates action

Note: It is recommended to use match according to the codesigning.guide for generating and maintaining your certificates. 
Use cert directly only if you want full control over what's going on and know more about codesigning.

fastlane cert

This will check if any of the available signing certificates is installed on your local machine.
Only if a new certificate needs to be created, cert will:
Create a new private key
Create a new signing request
Generate, downloads and installs the certificate
Import all the generated files into your Keychain

cert will never revoke your existing certificates. If you can't create any more certificates, cert will raise an exception, which means, you have to revoke one of the existing certificates to make room for a new one.

You can pass your Apple ID:
fastlane cert -u cert@krausefx.com

Keep in mind, there is no way for cert to download existing certificates + private keys from the Apple Developer Portal, as the private key never leaves your computer.

fastlane action cert

lane :create_cert do
  cert(
    username: ENV['APPLE_ID'], # Apple ID
    team_id: ENV['TEAM_ID'], # Team ID
    development: true, # 创建一个开发证书
    force: "false", # 即使存在现有证书，也要创建证书，默认为false
    filename: "dev_cert", # 存储文件名
    output_path: "./certs/development", # 存储所有证书和私钥的目录的路径
  )
end

Actions can communicate with each other using a shared hash lane_context, that can be accessed in other actions, plugins or your lanes: lane_context[SharedValues:XYZ]. 
The cert action generates the following Lane Variables:

SharedValue	Description
SharedValues::CERT_FILE_PATH	The path to the certificate
SharedValues::CERT_CERTIFICATE_ID	The id of the certificate

It is recommended to add the above action into your Fastfile, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal
fastlane run cert

============================================================Sigh
https://docs.fastlane.tools/actions/sigh/

Alias for the get_provisioning_profile action

sigh can create, renew, download and repair provisioning profiles (with one command). 
It supports App Store, Ad Hoc, Development and Enterprise profiles and supports nice features, like auto-adding all test devices.

Features:
Download the latest provisioning profile for your app
Renew a provisioning profile, when it has expired
Repair a provisioning profile, when it is broken
Create a new provisioning profile, if it doesn't exist already
Supports App Store, Ad Hoc and Development profiles
Support for multiple Apple accounts, storing your credentials securely in the Keychain
Support for multiple Teams
Support for Enterprise Profiles

provisioning profiles所在目录:~/Library/MobileDevice/Provisioning Profiles

你可以使用ProvisionQL在Finder中快速预览profiles文件，使用brew cask install provisionql快速安装
Use 'ProvisionQL' for advanced Quick Look in Finder:
https://github.com/ealeksandrov/ProvisionQL


lane :create_adhoc_profile do
      #如果没有在Apple Developer创建证书的话，get_certificates会帮你自动创建证书
      sigh(
          username: ENV['APPLE_ID'], # APPle ID
          team_id: ENV['TEAM_ID'], # team ID
          app_identifier: ENV['APP_IDENTIFIER'], # bundle id
          # cert_id: xxx, # 使用的证书id
          provisioning_name: 'com.xx.FastLane_AdHoc', # 开发者中心上面的描述文件名称
          ignore_profiles_with_different_name: true, # 与provisioning_name参数联合使用，true：当描述文件名称完全匹配provisioning_name时才下载，false：不完全匹配也下载
          force: true, # 更新描述文件并忽略其状态，同时自动为ad hoc profiles添加所有设备
          filename: "xxx.mobileprovision", # 存储文件名
          output_path: "./profiles/adhoc", # 存储的路径
          skip_install: false, # 默认会自动添加证书到你的本地机器上，设置该参数可以跳过该步骤
          # development: false,  # 更新开发证书而不是生产证书
          # readonly: true, # 只获取，不生成新的
          adhoc: true # true：生成AdHoc profiles，false：生成App Store Profiles
      )
end

fastlane action sigh

Note: It is recommended to use match according to the codesigning.guide for generating and maintaining your provisioning profiles. 
Use sigh directly only if you want full control over what's going on and know more about codesigning.

fastlane sigh

sigh will create, repair and download profiles for the App Store by default.

You can pass your bundle identifier and username like this:
fastlane sigh -a com.krausefx.app -u username

If you want to generate an Ad Hoc profile instead of an App Store profile:
fastlane sigh --adhoc
If you want to generate a Development profile:
fastlane sigh --development
To generate the profile in a specific directory:
fastlane sigh -o "~/Certificates/"

To download all your provisioning profiles use:
fastlane sigh download_all
Optionally, use fastlane sigh download_all --download_xcode_profiles to also include the Xcode managed provisioning profiles

By default, sigh will install the downloaded profile on your machine. If you just want to generate the profile and skip the installation, use the following flag:
fastlane sigh --skip_install

To save the provisioning profile under a specific name, use the -q option:
fastlane sigh -a com.krausefx.app -u username -q "myProfile.mobileprovision"

If you need the provisioning profile to be renewed regardless of its state use the --force option. This gives you a profile with the maximum lifetime. --force will also add all available devices to this profile.
fastlane sigh --force

By default, sigh will include all certificates on development profiles, and first certificate on other types. If you need to specify which certificate to use you can either use the environment variable SIGH_CERTIFICATE, or pass the name or expiry date of the certificate as argument:
fastlane sigh -c "SunApps GmbH"

Repair:
sigh can automatically repair all your existing provisioning profiles which are expired or just invalid.
fastlane sigh repair

Resign:
If you generated your ipa file but want to apply a different code signing onto the ipa file, you can use sigh resign:
fastlane sigh resign
sigh will find the ipa file and the provisioning profile for you if they are located in the current folder.
You can pass more information using the command line:
fastlane sigh resign ./path/app.ipa --signing_identity "iPhone Distribution: Felix Krause" -p "my.mobileprovision"

Manage:
With sigh manage you can list all provisioning profiles installed locally:
fastlane sigh manage
Delete all expired provisioning profiles"
fastlane sigh manage -e
Or delete all iOS Team Provisioning Profile by using a regular expression:
fastlane sigh manage -p "iOS\ ?Team Provisioning Profile:"

Environment Variables:
Run fastlane action sigh to get a list of all available environment variables.

If you're using cert in combination with fastlane the signing certificate will automatically be selected for you. (make sure to run cert before sigh)

sigh will never touch or use the profiles which are created and managed by Xcode. Instead sigh will manage its own set of provisioning profiles

Lane Variables:
SharedValue	Description
SharedValues::SIGH_PROFILE_PATH	A path in which certificates, key and profile are exported
SharedValues::SIGH_PROFILE_PATHS	Paths in which certificates, key and profile are exported
SharedValues::SIGH_UUID	UUID (Universally Unique IDentifier) of a provisioning profile
SharedValues::SIGH_NAME	The name of the profile
SharedValues::SIGH_PROFILE_TYPE	The profile type, can be appstore, adhoc, development, enterprise

============================================================pem
https://docs.fastlane.tools/actions/pem/

Alias for the get_push_certificate action
Automatically generate and renew your push notification profiles

如果需要有效的推送配置文件，pem将创建新的.pem、.cer和.p12文件。pem不包括将文件上载到服务器。

lane :notification_cert do
    pem(
      development: true,  # true：更新开发推送证书，false：更新生产推送证书
      generate_p12: true,  # 生成p12和pem文件
      force: true, # true：即使旧推送描述文件依然可用，仍然创建新的推送描述文件
      app_identifier: 'com.apple.xxx', # Bundle ID,
      save_private_key: true, #保存RSA私钥
      p12_password: '123456',  # 所生成p12文件的密码
      pem_name: 'notifier', #pem文件名
      username: ENV['APPLE_ID'],
      team_id: ENV['TEAM_ID'],
      output_path: "./certs/development",
      new_profile: proc do |profile_path|  # 如果生成了新的推送描述文件，该block会被调用
        puts profile_path  # 新的PEM文件的绝对路径
        # 添加上传PEM文件到服务器的代码
      end
    )
end

pem creates new .pem, .cer, and .p12 files to be uploaded to your push server if a valid push notification profile is needed. pem does not cover uploading the file to your server.

fastlane pem

This does the following:
Create a new signing request
Create a new push certification
Downloads the certificate
Generates a new .pem file in the current working directory, which you can upload to your server

Note that pem will never revoke your existing certificates. pem can't download any of your existing push certificates, as the private key is only available on the machine it was created on.

If you already have a push certificate enabled, which is active for at least 30 more days, pem will not create a new certificate. If you still want to create one, use the force:
fastlane pem --force

You can pass parameters like this:
fastlane pem -a com.krausefx.app -u username

If you want to generate a development certificate instead:
fastlane pem --development

If you want to generate a Website Push certificate:
fastlane pem --website_push

Set a password for your p12 file:
fastlane pem -p "MyPass"

You can specify a name for the output file:
fastlane pem -o my.pem

fastlane action pem

fastlane run pem

pem uses spaceship to communicate with the Apple Developer Portal to request a new push certificate for you.

============================================================register_devices
Registers new devices to the Apple Dev Portal

注册单台设备
fastlane run register_device

register_devices(
  devices: {
    "Luka iPhone 6" => "1234567890123456789012345678901234567890",
    "Felix iPad Air 2" => "abcdefghijklmnopqrstvuwxyzabcdefghijklmn"
  }
) # Simply provide a list of devices as a Hash

register_devices(
  devices_file: "./devices.txt"
) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (http://devimages.apple.com/downloads/devices/Multiple-Upload-Samples.zip)

register_devices(
  devices_file: "./devices.txt", # You must pass in either `devices_file` or `devices`.
  team_id: "XXXXXXXXXX",         # Optional, if you"re a member of multiple teams, then you need to pass the team ID here.
  username: "luka@goonbee.com"   # Optional, lets you override the Apple Member Center username.
)

register_devices(
  devices: {
    "Luka MacBook" => "12345678-1234-1234-1234-123456789012",
    "Felix MacBook Pro" => "ABCDEFGH-ABCD-ABCD-ABCD-ABCDEFGHIJKL"
  },
  platform: "mac"
) # Register devices for Mac

fastlane action register_devices

It is recommended to add the above action into your Fastfile, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal
fastlane run register_devices
fastlane run register_devices parameter1:"value1" parameter2:"value2"

desc "注册设备"
lane :add_devices do
    register_devices(
      #devices_file: "./devices.txt",  # 指定包含设备信息的文件路径，文件具体格式参考https://devimages.apple.com.edgekey.net/downloads/devices/Multiple-Upload-Samples.zip
      devices: {
        "Luka iPhone 6" => "1234567890123456789012345678901234567890",
        "Felix iPad Air 2" => "abcdefghijklmnopqrstvuwxyzabcdefghijklmn"
      },  # 指定要注册的设备列表，格式为：设备名称 => UDID
      username: "xx@apple.com"  # 设置Apple ID
    ) 
end

============================================================produce
If you also want to create a new App Identifier on the Apple Developer Portal, check out produce, which does exactly that.