iOS 9.0 开始支持 3D Touch
iPhone 6S 和 6S Plus 及后续出的 iPhone 系列

定义方式:
定义静态快速动作（Info.plist 文件添加创建）
<key>UIApplicationShortcutItems</key>
<array>
    <dict>
        <key>UIApplicationShortcutItemType</key>
        <string>SearchAction</string>
        <key>UIApplicationShortcutItemIconType</key>
        <string>UIApplicationShortcutIconTypeSearch</string>
        <key>UIApplicationShortcutItemTitle</key>
        <string>Search</string>
        <key>UIApplicationShortcutItemSubtitle</key>
        <string>Search for an item</string>
    </dict>
    <dict>
        <key>UIApplicationShortcutItemType</key>
        <string>ShareAction</string>
        <key>UIApplicationShortcutItemIconType</key>
        <string>UIApplicationShortcutIconTypeShare</string>
        <key>UIApplicationShortcutItemTitle</key>
        <string>Share</string>
        <key>UIApplicationShortcutItemSubtitle</key>
        <string>Share an item</string>
    </dict>
</array>

定义动态快速动作（代码创建）
UIApplicationShortcutIcon *contactIcon = [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeContact];
UIApplicationShortcutItem *contact = [[UIApplicationShortcutItem alloc] initWithType:@"ContactAction" localizedTitle:@"Contact" localizedSubtitle:@"Address Book" icon:contactIcon userInfo:nil];
UIApplicationShortcutIcon *addIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"add_icon"];
UIApplicationShortcutItem *add = [[UIApplicationShortcutItem alloc] initWithType:@"AddAction" localizedTitle:@"Add" localizedSubtitle:nil icon:addIcon userInfo:nil];
application.shortcutItems = @[contact, add];


UIApplicationShortcutItemType 唯一标识
UIApplicationShortcutItemTitle 显示的标题
UIApplicationShortcutItemSubtitle 显示的副标题
UIApplicationShortcutItemIconType 使用系统的图标
UIApplicationShortcutItemIconFile 使用项目的图标
UIApplicationShortcutItemUserInfo 附加的信息


响应触发:
<1> 如果项目工程里保留了scene（场景）
如果尚未加载该应用程序，则会启动该应用程序。通过函数scene: willConnectToSession: options:传递快捷方式项的详细信息。
- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {
	// 获取动作信息
    self.saveShortcutItem = connectionOptions.shortcutItem; 
}

如果应用程序已经加载，则系统将调用场景委托的功能。通过函数windowScene:performActionForShortcutItem: completionHandler:传递快捷方式项的详细信息。
- (void)windowScene:(UIWindowScene *)windowScene performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler  API_AVAILABLE(ios(13.0))  {
    // 获取动作信息
   self.saveShortcutItem = shortcutItem;
}

最后通过函数sceneDidBecomeActive: 及UIApplicationShortcutItemType 实现你想要的操作。
- (void)sceneDidBecomeActive:(UIScene *)scene  API_AVAILABLE(ios(13.0)){
    if ([self.saveShortcutItem.type isEqualToString:@"SearchAction"]) {
        NSLog(@"Quick Action [Search] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"ShareAction"]) {
        NSLog( @"Quick Action [Share] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"ContactAction"]) {
        NSLog(@"Quick Action [Contact] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"AddAction"]) {
        NSLog(@"Quick Action [Add] ->");
    } else {
        NSLog(@"NULL");
    }
}

<2> 如果项目工程里只有window（窗口）
如果尚未加载该应用程序，则会启动该应用程序。通过函数application: didFinishLaunchingWithOptions::传递快捷方式项的详细信息。
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

    UIApplicationShortcutItem *shortItem = [launchOptions objectForKey:UIApplicationLaunchOptionsShortcutItemKey];
    if (shortItem != nil) {
     	// 获取动作信息
        self.saveShortcutItem = shortItem;
        return NO;
    } else {
        self.saveShortcutItem = nil;
        return YES;
    }
    
    return YES;
}

如果应用程序已经加载，则系统将调用场景委托的功能。通过函数application:performActionForShortcutItem: completionHandler:传递快捷方式项的详细信息。
- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler {
   self.saveShortcutItem = shortcutItem;  
}

最后通过函数applicationDidBecomeActive: 及UIApplicationShortcutItemType 实现你想要的操作。
- (void)applicationDidBecomeActive:(UIApplication *)application {
    if ([self.saveShortcutItem.type isEqualToString:@"SearchAction"]) {
        NSLog(@"Quick Action [Search] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"ShareAction"]) {
        NSLog( @"Quick Action [Share] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"ContactAction"]) {
        NSLog(@"Quick Action [Contact] ->");
    } else if ([self.saveShortcutItem.type isEqualToString:@"AddAction"]) {
        NSLog(@"Quick Action [Add] ->");
    } else {
        NSLog(@"NULL");
    }
}


修改快捷项数据：
notice: 无法修改静态定义的快捷项的数据。
场景：在App页面中做了数据修改，点击home键回到主屏幕短按，显示快捷项列表，需更新其中一项数据。
函数: 在程序回到后台的时候修改（sceneWillResignActive:）

重新赋值[UIApplication sharedApplication].shortcutItems


快捷项携带数据：
上文中创建UIApplicationShortcutItem中有个userInfo的参数，是个字典类型。只读且value需要遵循NSSecureCoding协议，即：NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary。
NSString *infoStr = (NSString *)self.saveShortcutItem.userInfo[@"xx"];