http://www.cocoachina.com/articles/15832

1. 在项目的导航面板进入项目设置。在Targets区域下，右键单击现有目标并选择 `Duplicate` 复制现有的目标。


2.现在我们有一个名为`todo copy`的新的target和build scheme。重命名并使之更容易理解。
在Targets列表中选择新的target。按Enter键编辑文本，添加一个更合适的名字。我更倾向于“todo Dev”。你可以自由选择任何你喜欢的名字。
接下来，找到“Manage Schemes…”，选择您在步骤1中创建的shceme,并按“输入”，使scheme的名称和新的target的名称相同(这是你为新的target所选择的名字)

3. 步骤3是可选的，但强烈推荐。如果你想简单地区分开发和生产版本构建，你应该为每个版本使用单独的icon和启动页。这将使测试人员更清晰地知道正在使用哪个app,防止上传开发版本。
跳到 `Assets.xcassets` 添加一个新的图标。右击图标 > App Icons & Launch Images > New iOS App Icon. 新图标重命名为“AppIcon-Dev”同时添加自己的图片。

4.现在回到项目设置,选择您的开发target，并改变Bundle Identifier。你可以简单地将“Dev”追加到原来的ID上。如果执行了步骤4，请确保更改应用app icon，设置为在上一步中创建的。

5. Xcode会自动为你的target添加plist文件(如todo copy-Info.plist)。你可以在项目的根文件夹找到它。将它从“copy”重命名为“Dev”,并将它放在原始的plist文件下。这里你将更容易管理文件。

6. 现在打开你开发target的“Build Settings”，滚动到“Packaging”，并将值改为开发的plist文件（todo Dev.plist）。

7. 最后，我们会为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。
对于Objective-C的项目，去到`Build Settings`下`Apple LLVM 7.0 - Preprocessing`。拓展`Preprocessor Macros`在Rebug和Release区域添加一个变量。
对于开发target（即todo Dev），将Rebug和Release的该值设置为`DEVELOPMENT = 1`。另一个（todo），将Rebug和Release的值设为`DEVELOPMENT=0`来表示生产版本。

对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。选中开发target，添加一个标识表示开发版本。找到`Build Setting`往下滚动到`Swift Compiler - Custom Flags`部分。将值设为`-DDEVELOPMENT`表示这个target作为开发版本。

Objective-C:
#if DEVELOPMENT
#define SERVER_URL @"http://dev.server.com/api/"
#define API_TOKEN @"DI2023409jf90ew"
#else
#define SERVER_URL @"http://prod.server.com/api/"
#define API_TOKEN @"71a629j0f090232"
#endif
Objective-C中你可以使用`＃if`检查`DEVELOPMENT`的环境


Swift:
#if DEVELOPMENT
let SERVER_URL = "http://dev.server.com/api/"
let API_TOKEN = "DI2023409jf90ew"
#else
let SERVER_URL = "http://prod.server.com/api/"
let API_TOKEN = "71a629j0f090232"
#endif
Swift中你仍然可以使用`#if`判定build的参数动态编译。然而，除了使用`#define`定义基本常量，在swift中我们也可以用`let`定义一个全局常量。

现在，当您选择“todo Dev”scheme运行项目，你创建开发版本会自动将服务器的配置设置为开发环境。
接着如果你需要创建一个生产版本，您可以简单地选择"todo"scheme。不需要更改代码。

管理多个target的一些注意事项：
1.当你添加新的文件到项目中，不要忘记选择两个target，以保持你的代码同步在两个版本。
2.如果你使用的CocoaPods，不要忘了添加新的target到你的podfile中。您可以使用`link_with`指定多个target。
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '7.0'
workspace 'todo'
link_with 'todo', 'todo Dev'
pod 'Mixpanel'
pod 'AFNetworking'