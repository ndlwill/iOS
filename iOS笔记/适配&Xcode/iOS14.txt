=================================隐私适配:
iOS14最重要的更新之一：用户隐私和安全。

1.
IDFA 全称为 Identity for Advertisers ，即广告标识符。用来标记用户，目前最广泛的用途是用于投放广告、个性化推荐等。

iOS13及以前，系统会默认为用户 开启 广告追踪权限。
#import <AdSupport/AdSupport.h> 
- (void)obtainIDFA {
    // 使用原方式访问 IDFA
    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {
        NSString *idfaStr = [[ASIdentifierManager sharedManager] advertisingIdentifier].UUIDString;
        NSLog(@"idfaStr - %@", idfaStr);
    }
}
iOS14中，系统会默认为用户 关闭 广告追踪权限。
且以上isAdvertisingTrackingEnabled判断用户是否允许被追踪的方法被废弃：

首先在 info.plist 中配置权限：
key：NSUserTrackingUsageDescription
value：获取设备信息用以精准推送您喜欢的内容
#import <AdSupport/AdSupport.h>
#import <AppTrackingTransparency/AppTrackingTransparency.h>
 
- (void)obtainIDFA {
    // iOS14方式访问 IDFA
    if (@available(iOS 14, *)) {
        [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status) {
            if (status == ATTrackingManagerAuthorizationStatusAuthorized) {
                NSString *idfaStr = [[ASIdentifierManager sharedManager] advertisingIdentifier].UUIDString;
                NSLog(@"idfaStr - %@", idfaStr);
            }
        }];
    } else {
        // 使用原方式访问 IDFA
        if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {
            NSString *idfaStr = [[ASIdentifierManager sharedManager] advertisingIdentifier].UUIDString;
            NSLog(@"idfaStr - %@", idfaStr);
        }
    }
}
最后启动应用弹出申请，经过用户同意授权之后，才能最终获取正确的IDFA信息

2.相册
iOS13及以前，App请求用户相册授权：用户同意App获取相册信息，当前App就可以获取到用户的整个照片库信息
iOS14新增了Limited Photo Library Access 模式，在授权弹窗中增加了 选择照片 选项。用户可以选择开放照片库或者特定的相册给App，保证用户隐私。

相册新增选择权限类型 PHAuthorizationStatusLimited ：当页面弹出请求权限 Alert 时，会有 Select Photos... 选项，用户选择该选项时，会弹出页面供用户选择允许App访问的图片/照片。
适配要点：权限提示框会在每次冷启动后打开相册时重新弹出，可以在 info.plist 中设置 PHPhotoLibraryPreventAutomaticLimitedAccessAlert 选项为 YES ，关闭提示，调用下述方法手动选择：
[[PHPhotoLibrary sharedPhotoLibrary] presentLimitedLibraryPickerFromViewController:self];

在 iOS14 中官方推荐使用 PHPicker 来替代原 API 进行图片选择。PHPicker 为独立进程，会在视图最顶层进行展示，应用内无法对其进行截图也无法直接访问到其内的数据。
UIImagePickerController -> PHPickerViewController， UIImagePickerViewController 功能受限，每次只能选择一张图片，将逐渐被废弃。
PHPicker 支持多选，支持搜索，支持按 image，video，livePhotos 等进行选择。

@interface ViewController () <PHPickerViewControllerDelegate>
  
@property (weak, nonatomic) IBOutlet UIImageView *imageView;
@property (nonatomic, strong) NSArray<NSItemProvider *> *itemProviders;
  
@end
  
@implementation ViewController
  
  - (void)viewDidLoad {
      [super viewDidLoad];
      // Do any additional setup after loading the view.
}
  
  - (IBAction)button:(id)sender {
      // 以下 API 仅为 iOS14 only
      PHPickerConfiguration *configuration = [[PHPickerConfiguration alloc] init];
      configuration.filter = [PHPickerFilter videosFilter]; // 可配置查询用户相册中文件的类型，支持三种
    configuration.selectionLimit = 0; // 默认为1，为0时表示可多选。
  
      PHPickerViewController *picker = [[PHPickerViewController alloc] initWithConfiguration:configuration];
      picker.delegate = self;
      // picker vc，在选完图片后需要在回调中手动 dismiss
    [self presentViewController:picker animated:YES completion:^{
  
      }];
  }
  
#pragma mark - Delegate
  
  - (void)picker:(PHPickerViewController *)picker didFinishPicking:(NSArray<PHPickerResult *> *)results {
      [picker dismissViewControllerAnimated:YES completion:nil];
      if (!results || !results.count) {
          return;
      }
      NSItemProvider *itemProvider = results.firstObject.itemProvider;
      if ([itemProvider canLoadObjectOfClass:UIImage.class]) {
          __weak typeof(self) weakSelf = self;
          [itemProvider loadObjectOfClass:UIImage.class completionHandler:^(__kindof id<NSItemProviderReading>  _Nullable object, NSError * _Nullable error) {
              if ([object isKindOfClass:UIImage.class]) {
                  __strong typeof(self) strongSelf = weakSelf;
                  dispatch_async(dispatch_get_main_queue(), ^{
                      strongSelf.imageView.image = (UIImage *)object;
                  });
              }
          }]; 
      }
    }


##########
typedef NS_ENUM(NSInteger, PHAccessLevel) {
  PHAccessLevelAddOnly = 1, // 仅允许添加照片
  PHAccessLevelReadWrite = 2, // 允许访问照片，limitedLevel 必须为 readWrite
} API_AVAILABLE(macos(10.16), ios(14), tvos(14));
 
// 查询权限
PHAccessLevel level = PHAccessLevelReadWrite;
PHAuthorizationStatus status = [PHPhotoLibrary authorizationStatusForAccessLevel:level];
  switch (status) {
      case PHAuthorizationStatusLimited:
          NSLog(@"limited");
          break;
      case PHAuthorizationStatusDenied:
          NSLog(@"denied");
          break;
      case PHAuthorizationStatusAuthorized:
          NSLog(@"authorized");
          break;
      default:
          break;
}
 
// 请求权限，需注意 limited 权限尽在 accessLevel 为 readAndWrite 时生效
[PHPhotoLibrary requestAuthorizationForAccessLevel:level handler:^(PHAuthorizationStatus status) {
  switch (status) {
      case PHAuthorizationStatusLimited:
          NSLog(@"limited");
          break;
      case PHAuthorizationStatusDenied:
          NSLog(@"denied");
          break;
      case PHAuthorizationStatusAuthorized:
          NSLog(@"authorized");
          break;
      default:
          break; 
  }
}];

3.定位
iOS13及以前，App请求用户定位授权：用户同意App获取定位信息，当前App就可以获取到用户的精确定位。
iOS14新增了精确定位和模糊定位的概念，默认精确定位，用户可以手动关闭精确定位以开启模糊定位，可以选择允许一次或使用App时允许。

iOS14 新增用户大致位置选项可供用户选择，原因是大多数 App 实际上并不需要获取用户到用户最准确的定位信息。
iOS14 授权弹窗新增的 Precise的开关默认会选中精确位置。用户通过这个开关可以进行更改，当把这个值设为 On 时，地图上会显示精确位置；切换为Off时，将显示用户的大致位置。

对于对用户位置敏感度不高的 App 来说，这个似乎无影响，但是对于强依赖精确位置的 App 适配工作就显得非常重要了。

CLAccuracyAuthorization

iOS14 在 CLLocationManager 新增两个方法可用于向用户申请临时开启一次精确位置权限。

iOS14系统定位配置
倘若App需要精确定位：
首先在 info.plist 中配置权限：
NSLocationTemporaryUsageDescriptionDictionary：
key：即为获取用户权限时传的 "purposeKey"
value：申请定位用于给您做精准推荐

###
对于地理位置不敏感的App 来说，iOS14 也可以通过直接在 info.plist 中添加 NSLocationDefaultAccuracyReduced 为 true 默认请求大概位置。
###
这样设置之后，即使用户想要为该 App 开启精确定位权限，也无法开启。

也可以直接通过API来根据不同的需求设置不同的定位精确度
locationManager.desiredAccuracy


#import <CoreLocation/CoreLocation.h>
 
- (void)obtainLocation {
    // iOS14方式请求 精确定位
    if (@available(iOS 14.0, *)) {
        CLLocationManager *locationManager = [[CLLocationManager alloc] init];
        [locationManager requestTemporaryFullAccuracyAuthorizationWithPurposeKey:@"preciseKey" completion:^(NSError * _Nullable error) {
 
        }];
    } else {
        // Fallback on earlier versions
    }
}
最后启动应用弹出申请，经过用户同意授权之后，才能最终获取正确的精确定位

如果功能强依赖精确定位，可以在需要的时候调用 [CALocationMnanger requestTemporaryFullAccuracyAuthorizationWithPurposeKey:] 单独请求一次精确定位，用户可以选择拒绝授权。所需参数 purposeKey 需要在 info.plist 中设置 NSLocationTemporaryUsageDescriptionDictionary 字典，key 为 purposeKey ， value 为对应的话述。

4.麦克风和相机
iOS14中App在使用麦克风或相机时右上角会有提示：黄点(麦克风)、绿点(相机)，无法隐藏。
iOS14麦克风和相机亮点提示

5.剪切板
iOS14中App在读取剪切板内容时，会有toast提示，从顶部弹出。例如：手机淘宝 - 粘贴自：微信

Wi-Fi Address:
iOS8 - iOS13 ，用户在不同的网络间切换和接入时，mac 地址都不会改变，这也就使得网络运营商还是可以通过 mac 地址对用户进行匹配和用户信息收集，生成完整的用户信息。
iOS14 提供 Wifi 加密服务，每次接入不同的 WiFi 使用的 mac 地址都不同。
每过 24 小时，mac 地址还会更新一次。
用户也可以自行选择是否开启 private Wi-Fi address


IDFA 全称为 Identity for Advertisers ，即广告标识符。用来标记用户，目前最广泛的用途是用于投放广告、个性化推荐等。
在 iOS13 及以前，系统会默认为用户开启允许追踪设置
iOS14 中，系统会默认为用户关闭广告追踪权限。
对于这种情况，我们需要去请求用户权限。首先需要在 Info.plist 中配置" NSUserTrackingUsageDescription " 及描述文案，接着使用 AppTrackingTransparency 框架中的 ATTrackingManager 中的 requestTrackingAuthorizationWithCompletionHandler 请求用户权限，在用户授权后再去访问 IDFA 才能够获取到正确信息。


上传 AppStore:
更加严格的隐私审核，可以让用户在下载 App 之前就知道此 App 将会需要哪些权限。
目前苹果商店要求所有应用在上架时都必须提供一份隐私政策。如果引入了第三方收集用户信息等SDK，都需要向苹果说明是这些信息的用途。

=================================控件适配:
1.UITableViewCell
contentView
iOS14推荐使用[cell.contentView addSubview:];方式添加控件。
因为UITableViewCell中使用 [cell addSubview:]方式添加的控件，会显示在contentView的下层，控件会被contentView遮挡并无法响应交互事件。

2.UIDatePicker
iOS13及以前，UIDatePicker样式只有轮播样式
iOS14中UIDatePicker样式有四种，可根据需求设置，默认是UIDatePickerStyleAutomatic，会自动选择当前平台和模式可用的最佳样式。

需要使用轮播样式，设置为UIDatePickerStyleWheels即可：
self.datePicker.preferredDatePickerStyle = UIDatePickerStyleWheels;
