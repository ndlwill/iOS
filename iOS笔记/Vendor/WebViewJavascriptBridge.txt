// 在下面的函数体内有任何错误，都不会有打印日志，也不会有任何回调
setupWebViewJavascriptBridge(function(bridge) {
    所有与iOS交互的JS代码放这里
})

JS如何调用iOS代码:

通过bridge.callHandler来调用：
bridge.callHandler('getBlogNameFromObjC', 
                {'blogURL': 'http://www.henishuo.com'}, 
                functioncallback(response) {
                  log('JS got response', response)//log函数是自定义的，不是系统的
                }
})


getBlogNameFromObjC：是iOS端register的handleName，在iOS端注册后，JS就可以直接通过这个handleName与iOS交互
js端将参数传给了iOS端，iOS端收到参数，然后通过回调给js，js会收到response

{‘blogURL’: ‘ http://www.henishuo.com’}：这是JSON字符串
传到iOS端会被WebViewJavascriptBridge自动转换成id对象，然后在回调处看到的就是字典对象了


iOS端:
注册HandleName，用于给JS端调用iOS端
// JS主动调用OjbC的方法
// 这是JS会调用getUserIdFromObjC方法，这是OC注册给JS调用的
// JS需要回调，当然JS也可以传参数过来。data就是JS所传的参数，不一定需要传
// OC端通过responseCallback回调JS端，JS就可以得到所需要的数据
[self.bridgeregisterHandler:@"getUserIdFromObjC"handler:^(id data, WVJBResponseCallback responseCallback) {
    NSLog(@"js call getUserIdFromObjC, data from js is %@", data);
    if (responseCallback) {
      // 反馈给JS
      responseCallback(@{@"userId": @"123456"});
    }
}];



直接调用JS端注册的HandleName
[self.bridgecallHandler:@"getUserInfos"data:@{@"name": @"标哥"}responseCallback:^(id responseData) {
    NSLog(@"from js: %@", responseData);
}];