RAC主要有两个作用：
1.RAC的信号机制可以将ViewModel与View相关联，这样View的变化可以直接响应ViewModel层的变化。
2.统一消息传递机制。iOS中消息传递机制有很多:delegate、notification、KVO、block、target-action等
RAC通过增加category的方式将传统的UI控件事件进行了封装，提供一个统一的接口，简化了消息传递机制


// KVO
[RACObserve(self, text) subscribeNext:^(id text) {
     NSLog(@" 成员变量 text 被修改成了：%@", text);
}];
// target-action
self.button.rac_command = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
  NSLog(@" 按钮被点击 ");
}];
// Notification
[[[NSNotificationCenter defaultCenter] 
rac_addObserverForName:notificationName         
                object:nil] 
subscribeNext:^(id x) {
    NSLog(@" 收到通知notificationName ");
}
];
// Delegate
[[self rac_signalForSelector:@selector(viewWillAppear:)] subscribeNext:^(id x) {
debugLog(@"viewWillAppear 方法被调用 %@", x);
}];



RAC中的热信号与冷信号：
各自特点：热信号类似“直播”，错过了就不再处理（不会收到订阅之前的数据）。而冷信号类似“点播”，每次订阅都会从头开始。

构造ViewModel，主要是 ViewController 给 View 传递数据的这个过程，抽象成构造 ViewModel 的过程。这样抽象后，View只接收ViewModel，而Controller只需要传递ViewModel，简化了Controller文件