/**
 1.尺寸：width、height、size
 2.边界：left、leading、right、trailing、top、bottom
 3.中心点：center、centerX、centerY
 4.边界：edges
 5.偏移量：offset、insets、sizeOffset、centerOffset
 6.priority()约束优先级（0~1000），multipler乘因数, dividedBy除因数
 */


redView.mas_key = @"redView";
MASAttachKeys(redView,greenView,blueView); //一句代码即可全部设置

mas_equalTo只是对其参数进行了一个BOX(装箱) 操作
目前支持的类型：数值类型（NSNumber）、点（CGPoint）、大小（CGSize）、边距（UIEdgeInsets）
而equalTo：这个方法不会对参数进行包装

make.height.width.equalTo(100); //== make.size.equalTo(100);

make.top.equalTo(superview.mas_top).with.offset(10);  //with 增强可读性
make.left.equalTo(greenView.mas_right).and.offset(10); //and 增强可读性

make.height.equalTo(@[greenView, blueView]); //约束参数相同可以通过数组

//宽度为superView宽度的20%
make.width.equalTo(superView.mas_width).multipliedBy(0.2);

iOS7有两个很有用的属性，topLayoutGuide和bottomLayoutGuide
这个两个主要是方便获取UINavigationController和UITabBarController的头部视图区域和底部视图区域。
make.top.equalTo(self.mas_topLayoutGuide);
self是viewController
mas_topLayoutGuide
mas_topLayoutGuideTop
mas_topLayoutGuideBottom


UIEdgeInsets padding = UIEdgeInsetsMake(10, 10, 10, 10);
//相对于父视图边距为10简洁写法
[self.avatarView mas_makeConstraints:^(MASConstraintMaker *make) {
    make.edges.equalTo(superview).with.insets(padding);
}];


(void) didClickBtn:(UIButton *)button {
    self.btnSize = CGSizeMake(self.btnSize.width * 1.3, self.btnSize.height * 1.3); //设置一个属性（btnSize）保存其大小的变化

    //1.告知需要更新约束，但不会立刻开始，系统然后调用updateConstraints
    //[self setNeedsUpdateConstraints];

    //2.告知立刻更新约束，系统立即调用updateConstraints
    //[self updateConstraintsIfNeeded];

    //3.这里动画当然可以取消，具体看项目的需求
    //系统block内引用不会导致循环引用，block结束就会释放引用对象
    [UIView animateWithDuration:0.4 animations:^{
        [self layoutIfNeeded]; //告知页面立刻刷新，系统立即调用updateConstraints
    }];
}



需要适配safeArea
if (@available(iOS 11.0, *)) {
    make.edges.equalTo(self.view.safeAreaInsets)
} else {
    make.edges.equalTo(self.view)
}


关于更新约束布局相关的API，主要用以下四个API：
- (void)updateConstraintsIfNeeded  调用此方法，如果有标记为需要重新布局的约束，则立即进行重新布局，内部会调用updateConstraints方法
- (void)updateConstraints          重写此方法，内部实现自定义布局过程
- (BOOL)needsUpdateConstraints     当前是否需要重新布局，内部会判断当前有没有被标记的约束
- (void)setNeedsUpdateConstraints  标记需要进行重新布局

关于UIView重新布局相关的API，主要用以下三个API：
- (void)setNeedsLayout  标记为需要重新布局
- (void)layoutIfNeeded  查看当前视图是否被标记需要重新布局，有则在内部调用layoutSubviews方法进行重新布局
- (void)layoutSubviews  重写当前方法，在内部完成重新布局操作


==============================
//首先添加5个视图
NSMutableArray *array = [NSMutableArray new];
for (int i = 0; i < 5; i ++) {
    UIView *view = [UIView new];
    view.backgroundColor = [UIColor greenColor];
    [self addSubview:view];
    [array addObject:view]; //保存添加的控件
}


//水平方向控件间隔固定等间隔
[array mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedSpacing:15 leadSpacing:10 tailSpacing:10];
[array makeConstraints:^(MASConstraintMaker *make) {
    make.top.equalTo(50);
    make.height.equalTo(70);
}];

//水平方向宽度固定等间隔
[array mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedItemLength:70 leadSpacing:10 tailSpacing:10];
[array makeConstraints:^(MASConstraintMaker *make) { //数组额你不必须都是view 
    make.top.equalTo(50);
    make.height.equalTo(70);
}];

