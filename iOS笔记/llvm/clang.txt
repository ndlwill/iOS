clang -rewrite-objc yourfile.m 将会把 Objective-C 的代码转换成 C 语言的代码


#define RACObserve(TARGET, KEYPATH) \
    ({ \
        _Pragma("clang diagnostic push") \
        _Pragma("clang diagnostic ignored \"-Wreceiver-is-weak\"") \
        __weak id target_ = (TARGET); \
        [target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self]; \
        _Pragma("clang diagnostic pop") \
    })

// pragma:编译指示
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
    else if (self.emptyDataSetDelegate && [self.emptyDataSetDelegate respondsToSelector:@selector(emptyDataSetDidTapButton:)]) {
        [self.emptyDataSetDelegate emptyDataSetDidTapButton:self];
    }
#pragma clang diagnostic pop

=============================================build过程
clang 
-x objective-c-header 
-arch armv7 
... configuration and warning flags ...
-DDEBUG=1 -DCOCOAPODS=1 
... include paths and more ...
-c 
/.../Pods-SSZipArchive-prefix.pch 
-o /.../Pods-SSZipArchive-prefix.pch.pch

-x 标示符用来指定所使用的语言，此处是 objective-c-header
目标架构指定为 armv7
-c 标示符用来告诉 clang 具体该如何做。-c 表示：运行预处理器、词法分析器、类型检查、LLVM 的生成和优化，以及 target 指定汇编代码的生成阶段，最后，运行汇编器以产出一个.o的目标文件
输入文件
输出文件


CompileC 用来编译 .m 和 .c 文件
Libtool 用来从目标文件中构建 library
CreateUniversalBinary 则将上一阶段产生的两个 .a 文件（每个文件对应一种架构）合并为一个通用的二进制文件，这样就能同时在 armv7 和 armv7s 上面运行

LD被用来构建可执行文件，而libtool则用来构建 library 文件