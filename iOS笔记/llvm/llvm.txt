LLVM 是一个模块化和可重用的编译器和工具链技术的集合
Clang 是 LLVM 的子项目，是 C，C++ 和 Objective-C 编译器

LLVM的子项目:
LLVM Core
提供了一个现代的源代码和目标独立优化器, 以及许多流行的 CPU的汇编代码生成支持
Clang
一个 C/C++/Objective-C 编译器，致力于提供令人惊讶的快速编译，极其有用的错误和警告信息，提供一个可用于构建很棒的源代码级别的工具。
LLDB
基于LLVM提供的库和Clang构建的优秀的本地调试器

编译器架构:
Frontend: 前端, 词法分析, 语法分析, 语义分析, 生成中间代码
Optimizer: 优化器, 中间代码优化
Backend: 后端, 生成机器码

不同的前端后端使用统一的中间代码LLVM Intermediate Representation (LLVM IR)
如果需要支持一种新的编程语言，那么只需要实现一个新的前端
如果需要支持一种新的硬件设备，那么只需要实现一个新的后端

IR 是编译过程的前端的输出, 后端的输入

编译文件需要经历的几个过程:
预编译处理
词法分析
语法分析
LLVM IR中间代码生成
IR输入到后端, 生成汇编文件
生成目标文件
link目标文件,生成可执行文件

LLVM编译一个源文件的过程:
预处理 -> 词法分析 -> Token -> 语法分析 - > AST树 -> 代码生成 -> LLVM IR -> 优化 -> 生成汇编代码 -> Link -> 目标文件
