线程id为1表示主线程
-----------------------------------
一个操作对应一个线程

避免重复下载图片？ NSOperationQueue

//缓存
NSMutableDictionary *images;
字典 key:URL value:UIImage

NSMutableDictionary *operations;
字典 key:URL value:操作   


UIImage *image = self.images[@"http://"];

if(image == nil){
	NSBlockOperation *operation = self.operations[@"http://"];

	if(operation == nil){//下载
		operation = [NSBlockOperation block....:^{

			UIImage *downloadImage = [UIImage imageWithData:]
			self.images[@"http://"] = downloadImage;
			[self.operations removeObjectForKey:@"http://"];

			dispatch_async(dispatch_get_main_queue(), ^{
				imageView.image = downloadImage;
			});
		}];
		[self.queue addOperation:operation];
		self.operations[@"http://"] = operation;

	} else {//正在下载
		imageView.image = 占位图片;
	}

	
} else {//有图片
	imageView.image = image;
}

NSOperationQueue是基于GCD封装的oc版本
NSOperationQueue支持KVO,监听operation是否在执行，是否结束，是否取消
NSOperationQueue可以方便的调整执行顺序，设置最大并发数量
------------------------------------GCD
GCD基于XNU内核实现的

GCD底层实现主要有：
Dispatch Queue:管理block(操作)     block放在哪个队列执行
Dispatch Source:处理事件

------------------------------------多线程大文件断点下载
设置请求头信息