


我们用 Xcode 构建一个程序的过程中，会把源文件 (.m 和 .h) 文件转换为一个可执行文件。这个可执行文件中包含的字节码会将被 CPU (iOS 设备中的 ARM 处理器或 Mac 上的 Intel 处理器) 执行

iOS 或 OS X 中的一个可执行文件 (也叫做 Mach-O executable)

使用一个名为 xcrun 的命令行工具:
clang -v
现在我们用下面的命令代替：
xcrun clang -v

xcrun 做的是定位到 clang，并执行它，附带输入 clang 后面的参数


xcode 允许我们使用多个版本的 Xcode，以及使用某个特定 Xcode 版本中的工具
如果你有 Xcode 4.5 和 Xcode 5，通过 xcode-select 和 xcrun 可以选择使用 Xcode 5 中 iOS SDK 的工具，或者 Xcode 4.5 中的 OS X 工具

mkdir Test
cd !$
touch test.c
open -e test.c// 文本编辑器来编辑
xcrun clang test.c
./a.out
将 test.c 编译为一个名为 a.out 的 Mach-O 二进制文件
如果我们没有指定名字，那么编译器会默认的将其指定为 a.out
编译器处理过程中，将 test.c 当做输入文件，并生成一个可执行文件 a.out


预处理
符号化 (Tokenization)
宏定义的展开
#include 的展开

语法和语义分析
将符号化后的内容转化为一棵解析树 (parse tree)
解析树做语义分析
输出一棵抽象语法树（Abstract Syntax Tree* (AST)）

生成代码和优化
将 AST 转换为更低级的中间码 (LLVM IR)
对生成的中间码做优化
生成特定目标代码
输出汇编代码

汇编器
将汇编代码转换为目标对象文件。

链接器
将多个目标对象文件合并为一个可执行文件 (或者一个动态库)

----------------------------------
预处理:
xcrun clang -E test.c | open -f
以 # 开头 (读作 hash)。这些被称为 行标记 的语句告诉我们后面跟着的内容来自哪里
# 后面的数字是在源文件中的行号，而最后的数字是在新文件中的行号
在 Xcode 中，可以通过这样的方式查看任意文件的预处理结果：Product -> Perform Action -> Preprocess

编译:
clang 输出汇编代码：
xcrun clang -S -o - test.c | open -f
以点 . 开头的行。这些就是汇编指令。其它的则是实际的 x86_64 汇编代码.最后是一些标记 (label)，与 C 语言中的类似
.section 指令指定接下来会执行哪一个段
.globl 指令说明 _main 是一个外部符号。这就是我们的 main() 函数。这个函数对于二进制文件外部来说是可见的，因为系统要调用它来运行可执行文件

.cfi_startproc 指令通常用于函数的开始处。CFI 是调用帧信息 (Call Frame Information) 的缩写
.cfi_startproc 指令给了函数一个 .eh_frame 入口，这个入口包含了一些调用栈的信息（抛出异常时也是用其来展开调用帧堆栈的）。这个指令也会发送一些和具体平台相关的指令给 CFI。它与后面的 .cfi_endproc 相匹配，以此标记出 main() 函数结束的地方

ABI ( 应用二进制接口 application binary interface)
rbp 寄存器 (基础指针寄存器 base pointer register) 

pushq %rbp 将 rbp 的值 push 到栈中，以便我们以后将其 pop 出来

.cfi_def_cfa_offset 16 和 .cfi_offset %rbp, -16。这将会输出一些关于生成调用堆栈展开和调试的信息。我们改变了堆栈和基础指针，而这两个指令可以告诉编译器它们都在哪儿，或者更确切的，它们可以确保之后调试器要使用这些信息时，能找到对应的东西

leaq 会将 L_.str 的指针加载到 rax 寄存器中
edi 和 rsi 寄存器保存了函数的第一个和第二个参数

.asciz 指令告诉编译器输出一个以 ‘\0’ (null) 结尾的字符串
可以用 Xcode 查看任意文件的汇编输出结果：Product -> Perform Action -> Assemble

汇编器:
汇编器将可读的汇编代码转换为机器代码。它会创建一个目标对象文件，一般简称为 对象文件。这些文件以 .o 结尾。如果用 Xcode 构建应用程序，可以在工程的 derived data 目录中，Objects-normal 文件夹下找到这些文件

链接器:
链接器解决了目标文件和库之间的链接
printf() 是 libc 库中的一个函数,链接器会读取所有的目标文件和库 (libc)，并解决所有未知符号 (_printf) 的问题。然后将它们编码进最后的可执行文件中 （可以在 libc 中找到符号 _printf），接着链接器会输出可以运行的执行文件：a.out


// 汇编指令
https://developer.apple.com/library/archive/documentation/DeveloperTools/Reference/Assembler/000-Introduction/introduction.html

===========================================================

xcrun size -x -l -m a.out 
来看看 a.out 二进制中的 section

__TEXT segment 包含了被执行的代码。它被以只读和可执行的方式映射。进程被允许执行这些代码，但是不能修改。这些代码也不能对自己做出修改，因此这些被映射的页从来不会被改变
在 segment中，一般都会有多个 section。它们包含了可执行文件的不同部分。在 __TEXT segment 中，__text section 包含了编译所得到的机器码。__stubs 和 __stub_helper 是给动态链接器 (dyld) 使用的。通过这两个 section，在动态链接代码中，可以允许延迟链接。__const是常量，不可变的，就像 __cstring (包含了可执行文件中的字符串常量 -- 在源码中被双引号包含的字符串) 常量一样。

__DATA segment 以可读写和不可执行的方式映射。它包含了将会被更改的数据
__DATA segment 中包含了可读写数据。在我们的程序中只有 __nl_symbol_ptr 和 __la_symbol_ptr，它们分别是 non-lazy 和 lazy 符号指针。延迟符号指针用于可执行文件中调用未定义的函数，例如不包含在可执行文件中的函数，它们将会延迟加载。而针对非延迟符号指针，当可执行文件被加载同时，也会被加载
在 _DATA segment 中的其它常见 section 包括 __const，在这里面会包含一些需要重定向的常量数据。例如 char * const p = "foo"; -- p 指针指向的数据是可变的。__bss section 没有被初始化的静态变量，例如 static int a; -- ANSI C 标准规定静态变量必须设置为 0。并且在运行时静态变量的值是可以修改的。__common section 包含未初始化的外部全局变量，跟 static 变量类似。例如在函数外面定义的 int a;。最后，__dyld 是一个 section 占位符，被用于动态链接器

第一个 segment 是 __PAGEZERO。它的大小为 4GB。这 4GB 并不是文件的真实大小，但是规定了进程地址空间的前 4GB 被映射为 不可执行、不可写和不可读


观察一个 section 中的内容：
xcrun otool -s __TEXT __text a.out
由于 -s __TEXT __text 很常见，otool 对其设置了一个缩写 -t
通过添加 -v 来查看反汇编代码：
xcrun otool -v -t a.out


在 OS X 和 iOS 中可执行文件的格式为 Mach-O：
file a.out 


我们从来不编译头文件。头文件的作用就是在被编译的实现文件中对代码做简单的共享。Foo.m 和 helloworld.m 都是通过 #import 语句将 Foo.h 文件中的内容添加到实现文件中的


===========================================================
helloworld.m:

#import "Foo.h"

int main(int argc, char *argv[])
{
    @autoreleasepool {
        Foo *foo = [[Foo alloc] init];
        [foo run];
        return 0;
    }
}
xcrun nm -nm helloworld.o
                 (undefined) external _OBJC_CLASS_$_Foo
0000000000000000 (__TEXT,__text) external _main
                 (undefined) external _objc_autoreleasePoolPop
                 (undefined) external _objc_autoreleasePoolPush
                 (undefined) external _objc_msgSend
                 (undefined) external _objc_msgSend_fixup
0000000000000088 (__TEXT,__objc_methname) non-external L_OBJC_METH_VAR_NAME_
000000000000008e (__TEXT,__objc_methname) non-external L_OBJC_METH_VAR_NAME_1
0000000000000093 (__TEXT,__objc_methname) non-external L_OBJC_METH_VAR_NAME_2
00000000000000a0 (__DATA,__objc_msgrefs) weak private external l_objc_msgSend_fixup_alloc
00000000000000e8 (__TEXT,__eh_frame) non-external EH_frame0
0000000000000100 (__TEXT,__eh_frame) external _main.eh

上面就是那个目标文件的所有符号
External 的意思是指对于这个目标文件该类并不是私有的，相反，non-external 的符号则表示对于目标文件是私有的。我们的 helloworld.o 目标文件引用了类 Foo，不过这并没有实现它。因此符号表中将其标示为 undefined

链接器会尝试解析所有的 undefined 符号

xcrun nm -nm Foo.o

xcrun nm -nm a.out 

可执行文件同样知道去哪里找到所需库：
xcrun otool -L a.out

===========================================================
dyld 的共享缓存

在 OS X 和 iOS 上的动态链接器使用了共享缓存，共享缓存存于 /var/db/dyld/。对于每一种架构，操作系统都有一个单独的文件，文件中包含了绝大多数的动态库，这些库都已经链接为一个文件，并且已经处理好了它们之间的符号关系。当加载一个 Mach-O 文件 (一个可执行文件或者一个库) 时，动态链接器首先会检查 共享缓存 看看是否存在其中，如果存在，那么就直接从共享缓存中拿出来使用。每一个进程都把这个共享缓存映射到了自己的地址空间中。这个方法大大优化了 OS X 和 iOS 上程序的启动时间