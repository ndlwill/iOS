引入内联函数是为了解决函数调用效率的问题

使用inline修饰的函数，在编译的时候，会把代码直接嵌入调用代码中。就相当于用#define 宏定义来定义一个add 函数那样！与#define的区别是: 
1)#define定义的格式要有要求，而使用inline则就平常写函数那样，只要加上inline即可！ 
2)使用#define宏定义的代码，编译器不会对其进行参数有效性检查，仅仅只是进行替换。 
3）#define宏定义的代码，其返回值不能被强制转换成可转换的适合的转换类型。

在inline加上static修饰符，只是为了表明该函数只在该文件中可见
在同一个工程中，就算在其他文件中也出现同名、同参数的函数也不会引起函数重复定义的错误



CG_INLINE void
ReplaceMethod(Class _class, SEL _originSelector, SEL _newSelector) {
    Method oriMethod = class_getInstanceMethod(_class, _originSelector);
    Method newMethod = class_getInstanceMethod(_class, _newSelector);
    BOOL isAddedMethod = class_addMethod(_class, _originSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));
    if (isAddedMethod) {
        class_replaceMethod(_class, _newSelector, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));
    } else {
        method_exchangeImplementations(oriMethod, newMethod);
    }
}