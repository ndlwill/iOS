Autorelease Pool的一个使用场景是在需要延迟释放某些对象的情况时，
可以把他们先放到对应的Autorelease Pool中，等Autorelease Pool生命周期结束时再一起释放。这些对象会被发送autorelease消息。

你需要写一个循环，里面会创建很多临时的对象。 
这时候你可以在循环内部的代码块里使用一个autorelease pool block，这样这些对象就能在一次迭代完成后被释放掉。这种方式可以降低内存最大占用。
NSArray *urls = <# An array of file URLs #>;
for (NSURL *url in urls) {
 
    @autoreleasepool {
        NSError *error;
        NSString *fileContents = [NSString stringWithContentsOfURL:url
                                         encoding:NSUTF8StringEncoding error:&error];
        /* Process the string, creating and autoreleasing more objects. */
    }
}
for循环的每次迭代处理一个文件，我们把这个处理过程放在一个autorelease pool block中，这样任何在里面创建的autorelease的对象都会在这次迭代结束后被释放，这样就不会占用很多内存了。

当你大量使用辅助线程。 
你需要在线程的任务代码中创建自己的autorelease pool block。
当你的线程是长时间工作、可能生产出大量的autorelease的对象的时候

NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];  
id obj = [[NSObject alloc] init];  
[obj autorelease];  
// Do something...
[pool drain]; 
上面的代码最后一行执行的时候就会自动调用 [obj release];。

每一个线程都会维护自己的 Autorelease Pool 堆栈
Autorelease Pool 是与线程紧密相关的，每一个 Autorelease Pool 只对应一个线程