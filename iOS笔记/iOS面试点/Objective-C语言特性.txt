动态特性:
OC做为一门面向对象语言，自然具有面向对象的语言特性，如封装、继承、多态。
他具有静态语言的特性(如C++)，又有动态语言的效率(动态绑定、动态加载等)。
OC的动态特性表现为了三个方面：动态类型、动态绑定、动态加载。

（1）动态类型
Dynamic Typing
动态类型，说简单点就是id类型。动态类型是跟静态类型相对的。
像内置的明确的基本类型都属于静态类型(int、NSString等)。
静态类型是强类型，而动态类型属于弱类型,静态类型在编译的时候就能被识别出来。所以，若程序发生了类型不对应，编译器就会发出警告。
而动态类型就编译器编译的时候是不能被识别的，要等到运行时(run time)，即程序运行的时候才会根据语境来识别。所以这里面就有两个概念要分清：编译时跟运行时。


（2）动态绑定
Dynamic Binding
只需记住关键词@selector/SEL即可.
先来看看“函数”，对于其他一些静态语言，比如c++,一般在编译的时候就已经将将要调用的函数的函数签名都告诉编译器了。静态的，不能改变。

而在OC中，其实是没有函数的概念的，我们叫“消息机制”，所谓的函数调用就是给对象发送一条消息。
这时，动态绑定的特性就来了。OC可以先跳过编译，到运行的时候才动态地添加函数调用，在运行时才决定要调用什么方法，需要传什么参数进去。
这就是动态绑定，要实现他就必须用SEL变量绑定一个方法。最终形成的这个SEL变量就代表一个方法的引用。
SEL变量只是一个整数，他是该方法的ID.
以前的函数调用，是根据函数名，也就是字符串去查找函数体.
但现在，我们是根据一个ID整数来查找方法，整数的查找字自然要比字符串的查找快得多！所以，动态绑定的特定不仅方便，而且效率更高。


（3）动态加载
Dynamic Loading
让程序在运行时添加代码模块以及其他资源。用户可以根据需要加载一些可执行代码和资源，而不是在启动时就加载所有组件。
可执行代码中可以含有和程序运行时整合的新类。


子类型可以强转到父类型（里氏替换原则）