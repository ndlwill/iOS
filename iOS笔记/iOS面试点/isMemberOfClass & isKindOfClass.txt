// 类方法实现，用于检查一个类是否属于另一个类或其父类链上的任何类。
+ (BOOL)isKindOfClass:(Class)cls {
    // 从当前类开始，tcls将沿着元类的继承链向上遍历。
    for (Class tcls = self->ISA(); tcls; tcls = tcls->getSuperclass()) {
        // 检查当前类tcls是否等于要检查的类cls。
        if (tcls == cls) return YES; // 如果相等，立即返回YES，表示属于该类或其子类。
    }
    // 如果遍历完整个继承链都没有找到匹配的类，返回NO。
    return NO;
}

// 实例方法实现，用于检查一个对象是否属于指定的类或其任何父类。
- (BOOL)isKindOfClass:(Class)cls {
    // 从对象的类开始，tcls将沿着继承链向上遍历。
    for (Class tcls = [self class]; tcls; tcls = tcls->getSuperclass()) {
        // 检查当前类tcls是否等于要检查的类cls。
        if (tcls == cls) return YES; // 如果相等，立即返回YES，表示属于该类或其子类。
    }
    // 如果遍历完整个继承链都没有找到匹配的类，返回NO。
    return NO;
}

isKindOfClass分为类方法和实例方法，相同点都是首先判断调用者的isa指针指向的对象是否和传入的cls对象相同，
如果不相同则沿着继承链获取调用者的父类的isa指针接着判断其指向的对象和传入的cls对象相同。
至于tcls为什么能为nil呢，因为任何OC对象沿着继承链向上都会到根类NSObject类而NSObject类的Superclass为nil


+ (BOOL)isMemberOfClass:(Class)cls {
    return self->ISA() == cls;
}

- (BOOL)isMemberOfClass:(Class)cls {
    return [self class] == cls;
}


// 类方法，返回自身
+ (Class)class {
    return self;
}
 
// 实例方法，查找isa（类）
- (Class)class {
    return object_getClass(self);
}


Class object_getClass(id obj)
{
    if (obj) return obj->getIsa();
    else return Nil;
}




BOOL re1 = [(id)[NSObject class] isKindOfClass:[NSObject class]];
BOOL re2 = [(id)[NSObject class] isMemberOfClass:[NSObject class]];   
BOOL re3 = [(id)[LGPerson class] isKindOfClass:[LGPerson class]];
BOOL re4 = [(id)[LGPerson class] isMemberOfClass:[LGPerson class]];  
NSLog(@" re1 :%hhd\n re2 :%hhd\n re3 :%hhd\n re4 :%hhd\n",re1,re2,re3,re4);// 1 0 0 0 

BOOL re5 = [(id)[NSObject alloc] isKindOfClass:[NSObject class]];  
BOOL re6 = [(id)[NSObject alloc] isMemberOfClass:[NSObject class]];    
BOOL re7 = [(id)[LGPerson alloc] isKindOfClass:[LGPerson class]];
BOOL re8 = [(id)[LGPerson alloc] isMemberOfClass:[LGPerson class]];   
NSLog(@" re5 :%hhd\n re6 :%hhd\n re7 :%hhd\n re8 :%hhd\n",re5,re6,re7,re8);// 1 1 1 1