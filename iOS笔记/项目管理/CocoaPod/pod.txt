pod install
就是说，当你在项目中的Podfile配置文件中添加、删除、或者更新版本号时使用，也就是用来安装新Pod，删除pod，或者根据你设置的pod版本号来安装
安装完后，会自动生成Podfile.lock文件，该文件记录着Podfile配置的所有Pod的版本信息，依赖库信息，和pod库的checksum(校验码)
所以当你下次运行pod install时，已经安装过的pod就不会再次去下载安装，也不会更新已有的pod库。

对于在Podfile.lock文件中的pod库，pod install会只下载Podfile.lock文件中指定的版本，而不会去检查这个库是否有更新的版本。
对于不在Podfile.lock文件中的pod库，pod install会搜索这个pod库在Podfile文件中指定的版本

pod update
也就是当我们想把已有的库更新到最新版本时使用。比如当前的AFNetworking的版本时3.2.1，那么最新版本时4.0.1，通过pod install并不会更新库到最新版本，而pod update却可以更新到最新的版本

pod outdated
查看当前每个库的最新版本和当前版本的差异

当新加入团队的成员下载你的开发项目后，应该运行pod install还是pod update？
答：pod install，因为我们要保证该项目里的每个团队成员都是用相同的pod库的版本，所以pod install会根据Podfile.lock文件里的版本信息进行下载；
如果运行pod update，那就忽略Podfile.lock内容，直接去远程拉去最新的pod库信息

Versions: 4.0.1, 4.0.0, 3.2.1, 3.2.0, 3.1.0, 3.0.4, 3.0.3, 3.0.2, 3.0.1,
   3.0.0, 3.0.0-beta.3, 3.0.0-beta.2, 3.0.0-beta.1, 2.7.0, 2.6.3, 2.6.2, 2.6.1,
   2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4,
   2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3,
   2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0,
   1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1, 0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0,
   0.7.0, 0.5.1

pod 'AFNetworking', "~> 2.0.1" 
// pod install 会安装2.0.3
// pod update AFNetworking 装的还是2.0.3

然后
pod 'AFNetworking', "~> 3.0.0"
// pod install 会安装3.0.4
// pod update AFNetworking 装的还是3.0.4

然后
pod 'AFNetworking'
// pod install 还是3.0.4
// pod update AFNetworking 装的最新版本4.0.1

总之会按照Podfile中的版本约束来安装,不管是install还是update

============================================================
###执行pod search WechatOpenSDK,如显示的WechatOpenSDK版本不是最新的，则先执行pod repo update操作更新本地repo的内容

CocoaPods首先会去匹配本地的spec库，在确认spec版本库不需要更新之后，才会下载相应的库文件
pod install --no-repo-update --verbose // 不更新（跳过spec版本库更新匹配），并打印出详细过程信息


platform :ios, '8.0'

target 'MKSwiftControls' do
    use_frameworks! 
    pod 'SDWebImage', '~> 3.8'
end

在SDWebImage的GitHub主页，关于 CocoaPods 使用作者添加了一些说明
If you are using Swift, be sure to add use_frameworks! and set your target to iOS 8+:


pod repo update #用于保证本地地图相关SDK为最新版 
pod update

===============pod 命令
pod spec create NAME  //创建NAME.podspec文件

===============Pods
Pods会单独作为一个xcodeproj

Pods的详细目录结构:
Pods
├── Podfile # 指向根目录下的Podfile 说明依赖的第3方库
├── Frameworks  # 文件系统并没有对应的目录 这只是1个虚拟的group 表示需要链接的frameowork
├── └── iOS     # 文件系统并没有对应的目录 这只是1个虚拟的group 这里表示是ios需要链接的framework
├──     └── Xxx.framework # 链接的frameowork列表
├── Pods        # 虚拟的group 管理所有第3方库
│   └── AFNetwoking  #AFNetworking库 虚拟group 对应文件系统Pods/AFNetworking/AFNetworking目录下的内容
│       ├── xxx.h    #AFNetworking库的头文件 对应文件系统Pods/AFNetworking/AFNetworking目录下的所有头文件
│       ├── xxx.m    #AFNetworking库的实现文件 对应文件系统Pods/AFNetworking/AFNetworking目录下的所有实现文件
│       └── Support Files  # 虚拟group 支持文件 没有直接对应的文件系统目录，该group下的文件都属于目录: Pods/Target Support Files/AFNetworking/
│           ├── AFNetworking.xcconfig  # AFNetworking编译的工程配置文件
│           ├── AFNetworking-prefix.pch # AFNetworking编译用的预编译头文件
│           └── AFNetworking-dummy.m   # 空实现文件
├── Products  # 虚拟group
│   ├── libAFNetworking.a # AFNetworking target将生成的静态库 
│   └── libPods-CardPlayer.a  # Pods-CardPlayer target将生成的静态库              
└── Targets Support Files  # 虚拟group 管理支持文件
    └── Pods-CardPlayer    # 虚拟group Pods-CardPlayer target 
        ├── Pods-CardPlayer-acknowledgements.markdown # 协议说明文档
        ├── Pods-CardPlayer-acknowledgements.plist   # 协议说明文档
        ├── Pods-CardPlayer-dummy.m  # 空实现 
        ├── Pods-CardPlayer-frameworks.sh  # 安装framework的脚本
        ├── Pods-CardPlayer-resources.sh    # 安装resource的脚本
        ├── Pods-CardPlayer.debug.xcconfig  # debug configuration 的 配置文件
        └── Pods-CardPlayer.release.xcconfig # release configuration 的 配置文件






