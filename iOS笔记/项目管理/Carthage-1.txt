https://github.com/Carthage/Carthage

carthage会为你下载和编译所需要的第三方库，当命令执行完毕，在你的项目文件夹中会创建一个名为Carthage的文件夹， 在～/Carthage/Build/iOS里会出现xxx.framework


Carthage的优点:
1.使用了CocoaPods的项目是高度集成的，而Carthage更灵活强调尽可能将任务委托给Xcode和Git。
CocoaPods在使用中会自动创建和更新workspace、依赖和Pod项目并进行整合;
Carthage在使用中不需要创建和集成相应的workspace和project,只需要依赖打包好的framework文件即可。
总结一下，CocoaPods的方法更容易使用，而Carthage更灵活且对项目没有侵入性。
2.CocoaPods相对来说功能要比Carthage多很多，因此也更复杂,而CocoaPods配置简单项目干净。
3.CocoaPods有一个中心仓库，而Carthage是去中心化的，没有中心服务器也就避免了可能因中心节点错误而带来的失败，即Carthage每次配置和更新环境，只会去更新具体的库，时间更快。
4.Carthage 管理的依赖只需编译一次，项目干净编译时，不会再去重新编译依赖，节省时间
5.与 CocoaPods 无缝集成，一个项目能同时拥有 CocoaPods 和 Carthage

Carthage的不足:
仅支持 iOS8 +
它只支持框架，所以不能用来针对 iOS 8 以前的系统版本进行开发
支持的 Carthage 安装的第三方框架和依赖不如 CocoaPods 丰富
无法在 Xcode 里定位到第三方库源码


Carthage与CocoaPods的区别:
（1）使用 CocoaPods 我们只需要修改 Podfile 文件，CocoaPods 会直接创建和修改项目的 workspace 配置。
而 Carthage不会创建新的 workspace
（2）虽然CocoaPods 功能更加强大，但因为国内网络问题，很多库更新不下来
Carthage 只需要从 github 上下载项目即可，配置简单，使用的第三方库的时候就像使用苹果原生的 framework 一样，干净简洁。

Carthage (只支持 iOS 8+)

Written in Swift! (v.s. CocoaPods in Ruby)
Carthage 是一个去中心化的第三方依赖库管理工具，它自动帮你编译所依赖的第三方库并以 framework 形式提供给你
非入侵式：不会修改 Xcode 相关配置，耦合性低

brew update
brew install carthage
以后如果需要更新Carthage版本，则执行下面命令：
brew upgrade carthage

1.首先进入到工程的根目录下，创建空白的 Cartfile 文件
2.打开 Cartfile 文件，写入如下内容
github "Alamofire/Alamofire" ~> 3.0
github "SwiftyJSON/SwiftyJSON"
3.carthage update --platform iOS
4.命令执行完毕后，在项目文件夹中会创建一个名为 Carthage 的文件夹
5.而在 Carthage/Build/iOS 文件夹下就是刚创建好的 framework 文件
6.打开我们的工程项目，将上面的两个 framework 拖到 General -> Linked Frameworks and Libraries 中
7.点击配置页的 Build Phases 标签坐上角的加号，添加一个 Run Script
8.将新增的 Run Script 做如下修改
Shell 下方文本区域输入：/usr/local/bin/carthage copy-frameworks
input Files 中添加需要导入的库：
$(SRCROOT)/Carthage/Build/iOS/Alamofire.framework
$(SRCROOT)/Carthage/Build/iOS/SwiftyJSON.framework
9.最后开发时，我们只需要在使用的时候 import 一下需要的库就可以了

想要将这些库更新到最新版本，则执行 update 命令即可:
carthage update --platform iOS

如果要新增第三方库，或是删除原有的库。我们先编辑修改 Cartfile 文件。再执行执行 update 命令:
carthage update --platform iOS
最后打开项目，修改 General -> Linked Frameworks and Libraries 中的库引用。 以及 Run Script 中的 input Files 里相关内容即可。 

carthage version 命令可查看版本

Carthage中管理依赖的文件为Carfile
我们可以创建一个名为Cartfile的文件来容纳我们工程中所依赖的三方库

成功安装完 Carthage 后，在你工程的 Cartfile 文件中添加如下一行：
github "AFNetworking/AFNetworking" ~> 3.0
github "kangzubin/XMNetworking" ~> 1.1.0
github "ndl/TestCarthage" // 一个并没有支持Carthage的私有库

在终端环境输入 carthage update，Carthage 将自动下载所有相依模组至 Carthage/Checkouts 资料夹中，并编译成 frameworks

执行完carthage update命令后，会生成一个Cartfile.resoved的文件和一个Carthage的文件夹
.resolved的文件与CocoaPods中的lock文件功能一致，都是用来锁版本的
Carthage文件夹下存放的就是Carthage为我们提供的动态库framework

添加引入framework的相关脚本
/usr/local/bin/carthage copy-frameworks


Carthage/Build: 打包好的 framework（pre-built 或是从 checkouts build 出来的）
Carthage/Checkouts: 所有相依模组的 source code

============================================自己的仓库关联Carthage

============================================版号语法
# 版号 >= 3.1.2
github "ReactiveX/RxSwift" >= 3.1.2

# 版号 3.x (3.0 <= ver < 4.0)
github "SnapKit/SnapKit" ~> 3.0

# 仅匹配版号 0.4.1
github "jspahrsummers/libextobjc" == 0.4.1

# 最新版
github "jspahrsummers/xcconfigs"

# 指定 Git branch
github "jspahrsummers/xcconfigs" "branch"

# 其他 Git Server Repository 的 develop 分支
git "https://agitserver.com/swift-test/swift-test.git" "develop"

# 本地 local Git Repository
git "file:///directory/to/project" "branch"