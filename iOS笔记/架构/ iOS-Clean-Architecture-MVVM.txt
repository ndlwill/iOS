https://github.com/kudoleh/iOS-Clean-Architecture-MVVM

https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3


==================================================The Clean Architecture:
https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html

architectures 思想:
Independent of Frameworks.
The architecture does not depend on the existence of some library of feature laden software. 
This allows you to use such frameworks as tools, rather than having to cram your system into their limited constraints.

Testable. The business rules can be tested without the UI, Database, Web Server, or any other external element.

Independent of UI. The UI can change easily, without changing the rest of the system. 
A Web UI could be replaced with a console UI, for example, without changing the business rules.

Independent of Database. 
You can swap out Oracle or SQL Server, for Mongo, BigTable, CouchDB, or something else. 
Your business rules are not bound to the database.

Independent of any external agency. In fact your business rules simply don’t know anything at all about the outside world.


The Dependency Rule:
The concentric circles represent different areas of software. In general, the further in you go, the higher level the software becomes.
This rule says that source code dependencies can only point inwards.
Nothing in an inner circle can know anything at all about something in an outer circle.
In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle.
That includes, functions, classes. variables, or any other named software entity.

By the same token, data formats used in an outer circle should not be used by an inner circle, 
especially if those formats are generate by a framework in an outer circle. 
We don’t want anything in an outer circle to impact the inner circles.


Entities:
Entities encapsulate Enterprise wide business rules. An entity can be an object with methods, 
or it can be a set of data structures and functions. 
It doesn’t matter so long as the entities could be used by many different applications in the enterprise.

If you don’t have an enterprise, and are just writing a single application, 
then these entities are the business objects of the application. They encapsulate the most general and high-level rules. 
They are the least likely to change when something external changes. 
For example, you would not expect these objects to be affected by a change to page navigation, or security. 
No operational change to any particular application should affect the entity layer.


Use Cases:
The software in this layer contains application specific business rules. 
It encapsulates and implements all of the use cases of the system. These use cases orchestrate the flow of data to and from the entities, 
and direct those entities to use their enterprise wide business rules to achieve the goals of the use case.

We do not expect changes in this layer to affect the entities. 
We also do not expect this layer to be affected by changes to externalities such as the database, 
the UI, or any of the common frameworks. This layer is isolated from such concerns.

We do, however, expect that changes to the operation of the application will affect the use-cases and therefore the software in this layer. 
If the details of a use-case change, then some code in this layer will certainly be affected.


Interface Adapters:
The software in this layer is a set of adapters that convert data from the format most convenient for the use cases and entities, to the format most convenient for some external agency such as the Database or the Web.
It is this layer, for example, that will wholly contain the MVC architecture of a GUI.
The Presenters, Views, and Controllers all belong in here.
The models are likely just data structures that are passed from the controllers to the use cases, and then back from the use cases to the presenters and views.

Similarly, data is converted, in this layer, from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used. i.e. The Database.
No code inward of this circle should know anything at all about the database.
If the database is a SQL database, then all the SQL should be restricted to this layer, and in particular to the parts of this layer that have to do with the database.

Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.


Frameworks and Drivers:
The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. 
Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.

This layer is where all the details go. The Web is a detail. The database is a detail. 
We keep these things on the outside where they can do little harm.



Source code dependencies always point inwards. 
As you move inwards the level of abstraction increases. The outermost circle is low level concrete detail. 
As you move inwards the software grows more abstract, and encapsulates higher level policies. The inner most circle is the most general.


#####
Crossing boundaries:
the Controllers and Presenters communicating with the Use Cases in the next layer. 
Note the flow of control. It begins in the controller, moves through the use case, and then winds up executing in the presenter. 
Note also the source code dependencies. Each one of them points inwards towards the use cases.

We usually resolve this apparent contradiction by using the Dependency Inversion Principle.
For example, consider that the use case needs to call the presenter. 
However, this call must not be direct because that would violate The Dependency Rule: No name in an outer circle can be mentioned by an inner circle. 
So we have the use case call an interface (Shown here as Use Case Output Port) in the inner circle, and have the presenter in the outer circle implement it.

The same technique is used to cross all the boundaries in the architectures.
We take advantage of dynamic polymorphism to create source code dependencies that oppose the flow of control so that we can conform to The Dependency Rule no matter what direction the flow of control is going in.
#####

What data crosses the boundaries:
Typically the data that crosses the boundaries is simple data structures
You can use basic structs or simple Data Transfer objects if you like.
Or the data can simply be arguments in function calls.
Or you can pack it into a hashmap, or construct it into an object.
The important thing is that isolated, simple, data structures are passed across the boundaries.
We don’t want to cheat and pass Entities or Database rows.
We don’t want the data structures to have any kind of dependency that violates The Dependency Rule.

For example, many database frameworks return a convenient data format in response to a query. 
We might call this a RowStructure. We don’t want to pass that row structure inwards across a boundary. 
That would violate The Dependency Rule because it would force an inner circle to know something about an outer circle.


Conclusion
Conforming to these simple rules is not hard, and will save you a lot of headaches going forward. 
By separating the software into layers, and conforming to The Dependency Rule, 
you will create a system that is intrinsically testable, with all the benefits that implies. 
When any of the external parts of the system become obsolete, like the database, or the web framework, 
you can replace those obsolete elements with a minimum of fuss.


Clean Architecture（清洁架构）
一种软件架构模式，旨在创建可维护、可扩展、测试友好的应用程序
它通过将应用程序的不同责任分离到不同的层来实现这些目标。

核心思想:
Clean Architecture 的核心思想是将应用程序的各个组件分成不同的层级，每一层只与其相邻的层交互，从而形成一个松耦合的系统结构。
每一层都具有特定的职责，依赖于内层的内容，而不是外层。

架构层次:
Entities（实体层）：这一层包含系统的业务规则和核心实体。实体通常是业务模型的核心，比如用户、订单等。它们不依赖于任何其他层。

Use Cases（用例层）：这一层包含应用程序的业务逻辑和用例。它们使用实体来实现具体的应用程序逻辑，但不直接依赖于数据访问或用户界面。

Interface Adapters（接口适配器层）：这一层负责将用例和实体的数据转换为外部系统（如数据库、网络服务）所需的格式，并将这些外部系统的数据转换为用例和实体所需的格式。它包含控制器、视图模型、数据传输对象（DTO）等。

Frameworks and Drivers（框架和驱动层）：这是最外层，包含具体的实现和框架（如数据库、网络库、UI框架）。它实现了具体的技术细节和第三方库的集成。

数据层（Data Layer）的位置
数据层（或称为数据访问层）通常位于架构的外层（Interface Adapters 或 Frameworks and Drivers），其主要作用是提供数据的存取功能，包括数据库操作、网络请求等。
它直接与数据库、文件系统或网络服务交互，但它不包含业务逻辑或用例逻辑。这样做的目的是确保：
业务逻辑的独立性：业务逻辑层（Use Cases 和 Entities）不依赖于具体的数据存取实现，而是通过接口与数据层交互。
易于测试：业务逻辑可以独立于数据存取逻辑进行单元测试。
灵活性：可以在不影响业务逻辑的情况下更换数据存取实现（例如，从 SQL 数据库切换到 NoSQL 数据库）。

Entities Layer：
struct User {
    let id: Int
    let name: String
}

Use Cases Layer：
protocol UserRepository {
    func getUser(id: Int) -> User
}

class GetUserUseCase {
    private let repository: UserRepository

    init(repository: UserRepository) {
        self.repository = repository
    }

    func execute(id: Int) -> User {
        return repository.getUser(id: id)
    }
}

Interface Adapters Layer：
class UserRepositoryImpl: UserRepository {
    func getUser(id: Int) -> User {
        // Convert data from database to User entity
    }
}

Frameworks and Drivers Layer：
class Database {
    func fetchUser(id: Int) -> [String: Any] {
        // Fetch user data from the database
    }
}

在这个设计中，UserRepositoryImpl 是数据层的实现，它与数据库交互。GetUserUseCase 只依赖于 UserRepository 协议，因此它不关心 UserRepositoryImpl 的具体实现。
这样，如果我们将数据源从数据库切换到网络服务，只需更改 UserRepositoryImpl 实现，而不会影响 GetUserUseCase。

==================================================iOS-Clean-Architecture-MVVM:
When we develop software it is important to not only use design patterns, but also architectural patterns.
In mobile software engineering, the most widely used are MVVM, Clean Architecture and Redux patterns.
how architectural patterns MVVM and Clean Architecture can be applied in an iOS app.

###
The main rule is not to have dependencies from inner layers to outers layers. 
The arrows pointing from outside to inside is the Dependency rule. 
There can only be dependencies from outer layer inward.
###


###
After grouping all layers we have: Presentation, Domain and Data layers.

Domain Layer (Business logic) is the inner-most part of the onion (without dependencies to other layers, it is totally isolated).


###