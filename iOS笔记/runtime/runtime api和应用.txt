
class_getClassMethod
class_getInstanceMethod
method_exchangeImplementations


// 遍历某个类所有的成员变量
class_copyIvarList
// 遍历某个类所有的方法
class_copyMethodList
// 获取指定名称的成员变量
class_getInstanceVariable
// 获取成员变量名
ivar_getName
// 获取成员变量类型编码
ivar_getTypeEncoding
// 获取某个对象成员变量的值
object_getIvar
// 设置某个对象成员变量的值
object_setIvar
// 给对象发送消息
objc_msgSend



[Person coding];
//运行时 runtime 会将它转化成 C 语言的代码:
objc_msgSend(Person, @selector(coding));


// 获取私有变量名称
+ (void)getIvars {
    
    unsigned int count = 0;
    
    Ivar *ivars = class_copyIvarList([UITextField class], &count);
    
    for (int i = 0; i < count; i++) {
        Ivar ivar = ivars[i];
        
        NSLog(@"%s----%s", ivar_getName(ivar), ivar_getTypeEncoding(ivar));
    }
}





#pragma mark -归档
- (void)encodeWithCoder:(NSCoder *)aCoder {
    unsigned int count = 0;

    //获取类中所有属性
    Ivar *vars = class_copyIvarList([self class], &count);
    for (unsigned int i = 0; i < count; i ++) {
        Ivar var = vars[i];
        const char *name = ivar_getName(var);
        NSString *key = [NSString stringWithUTF8String:name];

        //利用 KVC 进行取值，根据属性名称获取对应的值
        id value = [self valueForKey:key];
        [aCoder encodeObject:value forKey:key];
    }
    free(vars);
}


#pragma mark -解档
- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder {
    if (self = [super init]) {
        unsigned int count = 0;

        //获取类中所有属性
        Ivar *vars = class_copyIvarList([self class], &count);
        for (unsigned int i = 0; i < count; i ++) {
            Ivar var = vars[i];
            const char *name = ivar_getName(var);
            NSString *key = [NSString stringWithUTF8String:name];

            //进行解档取值
            id value = [aDecoder decodeObjectForKey:key];

             //利用 KVC 对属性赋值
            [self setValue:value forKey:key];
        }
        free(vars);
    } 
    return self;
}


======================
类继承自NSObject.  .m中
- (void)sayHello {
    NSLog(@"Hello!");
}

-(void)showName:(NSString *)name {
    NSLog(@"My name is %@",name);
}

-(void)showAge:(NSInteger)age {
    NSLog(@"My age is %ld", age);
}

-(float)showHeight{
    return 180.0f;
}

-(NSString *)showInformation {
    return @"Nice to meet you!";
}


ViewController:
LZN_msgSend *msgSend = [[LZN_msgSend alloc] init];
((void (*) (id, SEL)) objc_msgSend) (msgSend, sel_registerName("sayHello"));

((void (*) (id, SEL, NSString *)) objc_msgSend) (msgSend, sel_registerName("showName:"), @"Liu Zhong Ning");

((void (*) (id, SEL, NSInteger)) objc_msgSend) (msgSend, sel_registerName("showAge:"), 23);

float f = ((float (*) (id, SEL)) objc_msgSend_fpret) (msgSend, sel_registerName("showHeight"));

NSString *information = ((NSString* (*) (id, SEL)) objc_msgSend) (msgSend, sel_registerName("showInformation"));

========================
#pragma mark -字典转模型

+(instancetype)objectWithDict:(NSDictionary *)dict {
    id objc = [[self alloc] init];

    //遍历字典中的属性
    for (NSString *key in dict.allKeys) {
        id value = dict[key];
        objc_property_t property = class_getProperty(self, key.UTF8String);
        unsigned int count = 0;
        objc_property_attribute_t *attributeList = property_copyAttributeList(property, &count);
        objc_property_attribute_t attribute = attributeList[0];
        NSString *string = [NSString stringWithUTF8String:attribute.value];
        if ([string isEqualToString:@"@\"LZNArchive\""]) {
            value = [self objectWithDict:value];
        }

        //生成 setter 方法，并用 objc_msgSend 调用
        NSString *methodName = [NSString stringWithFormat:@"set%@%@:",[key substringToIndex:1].uppercaseString,[key substringFromIndex:1]];
        SEL setter = sel_registerName(methodName.UTF8String);
        if ([objc respondsToSelector:setter]) {
            ((void (*) (id,SEL,id)) objc_msgSend) (objc,setter,value);
        }
        free(attributeList);
    }
    return objc;
}

#pragma mark -模型转字典
-(NSDictionary *)keyValuesWithObject {
    unsigned int count = 0;
    objc_property_t *propertyList = class_copyPropertyList([self class], &count);
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];

    //遍历模型中属性
    for (int i = 0; i < count; i ++) {
        objc_property_t property = propertyList[i];

        //生成 getter 方法，并用 objc_msgSend 调用
        const char *propertyName = property_getName(property);
        SEL getter = sel_registerName(propertyName);
        if ([self respondsToSelector:getter]) {
            id value = ((id (*) (id,SEL)) objc_msgSend) (self,getter);

            //判断当前属性
            if ([value isKindOfClass:[self class]] && value) {
                value = [value keyValuesWithObject];
            }
            if (value) {
                NSString *key = [NSString stringWithUTF8String:propertyName];
                [dict setObject:value forKey:key];
            }
        }
    }
    free(propertyList);
    return dict;
}

