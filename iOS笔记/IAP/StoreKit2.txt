StoreKit 2 使用了 Swift 5.5 的新特性进行开发，完全修改了获取商品、发起交易、管理交易信息等接口 API 的实现方式。

新获取商品方式
// 获取商品
let products = try await Product.products(for: productIDs)


// 购买商品
func purchase(_ product: Product) async throws -> Transaction? {
//Begin a purchase.
let result = try await product.purchase()

switch result {
    case .success(let verification):
        let transaction = try checkVerified(verification)

        //Deliver content to the user.
        await updatePurchasedIdentifiers(transaction)

        //Always finish a transaction.
        await transaction.finish()

        return transaction
    case .userCancelled, .pending:
        return nil
    default:
        return nil
    }
}

新 API:
商品
购买
交易信息
交易历史
订阅状态

----------Product:
新增了一些商品类型，订阅信息
通过新增的 product type 我们可以轻易的知道当前的商品是消耗品还是订阅商品
针对于自动连续订阅的第一次购买优惠，我们可以直接感知到当前的商品是不是用户的 Apple ID 下的第一次购买
我们就可以通过 isEligibleForIntroOffer 这个属性，轻松又方便得提前拿到这些信息，对已经享受过的Apple ID账号不展示这个优惠。

提供了新的购买商品接口。其中购买商品时增加了一些可选参数 PurchaseOption 结构体，
该结构体里有新增的特别重要的字段appAccountToken， 类似 SKPayment.applicationUsername 字段，
但是 appAccountToken 信息会永久保存在 Transaction 信息内。

appAccountToken 字段是由开发者创建的；关联到 App 里的用户账号；使用 UUID 格式；永久存储在 Transaction 信息里。
这里的 appAccountToken 字段苹果的意思是用来存储用户账号信息的，但是应该也可以用来存储 orderID 相关的信息，需要将 orderID 转成 UUID 格式塞到 Transaction 信息内，方便处理补单、退款等操作。

处理验证 Transaction。系统会验证是否是一个合法的 Transaction，此时系统不再提供 base64 的 receip string 信息，
只需要上传 transaction.id 和 transaction.originalID，服务器端根据需要选择合适的 ID 进行验证。

监听 Transaction 更新
func listenForTransactions() -> Task<Void, Error> {
    return Task.detached {
        //Iterate through any transactions which didn't come from a direct call to `purchase()`.
        for await result in Transaction.updates {
        do {
            let transaction = try self.checkVerified(result)

            //Deliver content to the user.
            await self.updatePurchasedIdentifiers(transaction)

            //Always finish a transaction.
            await transaction.finish()
        } catch {
            //StoreKit has a receipt it can read but it failed verification. Don't deliver content to the user.
            print("Transaction failed verification")
        }
        }
    }
}
针对 transaction 的更新，这个监听是让我们监听

----------Transaction History:
All transactions：全部的购买交易订单，在 transaction 里面获取
Latest transactions：最新的购买交易订单。
Current entitlements：所有当前订阅的交易，以及所有购买（且未退还）的非消耗品。

同步不同设备的购买记录。这个 API 可以替换 StoreKit 1 里面的恢复购买 API，调用该方法后，系统会弹出提示框要求输入 AppleID 帐号密码信息。
extension AppStore {
  public static func sync() async throws
}

----------Subscription status:

----------show manager subscriptions:
可以直接唤起 App Store 里的管理订阅页面
public static func showManageSubscriptions(in scene: UIWindowScene) async throws

----------request refund API: SandBox环境 退款请求
提供了新的发起退款 API，允许用户在开发者的 App 中直接进行退款申请。
用户进行申请退款后，App 可以收到通知、另外苹果服务器也会通知开发者服务器。（沙盒环境也可进行退款测试了，但是 App Store 里还没开启这个功能。）
extension Transaction {
  public static func beginRefundRequest(for transactionID: UInt64, in scene: UIWindowScene) async throws -> Transaction.RefundRequestStatus
}

==================================================App Store环境 退款请求
How to request a refund
https://reportaproblem.apple.com/

查看从 Apple 购买的 App 或内容的退款状态
https://support.apple.com/zh-cn/HT210904

==================================================StoreKit1 存在的问题
苹果后台能否查看到退款的订单详情？
不能。只能苹果处理退款后发通知给我们的服务器，告知发生了一笔退款

消耗性、非消耗性、非续期订阅、自动续订能不能在沙盒环境测试退款？
不能。系统没提供这种测试方式。

能够将用户反馈的苹果收据里的 orderID 与具体的交易进行关联吗？
不能。
StoreKit 2 出来后支持去查询 StoreKit1 的交易了，https://developer.apple.com/documentation/appstoreserverapi/look_up_order_id?language=_9