1.
#import是Objective-C导入头文件的关键字，
#include是C/C++导入头文件的关键字,使用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once；
@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含；
#import<>用来包含系统的头文件，#import””用来包含用户头文件

2.
object-c的数据类型有NSString，NSNumber，NSArray，NSMutableArray，NSData等
NSInteger是基本数据类型，并不是NSNumber的子类，当然也不是NSObject的子类。
NSInteger是基本数据类型Int或者Long的别名（NSInteger的定义typedef long NSInteger），
它的区别在于，NSInteger会根据系统是32位还是64位来决定是本身是int还是Long

3.
Id 声明的对象具有运行时的特性，即可以指向任意类型的objcetive-c的对象

4.
kvc:键 - 值编码是一种间接访问对象的属性，使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制

KVC底层实现：遍历字典里的所有key
一个一个获取key，会去模型里查找setKey:,直接调用这个方法
寻找有没有带下划线_key ,直接拿到属性赋值
寻找有没有key的属性，如果有，直接赋值
如果没有，他还会去valueForUndefineKey看有没有进行处理，如果没有，就会报错

kvo:键值观察机制，他提供了观察某一属性变化的方法


6.
oc是动态运行时语言:运行时和多态
多态,简单了说就是父类的指针可以指向子类的对象，也就是子类对象直接付给父类指针变量。
当以上的情况时，子类在编译时的类型是父类，而运行时类型是子类，
当运行时调用该指针变量的方法时，其方法行为总是表现出子类方法的行为特征，而不是父类方法的行为特征，
相同类型的变量调用同一个方法是呈现出多种不同行为特征，这就是多态

运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法

7.
SDWebImage 中为 UIView 提供了一个分类叫做 WebCache, 这个分类中有一个最常用的接口, sd_setImageWithURL:placeholderImage:, 
这个分类同时提供了很多类似的方法, 这些方法最终会调用一个同时具有 optionprogressBlock completionBlock 的方法, 
而在这个类最终被调用的方法首先会检查是否传入了 placeholderImage 以及对应的参数, 并设置 placeholderImage.
然后会获取 SDWebImageManager 中的单例调用一个 downloadImageWithURL:... 的方法来获取图片, 
而这个 manager 获取图片的过程有大体上分为两部分, 它首先会在 SDWebImageCache 中寻找图片是否有对应的缓存, 
它会以 url 作为数据的索引先在内存中寻找是否有对应的缓存, 如果缓存未命中就会在磁盘中利用 MD5 处理过的 key 来继续查询对应的数据, 
如果找到了, 就会把磁盘中的缓存备份到内存中.
然而, 假设我们在内存和磁盘缓存中都没有命中, 那么 manager 就会调用它持有的一个 SDWebImageDownloader 对象的方法 downloadImageWithURL:... 来下载图片, 
这个方法会在执行的过程中调用另一个方法 addProgressCallback:andCompletedBlock:forURL:createCallback: 来存储下载过程中和下载完成的回调, 
当回调块是第一次添加的时候, 方法会实例化一个 NSMutableURLRequest 和 SDWebImageDownloaderOperation, 并将后者加入 downloader 持有的下载队列开始图片的异步下载.
而在图片下载完成之后, 就会在主线程设置 image 属性, 完成整个图像的异步下载和配置

8.
我们用到的mas_makeConstraints: 方法位于 UIView 的分类 MASAdditions 中.
这个方法接受了一个block,这个block中有一个MASConstraintMaker 类型的对象，该对象中有一些我们约束的数组，
这里保存着我们所有的加入到视图中的约束。通过该block对这些约束进行配置。
当配置结束后，就会调用maker的install方法，而这个install方法会遍历他持有的约束数组，
对其中的每一个约束发送install消息，在这里就会使用上一步配置的属性，初始化NALayoutConstraint的子类MASLayoutConstraint并添加到合适的视图上。
视图的选择会通过一个方法mas_closestCommonSuperview:来返回两个视图的最近公共视图

9.
//二分法查找  
-(int)searchWithArray:(NSArray *)array andNumber:(int)number{  
      
    int start = 0;  
    int end = array.count-1;  
      
    while(start <= end){  
        int middle = (start + end)/2;  
        if (number < [array[middle] intValue]) {  
            end = middle-1;  
        }else if (number > [array[middle] intValue]){  
            start = middle + 1;  
        }else  
        {  
            return middle;  
        }  
          
    }  
    return -1;  
}  

10.
UITableViewDelegate就是委托机制的典型应用，是一个典型的使用委托来实现适配器模式

11.
atomic，nonatomic, 原子和非原子操作，决定编译器生成的setter getter是否是原子操作，atomic表示多线程安全，一般使用nonatomic

12.
谓词是NSPredicate，是通过给定的逻辑条件作为约束条件，完成对数据的筛选

13.
viewWillAppear 这个一般在 view 被添加到 superview 之前

14.
http 是数据传输格式协议,tcp 是数据传输方式
IP是网络层  TCP是传输层  UDP也是传输层
TCP(传输控制协议)
面向连接的 可靠地 点到点的连接  在连接中进行大数据传输(数据大小不收限制)  通过三次握手完成连接,是可靠协议,安全送达  必须建立连接,效率会稍低
UDP(用户数据报协议)
面向非连接的 不可靠的 点到面的连接 每个数据报的大小限制在 64K 之内因为无需连接,因此是不可靠协议不需要建立连接,速度快 

15.
model层和view视图不能直接通信 必须借助controller层
controller层用来将model上的数据显示在view上

16.
多线程中 栈私有，堆公有 

17.
并不是所有的Block中使用self，都会导致循环引用
自己定义的Block，里面使用了self，并不一定会发生循环引用
使用通知（NSNotifation），调用系统自带的Block，在Block中使用self --> 会发生循环引用

18.
在App中混合HTML5开发App如何实现的。在App中使用HTML5的优缺点是什么？

在iOS中，通常是通常UIWebView来实现，当然在iOS8以后可以使用WKWebView来实现.有以下几种实现方法：
通过实现UIWebView的代理方法来拦截，判断scheme是否是约定好的，然后iOS调用本地相关API来实现：
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;
在iOS7以后，可以直接通过JavaScripteCore这个库来实现，通过往JS DOM注入对象，而这个对象对应于我们iOS的某个类的实例。更详细请阅读：
OC JavaScriptCore与js交互
WKWebView新特性及JS交互
Swift JavaScriptCore与JS交互

可以通过WebViewJavascriptBridge来实现。

iOS加入H5响应比原生要慢很多，体验不太好，这是缺点。
iOS加入H5可以实现嵌入别的功能入口，可随时更改，不用更新版本就可以上线，这是最大的优点

19.
针对GCD来讲的，
串行队列中的任务只能一个个地执行，在前一个没有执行完毕之前，下一个只能等待。
并行队列可以并发地执行任务，因此多个任务之间执行的顺序不能确定，当添加一个新的任务时，交由GCD来判断是否要创建新的新的线程

20.
优化

gzip/zip压缩：当从服务端下载相关附件时，可以通过gzip/zip压缩后再下载，使得内存更小，下载速度也更快

数据缓存：对于cell的行高要缓存起来，使得reload数据时，效率也极高。而对于那些网络数据，不需要每次都请求的，应该缓存起来，可以写入数据库，也可以通过plist文件存储

重用大开销对象：一些objects的初始化很慢，比如NSDateFormatter和NSCalendar，但又不可避免地需要使用它们。通常是作为属性存储起来，防止反复创建

使用Autorelease Pool：在某些循环创建临时变量处理数据时，自动释放池以保证能及时释放内存