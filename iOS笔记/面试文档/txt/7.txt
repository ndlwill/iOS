1.obj-c写一个冒泡排序
-(void)mySort:(NSMutableArray *)mutArray
{
id tmpObj = nil;
unsigned long flag = mutArray.count-1;//flag :最大脚标
while (flag > 0) {
int k = flag;
flag = 0;
for (int j = 0 ; j < k ; j++) {
int order = NSOrderedAscending;// 或 NSOrderedDescending
if ([[mutArray[j] description] compare:[mutArray[j+1] description]] == -order) {
tmpObj = mutArray[j];
mutArray[j] = mutArray[j+1];
mutArray[j+1] = tmpObj;
flag = j;
}
}
}
}

2.
UIView和CALayer是相互依赖的，UIView依赖CALayer提供内容，CALayer依赖UIView容器显示
绘制内容。

3.json、xml的区别
(1)可读性方面：基本相同，xml的可读性比较好
(2)可扩展性方面：都具有很好的扩展性
(3)编码难度方面：相对而言：JSON的编码比较容易
(4)解码难度：json的解码难度基本为零，xml需要考虑子节点和父节点
(5)数据体积方面：json相对于xml来讲，数据体积小，传递的速度跟快些
(6)数据交互方面：json与JavaScript的交互更加方面，更容易解析处理，更好的数据交互
(7)数据描述方面：xml对数据描述性比较好
(8)传输速度方面：json的速度远远快于xml

JSON底层原理：遍历字符串中的字符，最终根据格式规定的特殊字符，比如{}号，[]号, : 号 等进行区分，{}号是一个字典
的开始，[]号是一个数组的开始, : 号是字典的键和值的分水岭，最终乃是将json数据转化为字典，字典中值可能是字典，数
组，或字符串而已。
XML底层原理： XML解析常用的解析方法有两种：DOM解析和SAX解析。DOM 采用建立树形结构的方式访问 XML 文档，而
SAX 采用的事件模型。 。DOM 解析把 XML 文档转化为一个包含其内容的树，并可以对树进行遍历。使用 DOM 解析器的时候需
要处理整个 XML 文档，所以对性能和内存的要求比较高。SAX在解析 XML 文档的时候可以触发一系列的事件，当发现给定的tag
的时候，它可以激活一个回调方法，告诉该方法制定的标签已经找到。SAX 对内存的要求通常会比较低，因为它让开发人员自己来决
定所要处理的tag。特别是当开发人员只需要处理文档中所包含的部分数据时，SAX 这种扩展能力得到了更好的体现。


SAX与DOM的区别：
1、SAX处理的优点非常类似于流媒体的优点。分析能够立即开始，而不是等待所有的数据被处理。而且由于应用程序只是
在读取数据时检查数据，因此不需要将数据存储在内存中。这对于大型文档来说是个巨大的优点。事实上，应用程序甚至不
必解析整个文档；它可以在某个条件得到 满足时停止解析。一般来说，SAX 还比它的替代者 DOM 快许多。另一方面，由
于应用程序没有以任何方式存储数据，使用 SAX 来更改数据或在数据流中往后移是不可能的。
2、DOM 以及广义的基于树的处理具有几个优点。首先，由于树在内存中是持久的，因此可以修改它以便应用程序能对数
据和结构作出更改。它还可以在任何时候在树中上下 导航，而不是像 SAX 那样是一次性的处理。DOM 使用起来也要简单
得多。另一方面，在内存中构造这样的树涉及大量的开销。大型文件完全占用系统内存容量的情况并不鲜见。此外，创建一
棵 DOM 树可能是一个缓慢的过程。
3、选择 DOM 还是选择 SAX，这取决于下面几个因素:
应用程序的目的：如果打算对数据作出更改并将它输出为 XML，那么在大多数情况下，DOM 是适当的选择。并不是说使
用 SAX 就不能更改数据，但是该过程要复杂得多，因为您必须对数据的一份拷贝而不是对数据本身作出更改。
数据容量： 对于大型文件，SAX 是更好的选择。数据将如何使用：如果只有数据中的少量部分会被使用，那么使用 SAX
来将该部分数据提取到应用程序中可能更好。 另一方面，如果您知道自己以后会回头引用已处理过的大量信息，那么 SAX
也许不是恰当的选择。
对速度的需要：SAX 实现通常要比 DOM 实现更快。
SAX 和 DOM 不是相互排斥的，记住这点很重要。您可以使用 DOM 来创建 SAX 事件流，也可以使用 SAX 来创建
DOM 树。事实上，用于创建 DOM 树的大多数解析器实际上都使用 SAX 来完成这个任务！

4.
面向对象的三个基本特征是：封装、继承、多态。
封装是面向对象的特征之一，是对象和类概念的主要特性。 封装，也就是把客观事物封装成抽象的类，并且类可以把自己的
数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。隐藏对象的属性和实现细节，仅对外公开接口，提高代
码安全性，封转程度越高，独立性越强，使用越方便。
继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过
继承创建的新类称为“子类”或“派生类”。 被继承的类称为“基类”、“父类”或“超类”
多态性：允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子
对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针

5.objc是动态运行时语言
主要是将数据类型的确定由编译时，推迟到了运行时。
这个问题其实浅涉及到两个概念，运行时和多态。
运行时机制：使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法。
多态：不同对象以自己的方式响应
相同的消息的能力叫做多态。意思就是假设生物类（life）都用有一个相同的方法-eat;那人类属于生物，猪也属于生物，都
继承了life后，实现各自的eat，但是调用是我们只需调用各自的eat方法。也就是不同的对象以自己的方式响应了相同的消
息（响应了eat这个选择器）。因此也可以说，运行时机制是多态的基础

6.
autorelease只是延迟释放
gc是每隔一段时间询问程序，看是否有无指针指向的对象，若有，就将它回收。

7.drawRect和layoutSubviews的区别
两个方法都是异步执行的，layoutSubviews方便数据计算，drawRect方便视图重绘。
layoutSubviews对subviews重新布局
layoutSubviews方法调用先于drawRect

8.
http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资
源。
服务器不能主动给客户端响应（除非采取http长连接技术）
scoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连
接通道，双方都可以主动发送数据

9.
@class一般用于头文件中需要声明该类的某个实例变量的时候用到，它只是声明了一个类名，关于这个类的内部实现都没
有告诉编译器，在m文件中还是需要使用#import。

11.程序国际化；
比如：本地化应用程序名称
(1、选中工程，Info—Localizations点击“+”添加要国际化的语言。
(2 、在I n f o P l i s t . s t r i n g s 右边会多出一个三角形， 点击展开可看到I n f o P l i s h . s t r i n g s ( e n g l i s h ) 和
InfoPlish.strings(chinese)两个版本的文件；
(3、在InfoPlish.strings(english)文件中加入：
CFBundleDisplayName ="Program";
其中“Program”为英文应用程序名称，同理在InfoPlish.strings(chinese)文件中加入：
CFBundleDisplayName ="应用程序";
其中“应用程序”为中文名称，注意：CFBundleDisplayName加不加双引号都行；
(4、编辑Info.plist，添加一个新的属性Application has localized display name, 设置其类型为boolean，并将其
value设置为YES即可。

12.
静态连接库就是把(lib)文件中用到的函数代码直接链接进目标程序，程序运行的时候不再需要其它的库文件；动态链接就是
把调用的函数所在文件模块 （DLL）和调用函数在文件中的位置等信息链接进目标程序，程序运行的时候再从DLL中寻找
相应函数代码，因此需要相应DLL文件的支持。
静态链接库和动态链接库的另外一个区别在于静态链接库中不能再包含其他的动态链接库或者静态库，而在动态链接库中还
可以再包含其他的动态或静态链接库。
动态的是：运行时才加载到内存中，静态：编译时就加载到内存中

13.
iphone手机阅读器中对于PDF格式的阅读，可以直接用UIWebView控件显示，也可以从网上下到很多直接读取pdf格式
的代码

14.
编译语言和解释语言的区别
区别：C语言，OC语言属于编译语言；解释语言：也可以理解为脚本文件，不需要编译，
编译型语言写的程序执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的
话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语
言的程序执行效率高，但也不能一概而论，部分解释型语言的解释器通过在运行时动态优化代码，甚至能够使解释型语言的
性能超过编译型语言。 解释则不同，解释性语言的程序不需要编译，省了道工序，解释性语言在运行程序的时候才翻译，
比如解释性basic语言，专门有一个解释器能够直接执行basic程序，每个语句都是执行的时候才翻译。这样解释性语言每
执行一次就要翻译一次，效率比较低。解释是一句一句的翻译。

15.
(loadView/nib文件)来加载view到内存 -->viewDidLoad函数进一步初始化这些view

16.
什么是安全释放？
[_instance release],_instance = nil;

17.
序列化就是：归档

18.
Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备
份的信息。AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以
您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。
Library 目录：这个目录下有两个子目
录：Caches 和 PreferencesPreferences 目录包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是
应该使用NSUserDefaults类来取得和设置应用程序的偏好.Caches 目录用于存放应用程序专用的支持文件，保存应用程
序再次启动过程中需要的信息。
tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。

20.
应用程序：
-[AppDelegate application:willFinishLaunchingWithOptions:]
-[AppDelegate application:didFinishLaunchingWithOptions:]
-[AppDelegate applicationDidBecomeActive:]
退到后台:
-[AppDelegate applicationWillResignActive:]
-[AppDelegate applicationDidEnterBackground:]
回到前台:
-[AppDelegate applicationWillEnterForeground:]
-[AppDelegate applicationDidBecomeActive:]
ViewController之间
加载页面:
-[mainViewController viewDidLoad]
-[mainViewController viewWillAppear:]
-[mainViewController viewWillLayoutSubviews]
-[mainViewController viewDidLayoutSubviews]
-[mainViewController viewDidAppear:]
退出当前页面:
-[mainViewController viewWillDisappear:]
-[mainViewController viewDidDisappear:]
返回之前页面:
-[mainViewController viewWillAppear:]
-[mainViewController viewWillLayoutSubviews]
-[mainViewController viewDidLayoutSubviews]
-[mainViewController viewDidAppear:]

21.
isKindOfClass：某个对象属于某个类型，包括继承的类型
isMemberOfClass：某个对象确切属于某个类型，是不是具体的实例

22.
SEL是“selector”的一个类型，表示一个方法的名字，就是一个方法的入口地址
id是一个指向任何一个继承了Object（或者NSObject）类的对象。需要注意的是id是一个指针，所以在使用id
的时候不需要加*
@：OC中的指令符