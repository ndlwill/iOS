1.枚举
typedef NS_ENUM(NSInteger, UserGender) {
    UserGenderUnknown,
    UserGenderMale,
    UserGenderFemale,
    UserGenderNeuter
};

2.
应避免使用基本类型，建议使用 Foundation 数据类型，对应关系如下：
int -> NSInteger
unsigned -> NSUInteger
float -> CGFloat
动画时间 -> NSTimeInterval

3.
业务逻辑写在：MVC 应在 C，MVVM 应在 VM
Login 是名词， LogIn 是动词，都表示登陆

4.
由于是只读属性，所以编译器不会为其创建对应的“设置方法”
属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理
//如果不写 copy，该类的调用者就不知道初始化方法里会拷贝这些属性
@property (nonatomic, readonly, copy) NSString *name;
@property (nonatomic, readonly, assign) NSUInteger age;
@property (nonatomic, readonly, assign) Sex sex;
@implementation User

- (instancetype)initWithName:(NSString *)name
					   age:(NSUInteger)age
					   sex:(Sex)sex {
  if(self = [super init]) {
  
	  _name = [name copy];
	  _age = age;
	  _sex = sex;
  }
  return self;
}

- (instancetype)initWithName:(NSString *)name
					   age:(NSUInteger)age {
  return [self initWithName:name age:age sex:nil];
}

@end
上面的代码中initWithName:age:sex: 就是 designated 初始化方法，
另外的是 secondary 初始化方法。因为仅仅是调用类实现的 designated 初始化方法。

5.
在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性
自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak

为weak这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而 assign 的“设置方法”只会执行针对“纯量类型” (例如 CGFloat 或 NSlnteger 等)的简单赋值操作。
assign 可以用非 OC 对象,而 weak 必须用于 OC 对象

6.
block 使用 copy 是从 MRC 遗留下来的“传统”,在 MRC 中,方法内部的 block 是在栈区的,使用 copy 可以把它放到堆区.
在 ARC 中写不写都行：对于 block 使用 copy 还是 strong 效果是一样的

copy 此特质所表达的所属关系与 strong 类似。
然而设置方法并不保留新值，而是将其“拷贝” (copy)。 
当属性类型为 NSString 时，经常用此特质来保护其封装性，因为传递给设置方法的新值有可能指向一个 NSMutableString 类的实例。
这个类是 NSString 的子类，表示一种可修改其值的字符串，此时若是不拷贝字符串，那么设置完属性之后，字符串的值就可能会在对象不知情的情况下遭人更改。
所以，这时就要拷贝一份“不可变” (immutable)的字符串，确保对象中的字符串值不会无意间变动。只要实现属性所用的对象是“可变的” (mutable)，就应该在设置新属性值时拷贝一份。
用 @property 声明 NSString、NSArray、NSDictionary 经常使用 copy 关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary，他们之间可能进行赋值操作，为确保对象中的字符串值不会无意间变动，应该在设置新属性值时拷贝一份。

这个写法会出什么问题： @property (copy) NSMutableArray *array;
1、添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；
2、使用了 atomic 属性会严重影响性能 ；

7.让自己的类用 copy 修饰符
（1）需声明该类遵从 NSCopying 协议
（2）实现 NSCopying 协议。该协议只有一个方法: 
- (id)copyWithZone:(NSZone *)zone;

- (id)copyWithZone:(NSZone *)zone
{
    HSPerson *person = [[HSPerson allocWithZone:zone] init];
    person.age = self.age;
    person.height = self.height;
    
    return person;
}


HSPerson *p = [[HSPerson alloc] init];
p.age = 20;
p.height = 170.0;

HSPerson *copyP = [p copy];
NSLog(@"p = %p copyP = %p", p, copyP);//两个地址不一样


@property (nonatomic, copy) NSString *name;
property copy 实际上就对name干了这个：
- (void)setName:(NSString *)name
{
    _name = [name copy];
}



NSArray *array = @[@[@"a", @"b"], @[@"c", @"d"]];
NSArray *copyArray = [array copy];
NSMutableArray *mCopyArray = [array mutableCopy];
可以看到 copyArray 和 array 的地址是一样的，而 mCopyArray 和 array 的地址是不同的。
说明 copy 操作进行了指针拷贝，mutableCopy 进行了内容拷贝。
但需要强调的是：此处的内容拷贝，仅仅是拷贝 array 这个对象，array 集合内部的元素仍然是指针拷贝

集合对象的内容复制仅限于对象本身，对象元素仍然是指针复制
8.@property 的本质是什么
“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。

property在runtime中是objc_property_t定义如下:
typedef struct objc_property *objc_property_t;

struct property_t {
    const char *name;
    const char *attributes;
};

而attributes本质是objc_property_attribute_t
typedef struct {
    const char *name;           /**< The name of the attribute */
    const char *value;          /**< The value of the attribute (usually empty) */
} objc_property_attribute_t;

我们定义一个string的property@property (nonatomic, copy) NSString *string;，通过 property_getAttributes(property)获取到attributes并打印出来之后的结果为T@"NSString",C,N,V_string
其中T就代表类型，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。

完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。
这个过程由编译 器在编译期执行
除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为 _firstName 与 _lastName。
也可以在类的实现代码里通过 @synthesize 语法来指定实例变量的名字

ivar_list ：成员变量列表
method_list ：方法列表
prop_list ：属性列表
也就是说我们每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,
然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现

9.@protocol 和 category 中如何使用 @property
在 protocol 中使用 property 只会生成 setter 和 getter 方法声明,我们使用属性的目的,是希望遵守我协议的对象能实现该属性

category 使用 @property 也是只会生成 setter 和 getter 方法的声明,如果我们真的需要给 category 增加属性的实现,需要借助于运行时的两个函数：
objc_setAssociatedObject
objc_getAssociatedObject

10.runtime 如何实现 weak 变量的自动置nil？
runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。
 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。
 
 
11.属性可以拥有的特质分为四类:
原子性--- nonatomic 特质
读/写权限---readwrite(读写)、readonly (只读)
内存管理语义---assign、strong、 weak、unsafe_unretained、copy
方法名---getter=<name> 、setter=<name>
getter=<name>的样式：
@property (nonatomic, getter=isOn) BOOL on;
 
 
12.@synthesize和@dynamic
@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;

@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。
@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定

13.ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？
对应基本数据类型默认关键字是
atomic,readwrite,assign
对于普通的 Objective-C 对象
atomic,readwrite,strong

14.
// 打开第14行和第17行中任意一行，就可编译成功
@import Foundation;

@interface CYLObject : NSObject
@property (nonatomic, copy) NSString *title;
@end

@implementation CYLObject {
    //    NSString *_title;
}

//@synthesize title = _title;

- (instancetype)init
{
    self = [super init];
    if (self) {
        _title = @"微博@iOS程序犭袁";
    }
    return self;
}

- (NSString *)title {
    return _title;
}

- (void)setTitle:(NSString *)title {
    _title = [title copy];
}

@end
当你同时重写了 setter 和 getter 时，系统就不会生成 ivar（实例变量/成员变量）。


15.
objc是动态语言，每个方法在运行时会被动态转为消息发送，即：objc_msgSend(receiver, selector)。

objc的源代码：
struct objc_class {
  Class isa OBJC_ISA_AVAILABILITY; //isa指针指向Meta Class，因为Objc的类的本身也是一个Object，为了处理这个关系，runtime就创造了Meta Class，当给类发送[NSObject alloc]这样消息时，实际上是把这个消息发给了Class Object
  #if !__OBJC2__
  Class super_class OBJC2_UNAVAILABLE; // 父类
  const char *name OBJC2_UNAVAILABLE; // 类名
  long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0
  long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识
  long instance_size OBJC2_UNAVAILABLE; // 该类的实例变量大小
  struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 该类的成员变量链表
  struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表
  struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在method Lists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。
  struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表
  #endif
  } OBJC2_UNAVAILABLE;
  
objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。
如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误。


16.objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系
该方法编译之后就是objc_msgSend()函数调用

clang 提供一个命令，可以将Objective-C的源码改写成C++语言
clang -rewrite-objc main.m

objc_msgSend(receiver, selector)
[obj foo];在objc动态编译时，会被转意为：objc_msgSend(obj, @selector(foo));


在“消息传递”过程中，objc_msgSend的动作比较清晰：
首先在 Class 中的缓存查找 IMP （没缓存则初始化缓存），如果没找到，则向父类的 Class 查找。
如果一直查找到根类仍旧没有实现，则用_objc_msgForward函数指针代替 IMP 。
最后，执行这个 IMP

17.
objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，
如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常unrecognized selector sent to XXX

一个objc对象的isa的指针指向他的类对象,从而可以找到对象上的方法


18.一个objc对象如何进行内存布局？（考虑有父类的情况）
所有父类的成员变量和自己的成员变量都会存放在该对象所对应的存储空间中

每一个对象内部都有一个isa指针,指向他的类对象,类对象中存放着本对象的
对象方法列表（对象能够接收的消息列表，保存在它所对应的类对象中）
成员变量的列表
属性列表
它内部也有一个isa指针指向元对象(meta class),元对象内部存放的是类方法列表,类对象内部还有一个superclass的指针,指向他的父类对象。

Objective-C 对象的结构图：
ISA指针
根类的实例变量
倒数第二层父类的实例变量
...
父类的实例变量
类的实例变量

根对象就是NSObject，它的superclass指针指向nil

类对象既然称为对象，那它也是一个实例。
类对象中也有一个isa指针指向它的元类(meta class)，即类对象是元类的实例。元类内部存放的是类方法列表，根元类的isa指针指向自己，superclass指针指向NSObject类。

19.
@implementation Son : Father
- (id)init
{
	self = [super init];
	if (self) {
		NSLog(@"%@", NSStringFromClass([self class]));
		NSLog(@"%@", NSStringFromClass([super class]));
	}
	return self;
}
@end

- (Class)class {
    return object_getClass(self);
}


都输出 Son
其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！
他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。
接受消息的对象都是当前 Son 这个对象。

当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；
而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。
这也就是为什么说“不推荐在 init 方法中使用点语法”，如果想访问实例变量 iVar 应该使用下划线（ _iVar ），而非点语法（ self.iVar ）




20.
objc中的类方法和实例方法有什么本质区别和联系？
类方法：
类方法是属于类对象的
类方法只能通过类对象调用
类方法中的self是类对象
类方法可以调用其他的类方法
类方法中不能访问成员变量
类方法中不能直接调用对象方法
实例方法：
实例方法是属于实例对象的
实例方法只能通过实例对象调用
实例方法中的self是实例对象
实例方法中可以访问成员变量
实例方法中直接调用实例方法
实例方法中也可以调用类方法(通过类名)


21.runtime如何通过selector找到对应的IMP地址
每一个类对象中都一个方法列表,方法列表中记录着方法的名称,方法实现,以及参数类型,
其实selector本质就是方法名称,通过这个方法名称就可以在方法列表中找到对应的方法实现

22.对象的内存销毁时间表
1. 调用 -release ：引用计数变为零
 * 对象正在被销毁，生命周期即将结束.
 * 不能再有新的 __weak 弱引用， 否则将指向 nil.
 * 调用 [self dealloc] 
2. 子类 调用 -dealloc
 * 继承关系中最底层的子类 在调用 -dealloc
 * 如果是 MRC 代码 则会手动释放实例变量们（iVars）
 * 继承关系中每一层的父类 都在调用 -dealloc
3. NSObject 调 -dealloc
 * 只做一件事：调用 Objective-C runtime 中的 object_dispose() 方法
4. 调用 object_dispose()
 * 为 C++ 的实例变量们（iVars）调用 destructors 
 * 为 ARC 状态下的 实例变量们（iVars） 调用 -release 
 * 解除所有使用 runtime Associate方法关联的对象
 * 解除所有 __weak 引用
 * 调用 free()
 
 23._objc_msgForward函数是做什么的
 IMP就是Implementation的缩写，它是指向一个方法实现的指针，
 每一个方法都有一个对应的IMP，所以，我们可以直接调用方法的IMP指针，来避免方法调用死循环的问题
 
 _objc_msgForward是一个函数指针， IMP 类型，用于消息转发的：
 当向一个对象发送一条消息，但它并没有实现的时候，_objc_msgForward会尝试做消息转发
 我们可以这样创建一个_objc_msgForward对象：
IMP msgForwardIMP = _objc_msgForward;
 
 
 lldb call (void)instrumentObjcMessageSends(YES);
 运行时发送的所有消息都会打印到/tmp/msgSend-xxxx文件里了
 终端中输入命令：
 open /private/tmp
 
 objc_msgForward隶属 C 语言，有三个参数 ：
_objc_msgForward参数 类型
1.所属对象 id类型
2.方法名 SEL类型
3.可变参数 可变参数类型
一旦调用_objc_msgForward，将跳过查找 IMP 的过程，直接触发“消息转发”
 
 24.objc使用什么机制管理对象内存？
通过 retainCount 的机制来决定对象是否需要释放。 
每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。

25.在Catagory中重写一个方法，就会覆盖它的原有方法实现 

26.能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？
不能向编译后得到的类中增加实例变量
能向运行时创建的类中添加实例变量
解释下：
因为编译后的类已经注册在 runtime 中，类结构体中的 objc_ivar_list 实例变量的链表 和 instance_size 实例变量的内存大小已经确定，同时runtime 会调用 class_setIvarLayout 或 class_setWeakIvarLayout 来处理 strong weak 引用。所以不能向存在的类中添加实例变量；
运行时创建的类是可以添加实例变量，调用 class_addIvar 函数。但是得在调用 objc_allocateClassPair 之后，objc_registerClassPair 之前，原因同上。