1.
浅复制：复制指向对象的指针
深复制：复制对象本身

2.
@property属性在分类里面只会生成set，get方法的声明，不会自动生成它们的实现，并不会生成成员属性

3.
kvc:键-值编码，间接访问对象的属性

eg:kvc机制如何通过key寻找到value
[self valueForKey:@”someKey”]
先查找someKey这个方法
还会查找getsomeKey这个方法，前面加一个get
或者_someKey以及_getsomeKey这几种形式。
查找实例变量（iVar）的时候也会不仅仅查找someKey这个变量，也会查找_someKey这个变量是否存在
如果还没有找到，程序会继续试图调用 -(id) valueForUndefinedKey:这个方法。
如果这个方法还是没有被实现的话，程序会抛出一个NSUndefinedKeyException异常错误

kvo:键-值观察机制，观察某一属性的变化

键路径是一个用点作分隔符的键组成的字符串


5.
objc 运行时语言
运行时和多态
将数据类型的确定由编译时，推迟到了运行时
运行时机制使我们直到运行时才去决定一个对象的类别，以及调用该类别对象指定方法
多态：不同对象以自己的方式响应相同的消息的能力叫做多态


7.
frame指的是：该view在父view坐标系统中的位置和大小
bounds指的是：该view在本身坐标系统中的位置和大小

8.
MVC
模型对象负责保有应用程序的数据
视图对象知道如何显示应用程序的模型数据，允许用户对其进行编辑。
控制器对象是应用程序的视图对象和模型对象之间的协调者

9.
int a[5]={1,2,3,4,5}
a,&a的地址是一样的，但意思不一样
a是数组首地址，也就是a[0]的地址
&a是对象（数组）首地址
a+1是数组下一元素的地址，即a[1],&a+1是下一个对象的地址，即a[5].

10.
32位C++程序
void Func(char str[100])
{sizeof(str) = 4} 
函数中数组名作为函数形参时，在函数体内，数组名失去了本身的内涵，仅仅只是一个指针


char str[20]="0123456789"; 
int a=strlen(str); //a=10; 计算字符串的长度，以结束符 0x00 为字符串结束。 
int b=sizeof(str); //b=20; 计算的则是分配的数组 str[20] 所占的内存空间的大小，不受里面存储的内容改变

11.
viewDidLoad在view 从nib文件初始化时调用，loadView在controller的view为nil时调用

12.
OC没有多继承，协议能够实现多继承

13.
NSString *string = @”Abc”;//常量区
string = [string lowercaseString];//新的堆区
string = [string stringByAppendingString:@"xyz"];//新的堆区

14.
动态绑定
静态语言c++,一般在编译的时候就已经将将要调用的函数的函数签名都告诉编译器

OC中，其实是没有函数的概念的，我们叫“消息机制”，所谓的函数调用就是给对象发送一条消息
OC可以先跳过编译，到运行的时候才动态地添加函数调用，在运行时才决定要调 用什么方法，需要传什么参数进去。
这就是动态绑定.用SEL变量绑定一个方法。最终形成的这个SEL变量就代表一个方法的引用。SEL并不是C里面的函数指针。
SEL变量只是一个整数，他是该方法的ID，@selector()就是取方法的编号

15.
isKindOfClass来确定一个对象是否是一个类的实例，或者是该类祖先类的实例。
isMemberOfClass只能用来判断前者，不能用来判断后者

16.
char*strcpy(char *dest, const char *src);
其对字符串进行操作，完成从源字符串到目的字符串的拷贝,当源字符串的大小大于目的字符串的最大存储空间后，执行该操作会出现段错误。
int sprintf(char*str, const char *format, ...)
函数操作的源对象不限于字符串：源对象可以是字符串、也可以是任意基本类型的数据。主要是实现将其他数据类型转换为字符串
void *memcpy(void*dest, const void *src, size_t n)
实现内存的拷贝，实现将一块内存拷贝到另一块内存。对内存的拷贝

17.
主线程队列中不能开启同步，会阻塞主线程。
只能开启异步任务，开启异步任务也不会开启新的线程，只是降低异步任务的优先级，让cpu空闲的时候才去调用。
而同步任务，会抢占主线程的资源，会造成死锁。

串行队列添加的同步操作会死锁

###队列：是管理线程的，相当于线程池,能管理线程什么时候执行###

串行队列：队列中的线程按顺序执行（不会同时执行）
并行队列：队列中的线程会并发执行，可能会有一个疑问，队列不是先进先出吗
如果后面的任务执行完了，怎么出去的了。这里需要强调下，任务执行完毕了，不一定出队列。
只有前面的任务执行完了，才会出队列，也就是说你即使执行完毕了，也必须等前面的任务执行完毕出队列，才可以出去

18.
同步与异步的区别：
同步任务优先级高，在线程中有执行顺序，不会开启新的线程。
异步任务优先级低，在线程中执行没有顺序，看cpu闲不闲。在主队列中不会开启新的线程，其他队列会开启新的线程。

19.
在主队列开启异步任务，不会开启新的线程而是依然在主线程中执行代码块中的代码。为什么不会阻塞线程？
主队列开启异步任务，虽然不会开启新的线程，但是他会把异步任务降低优先级，等闲着的时候，就会在主线程上执行异步任务。

在主队列开启同步任务，为什么会阻塞线程？
在主队列开启同步任务，因为主队列是串行队列，里面的线程是有顺序的
先执行完一个线程才执行下一个线程，而主队列始终就只有一个主线程，主线程是不会执行完毕的，因为他是无限循环的，除非关闭应用程序。
因此在主线程开启一个同步任务，同步任务会想抢占执行的资源，而主线程任务一直在执行某些操作，不肯放手。两个的优先级都很高，最终导致死锁，阻塞线程了。

20.
PUT
1) 文件大小无限制
2) 可以覆盖文件
POST
1) 通常有限制2M
2) 新建文件,不能重名

BASE64是网络传输中最常用的编码格式 - 用来将二进制的数据编码成字符串的编码方式（能够编码,能够解码）

21.
NSURLSessionConfiguration(会话配置)
     
defaultSessionConfiguration;       // 磁盘缓存,适用于大的文件上传下载
ephemeralSessionConfiguration;     // 内存缓存,适用于小的文件交互,GET一个头像
backgroundSessionConfiguration:(NSString *)identifier; // 后台上传和下载

22.
沙盒中tmp目录中的临时文件,会被及时删除
document       备份,下载的文件不能放在此文件夹中
cache          缓存的,不备份,重新启动不会被清空,如果缓存内容过多,可以考虑新建一条线程检查缓存目录中的文件大小,自动清理缓存,给用户节省控件
tmp            临时,不备份,不缓存,重新启动iPhone,会自动清空

23.
直接通过文件名就可以加载图像,图像会常驻内存,具体的销毁由系统负责
// [UIImage imageNamed:@"”];

从网络下载下来的是二进制数据
NSData *data = [NSData dataWithContentsOfURL:location]; 
/ 这种方式的图像会自动释放,不占据内存,也不需要放在临时文件夹中缓存
// 如果用户需要,可以提供一个功能,保存到用户的相册即可
UIImage *image = [UIImage imageWithData:data];

23.AFN
AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
所有的网络请求,均由manager发起

默认提交请求的数据是二进制的,返回格式是JSON
1> 如果提交数据是JSON的,需要将请求格式设置为AFJSONRequestSerializer
2> 如果返回格式不是JSON的
请求格式
AFHTTPRequestSerializer            二进制格式
AFJSONRequestSerializer            JSON
AFPropertyListRequestSerializer    PList(是一种特殊的XML,解析起来相对容易)


返回格式
AFHTTPResponseSerializer           二进制格式
AFJSONResponseSerializer           JSON
AFXMLParserResponseSerializer      XML,只能返回XMLParser,还需要自己通过代理方法解析
AFXMLDocumentResponseSerializer (Mac OS X)
AFPropertyListResponseSerializer   PList
AFImageResponseSerializer          Image
AFCompoundResponseSerializer       组合

所有网络请求,统一使用异步请求


AFNetworkReachabilityStatusUnknown          = -1,  // 未知
AFNetworkReachabilityStatusNotReachable     = 0,   // 无连接
AFNetworkReachabilityStatusReachableViaWWAN = 1,   // 3G 花钱
AFNetworkReachabilityStatusReachableViaWiFi = 2,   // 局域网络,不花钱

// 如果要检测网络状态的变化,必须用检测管理器的单例的startMonitoring
[[AFNetworkReachabilityManager sharedManager] startMonitoring];
    
// 检测网络连接的单例,网络变化时的回调方法
[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
	NSLog(@"%d", status);
}];
24.
使用简单的get/head请求,可以用NSURLConnction异步方法
GET查/POST增/PUT改/DELETE删/HEAD


GET
1> URL
2> NSURLRequest
3> NSURLConnction 异步
 
POST
1> URL
2> NSMutableURLRequest
    .httpMethod = @"POST";
    str 从 firebug直接粘贴,或者自己写 
    变量名1=数值1&变量名2=数值2
 
    .httpData = [str dataUsingEncoding:NSUTF8StringEncoding];
3> NSURLConnction 异步

25.
NSJSONSerialization对JSON解析
反序列化
[NSJSONSerialization JSONObjectWithData:data options:0 error:NULL];
序列化
[NSJSONSerialization dataWithJSONObject:array options:0 error:NULL];

26.
播放长音乐：AVAudioPlayer
播放短音效：加载音频文件生成SystemSoundID
录音：AVAudioRecord

较为底层、高级的音频\视频处理
CoreAudio、CoreVideo框架

27.
XMPP工作原理
节点连接到服务器
服务器利用本地目录系统中的证书对其认证
节点指定目标地址，让服务器告知目标状态
服务器查找、连接并进行相互认证
节点之间进行交互

28.
TCP：安全的协议，能保证数据顺序和正确性，服务器和客户端能随时互发数据。如果服务器要主动发送数据给客户端，可以用这个协议
UDP：非安全的协议，容易丢失数据，一般用于联机对战的游戏
XMPP：基于XML通讯的协议，基于TCP发送XML数据，一般用于即时通讯（比如QQ、微信）
HTTP：一般用于非实时连接的请求，只有客户端主动向服务器发送请求时，服务器才能返回数据给客户端
SOCKET：套接口，可以使用TCP/UDP/XMPP通讯

200表示是一个正确的请求
206表示请求只加载了一部分
404表示网络请求的页面不存在
503表示服务器超时
400请求出错

29.
断点续传：
将下载或者上传的文件划分成几个部分，每个部分一个线程进行上传或者下载的，如果网络异常，可以从上传或者下载的部分重新上传或者下载未上传下载的部分，提高速度，节省时间。

创建串行队列 加入异步任务
生成文件名,用该文件名和存放路径 生成文件路径
发送网络请求获取待生成文件文件大小
设定每次下载的字节数,循环下载 (循环判断剩余字节是否大于循环下载字节)
发送请求时设定http头的range范围, 根据每次循环 fromB 和 toB 来设定
每次下载成功返回的数据写入到之前设定好的文件中

30.
由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。
而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。
很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。

http基于socket做出来的，所有的网络功能都是基于socket做出来的，比如：即时通讯，ftp

31.
// 1.获得沙盒根路径
NSString *home = NSHomeDirectory();
   
// 2.document路径
NSString *docPath = [home stringByAppendingPathComponent:@"Documents"];
   
// 3.新建数据
NSArray *data = @[@"jack", @10, @"ffdsf"];
   
// 4.将数据写入沙盒document 目录的data.plist文件中
NSString *filepath = [docPath stringByAppendingPathComponent:@"data.plist"];
[data writeToFile:filepath atomically:YES];

// 5.读取数据
NSArray *data = [NSArray arrayWithContentsOfFile:filepath];


32.
利用NSUserDefaults,就能直接访问软件的偏好设置(Library/Preferences)
NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];

33.
Student实现  <NSCoding > 协议
/**
 *  将某个对象写入文件时会调用
 */
- (void)encodeWithCoder:(NSCoder *)encoder
{
    [encoder encodeObject:self.no forKey:@"no"];
    [encoder encodeInt:self.age forKey:@"age"];
    [encoder encodeDouble:self.height forKey:@"height"];
}

/**
 *  从文件中解析对象时会调用
 */
- (id)initWithCoder:(NSCoder *)decoder
{
    if (self = [super init]) {
        // 读取文件的内容
        self.no = [decoder decodeObjectForKey:@"no"];
        self.age = [decoder decodeIntForKey:@"age"];
        self.height = [decoder decodeDoubleForKey:@"height"];
    }
    return self;
}
Student *stu1 = [[MJStudent alloc] init];
stu1.no = @"42343254";
stu1.age = 20;
stu1.height = 1.55;
Student *stu2 = [[MJStudent alloc] init];
stu2.no = @"42343254";
stu2.age = 20;
stu2.height = 1.55;

// 新建一块可变数据区
NSMutableData *data = [NSMutableData data];
// 将数据区连接到一个NSKeyedArchiver对象
NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:data];
// 开始存档对象，存档的数据都会存储到NSMutableData中
[archiver encodeObject:stu1 forKey:@"person1"];
[archiver encodeObject:stu2 forKey:@"person2"];
// 存档完毕(一定要调用这个方法)
[archiver finishEncoding];
// 将存档的数据写入文件
[data writeToFile:path atomically:YES]


// 从文件中读取数据
NSData *data = [NSData dataWithContentsOfFile:path];
// 根据数据，解析成一个NSKeyedUnarchiver对象
NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
Student *stu11 = [unarchiver decodeObjectForKey:@"stu1"];
Student *stu22= [unarchiver decodeObjectForKey:@"stu2"];
// 恢复完毕
[unarchiver finishDecoding];

如果父类也遵守了NSCoding协议，请注意：应该在encodeWithCoder:方法中加上一句
[super encodeWithCode:encode];确保继承的实例变量也能被编码，即也能被归档
应该在initWithCoder:方法中加上一句self = [super initWithCoder:decoder];
确保继承的实例变量也能被解码，即也能被恢复

34.
并行队列的任务嵌套例子
    dispatch_queue_t q = dispatch_queue_create("ftxbird", DISPATCH_QUEUE_CONCURRENT);
   
    // 任务嵌套
        dispatch_sync(q, ^{
          NSLog(@"1 %@", [NSThread currentThread]);
           
            dispatch_sync(q, ^{
                NSLog(@"2 %@", [NSThread currentThread]);
               
                dispatch_sync(q, ^{

                    NSLog(@"3 %@", [NSThread currentThread]);
                });
            });
           
            dispatch_async(q, ^{

                NSLog(@"4 %@", [NSThread currentThread]);
            });

        NSLog(@"5 %@", [NSThread currentThread]);

        });

// 运行结果是: 12345 或12354

35.
//开发中一般给自定义队列定义为属性
@property (nonatomic, strong) NSOperationQueue *myQueue;
self.myQueue = [[NSOperationQueue alloc] init];

1>在自定义队列
 NSBlockOperation *block = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"%@", [NSThread currentThread]);
    }];
   
  所有的自定义队列，都是在子线程中运行.
  [self.myQueue addOperation:block];
  或者:
   [self.myQueue addOperationWithBlock:^{
            NSLog(@"%@", [NSThread currentThread]);
        }];

2>在主队列中执行
    [[NSOperationQueue mainQueue] addOperationWithBlock:^{
        NSLog(@"%@", [NSThread currentThread]);
    }];


36.
NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"下载图片 %@", [NSThread currentThread]);
    }];
    NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"修饰图片 %@", [NSThread currentThread]);
    }];
    NSBlockOperation *op3 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"保存图片 %@", [NSThread currentThread]);
    }];
    NSBlockOperation *op4 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"更新UI %@", [NSThread currentThread]);
    }];
   
    // 设定执行顺序, Dependency依赖,可能会开多个，但不会太多
    // 依赖关系是可以跨队列的！
    [op2 addDependency:op1];
    [op3 addDependency:op2];
    [op4 addDependency:op3];
    // GCD是串行队列，异步任务，只会开一个线程
   
    [self.myQueue addOperation:op1];
    [self.myQueue addOperation:op2];
    [self.myQueue addOperation:op3];
    // 所有UI的更新需要在主线程上进行
    [[NSOperationQueue mainQueue] addOperation:op4];

37.
// YES会阻塞住线程，直到调用方法完成
// NO不会阻塞线程，会继续执行
[self performSelectorOnMainThread:@selector(setImage:) withObject:[UIImage imageNamed:imagePath] waitUntilDone:NO];

38.
http 的post与get区别与联系
（1）get是从服务器上获取数据，post是向服务器传送数据。
（2）在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。
（3）对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。
（4）GET方式提交的数据最多只能有1024字节，而POST则没有此限制。
（5）安全性问题。使用 Get 的时候，参数会显示在地址栏上，而 Post 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用 get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 post为好。
Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息