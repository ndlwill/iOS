var body: some View {
        
    let dataInfo = entry.dataInfo
    let statusInfo = dataInfo.currentStatusInfo
    
    return GeometryReader(content: { geometry in
        ZStack {
            let widgetWidth = geometry.size.width
            
            Rectangle()
                .fill(Color.red)
                .frame(width: widgetWidth,
                        height: geometry.size.height)
            
            VStack(alignment: .leading, spacing: 0) {
                HStack {
                    Spacer()
                    Image("logo")
                        .resizable()
                        .frame(width: logoImageWH,
                                height: logoImageWH)
                }
                
                HStack(spacing: 4) {
                    RoundedRectangle(cornerRadius: widgetFamily == .systemLarge ? 3 : 1.5)
                        .frame(width: widgetFamily == .systemLarge ? 6 : 3,
                                height: widgetFamily == .systemLarge ? 20 : 10)
                        .foregroundColor(Color.themeColor)
                    
                    Text(statusInfo.currentStatusText)
                        .font(.system(size: widgetFamily == .systemLarge ? 22 : 11))
                        .foregroundColor(Color.currentStatusColor)
                        .lineLimit(1)
                }
                .padding(.top, 8.0)
                
                if statusInfo.statusText == WidgetConst.Text.connected {// 已连接
                    VStack(alignment: .leading, spacing: 4.0) {
                        Text(dataInfo.connectedServerTitle)
                            .font(.system(size: widgetFamily == .systemLarge ? 24 : 12))
                            .foregroundColor(statusInfo.statusTextColor)
                        Text(dataInfo.connectedDate, style: .timer)
                            .font(.system(size: widgetFamily == .systemLarge ? 24 : 12))
                            .foregroundColor(statusInfo.statusTextColor)
                    }
                    .padding(EdgeInsets(top: 4.0, leading: 7.0, bottom: 0, trailing: 0))
                } else {
                    Text(statusInfo.statusText)
                        .font(.system(size: widgetFamily == .systemLarge ? 28 : 14))
                        .foregroundColor(statusInfo.statusTextColor)
                        .padding(EdgeInsets(top: 4.0, leading: 7.0, bottom: 0, trailing: 0))
                }
                
                Spacer()
                
                HStack {
                    Spacer(minLength: 7)
                    
                    let buttonText = Text(statusInfo.buttonText)
                        .lineLimit(1)
                        .font(.system(size: buttonTextFontSize))
                        .foregroundColor(Color.buttonTitleColor)
                        
                    if widgetFamily == .systemMedium || widgetFamily == .systemLarge {
                        Link(destination: URL(string: WidgetConst.urlScheme + "://" + dataInfo.urlHost)!, label: {
                            let availableWidth = widgetWidth - 16 * 2
                            buttonText
                                .frame(width: availableWidth - 7 * 2)
                                .padding(.vertical, 6)
                                // 添加边框与圆角
                                .overlay(
                                    RoundedRectangle(cornerRadius: 5.0)
                                        .stroke(Color.buttonTitleColor, lineWidth: 1)
                            )
                        })
                    } else {
                        // systemSmall不显示buttonText
                        /*
                        buttonText
                            .frame(height: 26)
                            .padding(.horizontal, 12)
                            // 添加边框与圆角
                            .overlay(
                                RoundedRectangle(cornerRadius: 13.0)
                                    .stroke(Color.buttonTitleColor, lineWidth: 1)
                            )
                            */
                    }
                    
                    Spacer(minLength: 7)
                }
            }
            .padding(16)
            .background(Color.themeColor)
            //.widgetURL(URL(string: WidgetConst.urlScheme + "://" + dataInfo.urlHost))
        }
    })
}