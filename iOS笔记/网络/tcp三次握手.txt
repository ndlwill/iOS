TCP FLAG 标记:
* F : FIN - 结束会话，关闭连接
* S : SYN - 开始会话请求，建立连接
* R : RST - 连接重置
* P : PUSH - 数据包立即发送. 以确保数据优先处理，并在发送或者接收端处理
* A : ACK - 响应
* U : URG - 紧急
* E : ECE - 
* C : CWR - 


当一个IP包的ECN域被路由器设置为11时，接收端而非发送端被通知路径上发生了拥塞。
ECN使用TCP头部来告知发送端网络正在经历拥塞，并且告知接收端发送段已经受到了接收端发来的拥塞通告，已经降低了发送速率。
CWR和ECE用于传输过程中拥塞控制，与TCP的窗口协同工作
###
CWR：拥塞窗口减少标志被发送主机设置，用来表明它接收到了设置ECE标志的TCP包。拥塞窗口是被TCP维护的一个内部变量，用来管理发送窗口大小。
###
当两个支持ECN的TCP端进行TCP连接时，它们交换SYN，SYN-ACK和ACK包。对于支持ECN的TCP端来说，SYN包的ECE和CWR标志都被设置了。SYN-ACK只设置ECE标志。
当发送主机接收到设置了ECE标志的ACK时，它就像感知到包丢失一样，开始减少发送窗口，运行慢启动过程和拥塞避免算法。
在下一个数据包中，发送者设置CWR标志。在接收到新的设置CWR标志的包时，接受者停止在接下来的ACK中设置ECE标志。


SYN和ACK可能同时为1，它表示的就是建立连接之后的响应
只是单个的一个SYN，它表示的只是建立连接
RST一般是在FIN之后才会出现为1的情况，表示的是连接重置

当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。

PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。

TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的
TCP三次握手:
第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；

第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；

第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。

完成三次握手，主机A与主机B开始传送数据。


在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。 
第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
完成三次握手，客户端与服务器开始传送数据. 


三次握手Three-way Handshake
一个虚拟连接的建立是通过三次握手来实现的
1. (B) --> [SYN] --> (A)
假如有服务器A、客户机B. 当B要和A通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.
注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 只有当A收到B发来的SYN包，才可建立连接，除此之外别无他法。
2. (B) <-- [SYN/ACK] <--(A)
接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.
注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.
3. (B) --> [ACK] --> (A)
B收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成。
注意: ACK包就是仅ACK 标记设为1的TCP包.
特别注意：需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位


TCP连接：三次握手标记位变化
客户端Client A；服务端ServerB。

步骤1：Client A ===== SYN ====> Server B: 请求
步骤2：Client A <== SYN,ACK == Server B：请求之应答
步骤3：Client A ===== ACK ====> Server B：应答之应答
状态说明：

步骤1时：
Client A主动发起连接SYN，发送后Client A处于SYN_SENT状态
Server B收到发起的连接，返回SYN，并ACK请求，之后处于SYN_RCVD状态
步骤2：
Client A: 收到SYN, ACK后，状态称为了ESTABLISHED状态
Server B：还是SYN_RCVD状态
步骤3：
Client A: 已经是ESTABLISHED状态
Server B在收到了ACK的ACK后，状态也为ESTABLISHED了。



TCP断开：四次挥手标记位
客户端Client A；服务端ServerB。

数据传输：Client A <=== Data Transfer ===> Server B
步骤1：Client A ==== FIN, ACK ====> Server B
步骤2：Client A <======= ACK ===== Server B
步骤3：Client A <==== FIN, ACK ===== Server B
步骤4：Client A ======= ACK ======> Server B
状态说明：

数据传输的时候Client A和Server B其状态都是ESTABLISHED
步骤1：客户端说：我不玩了
Client A发出了我不玩了的请求后，进入FIN_WAIT_1状态
Server B收到请求后，知道client A不玩了，就进入CLOSE_WAIT状态
步骤2：服务端说：我知道了
Client A收到了ACK后，由FIN_WAIT 1进入FIN_WAIT 2状态
Server B还是CLOSE_WAIT状态
步骤3：服务端说：我也不玩了
Client A: 收到了服务端说它也不玩后，进入TIME-WAIT状态
Server B: 服务发出不玩了请求后，进入LAST-ACK状态，等待Client A的最后确认
步骤4：客户端说：我收到你也不玩的消息了
Client A: 此时A会继续等待一段时间，然后CLOSED状态
Server B: 收到ACK后进入CLOSE状态，断开连接确认
Client的等待时间是2MSL， Maximum Segment Lifetime报文最大生存时间。
如果CLient A发出的ACK，Server B未收到，Server B会继续发：服务端我不玩了的消息过来.


四次握手Four-way Handshake
四次握手用来关闭已建立的TCP连接
1. (B) --> ACK/FIN --> (A)
2. (B) <-- ACK <-- (A)
3. (B) <-- ACK/FIN <-- (A)
4. (B) --> ACK --> (A)
注意: 由于TCP连接是双向连接, 因此关闭连接需要在两个方向上做。ACK/FIN 包(ACK 和FIN 标记设为1)通常被认为是FIN(终结)包.
然而, 由于连接还没有关闭, FIN包总是打上ACK标记. 没有ACK标记而仅有FIN标记的包不是合法的包，并且通常被认为是恶意的


连接复位Resetting a connection:
四次握手不是关闭TCP连接的唯一方法. 有时,如果主机需要尽快关闭连接(或连接超时,端口或主机不可达),RST (Reset)包将被发送. 
注意在，由于RST包不是TCP连接中的必须部分, 可以只发送RST包(即不带ACK标记). 但在正常的TCP连接中RST包可以带ACK确认标记。
注意：RST包是可以不要收到方确认的