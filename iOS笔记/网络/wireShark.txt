HTTP默认的端口号为80，HTTPS的端口号为443

URL
URL(Uniform Resource Locator) 地址用于描述一个网络上的资源, 基本格式如下：
schema://host[:port#]/path/.../[?query-string][#anchor]
scheme 指定低层使用的协议(例如：http, https, ftp)
host HTTP服务器的IP地址或者域名
port# HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 http://www.hao2you.com:8080/
path 访问资源的路径
query-string 发送给http服务器的数据
anchor- 锚

Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。
GET和POST的区别：
GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连，如EditPosts.aspx?name=test1&id=123456. POST方法是把提交的数据放在HTTP包的Body中.
GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.
GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。
GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.

打开一个网页需要浏览器发送很多次Request:
当你在浏览器输入URL http://www.baidu.com 的时候，浏览器发送一个Request去获取 http://www.baidu.com 的html. 服务器把Response发送回给浏览器.
浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如图片，CSS文件，JS文件。
浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件.
等所有的文件都下载成功后。 网页就被显示出来了。

If-Modified-Since ： 把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中.
If-None-Match :  If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和Etag. 使用这样的机制将提高网站的性能

Accept-Language : 浏览器申明自己接收的语言。
语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；
例如： Accept-Language: en-us
Accept-Charset : 浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；

Connection ： Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接； Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。

响应头:
Content-Type : WEB服务器告诉浏览器自己响应的对象的类型和字符集。 例如：
Content-Type: text/html; charset=utf-8
Content-Type: text/html; charset=GB2312
Content-Type: image/jpeg

WireShark抓包:
rvictl -s uuid
uuid是设备的唯一识别号。
-x 移除设备

==================================================
互联网控制消息协议（英语：Internet Control Message Protocol，缩写：ICMP）
IPv4中的ICMP被称作ICMPv4，IPv6中的ICMP则被称作ICMPv6
通常用于返回的错误信息或是分析路由
每个路由器在转发数据报的时候都会把IP包头中的TTL值减1。
ping则是用ICMP的”Echo request”（类别代码：8）和”Echo reply”（类别代码：0）消息來实现的。

icmp报文结构
报头
ICMP报头从IP报头的第160位开始(ip首部20字节)
Type: ICMP的类型，标识生成的错误报文
Code: 进一步割分ICMP的类型，该字段用来查找产生错误的原因；例如ICMP的目标不可达类型可以把这个位设置为1-15等来表示不同的意思。
Checksum : 校验码部分，这个字段包含有从ICMP报头和数据部分计算得来，用于检查错误的数据，其中此校验码字段的值视为0
ID ：这个字段包含了ID值，在Echo Reply类型的消息中要返回这个字段
Sequence : 这个字段包含一个序号，同样要在Echo Reply类型的消息中要返回这个字段

填充数据
填充的数据紧接在ICMP报头的后面(以8位为一组)：
Linux的ping工具填充的ICMP除了8个8位元组的报头以外，默认情况下还另外填充数据使得总大小位64字节。
Windows的ping.exe填充的ICMP除了8个8位元组的报头以外，默认情况下还另外填充数据使得总大小位40字节。

ping实现原理
Ping是为了测试另一台主机是否可达，现在已经成为一种常用的网络状态检查工具。该程序发送一份 ICMP回显请求报文给远程主机，并等待返回 ICMP回显应答。
ping的原理是用类型码为8的ICMP发请求，收到请求的主机则用类型码为0的ICMP回应。
通过计算ICMP应答报文数量和与接受与发送报文之间的时间差，判断当前的网络状态。
这个往返时间的计算方法是：ping命令在发送ICMP报文时将当前的时间值存储在ICMP报文中发出，当应答报文返回时，使用当前时间值减去存放在ICMP报文数据中存放发送请求的时间值来计算往返时间。
ping返回接收到的数据报文字节大小、TTL值以及往返时间。

关于首部长度：
根据IP数据报，判断当前包是否是IPv4
version占4位，首部长度占4位,version = 4(IPv4), ipheader=20.
由于首部长度是以4字节为单位的-> version: 0100 ; 首部长度：0101
获取version:  0100 0101 & 0xFO(11110000) = 01000000 = 0x40
获取首部长度:  0100 0101 & 0x0F(00001111) = 0000 0101 = 5个4字节 = 20 Byte

DNS解析(域名->ip)
本地终端接收到的每个icmp包来自哪个主机
icmp_seq
ttl
time
以上问题解决方案如下：
DNS解析: socket支持
本地终端接收到的每个icmp包来自哪个主机: ip包中的source
icmp_seq: icmp包中的 sequence number
ttl:  ip包中的Time to live
time: 发送包和接收到包时的时间差

// ipv4
typedef struct PNetIPHeader {
    uint8_t versionAndHeaderLength;
    uint8_t differentiatedServices;
    uint16_t totalLength;
    uint16_t identification;
    uint16_t flagsAndFragmentOffset;
    uint8_t timeToLive;
    uint8_t protocol;
    uint16_t headerChecksum;
    uint8_t sourceAddress[4];
    uint8_t destinationAddress[4];
    // options...
    // data...
}PNetIPHeader;

#include <AssertMacros.h>
__Check_Compile_Time(sizeof(PNetIPHeader) == 20);
__Check_Compile_Time(offsetof(PNetIPHeader, versionAndHeaderLength) == 0);
__Check_Compile_Time(offsetof(PNetIPHeader, differentiatedServices) == 1);
__Check_Compile_Time(offsetof(PNetIPHeader, totalLength) == 2);
__Check_Compile_Time(offsetof(PNetIPHeader, identification) == 4);
__Check_Compile_Time(offsetof(PNetIPHeader, flagsAndFragmentOffset) == 6);
__Check_Compile_Time(offsetof(PNetIPHeader, timeToLive) == 8);
__Check_Compile_Time(offsetof(PNetIPHeader, protocol) == 9);
__Check_Compile_Time(offsetof(PNetIPHeader, headerChecksum) == 10);
__Check_Compile_Time(offsetof(PNetIPHeader, sourceAddress) == 12);
__Check_Compile_Time(offsetof(PNetIPHeader, destinationAddress) == 16);

typedef struct UICMPPacket
{
    uint8_t type;
    uint8_t code;
    uint16_t checksum;
    uint16_t identifier;
    uint16_t seq;
    char fills[56];  // data
}UICMPPacket;

typedef enum ENU_U_ICMPType
{
    ENU_U_ICMPType_EchoReplay = 0,
    ENU_U_ICMPType_EchoRequest = 8,
    ENU_U_ICMPType_TimeOut     = 11
}ENU_U_ICMPType;

__Check_Compile_Time(sizeof(UICMPPacket) == 64);
//__Check_Compile_Time(sizeof(UICMPPacket) == 8);
__Check_Compile_Time(offsetof(UICMPPacket, type) == 0);
__Check_Compile_Time(offsetof(UICMPPacket, code) == 1);
__Check_Compile_Time(offsetof(UICMPPacket, checksum) == 2);
__Check_Compile_Time(offsetof(UICMPPacket, identifier) == 4);
__Check_Compile_Time(offsetof(UICMPPacket, seq) == 6);

+ (uint16_t) in_cksumWithBuffer:(const void *)buffer andSize:(size_t)bufferLen
{
    /*
     将数据以字（16位）为单位累加到一个双字中
     如果数据长度为奇数，最后一个字节将被扩展到字，累加的结果是一个双字，
     最后将这个双字的高16位和低16位相加后取反
     */
    size_t              bytesLeft;
    int32_t             sum;
    const uint16_t *    cursor;
    union {
        uint16_t        us;
        uint8_t         uc[2];
    } last;
    uint16_t            answer;
    
    bytesLeft = bufferLen;
    sum = 0;
    cursor = (uint16_t*)buffer;
    
    while (bytesLeft > 1) {
        sum += *cursor;
        cursor += 1;
        bytesLeft -= 2;
    }
    
    /* mop up an odd byte, if necessary */
    if (bytesLeft == 1) {
        last.uc[0] = * (const uint8_t *) cursor;
        last.uc[1] = 0;
        sum += last.us;
    }
    
    /* add back carry outs from top 16 bits to low 16 bits */
    sum = (sum >> 16) + (sum & 0xffff);    /* add hi 16 to low 16 */
    sum += (sum >> 16);            /* add carry */
    answer = (uint16_t) ~sum;   /* truncate to 16 bits */
    
    return answer;
}


#include <sys/types.h>
#include <sys/socket.h>

ssize_t send(int sock, const void *buf, size_t len, int flags);
ssize_t sendto(int sock, const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen);

send只可用于基于连接的套接字
sendto 和 sendmsg既可用于无连接的套接字，也可用于基于连接的套接字

#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
void Send()
{
   struct sockaddr_in serv_addr;
   int sock_fd;
   char line[15] = "Hello world!";
   int size = 13;
   serv_addr.sin_family = AF_INET;
   serv_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
   serv_addr.sin_port = htons(5000);
   sock_fd = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
   connect(sock_fd,(struct sockaddr*)&serv_addr,sizeof(serv_addr));
   send(sock_fd, line, size, 0);
   close(sock_fd);
}

#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
void Sendto()
{
   sockaddr_in receiver_addr;
   int sock_fd;
   char line[15] = "Hello World!";
   sock_fd = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
   receiver_addr.sin_family = AF_INET;
   receiver_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
   receiver_addr.sin_port = htons(5000);
   sendto(sock_fd, line, 13, 0,(struct sockaddr*)&receiver_addr,sizeof(receiver_addr));
   close(sock_fd);
}


#ifndef PhoneNetSDKConst_h
#define PhoneNetSDKConst_h


/**********   For log4cplus    *************/
#ifndef PhoneNetSDK_IOS
#define PhoneNetSDK_IOS
#endif

/***********  About http Interface   ***********/
#define     PhoneNet_Get_Public_Ip_Url   @"http://ipinfo.io/json"   //get public ip info interface


/***********      Global define       ***********/
#define      PhoneNotification       [NSNotificationCenter defaultCenter]
#define      PhoneNetSDKVersion      @"1.0.12"

/***********      Ping model       ***********/
#define   KPingIcmpIdBeginNum     8000

#endif /* NetAnalysisConst_h */


socket()函数的原型如下，这个函数建立一个协议族为domain、协议类型为type、协议编号为protocol的套接字文件描述符。如果函数调用成功，会返回一个标识这个套接字的文件描述符，失败的时候返回-1。
#include<sys/types.h>
#include<sys/socket.h>
int socket(int domain, int type, int protocol);

domain的值及含义:
名称	含义	名称	含义
PF_UNIX,PF_LOCAL	本地通信	PF_X25	ITU-T X25 / ISO-8208协议
AF_INET,PF_INET	IPv4 Internet协议	PF_AX25	Amateur radio AX.25
PF_INET6	IPv6 Internet协议	PF_ATMPVC	原始ATM PVC访问
PF_IPX	IPX-Novell协议	PF_APPLETALK	Appletalk
PF_NETLINK	内核用户界面设备	PF_PACKET	底层包访问

type的值及含义:
名称	含义
SOCK_STREAM	Tcp连接，提供序列化的、可靠的、双向连接的字节流。支持带外数据传输
SOCK_DGRAM	支持UDP连接（无连接状态的消息）
SOCK_SEQPACKET	序列化包，提供一个序列化的、可靠的、双向的基本连接的数据传输通道，数据长度定常。每次调用读系统调用时数据需要将全部数据读出
SOCK_RAW	RAW类型，提供原始网络协议访问
SOCK_RDM	提供可靠的数据报文，不过可能数据会有乱序
SOCK_PACKET	这是一个专用类型，不能呢过在通用程序中使用

并不是所有的协议族都实现了这些协议类型，例如，AF_INET协议族就没有实现SOCK_SEQPACKET协议类型。

类型为SOCK_STREAM的套接字表示一个双向的字节流，与管道类似。流式的套接字在进行数据收发之前必须已经连接，连接使用connect()函数进行。一旦连接，可以使用read()或者write()函数进行数据的传输。流式通信方式保证数据不会丢失或者重复接收，当数据在一段时间内任然没有接受完毕，可以将这个连接人为已经死掉。
SOCK_DGRAM和SOCK_RAW 这个两种套接字可以使用函数sendto()来发送数据，使用recvfrom()函数接受数据，recvfrom()接受来自制定IP地址的发送方的数据。