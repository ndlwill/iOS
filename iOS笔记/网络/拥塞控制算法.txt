1. 慢启动（Slow Start）
概述：慢启动是 TCP 拥塞控制的起始阶段。在连接开始时，TCP 会设置一个较小的拥塞窗口（通常是 1 或 2 个最大报文段（MSS））。每收到一个 ACK，就会将拥塞窗口增加 1 个 MSS，从而快速增长窗口，直到达到一定的阈值。

问题：如果网络带宽较高，慢启动可能导致网络拥塞，因为窗口增长太快。

2. 拥塞避免（Congestion Avoidance）
概述：当拥塞窗口达到慢启动阈值（ssthresh）时，进入拥塞避免阶段。在此阶段，TCP 增长拥塞窗口的速度会变慢，通常采用加法增大算法，每经过一个 RTT 增长一个 MSS，避免进一步的网络拥塞。

问题：虽然它能够避免过快增长拥塞窗口，但如果网络带宽较高，可能还是会面临拥塞。

3. 快速重传（Fast Retransmit）
概述：当接收方连续收到三个相同的 ACK 时，认为发生了丢包，TCP 会立即重传丢失的包，而不需要等待超时。这有助于加快丢包恢复速度。

作用：减少丢包的恢复时间，降低延迟。

4. 快速恢复（Fast Recovery）
概述：快速恢复与快速重传配合使用。当检测到丢包时，TCP 会进入快速恢复阶段。在这个阶段，拥塞窗口不会降到最初的慢启动窗口大小，而是调整到一个较高的值（ssthresh），然后继续进行数据传输。

作用：尽量避免在丢包后进入慢启动，减少因丢包恢复导致的性能损失。

5. Tahoe
概述：Tahoe 是一种早期的 TCP 拥塞控制算法，它包含了慢启动、拥塞避免和快速重传。当发生丢包时，TCP 会将拥塞窗口重置为 1，重新进入慢启动阶段。

问题：丢包后恢复缓慢，因为它不使用快速恢复。

6. Reno
概述：Reno 是对 Tahoe 的改进，除了慢启动和拥塞避免外，它还增加了快速恢复机制。丢包后，拥塞窗口将减半，但不会回到 1。此时，TCP 会通过快速恢复算法进行传输。

优点：相比 Tahoe，Reno 更能有效地利用网络带宽，减少丢包后的恢复时间。

7. NewReno
概述：NewReno 是 Reno 的改进版本，特别是在处理多个丢包的场景下。NewReno 改进了快速恢复机制，能够在一个 RTT 内处理多个丢包，而不需要等待每个丢包的单独恢复。

优点：能够更有效地处理多个丢包，特别是在高延迟的网络中。

8. Cubic
概述：Cubic 是一种基于时间的 TCP 拥塞控制算法，设计用于高带宽、高延迟的网络环境。
它的窗口增长采用立方函数的方式，窗口增速随着时间逐渐变慢，防止快速增长带来的拥塞。

优点：能够更平滑地利用网络带宽，在高速网络中表现更好。

9. BBR (Bottleneck Bandwidth and Round-trip propagation time)
概述：BBR 是 Google 提出的拥塞控制算法，它基于网络的带宽和往返时延（RTT）来调整发送窗口，而不是基于丢包。
BBR 通过估算瓶颈带宽和往返时延来优化传输速率，避免过度拥塞。

优点：与传统的基于丢包的算法不同，BBR 能够在低丢包和高带宽的网络环境中表现更好。

10. Vegas
概述：Vegas 是基于 RTT 的 TCP 拥塞控制算法，通过监控 RTT 来预测网络拥塞并调整发送速率。它尝试保持最优的 RTT，以避免拥塞发生。

优点：Vegas 比传统的 TCP 算法更加精细，能够避免网络拥塞，并提高吞吐量。

11. Hybla
概述：Hybla 是一种为高延迟网络（如卫星网络）优化的 TCP 拥塞控制算法。它通过增加窗口增长速率，克服了传统 TCP 在高延迟网络中的低吞吐量问题。

优点：能在高延迟网络环境中提高性能。




主流使用的拥塞控制的算法是什么?
1. Cubic
使用场景：Cubic 是现代 Linux 系统和许多高带宽、长延迟网络中常用的 TCP 拥塞控制算法。它适用于宽带和长距离网络，尤其是高带宽延迟产品（BDP，Bandwidth-Delay Product）较高的场景。

优点：

在高带宽、高延迟网络中表现非常好。

能够平滑地增加窗口大小，并且避免了过快的增长带来的网络拥塞。

被 Linux 默认使用，广泛应用于数据中心、大规模云计算等环境。

2. BBR (Bottleneck Bandwidth and Round-trip propagation time)
使用场景：BBR 由 Google 提出并在其自有网络中推广。它已经被一些大型云服务平台（如 Google、YouTube、AWS）使用，尤其是在流量密集和低丢包环境中表现优秀。

优点：

基于网络带宽和 RTT 来进行拥塞控制，而不是依赖于丢包。

能够更高效地利用网络带宽，在低丢包、高带宽的网络中非常高效。

对于网络丢包率较低的环境非常有优势。




网络带宽：
可以类比成“水管的粗细”来帮助理解
网络带宽（Bandwidth） 表示网络中数据传输的最大容量，即单位时间内可以传输的数据量。
通常以 bps（bits per second，位每秒） 为单位


比喻	网络术语
水管的粗细	带宽（数据一次能传多少）
水流速度	延迟（数据传多快到）
水压	网络负载或信号强度
漏水	丢包率
堵管	拥塞


水管越粗，每秒可以通过的水越多（→ 带宽大）
如果水管细，但你开了很多水龙头，就可能导致水压不够（→ 拥塞）


带宽不是速度
这是一个常见误解。带宽 ≠ 速度，而是“通道的最大承载能力”。


如果你的带宽是 100 Mbps，意味着你最高每秒可以下载大约 12.5 MB（兆字节） 的数据。
但如果你的下载速度实际只有 2 MB/s，那就说明你没有用满带宽，可能是因为：
远程服务器速度慢
本地网络拥塞
路由器老旧


名称	说明
带宽（Bandwidth）	最大传输能力
吞吐量（Throughput）	实际传输速度（通常小于带宽）
延迟（Latency）	从发送到接收的时间
RTT（Round Trip Time）	来回一次的延迟


你家的光纤宽带是 500 Mbps，这意味着：
理论最大下载速度为 500 / 8 = 62.5 MB/s
如果你在下载一个 1GB 文件，理论上最快 ~16 秒左右就能下完
但如果你在高峰时段下载，可能会变成 1分钟，这说明你的 带宽没用满，实际受限于网络拥塞或对方服务器限制


Mbps（兆位/秒）和 MB/s（兆字节/秒）不是一个单位！
b = bit（位）
B = Byte（字节）
而：
1 Byte（字节） = 8 bits（位）

所以 最大下载速度为 500 / 8 = 62.5 MB/s

理论最大吞吐量（MB/s） = 带宽（Mbps） ÷ 8