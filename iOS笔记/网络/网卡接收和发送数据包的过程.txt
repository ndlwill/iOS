以太网Ethernet最大的数据帧是1518字节，以太网帧的帧头14字节和帧尾CRC校验4字节
在链路层，由以太网的物理特性决定了数据帧的长度为(1500＋18)，其中的18是数据帧的头和尾，也就是说数据帧的内容最大为1500(不包括帧头和帧尾)，即MTU(Maximum Transmission Unit)为1500； 　
在网络层，因为IP包的首部要占用20字节，所以这的MTU为1500－20＝1480；　
在传输层，对于UDP包的首部要占用8字节，所以这的MTU为1480－8＝1472； 　　
所以，在应用层，你的Data最大长度为1472。当我们的UDP包中的数据多于MTU(1472)时，发送方的IP层需要分片fragmentation进行传输，而在接收方IP层则需要进行数据报重组，由于UDP是不可靠的传输协议，如果分片丢失导致重组失败，将导致UDP数据包被丢弃。 

网卡(Network Interface Card，简称NIC)，也称网络适配器，是电脑与局域网相互连接的设备。
一块网卡包括OSI 模型的两个层， 物理层和数据链路层
网卡的功能主要有两个:
一是将电脑的数据封装为帧，并通过网线(对无线网络来说就是电磁波)将数据发送到网络上去;
二是接收网络上其它设备传过来的帧，并将帧重新组合成数据，发送到所在的电脑中。
网卡能接收所有在网络上传输的 信号，但正常情况下只接受发送到该电脑的帧和广播帧，将其余的帧丢弃。
然后，传送到系统CPU 做进一步处理。当电 脑发送数据时，网卡等待合适的时间将分组插入到数据流中。接收系统通知电脑消息是否完整地到达，如果出现问题， 将要求对方重新发送。
网卡的工作原理:
网卡充当计算机和网络缆线之间的物理接口或连线，负责将计算机中的数字信号转换成电或光信号。
网卡要承担串行数据或并行数据间的转换，数据在计算机总线中并行传输，而在网络的物理缆线中以串行的比特流传输。


本机和本机Socket通信会走网卡吗:
不走网卡，不走物理设备，但是走虚拟设备，loopback device环回(本地回环).
本机的报文的路径是这样的：应用层-> socket接口 -> 传输层（tcp/udp报文） -> 网络层 -> back to 传输层 -> backto socket接口 -.> 传回应用程序
在网络层，会在路由表查询路由，路由表（软件路由，真正的转发需要依靠硬件路由，这里路由表包括快速转发表和FIB表）初始化时会保存主机路由(host route，or 环回路由)， 
查询（先匹配mask，再匹配ip，localhost路由在路由表最顶端，最优先查到）后发现不用转发就不用走中断，不用发送给链接层了，不用发送给网络设备（网卡）。
像网卡发送接收报文一样，走相同的接收流程，只不过net device是loopback device，最后发送回应用程序。
这一套流程当然和转发和接收外网报文一样，都要经过内核协议栈的处理，不同的是本机地址不用挂net device.


网卡如何发送数据包:
IP报文可以看作一个包。
网卡驱动程序，将IP包添加14字节的MAC包头，构成MAC包。
MAC包中含有发送端和接收端的MAC地址信息。既然是驱动程序创建的MAC包头信息，当然可以随便输入地址信息的，主机伪装就是这么实现的。
驱动程序将MAC包拷贝到网卡芯片内部的缓存区，就算完事了。
有网卡芯片接手处理。网卡芯片对MAC包，再次封装成物理帧，添加头部同步信息和CRC校验。
然后丢到网线上，就完成一个IP报文的发送。所有挂接到本网线的网卡都可以看到该物理帧。

网卡接收数据包:
循环冗余校验（Cyclic Redundancy Check， CRC）
网线上的物理帧首先被网卡芯片获取，网卡芯片会检查物理帧的CRC，保证完整性。
其次，网卡芯片将物理帧头去掉，得到MAC包。
网卡芯片检查MAC包内的目的MAC地址信息，和本网卡的MAC地址是否一致？不一致，抛弃。
网卡芯片将MAC帧拷贝到网卡内部的缓冲区，触发中断。
驱动程序通过中断，将MAC包拷贝到系统中，构建sk_buff。告诉上层。
上层去掉MAC包头，得到需要的IP包。
过程中，网卡芯片对物理帧进行了MAC匹配过滤。这样做可以减小系统负荷。


SKB(socket buffer)是Linux网络代码中最根本的数据结构