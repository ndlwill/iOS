NAT64 在 ipv6 中有何作用:
支持通过IPv6网络侧用户发起连接访问IPv4侧网络资源

nat64工作流程：
1、Host发送AAAA的查询，请求server的IPv6地址
2、DNS64不能查到IPv6地址，发送A的查询，尝试去获得IPV4地址
3、A的查询响应返回给DNS64
4、DNS64将IPV4地址合成IPv6地址，A记录响应翻译成AAAA响应返回给host
5、Host发送IPv6报文，报文到达NAT646.NAT64将IPv6报文翻译成IPV4报文发送到server

nat64是个让你能通过ipv6网络访问ipv4资源的代理服务器就行了:
比如说吧，假设，你的网络仅ipv6能访问公网，而你想上百度，而百度是不支持ipv6访问的，这时候，可以用nat64做中间路由，你通过dns查询的方式向nat64发送百度的域名查询请求，
nat64接到查询请求后，查询百度的域名信息，发现只有ipv4的a记录，没有ipv6的aaa记录，此时，由于ipv6地址很长，128位，是ipv4的4倍，完全可以把ipv4嵌套在ipv6中，
于是，nat64服务器，就把百度的ipv4地址套在一个属于它自己的ipv6地址中，并把这个地址作为你查询百度域名dns的结果返回给你，这样，你在访问百度的时候，就不是访问百度的真实ip了，
而是发送请求到这个嵌套了百度真实地址的ipv6地址，而这个地址的目的地是nat64服务器，nat64服务器再次接收到你的请求，但这次不是dns解析请求了，而是tcp连接请求，它接下来根据ipv6中嵌套的ipv4地址，
替你发送请求到百度，百度响应请求，将响应数据发送到nat64服务器，nat64服务器再把百度传过来的响应数据传递给你，这样，虽然你没有ipv4公网访问权限，百度又不支持pv6，但你依然能访问百度了。

Request For Comments（RFC）:
https://tools.ietf.org/html/rfc4038
https://tools.ietf.org/html/rfc7050

getaddrinfo 对于域名可以正确地工作
原理:
首先先针对一个比较知名的域名调用getaddrinfo得到ip地址列表，然后针对地址列表进行进一步处理，用我们的ip地址替换ip地址列表中的地址。
非常特殊的域名 ipv4only.arpa., 该域名只绑定了两个ipv4地址。
这非常好，因为我们无需担心挑选的域名绑定了ipv6地址，给我们处理地址列时带来不便,增加了问题的复杂度。
所以，我们的思路是：
1.首先调用getaddrinfo对 ipv4only.arpa. 进行解析，得到地址列表；
2.对地址列表进一步进行处理：
ipv4地址，直接进行处理；
ipv6地址，将高4个字节替换成我们的ip地址。因为 ipv4only.arpa. 绑定了两个ipv4地址，所以经过替换后，出现了重复项。
删除其中的重复项。

==================================================
https://www.jianshu.com/p/a6bab07c4062

iOS IPV6-Only支持:
首先IPV6，是对IPV4地址空间的扩充。目前当我们用iOS设备连接上Wifi、4G、3G等网络时，设备被分配的地址均是IPV4地址，
但是随着运营商和企业逐渐部署IPV6 DNS64/NAT64网络之后，设备被分配的地址会变成IPV6的地址，
而这些网络就是所谓的IPV6-Only网络，并且仍然可以通过此网络去获取IPV4地址提供的内容。
客户端向服务器端请求域名解析，首先通过DNS64 Server查询IPv6的地址，如果查询不到，再向DNS Server查询IPv4地址，
通过DNS64 Server合成一个IPV6的地址，最终将一个IPV6的地址返回给客户端。

https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1
在Mac OS 10.11＋的双网卡的Mac机器（以太网口＋无线网卡），
我们可以通过模拟构建这么一个local IPv6 DNS64/NAT64 的网络环境去测试应用是否支持IPV6-Only网络


en0（Wifi）、pdp_ip0（移动网络）

网络api查阅:
https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/apis/resgetservers.htm
https://docs.oracle.com/cd/E36784_01/html/E36875/res-getservers-3resolv.html

typedef struct __res_state *res_state;
res_state res = malloc(sizeof(struct __res_state));
swift: typealias res_9_state = UnsafeMutablePointer<__res_9_state>

/*
 * Internet address (a structure for historical reasons)
 */
public struct in_addr {

    public var s_addr: in_addr_t

    public init()

    public init(s_addr: in_addr_t)
}


/*
 * Socket address, internet style.
 */
public struct sockaddr_in {

    public var sin_len: __uint8_t

    public var sin_family: sa_family_t

    public var sin_port: in_port_t

    public var sin_addr: in_addr

    public var sin_zero: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)

    public init()

    public init(sin_len: __uint8_t, sin_family: sa_family_t, sin_port: in_port_t, sin_addr: in_addr, sin_zero: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}

/*
 * [XSI] Structure used by kernel to store most addresses.
 */
public struct sockaddr {

    public var sa_len: __uint8_t /* total length */

    public var sa_family: sa_family_t /* [XSI] address family */

    public var sa_data: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8) /* [XSI] addr value (actually larger) */

    public init()

    public init(sa_len: __uint8_t, sa_family: sa_family_t, sa_data: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}

================================
char ip[INET_ADDRSTRLEN]:
INET_ADDRSTRLEN
INET6_ADDRSTRLEN


================================
inet_pton和inet_ntop这2个IP地址转换函数，可以在将IP地址在“点分十进制”和“二进制整数”之间转换
inet_ntop:
inet_ntop函数原型[将“二进制整数” －> “点分十进制”]

{
char IPdotdec[20]; //存放点分十进制IP地址
struct in_addr s; // IPv4地址结构体
// 输入IP地址
printf("Please input IP address: ");
scanf("%s", IPdotdec);
// 转换
inet_pton(AF_INET, IPdotdec, (void *)&s);
printf("inet_pton: 0x%x\n", s.s_addr); // 注意得到的字节序
// 反转换
inet_ntop(AF_INET, (void *)&s, IPdotdec, 16);
printf("inet_ntop: %s\n", IPdotdec);
}


char *inet_ntoa(struct in_addr in);
将一个32位网络字节序的二进制IP地址转换成相应的点分十进制的IP地址


// 获取主机信息
res_state res = malloc(sizeof(struct __res_state));

int result = res_ninit(res);

NSMutableArray *servers = [[NSMutableArray alloc] init];

if (result == 0) {

    union res_9_sockaddr_union *addr_union = malloc(res->nscount * sizeof(union res_9_sockaddr_union));

    res_getservers(res, addr_union, res->nscount);

    

    for (int i = 0; i < res->nscount; i++) {

        if (addr_union[i].sin.sin_family == AF_INET) {

            char ip[INET_ADDRSTRLEN];

            inet_ntop(AF_INET, &(addr_union[i].sin.sin_addr), ip, INET_ADDRSTRLEN);

            NSString *dnsIP = [NSString stringWithUTF8String:ip];

            [servers addObject:dnsIP];

            NSLog(@"IPv4 DNS IP: %@", dnsIP);

        } else if (addr_union[i].sin6.sin6_family == AF_INET6) {

            char ip[INET6_ADDRSTRLEN];

            inet_ntop(AF_INET6, &(addr_union[i].sin6.sin6_addr), ip, INET6_ADDRSTRLEN);

            NSString *dnsIP = [NSString stringWithUTF8String:ip];

            [servers addObject:dnsIP];

            NSLog(@"IPv6 DNS IP: %@", dnsIP);

        } else {

            NSLog(@"Undefined family.");

        }

    }

}

res_nclose(res);

free(res);