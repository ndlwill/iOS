#import "YYLabel.h"
#import "NSAttributedString+YYText.h"

NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:@"Text"];
text.yy_color = [UIColor blueColor];
[text yy_setFont:[UIFont systemFontOfSize:20] range:text.yy_rangeOfAll];//字体
text.yy_lineSpacing = 20;//行间距
//文字间距
[text yy_setKern:@(2) range:range0];

//文字描边（空心字）默认黑色，必须设置width
[text yy_setStrokeColor:[UIColor orangeColor] range:range1];
[text yy_setStrokeWidth:@(2) range:range1];


YYTextDecoration *decoration = [YYTextDecoration decorationWithStyle:YYTextLineStyleSingle
                                                                       width:@(1)
                                                                       color:[UIColor blueColor]];
//删除样式
[text yy_setTextStrikethrough:decoration range:range2];
//下划线
[text yy_setTextUnderline:decoration range:range2];

//边框
YYTextBorder *border = [YYTextBorder new];
border.strokeColor = [UIColor colorWithRed:1.000 green:0.029 blue:0.651 alpha:1.000];
border.strokeWidth = 3;
border.lineStyle = YYTextLineStylePatternCircleDot;
border.cornerRadius = 3;
border.insets = UIEdgeInsetsMake(0, -2, 0, -2);
[text yy_setTextBorder:border range:range3];


//阴影
NSShadow *shadow = [[NSShadow alloc] init];
[shadow setShadowColor:[UIColor redColor]];
[shadow setShadowBlurRadius:1.0];
[shadow setShadowOffset:CGSizeMake(2, 2)];
[text yy_setShadow:shadow range:range4];

//文本内阴影
YYTextShadow *shadow = [YYTextShadow new];
shadow.color = [UIColor redColor];
shadow.offset = CGSizeMake(0, 2);
shadow.radius = 1;
[text yy_setTextInnerShadow:shadow range:range5];

//多重阴影
YYTextShadow *shadow = [YYTextShadow new];
shadow.color = [UIColor redColor];
shadow.offset = CGSizeMake(0, -1);
shadow.radius = 1.5;
YYTextShadow *subShadow = [YYTextShadow new];
subShadow.color = [UIColor greenColor];
subShadow.offset = CGSizeMake(0, 1);
subShadow.radius = 1.5;
shadow.subShadow = subShadow;
[text yy_setTextShadow:shadow range:range6];

YYTextShadow *shadow1 = [YYTextShadow new];
shadow1.color = [UIColor orangeColor];
shadow1.offset = CGSizeMake(0, 2);
shadow1.radius = 1;
[text yy_setTextInnerShadow:shadow range:range6];



[text yy_setTextHighlightRange:NSMakeRange(0, 4)//设置点击的位置
                             color:[UIColor orangeColor]
                   backgroundColor:nil
                         tapAction:^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect){
                             NSLog(@"这里是点击事件");
                         }];




/*
NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:@"微微笑 小时候的梦我知道"];
    //文本高亮pro
    UIColor *colorNormal = [UIColor colorWithRed:0.093 green:0.492 blue:1.000 alpha:1.000];
    UIColor *colorHighlight = [UIColor purpleColor];
    
    NSRange range9 = [[text string] rangeOfString:@"微微笑 小时候的梦我知道" options:NSCaseInsensitiveSearch];
    
    
    YYTextDecoration *decorationNomal = [YYTextDecoration decorationWithStyle:YYTextLineStyleSingle
                                                                        width:@(1)
                                                                        color:colorNormal];
    YYTextDecoration *decorationHighlight = [YYTextDecoration decorationWithStyle:YYTextLineStyleSingle
                                                                            width:@(1)
                                                                            color:colorHighlight];
    //未点击时颜色
    [text yy_setColor:colorNormal range:range9];
    //未点击时下划线
    [text yy_setTextUnderline:decorationNomal range:range9];
    
    //点击后的状态
    YYTextHighlight *highlight = [YYTextHighlight new];
    [highlight setColor:colorHighlight];
    [highlight setUnderline:decorationHighlight];
    highlight.tapAction = ^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect) {
        NSLog(@"Tapped");
    };
    [text yy_setTextHighlight:highlight range:range9];
    
    YYLabel *label = [YYLabel new];
    label.backgroundColor = [UIColor redColor];
    label.attributedText = text;
    [self.view addSubview:label];
    [label sizeToFit];
    label.center = self.view.center;
*/

textView.textLayout.attachments
attachment.content

textView.textLayout.attachmentRanges


----------------------YYLabel----------------------
YYLabel *contentL = [[YYLabel alloc] init];

----------------------------------------------------


----------------------YYXXXXXX----------------------
YYTextAttribute

YYTextAttributeType:  attribute的类型，有None、UIKit、CoreText和YYText四种类型；
YYTextLineStyle：  line的样式；
YYTextVerticalAlignment： 垂直方向text的位置；
YYTextDirection：  text的位置；
YYTextTruncationType：text截断的位置

YYTextBackedString：可以将一些表情图片映射成纯文本

YYTextBinding：使一些特定的字符串绑定在一起，YYTextView在选择和编辑他们的时候把他们当成一个单独的字符

YYTextShadow：用处和NSShadow一样，只是比NSShadow多了一些功能，比如说可以使用blendMode（图形混合模式）、可以在shadow上再加一层shadow

YYTextDecoration：实现下划线（underline）和中间截线（strikethrough）时使用，线条的形式给出了几种样式，可以通过YYTextLineStyle枚举查看

YYTextBorder:实现在文本周围画一个border，也可以是填充一个背景色

YYTextAttachment：封装需要放入text中的对象。在说明文档中提到，如果attachment是UIImage，就绘制到CGContext，如果是UIView或者CALayer就加入到text container的view或者layer中

YYTextHightlight：当YYLabel或者YYTextView中的text可以被用户按下时，被按下的text会有一个highlighted 状态，这时候就需要是用YYTextHighlight来修改原来的text。所以这个对象和YYText一样，只是是在highlight状态下的YYText，而且添加了点击和长按事件

YYTextParser
这是一个protocol
作者简单的实现了MarkdownParser和EmotionParser

YYTextContainer
支持矩形（CGSize）和图形（UIBezierPath）来初始化YYTextContainer

YYTextLinePositionModifier，它是 一个协议，定义了一个必须实现的方法，这个方法将会在layout完成的时候被调用，三个参数分别是存放YYTextLine的数组、完整的text和layout container

YYTextLine：它是封装了CTLineRef的对象，封装了每一行text的具体展示位置、range、这一行拥有的attachments等等
边框(Bounding Box)：一个假想的边框，尽可能地容纳整个字形。
基线(Baseline)：一条假想的参照线，以此为基础进行字形的渲染。一般来说是一条横线。
基础原点(Origin)：基线上最左侧的点。
行间距(Leading)：行与行之间的间距。
字间距(Kerning)：字与字之间的距离，为了排版的美观，并不是所有的字形之间的距离都是一致的，但是这个基本步影响到我们的文字排版。
上行高度(Ascent)和下行高度(Decent)：一个字形最高点和最低点到基线的距离，所以行高就是ascent + decent

YYTextLine的setCTLine中的代码逻辑是从CTLineRef中取出对应的行宽、上行高度、下行高度、行间距、rangge和第一个字型符的位置（这个在垂直布局会用到）。之后调用reloadBounds方法，重新计算当前行的bounds、attachments所在的range和rect

YYTextLayout
就是NSLayoutManager和NSTextContainer
1、通过一些类方法初始化的方法（YYTextContainer、CGSize和text）
2、layout之后的attributes，都是只读的
3、从layout中读取信息（位置、range等等）
4、绘制text layout

这个类主要是使用上面讲过的所有的数据来绘制text
1）、初始化一系列使用到的变量
2）、安全判断，text和container
3）、判断是否需要修复emoji的bug（iOS8.3中)
4）、判断是否设置了path属性和exclusionPaths数组，做相应的计算拿到CGPath，如果CGPath为空则goto fail 返回nil（如果设置了path，size和insets就没有用了）
5）、判断是不是奇偶填充，判断pathWidth是否为0，判断是否是垂直展示
6）、使用text创建CTFramesetterRef，创建失败goto fail
7）、使用上一步中创建的frameSetter创建CTFrameRef
8）、从CTFrameRef的对象中获得每一行、ctRun数组，计算每一行的frame，判断是否实现了linePositionModifier这个协议，有的话调用协议方法。
9）、计算bounding size
10）、判断是否需要truncation，和按那种方式处理
11）、判断是否垂直布局text，需要的话，旋转布局
12）、判断得到的visibleRange长度，有效的话遍历text中的attributes，配置对应的layout属性
13）、配置layout中的attachments
14）、配置结束，返回layout

YYAsyncLayer
YYAsyncLayerDispalyTask是在YYAsyncLayer去background queue渲染是调用的对象，它有三个回调，一个willDisplay在渲染之前、一个didDisplay在渲染之后和渲染时被调用的display
YYAsyncLayer是CAlayer的子类，当这个layer更新contents时就会调用delegate方法去调用async display task去background queue 渲染。这个delegate方法是YYAsyncLayerDelegate的方法

YYAsyncLayer在刷新时调用_displayAsync:方法，然后调用遵守YYAsyncLayerDelegate的对象实现的newAsyncDisplayTask方法，获取到需要绘制的前后和绘制时的task，根据是够需要异步来判断直接在主线程执行绘制代码还是异步执行绘制代码。

在异步绘制过程中用到了一个异步队列，获取方法是YYAsyncLayerGetDisplayQueue，在这个方法中有一个关于QOS的概念，NSQualityOfService（QOS） ios8之后提供的新功能

----------------------------------------------------文本高亮简单
NSRange range8 = [[text string] rangeOfString:@"随著稻香河流继续奔跑" options:NSCaseInsensitiveSearch];
[text yy_setTextHighlightRange:range8
                         color:[UIColor colorWithRed:0.093 green:0.492 blue:1.000 alpha:1.000]
               backgroundColor:[UIColor colorWithWhite:0.000 alpha:0.220]
                     tapAction:^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect){
                         [AppUtility showMessage:[NSString stringWithFormat:@"Tap: %@",[text.string substringWithRange:range]]];
                     }];

----------------------------------------------------文本高亮pro
UIColor *colorNormal = [UIColor colorWithRed:0.093 green:0.492 blue:1.000 alpha:1.000];
UIColor *colorHighlight = [UIColor purpleColor];

NSRange range9 = [[text string] rangeOfString:@"微微笑 小时候的梦我知道" options:NSCaseInsensitiveSearch];


YYTextDecoration *decorationNomal = [YYTextDecoration decorationWithStyle:YYTextLineStyleSingle
                                                                    width:@(1)
                                                                    color:colorNormal];
YYTextDecoration *decorationHighlight = [YYTextDecoration decorationWithStyle:YYTextLineStyleSingle
                                                                        width:@(1)
                                                                        color:colorHighlight];
//未点击时颜色
[text yy_setColor:colorNormal range:range9];
//未点击时下划线
[text yy_setTextUnderline:decorationNomal range:range9];

//点击后的状态
YYTextHighlight *highlight = [YYTextHighlight new];
[highlight setColor:colorHighlight];
[highlight setUnderline:decorationHighlight];
highlight.tapAction = ^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect) {
    [AppUtility showMessage:[NSString stringWithFormat:@"Tap: %@",[text.string substringWithRange:range]]];
};
[text yy_setTextHighlight:highlight range:range9];


----------------------------------------------------@,#,email,link
// 高亮状态的背景
YYTextBorder *highlightBorder = [YYTextBorder new];
highlightBorder.insets = UIEdgeInsetsMake(-2, 0, -2, 0);
highlightBorder.cornerRadius = 3;
highlightBorder.fillColor = [UIColor greenColor];

//@用户名称
NSArray *resultAt= [[Utility regexAt] matchesInString:text.string options:kNilOptions range:text.yy_rangeOfAll];

for (NSTextCheckingResult *at in resultAt)
{
    if (at.range.location == NSNotFound && at.range.length <= 1)
    {
        continue;
    }
    
    if ([text yy_attribute:YYTextHighlightAttributeName atIndex:at.range.location] == nil)
    {
        [text yy_setColor:[UIColor blueColor] range:at.range];
        // 高亮状态
        YYTextHighlight *highlight = [YYTextHighlight new];
        [highlight setBackgroundBorder:highlightBorder];
        // 数据信息，用于稍后用户点击
        NSString *atName = [text.string substringWithRange:NSMakeRange(at.range.location + 1, at.range.length - 1)];
        highlight.userInfo = @{@"linkValue" : atName,@"linkType":@(LinkTypeAt)};
        [text yy_setTextHighlight:highlight range:at.range];
    }
}

//#话题#
NSArray *resultTopic = [[Utility regexTopic] matchesInString:text.string options:kNilOptions range:text.yy_rangeOfAll];

for (NSTextCheckingResult *at in resultTopic)
{
    if (at.range.location == NSNotFound && at.range.length <= 1)
    {
        continue;
    }
    
    if ([text yy_attribute:YYTextHighlightAttributeName atIndex:at.range.location] == nil)
    {
        [text yy_setColor:[UIColor blueColor] range:at.range];
        // 高亮状态
        YYTextHighlight *highlight = [YYTextHighlight new];
        [highlight setBackgroundBorder:highlightBorder];
        // 数据信息，用于稍后用户点击
        highlight.userInfo = @{@"linkValue" : [text.string substringWithRange:NSMakeRange(at.range.location, at.range.length)],@"linkType":@(LinkTypeTopic)};
        [text yy_setTextHighlight:highlight range:at.range];
    }
}

//email
NSArray *resultEmail = [[Utility regexEmail] matchesInString:text.string options:kNilOptions range:text.yy_rangeOfAll];

for (NSTextCheckingResult *at in resultEmail)
{
    if (at.range.location == NSNotFound && at.range.length <= 1)
    {
        continue;
    }
    
    if ([text yy_attribute:YYTextHighlightAttributeName atIndex:at.range.location] == nil)
    {
        [text yy_setColor:[UIColor blueColor] range:at.range];
        // 高亮状态
        YYTextHighlight *highlight = [YYTextHighlight new];
        [highlight setBackgroundBorder:highlightBorder];
        // 数据信息，用于稍后用户点击
        highlight.userInfo = @{@"linkValue" : [text.string substringWithRange:NSMakeRange(at.range.location, at.range.length)],@"linkType":@(LinkTypeEmail)};
        [text yy_setTextHighlight:highlight range:at.range];
    }
}

//link
NSArray *resultLink = [[Utility regexUrl] matchesInString:text.string options:kNilOptions range:text.yy_rangeOfAll];

for (NSTextCheckingResult *at in resultLink)
{
    if (at.range.location == NSNotFound && at.range.length <= 1)
    {
        continue;
    }
    
    if ([text yy_attribute:YYTextHighlightAttributeName atIndex:at.range.location] == nil)
    {
        [text yy_setColor:[UIColor blueColor] range:at.range];
        // 高亮状态
        YYTextHighlight *highlight = [YYTextHighlight new];
        [highlight setBackgroundBorder:highlightBorder];
        // 数据信息，用于稍后用户点击
        highlight.userInfo = @{@"linkValue" : [text.string substringWithRange:NSMakeRange(at.range.location, at.range.length)],@"linkType":@(LinkTypeURL)};
        [text yy_setTextHighlight:highlight range:at.range];
    }
}

----------------------------------------------------添加gif动画
YYImage *image = [YYImage imageNamed:@"zuqiu"];
image.preloadAllAnimatedImageFrames = YES;
YYAnimatedImageView *imageView = [[YYAnimatedImageView alloc] initWithImage:image];
imageView.autoPlayAnimatedImage = NO;
[imageView startAnimating];

NSMutableAttributedString *attachText = [NSMutableAttributedString yy_attachmentStringWithContent:imageView contentMode:UIViewContentModeCenter attachmentSize:imageView.size alignToFont:[UIFont systemFontOfSize:16] alignment:YYTextVerticalAlignmentBottom];
[text appendAttributedString:attachText];
添加普通图片直接使用UIImage和UIImageView就可以了

----------------------------------------------------布局
CGSize size = CGSizeMake(SCREEN_WIDTH, CGFLOAT_MAX);
YYTextLayout *layout = [YYTextLayout layoutWithContainerSize:size text:text];
    
// 获取文本显示位置和大小
//layout.textBoundingRect; // get bounding rect
//layout.textBoundingSize; // get bounding size
可以由YYTextLayout获取文本的bonding rect和size

----------------------------------------------------
YYLabel *label = [YYLabel new];
label.highlightTapAction = ^(UIView *containerView, NSAttributedString *text, NSRange range, CGRect rect) {
    if ([self.clickDelegate respondsToSelector:@selector(label:tapHighlight:inRange:)])
    {
        YYTextHighlight *highlight = [text yy_attribute:YYTextHighlightAttributeName atIndex:range.location];
        [self.clickDelegate label:(YYLabel *)containerView tapHighlight:highlight inRange:range];
    }
};
label.frame = CGRectMake(0, 0, SCREEN_WIDTH, layout.textBoundingSize.height);
label.textAlignment = NSTextAlignmentCenter;
label.textVerticalAlignment = YYTextVerticalAlignmentCenter;
label.numberOfLines = 0;
label.backgroundColor = RGBCOLOR(246, 246, 246);
label.textLayout = layout;
[self addSubview:label];
```
这里有个属性`highlightTapAction`就是用来处理点击高亮文字事件的，在这里，我定义了一个delegate：
```
@protocol YYHiglightTextClickDelegate <NSObject>

- (void)label:(YYLabel *)label
 tapHighlight:(YYTextHighlight *)highlight
      inRange:(NSRange)textRange;

@end
```

只要实现这个delegate就能方便的处理点击各种高亮文字的事件。`YYTextHighlight `里面包含了一个userInfo，包含了很多需要处理的信息，通过它，能够很容易的处理点击事件，我这里在UIViewController中做了一个实现：
```
#pragma mark - YYHiglightTextClickDelegate
- (void)label:(YYLabel *)label
 tapHighlight:(YYTextHighlight *)highlight
      inRange:(NSRange)textRange
{
    NSDictionary *info = highlight.userInfo;
    LinkType linkType = [info[@"linkType"] integerValue];
    NSString *linkValue = info[@"linkValue"];
    switch (linkType) {
        case LinkTypeAt:
        {
            [AppUtility showMessage:[NSString stringWithFormat:@"选中at：%@",linkValue]];
        }
            break;
        case LinkTypeTopic:
        {
            [AppUtility showMessage:[NSString stringWithFormat:@"选中话题：%@",linkValue]];
        }
            break;
        case LinkTypeEmail:
        {
            [AppUtility showMessage:[NSString stringWithFormat:@"选中email：%@",linkValue]];
        }
            break;
        case LinkTypeURL:
        {
            [AppUtility showMessage:[NSString stringWithFormat:@"选中url：%@",linkValue]];
        }
            break;
        case LinkTypePhoneNum:
        {
            [AppUtility showMessage:[NSString stringWithFormat:@"选中phone：%@",linkValue]];
        }
            break;
        default:
            break;
    }
}
```
我在userInfo中传入了两对键值：
####表情
---
实现代码
```
NSMutableDictionary *mapper = [NSMutableDictionary new];
mapper[@":smile:"] = [self imageWithName:@"002"];
mapper[@":cool:"] = [self imageWithName:@"013"];
mapper[@":biggrin:"] = [self imageWithName:@"047"];
mapper[@":arrow:"] = [self imageWithName:@"007"];
mapper[@":confused:"] = [self imageWithName:@"041"];
mapper[@":cry:"] = [self imageWithName:@"010"];
mapper[@":wink:"] = [self imageWithName:@"085"];
mapper[@":zuqiu:"] = [self imageWithName:@"zuqiu"];

YYTextSimpleEmoticonParser *parser = [YYTextSimpleEmoticonParser new];
parser.emoticonMapper = mapper;

YYTextLinePositionSimpleModifier *mod = [YYTextLinePositionSimpleModifier new];
mod.fixedLineHeight = 22;
```
`YYLabel`已经实现了一个简单的表情解析器`YYTextSimpleEmoticonParser `,你只需要设置一下映射器`emoticonMapper`就好.

然后把解析器和modifier传给`YYLabel`.
最后将文本传给`attributedText`
```
label.textParser = parser;
label.linePositionModifier = mod;
label.attributedText = text;
```
`linePositionModifier`是在文本发生变化时才需要的属性，一般YYTextView用的多，比如修改一个文本之后，整个文本发生了变化，就需要这个属性值。

表情资源来自YYText，可以下载源码获得

----------------------------------------------------

NSCaseInsensitiveSearch //不区分大小写比较